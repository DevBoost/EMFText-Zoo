<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="ImageTranscoder.java">
  <comments>/*&#xA; * @(#)ImageTranscoder.java&#x9;1.19 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>imageio</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>imageio</namespaces>
    <namespaces>metadata</namespaces>
    <classifier xsi:type="classifiers:Class" href="metadata/IIOMetadata.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ImageTranscoder">
    <members xsi:type="members:InterfaceMethod" name="convertStreamMetadata">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns an &lt;code>IIOMetadata&lt;/code> object that may be used for&#xA;     * encoding and optionally modified using its document interfaces&#xA;     * or other interfaces specific to the writer plug-in that will be&#xA;     * used for encoding.&#xA;     *&#xA;     * &lt;p> An optional &lt;code>ImageWriteParam&lt;/code> may be supplied&#xA;     * for cases where it may affect the structure of the stream&#xA;     * metadata.&#xA;     *&#xA;     * &lt;p> If the supplied &lt;code>ImageWriteParam&lt;/code> contains&#xA;     * optional setting values not understood by this writer or&#xA;     * transcoder, they will be ignored.&#xA;     *&#xA;     * @param inData an &lt;code>IIOMetadata&lt;/code> object representing&#xA;     * stream metadata, used to initialize the state of the returned&#xA;     * object.&#xA;     * @param param an &lt;code>ImageWriteParam&lt;/code> that will be used to&#xA;     * encode the image, or &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @return an &lt;code>IIOMetadata&lt;/code> object, or&#xA;     * &lt;code>null&lt;/code> if the plug-in does not provide metadata&#xA;     * encoding capabilities.&#xA;     *&#xA;     * @exception IllegalArgumentException if &lt;code>inData&lt;/code> is&#xA;     * &lt;code>null&lt;/code>.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="metadata/IIOMetadata.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inData">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="metadata/IIOMetadata.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="param">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ImageWriteParam.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="convertImageMetadata">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns an &lt;code>IIOMetadata&lt;/code> object that may be used for&#xA;     * encoding and optionally modified using its document interfaces&#xA;     * or other interfaces specific to the writer plug-in that will be&#xA;     * used for encoding.&#xA;     *&#xA;     * &lt;p> An optional &lt;code>ImageWriteParam&lt;/code> may be supplied&#xA;     * for cases where it may affect the structure of the image&#xA;     * metadata.&#xA;     *&#xA;     * &lt;p> If the supplied &lt;code>ImageWriteParam&lt;/code> contains&#xA;     * optional setting values not understood by this writer or&#xA;     * transcoder, they will be ignored.&#xA;     *&#xA;     * @param inData an &lt;code>IIOMetadata&lt;/code> object representing&#xA;     * image metadata, used to initialize the state of the returned&#xA;     * object.&#xA;     * @param imageType an &lt;code>ImageTypeSpecifier&lt;/code> indicating&#xA;     * the layout and color information of the image with which the&#xA;     * metadata will be associated.&#xA;     * @param param an &lt;code>ImageWriteParam&lt;/code> that will be used to&#xA;     * encode the image, or &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @return an &lt;code>IIOMetadata&lt;/code> object,&#xA;     * or &lt;code>null&lt;/code> if the plug-in does not provide&#xA;     * metadata encoding capabilities.&#xA;     *&#xA;     * @exception IllegalArgumentException if either of&#xA;     * &lt;code>inData&lt;/code> or &lt;code>imageType&lt;/code> is&#xA;     * &lt;code>null&lt;/code>.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="metadata/IIOMetadata.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inData">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="metadata/IIOMetadata.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="imageType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ImageTypeSpecifier.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="param">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ImageWriteParam.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An interface providing metadata transcoding capability.&#xA; *&#xA; * &lt;p> Any image may be transcoded (written to a different format&#xA; * than the one it was originally stored in) simply by performing&#xA; * a read operation followed by a write operation.  However, loss&#xA; * of data may occur in this process due to format differences.&#xA; *&#xA; * &lt;p> In general, the best results will be achieved when&#xA; * format-specific metadata objects can be created to encapsulate as&#xA; * much information about the image and its associated metadata as&#xA; * possible, in terms that are understood by the specific&#xA; * &lt;code>ImageWriter&lt;/code> used to perform the encoding.&#xA; *&#xA; * &lt;p> An &lt;code>ImageTranscoder&lt;/code> may be used to convert the&#xA; * &lt;code>IIOMetadata&lt;/code> objects supplied by the&#xA; * &lt;code>ImageReader&lt;/code> (representing per-stream and per-image&#xA; * metadata) into corresponding objects suitable for encoding by a&#xA; * particular &lt;code>ImageWriter&lt;/code>.  In the case where the methods&#xA; * of this interface are being called directly on an&#xA; * &lt;code>ImageWriter&lt;/code>, the output will be suitable for that&#xA; * writer.&#xA; *&#xA; * &lt;p> The internal details of converting an &lt;code>IIOMetadata&lt;/code>&#xA; * object into a writer-specific format will vary according to the&#xA; * context of the operation.  Typically, an &lt;code>ImageWriter&lt;/code>&#xA; * will inspect the incoming object to see if it implements additional&#xA; * interfaces with which the writer is familiar.  This might be the&#xA; * case, for example, if the object was obtained by means of a read&#xA; * operation on a reader plug-in written by the same vendor as the&#xA; * writer.  In this case, the writer may access the incoming object by&#xA; * means of its plug-in specific interfaces.  In this case, the&#xA; * re-encoding may be close to lossless if the image file format is&#xA; * kept constant.  If the format is changing, the writer may still&#xA; * attempt to preserve as much information as possible.&#xA; *&#xA; * &lt;p> If the incoming object does not implement any additional&#xA; * interfaces known to the writer, the writer has no choice but to&#xA; * access it via the standard &lt;code>IIOMetadata&lt;/code> interfaces such&#xA; * as the tree view provided by &lt;code>IIOMetadata.getAsTree&lt;/code>.&#xA; * In this case, there is likely to be significant loss of&#xA; * information.&#xA; *&#xA; * &lt;p> An independent &lt;code>ImageTranscoder&lt;/code> essentially takes&#xA; * on the same role as the writer plug-in in the above examples.  It&#xA; * must be familiar with the private interfaces used by both the&#xA; * reader and writer plug-ins, and manually instantiate an object that&#xA; * will be usable by the writer.  The resulting metadata objects may&#xA; * be used by the writer directly.&#xA; *&#xA; * &lt;p> No independent implementations of &lt;code>ImageTranscoder&lt;/code>&#xA; * are provided as part of the standard API.  Instead, the intention&#xA; * of this interface is to provide a way for implementations to be&#xA; * created and discovered by applications as the need arises.&#xA; * &#xA; * @version 0.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
