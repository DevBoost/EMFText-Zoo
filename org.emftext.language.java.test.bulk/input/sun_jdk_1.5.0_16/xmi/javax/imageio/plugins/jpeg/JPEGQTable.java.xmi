<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../java.ecore#/5 http://www.emftext.org/java/instantiations ../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../java.ecore#/17" name="JPEGQTable.java">
  <comments>/*&#xA; * @(#)JPEGQTable.java&#x9;1.12 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <comments>/**********************************************************************&#xA; **********************************************************************&#xA; **********************************************************************&#xA; *** COPYRIGHT (c) 1997-1998 Eastman Kodak Company.                 ***&#xA; *** As  an unpublished  work pursuant to Title 17 of the United    ***&#xA; *** States Code.  All rights reserved.                             ***&#xA; **********************************************************************&#xA; **********************************************************************&#xA; **********************************************************************/</comments>
  <namespaces>javax</namespaces>
  <namespaces>imageio</namespaces>
  <namespaces>plugins</namespaces>
  <namespaces>jpeg</namespaces>
  <classifiers xsi:type="classifiers:Class" name="JPEGQTable">
    <members xsi:type="members:Field" name="table">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Table */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="QTABLESIZE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="64"/>
      <typeReference xsi:type="types:Byte"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** The number of coefficients in a quantization table. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="K1Luminance">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * The sample luminance quantization table given in the JPEG&#xA;     * specification, table K.1.  According to the specification,&#xA;     * these values produce &quot;good&quot; quality output.&#xA;     *&#xA;     * @see #K1Div2Luminance&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lumVals">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="11"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="40"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="51"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="61"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="12"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="12"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="14"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="19"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="26"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="58"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="60"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="55"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="14"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="13"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="40"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="57"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="69"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="56"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="14"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="17"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="22"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="29"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="51"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="87"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="80"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="62"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="18"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="22"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="37"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="56"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="68"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="109"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="103"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="77"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="35"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="55"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="64"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="81"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="104"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="113"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="92"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="49"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="64"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="78"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="87"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="103"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="121"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="120"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="101"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="72"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="92"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="95"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="98"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="112"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="103"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@variable"/>
        </expression>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="K1Div2Luminance">
      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.11">
          <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="0.5"/>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
        </next>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The sample luminance quantization table given in the JPEG&#xA;     * specification, table K.1, with all elements divided by 2.&#xA;     * According to the specification, these values produce &quot;very&#xA;     * good&quot; quality output.  This is the table usually used for&#xA;     * &quot;visually lossless&quot; encoding, and is the default luminance&#xA;     * table used if the default tables and quality settings are used.&#xA;     *&#xA;     * @see #K1Luminance&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="K2Chrominance">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * The sample chrominance quantization table given in the JPEG&#xA;     * specification, table K.2.  According to the specification,&#xA;     * these values produce &quot;good&quot; quality output.&#xA;     *&#xA;     * @see #K2Div2Chrominance&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="chromVals">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="17"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="18"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="47"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="18"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="21"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="26"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="66"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="26"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="56"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="47"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="66"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable"/>
        </expression>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="K2Div2Chrominance">
      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.11">
          <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="0.5"/>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
        </next>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The sample chrominance quantization table given in the JPEG&#xA;     * specification, table K.2, with all elements divided by 2.&#xA;     * According to the specification, these values produce &quot;very&#xA;     * good&quot; quality output.  This is the table usually used for&#xA;     * &quot;visually lossless&quot; encoding, and is the default chrominance&#xA;     * table used if the default tables and quality settings are used.&#xA;     *&#xA;     * @see #K2Chrominance&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="JPEGQTable">
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &#xA;     * Constructs an empty quantization table. This is used to create&#xA;     * the standard tables.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="JPEGQTable">
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="table == null!"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Quantization table is the wrong size."/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:Int"/>
            <arrayDimensionsBefore/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.5"/>
              </next>
            </child>
          </value>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="table">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Constructs a quantization table from the argument, which must&#xA;     * contain 64 elements in natural order (not zig-zag order).&#xA;     * A copy is made of the the input array.&#xA;     *&#xA;     * @param table the quantization table, as an &lt;code>int&lt;/code>&#xA;     * array.&#xA;     *&#xA;     * @exception IllegalArgumentException if &lt;code>table&lt;/code> is&#xA;     * &lt;code>null&lt;/code> or &lt;code>table.length&lt;/code> is not equal to&#xA;     * 64.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getTable">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns a copy of the current quantization table as an array of&#xA;     * ints in natural (not zig-zag) order.&#xA;     *&#xA;     * @return A copy of the current quantization table.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsBefore/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.5"/>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getScaledInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scaleFactor">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="forceBaseline">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns a new quantization table where the values are&#xA;     * multiplied by &lt;code>scaleFactor&lt;/code> and then clamped to the&#xA;     * range 1..32767 (or to 1..255 if &lt;code>forceBaseline&lt;/code> is&#xA;     * &lt;code>true&lt;/code>).&#xA;     *&#xA;     * &lt;p> Values of &lt;code>scaleFactorless&lt;/code> than 1 tend to&#xA;     * improve the quality level of the table, and values greater than&#xA;     * &lt;code>1.0&lt;/code> degrade the quality level of the table.&#xA;     &#xA;     * @param scaleFactor the multiplicative factor for the table.&#xA;     * @param forceBaseline if &lt;code>true&lt;/code>, the values will be&#xA;     * clamped to the range 1..255.&#xA;     *&#xA;     * @return a new quantization table that is a linear multiple of&#xA;     * the current table.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="max">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
            </child>
            <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="255"/>
            <expressionElse xsi:type="literals:DecimalIntegerLiteral" decimalValue="32767"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="ret">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Int"/>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="scaledValue">
              <typeReference xsi:type="types:Float"/>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Float"/>
                <child xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../java/lang/Math.class.xmi#//@classifiers.0/@members.25"/>
                    <arguments xsi:type="expressions:MultiplicativeExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                        <arraySelectors>
                          <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@init"/>
                        </arraySelectors>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                      <multiplicativeOperators xsi:type="operators:Multiplication"/>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/Math.class.xmi#//@classifiers.0"/>
                </child>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="holder">
              <typeReference xsi:type="types:Int"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// limit to valid range</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@statement/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:DecimalFloatLiteral" decimalValue="1.0"/>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@statement/@statements.1/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@statement/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@statement/@statements.1/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:Int"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@statement/@statements.0/@variable"/>
                    </value>
                  </expression>
                </statements>
              </elseStatement>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@init"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@statement/@statements.1/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sb">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
            <arguments xsi:type="references:StringReference" value="JPEGQTable:&#xA;"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                <arguments xsi:type="literals:CharacterLiteral" value="9"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                      <arguments xsi:type="references:StringReference" value=" "/>
                    </next>
                    <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.27"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@init"/>
                      </arraySelectors>
                    </arguments>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@statement/@statements.1/@init"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="j">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@statement/@statements.1/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                <arguments xsi:type="literals:CharacterLiteral" value="10"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@init"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A class encapsulating a single JPEG quantization table.  The&#xA; * elements appear in natural order (as opposed to zig-zag order).&#xA; * Static variables are provided for the &quot;standard&quot; tables taken from&#xA; * Annex K of the JPEG spec, as well as the default tables&#xA; * conventionally used for visually lossless encoding.&#xA; *&#xA; * &lt;p>&#xA; * For more information about the operation of the built-in JPEG plug-ins,&#xA; * see the &lt;A HREF=&quot;../../metadata/doc-files/jpeg_metadata.html&quot;>JPEG&#xA; * metadata format specification and usage notes&lt;/A>.&#xA; *&#xA; * @version 0.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
