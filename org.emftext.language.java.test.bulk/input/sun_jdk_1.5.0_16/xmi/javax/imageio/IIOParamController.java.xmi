<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="IIOParamController.java">
  <comments>/*&#xA; * @(#)IIOParamController.java&#x9;1.12 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>imageio</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="IIOParamController">
    <members xsi:type="members:InterfaceMethod" name="activate">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Activates the controller.  If &lt;code>true&lt;/code> is returned,&#xA;     * all settings in the &lt;code>IIOParam&lt;/code> object should be&#xA;     * ready for use in a read or write operation.  If&#xA;     * &lt;code>false&lt;/code> is returned, no settings in the&#xA;     * &lt;code>IIOParam&lt;/code> object will be disturbed (&lt;i>i.e.&lt;/i>,&#xA;     * the user canceled the operation).&#xA;     *&#xA;     * @param param the &lt;code>IIOParam&lt;/code> object to be modified.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the &lt;code>IIOParam&lt;/code> has been&#xA;     * modified, &lt;code>false&lt;/code> otherwise.&#xA;     * &#xA;     * @exception IllegalArgumentException if &lt;code>param&lt;/code> is&#xA;     * &lt;code>null&lt;/code> or is not an instance of the correct class.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="param">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="IIOParam.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An interface to be implemented by objects that can determine the&#xA; * settings of an &lt;code>IIOParam&lt;/code> object, either by putting up a&#xA; * GUI to obtain values from a user, or by other means.  This&#xA; * interface merely specifies a generic &lt;code>activate&lt;/code> method&#xA; * that invokes the controller, without regard for how the controller&#xA; * obtains values (&lt;i>i.e.&lt;/i>, whether the controller puts up a GUI&#xA; * or merely computes a set of values is irrelevant to this&#xA; * interface).&#xA; *&#xA; * &lt;p> Within the &lt;code>activate&lt;/code> method, a controller obtains&#xA; * initial values by querying the &lt;code>IIOParam&lt;/code> object's&#xA; * &lt;code>get&lt;/code> methods, modifies values by whatever means, then&#xA; * invokes the &lt;code>IIOParam&lt;/code> object's &lt;code>set&lt;/code> methods&#xA; * to modify the appropriate settings.  Normally, these&#xA; * &lt;code>set&lt;/code> methods will be invoked all at once at a final&#xA; * commit in order that a cancel operation not disturb existing&#xA; * values.  In general, applications may expect that when the&#xA; * &lt;code>activate&lt;/code> method returns &lt;code>true&lt;/code>, the&#xA; * &lt;code>IIOParam&lt;/code> object is ready for use in a read or write&#xA; * operation.&#xA; *&#xA; * &lt;p> Vendors may choose to provide GUIs for the&#xA; * &lt;code>IIOParam&lt;/code> subclasses they define for a particular&#xA; * plug-in.  These can be set up as default controllers in the&#xA; * corresponding &lt;code>IIOParam&lt;/code> subclasses.&#xA; *&#xA; * &lt;p> Applications may override any default GUIs and provide their&#xA; * own controllers embedded in their own framework.  All that is&#xA; * required is that the&lt;code>activate&lt;/code> method behave modally&#xA; * (not returning until either cancelled or committed), though it need&#xA; * not put up an explicitly modal dialog.  Such a non-modal GUI&#xA; * component would be coded roughly as follows:&#xA; *&#xA; * &lt;br>&#xA; * &lt;pre>&#xA; * class MyGUI extends SomeComponent implements IIOParamController {&#xA; *&#xA; *    public MyGUI() {&#xA; *        // ...&#xA; *        setEnabled(false);&#xA; *    }&#xA; *&#xA; *    public boolean activate(IIOParam param) {&#xA; *        // disable other components if desired&#xA; *        setEnabled(true);&#xA; *        // go to sleep until either cancelled or committed&#xA; *        boolean ret = false;&#xA; *        if (!cancelled) {&#xA; *            // set values on param&#xA; *            ret = true;&#xA; *        }&#xA; *        setEnabled(false);&#xA; *        // enable any components disabled above&#xA; *        return ret;&#xA; *    }&#xA; * &lt;/pre>&#xA; *&#xA; * &lt;p> Alternatively, an algorithmic process such as a database lookup&#xA; * or the parsing of a command line could be used as a controller, in&#xA; * which case the &lt;code>activate&lt;/code> method would simply look up or&#xA; * compute the settings, call the &lt;code>IIOParam.setXXX&lt;/code>&#xA; * methods, and return &lt;code>true&lt;/code>.&#xA; *&#xA; * @see IIOParam#setController&#xA; * @see IIOParam#getController&#xA; * @see IIOParam#getDefaultController&#xA; * @see IIOParam#hasController&#xA; * @see IIOParam#activateController&#xA; *&#xA; * @version 0.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
