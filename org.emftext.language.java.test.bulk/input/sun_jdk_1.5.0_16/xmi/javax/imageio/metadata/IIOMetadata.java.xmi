<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../java.ecore#/17" name="IIOMetadata.java">
  <comments>/*&#xA; * @(#)IIOMetadata.java&#x9;1.39 04/03/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>imageio</namespaces>
  <namespaces>metadata</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>reflect</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/lang/reflect/Method.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="IIOMetadata">
    <members xsi:type="members:Field" name="standardFormatSupported">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * A boolean indicating whether the concrete subclass supports the&#xA;     * standard metadata format, set via the constructor.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="nativeMetadataFormatName">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * The name of the native metadata format for this object,&#xA;     * initialized to &lt;code>null&lt;/code> and set via the constructor.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="nativeMetadataFormatClassName">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * The name of the class implementing &lt;code>IIOMetadataFormat&lt;/code>&#xA;     * and representing the native metadata format, initialized to&#xA;     * &lt;code>null&lt;/code> and set via the constructor.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="extraMetadataFormatNames">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * An array of names of formats, other than the standard and&#xA;     * native formats, that are supported by this plug-in,&#xA;     * initialized to &lt;code>null&lt;/code> and set via the constructor.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="extraMetadataFormatClassNames">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * An array of names of classes implementing &lt;code>IIOMetadataFormat&lt;/code>&#xA;     * and representing the metadata formats, other than the standard and&#xA;     * native formats, that are supported by this plug-in,&#xA;     * initialized to &lt;code>null&lt;/code> and set via the constructor.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="defaultController">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="IIOMetadataController.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * An &lt;code>IIOMetadataController&lt;/code> that is suggested for use&#xA;     * as the controller for this &lt;code>IIOMetadata&lt;/code> object.  It&#xA;     * may be retrieved via &lt;code>getDefaultController&lt;/code>.  To&#xA;     * install the default controller, call&#xA;     * &lt;code>setController(getDefaultController())&lt;/code>.  This&#xA;     * instance variable should be set by subclasses that choose to&#xA;     * provide their own default controller, usually a GUI, for&#xA;     * setting parameters.&#xA;     *&#xA;     * @see IIOMetadataController&#xA;     * @see #getDefaultController&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="controller">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="IIOMetadataController.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * The &lt;code>IIOMetadataController&lt;/code> that will be&#xA;     * used to provide settings for this &lt;code>IIOMetadata&lt;/code>&#xA;     * object when the &lt;code>activateController&lt;/code> method&#xA;     * is called.  This value overrides any default controller, &#xA;     * even when &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @see IIOMetadataController&#xA;     * @see #setController(IIOMetadataController)&#xA;     * @see #hasController()&#xA;     * @see #activateController()&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="IIOMetadata">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructs an empty &lt;code>IIOMetadata&lt;/code> object.  The&#xA;     * subclass is responsible for suppying values for all protected&#xA;     * instance variables that will allow any non-overridden default&#xA;     * implemtations of methods to satisfy their contracts.  For example,&#xA;     * &lt;code>extraMetadataFormatNames&lt;/code> should not have length 0.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="IIOMetadata">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:StringReference" value="extraMetadataFormatNames.length == 0!"/>
                </throwable>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.3">
                <next xsi:type="references:IdentifierReference"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:StringReference" value="extraMetadataFormatNames != null &amp;&amp; extraMetadataFormatClassNames == null!"/>
                </throwable>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.4"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:StringReference" value="extraMetadataFormatClassNames.length != extraMetadataFormatNames.length!"/>
                </throwable>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.4">
                <next xsi:type="references:IdentifierReference"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.3">
                <next xsi:type="references:IdentifierReference"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                </child>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.4">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                </child>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.3"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:StringReference" value="extraMetadataFormatNames == null &amp;&amp; extraMetadataFormatClassNames != null!"/>
                </throwable>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.4"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </elseStatement>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="standardMetadataFormatSupported">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nativeMetadataFormatName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nativeMetadataFormatClassName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="extraMetadataFormatNames">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="extraMetadataFormatClassNames">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructs an &lt;code>IIOMetadata&lt;/code> object with the given&#xA;     * format names and format class names, as well as a boolean&#xA;     * indicating whether the standard format is supported.&#xA;     *&#xA;     * &lt;p> This constructor does not attempt to check the class names&#xA;     * for validity.  Invalid class names may cause exceptions in&#xA;     * subsequent calls to &lt;code>getMetadataFormat&lt;/code>.&#xA;     *&#xA;     * @param standardMetadataFormatSupported &lt;code>true&lt;/code> if&#xA;     * this object can return or accept a DOM tree using the standard&#xA;     * metadata format.&#xA;     * @param nativeMetadataFormatName the name of the native metadata&#xA;     * format, as a &lt;code>String&lt;/code>, or &lt;code>null&lt;/code> if there&#xA;     * is no native format.&#xA;     * @param nativeMetadataFormatClassName the name of the class of &#xA;     * the native metadata format, or &lt;code>null&lt;/code> if there is&#xA;     * no native format.&#xA;     * @param extraMetadataFormatNames an array of &lt;code>String&lt;/code>s&#xA;     * indicating additional formats supported by this object, or&#xA;     * &lt;code>null&lt;/code> if there are none.&#xA;     * @param extraMetadataFormatClassNames an array of &lt;code>String&lt;/code>s&#xA;     * indicating the class names of any additional formats supported by&#xA;     * this object, or &lt;code>null&lt;/code> if there are none.&#xA;     *&#xA;     * @exception IllegalArgumentException if&#xA;     * &lt;code>extraMetadataFormatNames&lt;/code> has length 0.&#xA;     * @exception IllegalArgumentException if&#xA;     * &lt;code>extraMetadataFormatNames&lt;/code> and&#xA;     * &lt;code>extraMetadataFormatClassNames&lt;/code> are neither both&#xA;     * &lt;code>null&lt;/code>, nor of the same length.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="isStandardMetadataFormatSupported">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> if the standard metadata format is&#xA;     * supported by &lt;code>getMetadataFormat&lt;/code>,&#xA;     * &lt;code>getAsTree&lt;/code>, &lt;code>setFromTree&lt;/code>, and&#xA;     * &lt;code>mergeTree&lt;/code>.&#xA;     *&#xA;     * &lt;p> The default implementation returns the value of the&#xA;     * &lt;code>standardFormatSupported&lt;/code> instance variable.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the standard metadata format&#xA;     * is supported.&#xA;     *&#xA;     * @see #getAsTree&#xA;     * @see #setFromTree&#xA;     * @see #mergeTree&#xA;     * @see #getMetadataFormat&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isReadOnly">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> if this object does not support the&#xA;     * &lt;code>mergeTree&lt;/code>, &lt;code>setFromTree&lt;/code>, and&#xA;     * &lt;code>reset&lt;/code> methods.  &#xA;     *&#xA;     * @return true if this &lt;code>IIOMetadata&lt;/code> object cannot be&#xA;     * modified.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getNativeMetadataFormatName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of the &quot;native&quot; metadata format for this&#xA;     * plug-in, which typically allows for lossless encoding and&#xA;     * transmission of the metadata stored in the format handled by&#xA;     * this plug-in.  If no such format is supported,&#xA;     * &lt;code>null&lt;/code>will be returned.  &#xA;     *&#xA;     * &lt;p> The structure and contents of the &quot;native&quot; metadata format&#xA;     * are defined by the plug-in that created this&#xA;     * &lt;code>IIOMetadata&lt;/code> object.  Plug-ins for simple formats&#xA;     * will usually create a dummy node for the root, and then a&#xA;     * series of child nodes representing individual tags, chunks, or&#xA;     * keyword/value pairs.  A plug-in may choose whether or not to&#xA;     * document its native format.&#xA;     *&#xA;     * &lt;p> The default implementation returns the value of the&#xA;     * &lt;code>nativeMetadataFormatName&lt;/code> instance variable.&#xA;     *&#xA;     * @return the name of the native format, or &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @see #getExtraMetadataFormatNames&#xA;     * @see #getMetadataFormatNames&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getExtraMetadataFormatNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of &lt;code>String&lt;/code>s containing the names&#xA;     * of additional metadata formats, other than the native and standard&#xA;     * formats, recognized by this plug-in's&#xA;     * &lt;code>getAsTree&lt;/code>, &lt;code>setFromTree&lt;/code>, and&#xA;     * &lt;code>mergeTree&lt;/code> methods.  If there are no such additional&#xA;     * formats, &lt;code>null&lt;/code> is returned.&#xA;     *&#xA;     * &lt;p> The default implementation returns a clone of the&#xA;     * &lt;code>extraMetadataFormatNames&lt;/code> instance variable.&#xA;     *&#xA;     * @return an array of &lt;code>String&lt;/code>s with length at least&#xA;     * 1, or &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @see #getAsTree&#xA;     * @see #setFromTree&#xA;     * @see #mergeTree&#xA;     * @see #getNativeMetadataFormatName&#xA;     * @see #getMetadataFormatNames&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.5"/>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMetadataFormatNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of &lt;code>String&lt;/code>s containing the names&#xA;     * of all metadata formats, including the native and standard&#xA;     * formats, recognized by this plug-in's &lt;code>getAsTree&lt;/code>,&#xA;     * &lt;code>setFromTree&lt;/code>, and &lt;code>mergeTree&lt;/code> methods.&#xA;     * If there are no such formats, &lt;code>null&lt;/code> is returned.&#xA;     *&#xA;     * &lt;p> The default implementation calls&#xA;     * &lt;code>getNativeMetadataFormatName&lt;/code>,&#xA;     * &lt;code>isStandardMetadataFormatSupported&lt;/code>, and&#xA;     * &lt;code>getExtraMetadataFormatNames&lt;/code> and returns the&#xA;     * combined results.&#xA;     *&#xA;     * @return an array of &lt;code>String&lt;/code>s.&#xA;     *&#xA;     * @see #getNativeMetadataFormatName&#xA;     * @see #isStandardMetadataFormatSupported&#xA;     * @see #getExtraMetadataFormatNames&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nativeName">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.11"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="standardName">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:ConditionalExpression">
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.9"/>
            <expressionIf xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="IIOMetadataFormatImpl.class.xmi#//@classifiers.0/@members.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="IIOMetadataFormatImpl.class.xmi#//@classifiers.0"/>
            </expressionIf>
            <expressionElse xsi:type="literals:NullLiteral"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="extraNames">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.12"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="numFormats">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:PrefixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.3/@variable"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:PrefixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.3/@variable"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.2/@variable">
                <next xsi:type="references:IdentifierReference"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.2/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.3/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="formats">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.3/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="index">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.8/@variable">
                <arraySelectors>
                  <position xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.9/@variable"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.8/@variable">
                <arraySelectors>
                  <position xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.9/@variable"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.8/@variable">
                    <arraySelectors>
                      <position xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.9/@variable"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </position>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.2/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.12/@statement/@statements.0/@init"/>
                    </arraySelectors>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.12/@statement/@statements.0/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.2/@variable">
                <next xsi:type="references:IdentifierReference"/>
              </children>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.12/@statement/@statements.0/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.2/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.8/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMetadataFormat">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="IIOMetadataFormat.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="formatName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an &lt;code>IIOMetadataFormat&lt;/code> object describing the&#xA;     * given metadata format, or &lt;code>null&lt;/code> if no description&#xA;     * is available.  The supplied name must be one of those returned&#xA;     * by &lt;code>getMetadataFormatNames&lt;/code> (&lt;i>i.e.&lt;/i>, either the&#xA;     * native format name, the standard format name, or one of those&#xA;     * returned by &lt;code>getExtraMetadataFormatNames&lt;/code>).&#xA;     *&#xA;     * &lt;p> The default implementation checks the name against the&#xA;     * global standard metadata format name, and returns that format&#xA;     * if it is supported.  Otherwise, it checks against the native&#xA;     * format names followed by any additional format names.  If a&#xA;     * match is found, it retrieves the name of the&#xA;     * &lt;code>IIOMetadataFormat&lt;/code> class from&#xA;     * &lt;code>nativeMetadataFormatClassName&lt;/code> or&#xA;     * &lt;code>extraMetadataFormatClassNames&lt;/code> as appropriate, and&#xA;     * constructs an instance of that class using its&#xA;     * &lt;code>getInstance&lt;/code> method.&#xA;     *&#xA;     * @param formatName the desired metadata format.&#xA;     *&#xA;     * @return an &lt;code>IIOMetadataFormat&lt;/code> object.&#xA;     *&#xA;     * @exception IllegalArgumentException if &lt;code>formatName&lt;/code>&#xA;     * is &lt;code>null&lt;/code> or is not one of the names recognized by&#xA;     * the plug-in.&#xA;     * @exception IllegalStateException if the class corresponding to&#xA;     * the format name cannot be loaded.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="formatName == null!"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="IIOMetadataFormatImpl.class.xmi#//@classifiers.0/@members.56"/>
              </next>
              <target xsi:type="classifiers:Class" href="IIOMetadataFormatImpl.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="IIOMetadataFormatImpl.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="IIOMetadataFormatImpl.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="formatClassName">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </next>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ForLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <comments>// out of for</comments>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                          <arraySelectors>
                            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.3/@elseStatement/@statement/@statements.0/@init"/>
                          </arraySelectors>
                        </value>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Break"/>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                        <arraySelectors>
                          <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.3/@elseStatement/@statement/@statements.0/@init"/>
                        </arraySelectors>
                      </arguments>
                    </next>
                  </condition>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.3/@elseStatement/@statement/@statements.0/@init"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:IdentifierReference"/>
                </children>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <init xsi:type="variables:LocalVariable" name="i">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </init>
              <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.3/@elseStatement/@statement/@statements.0/@init"/>
                <operator xsi:type="operators:PlusPlus"/>
              </updates>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Unsupported format name"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="cls">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="literals:NullLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="o">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </initialValue>
            <annotationsAndModifiers xsi:type="modifiers:Final"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="loader">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <comments>// firstly we try to use classloader used for loading </comments>
                <comments>// the IIOMetadata implemantation for this plugin.</comments>
                <target xsi:type="classifiers:Class" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                      <arguments xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <namespaces>java</namespaces>
                          <namespaces>security</namespaces>
                          <classifierReferences>
                            <target xsi:type="classifiers:Interface" href="../../../java/security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <anonymousClass>
                          <members xsi:type="members:ClassMethod" name="run">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <annotationsAndModifiers xsi:type="modifiers:Public"/>
                            <statements xsi:type="statements:Return">
                              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.5/@statements.1/@variable">
                                <next xsi:type="references:MethodCall">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.46"/>
                                  </next>
                                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
                                </next>
                              </returnValue>
                            </statements>
                          </members>
                        </anonymousClass>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
                  </next>
                </next>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.5/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable"/>
                  <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.5/@statements.2/@variable"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
          <catcheBlocks>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.5/@statements.2/@variable">
                  <comments>// we failed to load IIOMetadataFormat class by </comments>
                  <comments>// using IIOMetadata classloader.Next try is to</comments>
                  <comments>// use thread context classloader.</comments>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../java/security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                          <arguments xsi:type="instantiations:NewConstructorCall">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <namespaces>java</namespaces>
                              <namespaces>security</namespaces>
                              <classifierReferences>
                                <target xsi:type="classifiers:Interface" href="../../../java/security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <anonymousClass>
                              <members xsi:type="members:ClassMethod" name="run">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                                <annotationsAndModifiers xsi:type="modifiers:Public"/>
                                <statements xsi:type="statements:Return">
                                  <returnValue xsi:type="references:IdentifierReference">
                                    <next xsi:type="references:MethodCall">
                                      <next xsi:type="references:MethodCall">
                                        <target xsi:type="members:ClassMethod" href="../../../java/lang/Thread.class.xmi#//@classifiers.0/@members.76"/>
                                      </next>
                                      <target xsi:type="members:ClassMethod" href="../../../java/lang/Thread.class.xmi#//@classifiers.0/@members.33"/>
                                    </next>
                                    <target xsi:type="classifiers:Class" href="../../../java/lang/Thread.class.xmi#//@classifiers.0"/>
                                  </returnValue>
                                </statements>
                              </members>
                            </anonymousClass>
                          </arguments>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
                      </next>
                    </next>
                  </child>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:TryBlock">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.5/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable"/>
                      <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.5/@statements.2/@variable"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </statements>
              <catcheBlocks>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.5/@statements.0/@variable">
                      <comments>// finally we try to use system classloader in case</comments>
                      <comments>// if we failed to load IIOMetadataFormat implementation</comments>
                      <comments>// class above.</comments>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.33"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable"/>
                        <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0/@members.64"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
                        </arguments>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
                    </value>
                  </expression>
                </statements>
                <parameter name="e1">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </parameter>
              </catcheBlocks>
            </statements>
            <parameter name="e">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="meth">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/reflect/Method.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.5/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.78"/>
                <arguments xsi:type="references:StringReference" value="getInstance"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="IIOMetadataFormat.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.5/@statements.4/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/reflect/Method.class.xmi#//@classifiers.0/@members.36"/>
                <arguments xsi:type="literals:NullLiteral"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </child>
          </returnValue>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="ex">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/RuntimeException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalStateException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="Can't obtain format"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.5/@catcheBlocks.0/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.5/@catcheBlocks.0/@parameter"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.5/@catcheBlocks.0/@statements.0/@variable"/>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAsTree">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="formatName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an XML DOM &lt;code>Node&lt;/code> object that represents the&#xA;     * root of a tree of metadata contained within this object&#xA;     * according to the conventions defined by a given metadata&#xA;     * format.&#xA;     *&#xA;     * &lt;p> The names of the available metadata formats may be queried&#xA;     * using the &lt;code>getMetadataFormatNames&lt;/code> method.&#xA;     *&#xA;     * @param formatName the desired metadata format.&#xA;     *&#xA;     * @return an XML DOM &lt;code>Node&lt;/code> object forming the&#xA;     * root of a tree.&#xA;     *&#xA;     * @exception IllegalArgumentException if &lt;code>formatName&lt;/code>&#xA;     * is &lt;code>null&lt;/code> or is not one of the names returned by&#xA;     * &lt;code>getMetadataFormatNames&lt;/code>.&#xA;     * &#xA;     * @see #getMetadataFormatNames&#xA;     * @see #setFromTree&#xA;     * @see #mergeTree&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="mergeTree">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="formatName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="root">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IIOInvalidTreeException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Alters the internal state of this &lt;code>IIOMetadata&lt;/code>&#xA;     * object from a tree of XML DOM &lt;code>Node&lt;/code>s whose syntax&#xA;     * is defined by the given metadata format.  The previous state is&#xA;     * altered only as necessary to accomodate the nodes that are&#xA;     * present in the given tree.  If the tree structure or contents&#xA;     * are invalid, an &lt;code>IIOInvalidTreeException&lt;/code> will be&#xA;     * thrown.&#xA;     *&#xA;     * &lt;p> As the semantics of how a tree or subtree may be merged with&#xA;     * another tree are completely format-specific, plug-in authors may&#xA;     * implement this method in whatever manner is most appropriate for&#xA;     * the format, including simply replacing all existing state with the&#xA;     * contents of the given tree.&#xA;     *&#xA;     * @param formatName the desired metadata format.&#xA;     * @param root an XML DOM &lt;code>Node&lt;/code> object forming the&#xA;     * root of a tree.&#xA;     *&#xA;     * @exception IllegalStateException if this object is read-only.&#xA;     * @exception IllegalArgumentException if &lt;code>formatName&lt;/code>&#xA;     * is &lt;code>null&lt;/code> or is not one of the names returned by&#xA;     * &lt;code>getMetadataFormatNames&lt;/code>.&#xA;     * @exception IllegalArgumentException if &lt;code>root&lt;/code> is&#xA;     * &lt;code>null&lt;/code>.&#xA;     * @exception IIOInvalidTreeException if the tree cannot be parsed&#xA;     * successfully using the rules of the given format.&#xA;     *&#xA;     * @see #getMetadataFormatNames&#xA;     * @see #getAsTree&#xA;     * @see #setFromTree&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getStandardChromaNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IIOMetadataNode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns an &lt;code>IIOMetadataNode&lt;/code> representing the chroma&#xA;     * information of the standard &lt;code>javax_imageio_1.0&lt;/code>&#xA;     * metadata format, or &lt;code>null&lt;/code> if no such information is&#xA;     * available.  This method is intended to be called by the utility&#xA;     * routine &lt;code>getStandardTree&lt;/code>.&#xA;     *&#xA;     * &lt;p> The default implementation returns &lt;code>null&lt;/code>.&#xA;     *&#xA;     * &lt;p> Subclasses should override this method to produce an&#xA;     * appropriate subtree if they wish to support the standard&#xA;     * metadata format.&#xA;     *&#xA;     * @return an &lt;code>IIOMetadataNode&lt;/code>, or &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @see #getStandardTree&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStandardCompressionNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IIOMetadataNode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns an &lt;code>IIOMetadataNode&lt;/code> representing the&#xA;     * compression information of the standard&#xA;     * &lt;code>javax_imageio_1.0&lt;/code> metadata format, or&#xA;     * &lt;code>null&lt;/code> if no such information is available.  This&#xA;     * method is intended to be called by the utility routine&#xA;     * &lt;code>getStandardTree&lt;/code>.&#xA;     *&#xA;     * &lt;p> The default implementation returns &lt;code>null&lt;/code>.&#xA;     *&#xA;     * &lt;p> Subclasses should override this method to produce an&#xA;     * appropriate subtree if they wish to support the standard&#xA;     * metadata format.&#xA;     *&#xA;     * @return an &lt;code>IIOMetadataNode&lt;/code>, or &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @see #getStandardTree&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStandardDataNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IIOMetadataNode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns an &lt;code>IIOMetadataNode&lt;/code> representing the data&#xA;     * format information of the standard&#xA;     * &lt;code>javax_imageio_1.0&lt;/code> metadata format, or&#xA;     * &lt;code>null&lt;/code> if no such information is available.  This&#xA;     * method is intended to be called by the utility routine&#xA;     * &lt;code>getStandardTree&lt;/code>.&#xA;     *&#xA;     * &lt;p> The default implementation returns &lt;code>null&lt;/code>.&#xA;     *&#xA;     * &lt;p> Subclasses should override this method to produce an&#xA;     * appropriate subtree if they wish to support the standard&#xA;     * metadata format.&#xA;     *&#xA;     * @return an &lt;code>IIOMetadataNode&lt;/code>, or &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @see #getStandardTree&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStandardDimensionNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IIOMetadataNode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns an &lt;code>IIOMetadataNode&lt;/code> representing the&#xA;     * dimension information of the standard&#xA;     * &lt;code>javax_imageio_1.0&lt;/code> metadata format, or&#xA;     * &lt;code>null&lt;/code> if no such information is available.  This&#xA;     * method is intended to be called by the utility routine&#xA;     * &lt;code>getStandardTree&lt;/code>.&#xA;     *&#xA;     * &lt;p> The default implementation returns &lt;code>null&lt;/code>.&#xA;     *&#xA;     * &lt;p> Subclasses should override this method to produce an&#xA;     * appropriate subtree if they wish to support the standard&#xA;     * metadata format.&#xA;     *&#xA;     * @return an &lt;code>IIOMetadataNode&lt;/code>, or &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @see #getStandardTree&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStandardDocumentNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IIOMetadataNode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns an &lt;code>IIOMetadataNode&lt;/code> representing the document&#xA;     * information of the standard &lt;code>javax_imageio_1.0&lt;/code>&#xA;     * metadata format, or &lt;code>null&lt;/code> if no such information is&#xA;     * available.  This method is intended to be called by the utility&#xA;     * routine &lt;code>getStandardTree&lt;/code>.&#xA;     *&#xA;     * &lt;p> The default implementation returns &lt;code>null&lt;/code>.&#xA;     *&#xA;     * &lt;p> Subclasses should override this method to produce an&#xA;     * appropriate subtree if they wish to support the standard&#xA;     * metadata format.&#xA;     *&#xA;     * @return an &lt;code>IIOMetadataNode&lt;/code>, or &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @see #getStandardTree&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStandardTextNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IIOMetadataNode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns an &lt;code>IIOMetadataNode&lt;/code> representing the textual&#xA;     * information of the standard &lt;code>javax_imageio_1.0&lt;/code>&#xA;     * metadata format, or &lt;code>null&lt;/code> if no such information is&#xA;     * available.  This method is intended to be called by the utility&#xA;     * routine &lt;code>getStandardTree&lt;/code>.&#xA;     *&#xA;     * &lt;p> The default implementation returns &lt;code>null&lt;/code>.&#xA;     *&#xA;     * &lt;p> Subclasses should override this method to produce an&#xA;     * appropriate subtree if they wish to support the standard&#xA;     * metadata format.&#xA;     *&#xA;     * @return an &lt;code>IIOMetadataNode&lt;/code>, or &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @see #getStandardTree&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStandardTileNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IIOMetadataNode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns an &lt;code>IIOMetadataNode&lt;/code> representing the tiling&#xA;     * information of the standard &lt;code>javax_imageio_1.0&lt;/code>&#xA;     * metadata format, or &lt;code>null&lt;/code> if no such information is&#xA;     * available.  This method is intended to be called by the utility&#xA;     * routine &lt;code>getStandardTree&lt;/code>.&#xA;     *&#xA;     * &lt;p> The default implementation returns &lt;code>null&lt;/code>.&#xA;     *&#xA;     * &lt;p> Subclasses should override this method to produce an&#xA;     * appropriate subtree if they wish to support the standard&#xA;     * metadata format.&#xA;     *&#xA;     * @return an &lt;code>IIOMetadataNode&lt;/code>, or &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @see #getStandardTree&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStandardTransparencyNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IIOMetadataNode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns an &lt;code>IIOMetadataNode&lt;/code> representing the&#xA;     * transparency information of the standard&#xA;     * &lt;code>javax_imageio_1.0&lt;/code> metadata format, or&#xA;     * &lt;code>null&lt;/code> if no such information is available.  This&#xA;     * method is intended to be called by the utility routine&#xA;     * &lt;code>getStandardTree&lt;/code>.&#xA;     *&#xA;     * &lt;p> The default implementation returns &lt;code>null&lt;/code>.&#xA;     *&#xA;     * &lt;p> Subclasses should override this method to produce an&#xA;     * appropriate subtree if they wish to support the standard&#xA;     * metadata format.&#xA;     *&#xA;     * @return an &lt;code>IIOMetadataNode&lt;/code>, or &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="append">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="root">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="IIOMetadataNode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="IIOMetadataNode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Appends a new node to an existing node, if the new node is&#xA;     * non-&lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="IIOMetadataNode.class.xmi#//@classifiers.0/@members.29"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.1"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStandardTree">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IIOMetadataNode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * A utility method to return a tree of&#xA;     * &lt;code>IIOMetadataNode&lt;/code>s representing the metadata&#xA;     * contained within this object according to the conventions of&#xA;     * the standard &lt;code>javax_imageio_1.0&lt;/code> metadata format.&#xA;     *&#xA;     * &lt;p> This method calls the various &lt;code>getStandard*Node&lt;/code>&#xA;     * methods to supply each of the subtrees rooted at the children&#xA;     * of the root node.  If any of those methods returns&#xA;     * &lt;code>null&lt;/code>, the corresponding subtree will be omitted.&#xA;     * If all of them return &lt;code>null&lt;/code>, a tree consisting of a&#xA;     * single root node will be returned.&#xA;     *&#xA;     * @return an &lt;code>IIOMetadataNode&lt;/code> representing the root&#xA;     * of a metadata tree in the &lt;code>javax_imageio_1.0&lt;/code>&#xA;     * format.&#xA;     *&#xA;     * @see #getStandardChromaNode&#xA;     * @see #getStandardCompressionNode&#xA;     * @see #getStandardDataNode&#xA;     * @see #getStandardDimensionNode&#xA;     * @see #getStandardDocumentNode&#xA;     * @see #getStandardTextNode&#xA;     * @see #getStandardTileNode&#xA;     * @see #getStandardTransparencyNode&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="root">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="IIOMetadataNode.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="IIOMetadataNode.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="IIOMetadataFormatImpl.class.xmi#//@classifiers.0/@members.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="IIOMetadataFormatImpl.class.xmi#//@classifiers.0"/>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.17"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.18"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.19"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.20"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.21"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.22"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.23"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.24"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setFromTree">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="formatName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="root">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IIOInvalidTreeException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the internal state of this &lt;code>IIOMetadata&lt;/code> object&#xA;     * from a tree of XML DOM &lt;code>Node&lt;/code>s whose syntax is&#xA;     * defined by the given metadata format.  The previous state is&#xA;     * discarded.  If the tree's structure or contents are invalid, an&#xA;     * &lt;code>IIOInvalidTreeException&lt;/code> will be thrown.&#xA;     *&#xA;     * &lt;p> The default implementation calls &lt;code>reset&lt;/code>&#xA;     * followed by &lt;code>mergeTree(formatName, root)&lt;/code>.&#xA;     *&#xA;     * @param formatName the desired metadata format.&#xA;     * @param root an XML DOM &lt;code>Node&lt;/code> object forming the&#xA;     * root of a tree.&#xA;     *&#xA;     * @exception IllegalStateException if this object is read-only.&#xA;     * @exception IllegalArgumentException if &lt;code>formatName&lt;/code>&#xA;     * is &lt;code>null&lt;/code> or is not one of the names returned by&#xA;     * &lt;code>getMetadataFormatNames&lt;/code>.&#xA;     * @exception IllegalArgumentException if &lt;code>root&lt;/code> is&#xA;     * &lt;code>null&lt;/code>.&#xA;     * @exception IIOInvalidTreeException if the tree cannot be parsed&#xA;     * successfully using the rules of the given format.&#xA;     *&#xA;     * @see #getMetadataFormatNames&#xA;     * @see #getAsTree&#xA;     * @see #mergeTree&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.28"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.1"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="reset">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Resets all the data stored in this object to default values,&#xA;     * usually to the state this object was in immediately after&#xA;     * construction, though the precise semantics are plug-in specific.&#xA;     * Note that there are many possible default values, depending on&#xA;     * how the object was created.&#xA;     *&#xA;     * @exception IllegalStateException if this object is read-only.&#xA;     *&#xA;     * @see javax.imageio.ImageReader#getStreamMetadata&#xA;     * @see javax.imageio.ImageReader#getImageMetadata&#xA;     * @see javax.imageio.ImageWriter#getDefaultStreamMetadata&#xA;     * @see javax.imageio.ImageWriter#getDefaultImageMetadata&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="setController">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="controller">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="IIOMetadataController.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the &lt;code>IIOMetadataController&lt;/code> to be used&#xA;     * to provide settings for this &lt;code>IIOMetadata&lt;/code>&#xA;     * object when the &lt;code>activateController&lt;/code> method&#xA;     * is called, overriding any default controller.  If the&#xA;     * argument is &lt;code>null&lt;/code>, no controller will be&#xA;     * used, including any default.  To restore the default, use&#xA;     * &lt;code>setController(getDefaultController())&lt;/code>.&#xA;     *&#xA;     * &lt;p> The default implementation sets the &lt;code>controller&lt;/code>&#xA;     * instance variable to the supplied value.&#xA;     *&#xA;     * @param controller An appropriate &#xA;     * &lt;code>IIOMetadataController&lt;/code>, or &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @see IIOMetadataController&#xA;     * @see #getController&#xA;     * @see #getDefaultController&#xA;     * @see #hasController&#xA;     * @see #activateController()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getController">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="IIOMetadataController.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns whatever &lt;code>IIOMetadataController&lt;/code> is currently&#xA;     * installed.  This could be the default if there is one, &#xA;     * &lt;code>null&lt;/code>, or the argument of the most recent call&#xA;     * to &lt;code>setController&lt;/code>.&#xA;     *&#xA;     * &lt;p> The default implementation returns the value of the&#xA;     * &lt;code>controller&lt;/code> instance variable.&#xA;     *&#xA;     * @return the currently installed&#xA;     * &lt;code>IIOMetadataController&lt;/code>, or &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @see IIOMetadataController&#xA;     * @see #setController&#xA;     * @see #getDefaultController&#xA;     * @see #hasController&#xA;     * @see #activateController()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDefaultController">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="IIOMetadataController.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the default &lt;code>IIOMetadataController&lt;/code>, if there&#xA;     * is one, regardless of the currently installed controller.  If&#xA;     * there is no default controller, returns &lt;code>null&lt;/code>.&#xA;     *&#xA;     * &lt;p> The default implementation returns the value of the&#xA;     * &lt;code>defaultController&lt;/code> instance variable.&#xA;     *&#xA;     * @return the default &lt;code>IIOMetadataController&lt;/code>, or&#xA;     * &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @see IIOMetadataController&#xA;     * @see #setController(IIOMetadataController)&#xA;     * @see #getController&#xA;     * @see #hasController&#xA;     * @see #activateController()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="hasController">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> if there is a controller installed&#xA;     * for this &lt;code>IIOMetadata&lt;/code> object.&#xA;     *&#xA;     * &lt;p> The default implementation returns &lt;code>true&lt;/code> if the&#xA;     * &lt;code>getController&lt;/code> method returns a&#xA;     * non-&lt;code>null&lt;/code> value.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if a controller is installed.&#xA;     *&#xA;     * @see IIOMetadataController&#xA;     * @see #setController(IIOMetadataController)&#xA;     * @see #getController&#xA;     * @see #getDefaultController&#xA;     * @see #activateController()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.30"/>
            <children xsi:type="literals:NullLiteral"/>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="activateController">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Activates the installed &lt;code>IIOMetadataController&lt;/code> for&#xA;     * this &lt;code>IIOMetadata&lt;/code> object and returns the resulting&#xA;     * value.  When this method returns &lt;code>true&lt;/code>, all values for this&#xA;     * &lt;code>IIOMetadata&lt;/code> object will be ready for the next write&#xA;     * operation.  If &lt;code>false&lt;/code> is&#xA;     * returned, no settings in this object will have been disturbed&#xA;     * (&lt;i>i.e.&lt;/i>, the user canceled the operation).&#xA;     *&#xA;     * &lt;p> Ordinarily, the controller will be a GUI providing a user&#xA;     * interface for a subclass of &lt;code>IIOMetadata&lt;/code> for a&#xA;     * particular plug-in.  Controllers need not be GUIs, however.&#xA;     *&#xA;     * &lt;p> The default implementation calls &lt;code>getController&lt;/code>&#xA;     * and the calls &lt;code>activate&lt;/code> on the returned object if&#xA;     * &lt;code>hasController&lt;/code> returns &lt;code>true&lt;/code>.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the controller completed normally.&#xA;     *&#xA;     * @exception IllegalStateException if there is no controller&#xA;     * currently installed.&#xA;     *&#xA;     * @see IIOMetadataController&#xA;     * @see #setController(IIOMetadataController)&#xA;     * @see #getController&#xA;     * @see #getDefaultController&#xA;     * @see #hasController&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalStateException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="hasController() == false!"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.32"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="IIOMetadataController.class.xmi#//@classifiers.0/@members.0"/>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An abstract class to be extended by objects that represent metadata&#xA; * (non-image data) associated with images and streams.  Plug-ins&#xA; * represent metadata using opaque, plug-in specific objects.  These&#xA; * objects, however, provide the ability to access their internal&#xA; * information as a tree of &lt;code>IIOMetadataNode&lt;/code> objects that&#xA; * support the XML DOM interfaces as well as additional interfaces for&#xA; * storing non-textual data and retrieving information about legal&#xA; * data values.  The format of such trees is plug-in dependent, but&#xA; * plug-ins may choose to support a plug-in neutral format described&#xA; * below.  A single plug-in may support multiple metadata formats,&#xA; * whose names maybe determined by calling&#xA; * &lt;code>getMetadataFormatNames&lt;/code>.  The plug-in may also support&#xA; * a single special format, referred to as the &quot;native&quot; format, which&#xA; * is designed to encode its metadata losslessly.  This format will&#xA; * typically be designed specifically to work with a specific file&#xA; * format, so that images may be loaded and saved in the same format&#xA; * with no loss of metadata, but may be less useful for transfering&#xA; * metadata between an &lt;code>ImageReader&lt;/code> and an&#xA; * &lt;code>ImageWriter&lt;/code> for different image formats.  To convert&#xA; * between two native formats as losslessly as the image file formats&#xA; * will allow, an &lt;code>ImageTranscoder&lt;/code> object must be used.&#xA; *&#xA; * @see javax.imageio.ImageReader#getImageMetadata&#xA; * @see javax.imageio.ImageReader#getStreamMetadata&#xA; * @see javax.imageio.ImageReader#readAll&#xA; * @see javax.imageio.ImageWriter#getDefaultStreamMetadata&#xA; * @see javax.imageio.ImageWriter#getDefaultImageMetadata&#xA; * @see javax.imageio.ImageWriter#write&#xA; * @see javax.imageio.ImageWriter#convertImageMetadata&#xA; * @see javax.imageio.ImageWriter#convertStreamMetadata&#xA; * @see javax.imageio.IIOImage&#xA; * @see javax.imageio.ImageTranscoder&#xA; *&#xA; * @version 0.5&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
