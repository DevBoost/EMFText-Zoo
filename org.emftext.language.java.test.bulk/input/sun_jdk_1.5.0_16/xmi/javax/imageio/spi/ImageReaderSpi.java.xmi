<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ImageReaderSpi.java">
  <comments>/*&#xA; * @(#)ImageReaderSpi.java&#x9;1.41 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>imageio</namespaces>
  <namespaces>spi</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>imageio</namespaces>
    <classifier xsi:type="classifiers:Class" href="../ImageReader.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>imageio</namespaces>
    <namespaces>stream</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../stream/ImageInputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ImageReaderSpi">
    <members xsi:type="members:Field" name="STANDARD_INPUT_TYPE">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="references:IdentifierReference">
            <next xsi:type="references:ReflectiveClassReference"/>
            <target xsi:type="classifiers:Interface" href="../stream/ImageInputStream.class.xmi#//@classifiers.0"/>
          </initialValues>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A single-element array, initially containing&#xA;     * &lt;code>ImageInputStream.class&lt;/code>, to be returned from&#xA;     * &lt;code>getInputTypes&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="inputTypes">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * An array of &lt;code>Class&lt;/code> objects to be returned from&#xA;     * &lt;code>getInputTypes&lt;/code>, initially &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="writerSpiNames">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * An array of strings to be returned from&#xA;     * &lt;code>getImageWriterSpiNames&lt;/code>, initially&#xA;     * &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="readerClass">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The &lt;code>Class&lt;/code> of the reader, initially&#xA;     * &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="ImageReaderSpi">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructs a blank &lt;code>ImageReaderSpi&lt;/code>.  It is up to&#xA;     * the subclass to initialize instance variables and/or override&#xA;     * method implementations in order to provide working versions of&#xA;     * all methods.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="ImageReaderSpi">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.4"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.5"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.8"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.9"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.10"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.11"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.12"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.13"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.14"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.15"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.16"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.17"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="inputTypes == null!"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.6"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="inputTypes.length == 0!"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.6">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arrayDimensionsBefore/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.6">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.5"/>
              </next>
            </child>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// If length == 0, leave it null</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.7">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                </child>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.7"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.7">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="vendorName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="version">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="names">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="suffixes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="MIMETypes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="readerClassName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inputTypes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="writerSpiNames">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="supportsStandardStreamMetadataFormat">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nativeStreamMetadataFormatName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nativeStreamMetadataFormatClassName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="extraStreamMetadataFormatNames">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="extraStreamMetadataFormatClassNames">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="supportsStandardImageMetadataFormat">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nativeImageMetadataFormatName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nativeImageMetadataFormatClassName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="extraImageMetadataFormatNames">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="extraImageMetadataFormatClassNames">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs an &lt;code>ImageReaderSpi&lt;/code> with a given&#xA;     * set of values.&#xA;     *&#xA;     * @param vendorName the vendor name, as a non-&lt;code>null&lt;/code>&#xA;     * &lt;code>String&lt;/code>.&#xA;     * @param version a version identifier, as a non-&lt;code>null&lt;/code>&#xA;     * &lt;code>String&lt;/code>.&#xA;     * @param names a non-&lt;code>null&lt;/code> array of&#xA;     * &lt;code>String&lt;/code>s indicating the format names.  At least one&#xA;     * entry must be present.&#xA;     * @param suffixes an array of &lt;code>String&lt;/code>s indicating the&#xA;     * common file suffixes.  If no suffixes are defined,&#xA;     * &lt;code>null&lt;/code> should be supplied.  An array of length 0&#xA;     * will be normalized to &lt;code>null&lt;/code>.&#xA;     * @param MIMETypes an array of &lt;code>String&lt;/code>s indicating&#xA;     * the format's MIME types.  If no MIME types are defined,&#xA;     * &lt;code>null&lt;/code> should be supplied.  An array of length 0&#xA;     * will be normalized to &lt;code>null&lt;/code>.&#xA;     * @param readerClassName the fully-qualified name of the&#xA;     * associated &lt;code>ImageReader&lt;/code> class, as a&#xA;     * non-&lt;code>null&lt;/code> &lt;code>String&lt;/code>.&#xA;     * @param inputTypes a non-&lt;code>null&lt;/code> array of&#xA;     * &lt;code>Class&lt;/code> objects of length at least 1 indicating the&#xA;     * legal input types.&#xA;     * @param writerSpiNames an array &lt;code>String&lt;/code>s naming the&#xA;     * classes of all associated &lt;code>ImageWriter&lt;/code>s, or&#xA;     * &lt;code>null&lt;/code>.  An array of length 0 is normalized to&#xA;     * &lt;code>null&lt;/code>.&#xA;     * @param supportsStandardStreamMetadataFormat a&#xA;     * &lt;code>boolean&lt;/code> that indicates whether a stream metadata&#xA;     * object can use trees described by the standard metadata format.&#xA;     * @param nativeStreamMetadataFormatName a&#xA;     * &lt;code>String&lt;/code>, or &lt;code>null&lt;/code>, to be returned from&#xA;     * &lt;code>getNativeStreamMetadataFormatName&lt;/code>.&#xA;     * @param nativeStreamMetadataFormatClassName a&#xA;     * &lt;code>String&lt;/code>, or &lt;code>null&lt;/code>, to be used to instantiate&#xA;     * a metadata format object to be returned from&#xA;     * &lt;code>getNativeStreamMetadataFormat&lt;/code>.&#xA;     * @param extraStreamMetadataFormatNames an array of&#xA;     * &lt;code>String&lt;/code>s, or &lt;code>null&lt;/code>, to be returned from&#xA;     * &lt;code>getExtraStreamMetadataFormatNames&lt;/code>.  An array of length&#xA;     * 0 is normalized to &lt;code>null&lt;/code>.&#xA;     * @param extraStreamMetadataFormatClassNames an array of&#xA;     * &lt;code>String&lt;/code>s, or &lt;code>null&lt;/code>, to be used to instantiate&#xA;     * a metadata format object to be returned from&#xA;     * &lt;code>getStreamMetadataFormat&lt;/code>.  An array of length&#xA;     * 0 is normalized to &lt;code>null&lt;/code>.&#xA;     * @param supportsStandardImageMetadataFormat a&#xA;     * &lt;code>boolean&lt;/code> that indicates whether an image metadata&#xA;     * object can use trees described by the standard metadata format.&#xA;     * @param nativeImageMetadataFormatName a&#xA;     * &lt;code>String&lt;/code>, or &lt;code>null&lt;/code>, to be returned from&#xA;     * &lt;code>getNativeImageMetadataFormatName&lt;/code>. &#xA;     * @param nativeImageMetadataFormatClassName a&#xA;     * &lt;code>String&lt;/code>, or &lt;code>null&lt;/code>, to be used to instantiate&#xA;     * a metadata format object to be returned from&#xA;     * &lt;code>getNativeImageMetadataFormat&lt;/code>.&#xA;     * @param extraImageMetadataFormatNames an array of&#xA;     * &lt;code>String&lt;/code>s to be returned from&#xA;     * &lt;code>getExtraImageMetadataFormatNames&lt;/code>.  An array of length 0&#xA;     * is normalized to &lt;code>null&lt;/code>.&#xA;     * @param extraImageMetadataFormatClassNames an array of&#xA;     * &lt;code>String&lt;/code>s, or &lt;code>null&lt;/code>, to be used to instantiate&#xA;     * a metadata format object to be returned from&#xA;     * &lt;code>getImageMetadataFormat&lt;/code>.  An array of length&#xA;     * 0 is normalized to &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @exception IllegalArgumentException if &lt;code>vendorName&lt;/code>&#xA;     * is &lt;code>null&lt;/code>.&#xA;     * @exception IllegalArgumentException if &lt;code>version&lt;/code>&#xA;     * is &lt;code>null&lt;/code>.&#xA;     * @exception IllegalArgumentException if &lt;code>names&lt;/code>&#xA;     * is &lt;code>null&lt;/code> or has length 0.&#xA;     * @exception IllegalArgumentException if &lt;code>readerClassName&lt;/code>&#xA;     * is &lt;code>null&lt;/code>.&#xA;     * @exception IllegalArgumentException if &lt;code>inputTypes&lt;/code>&#xA;     * is &lt;code>null&lt;/code> or has length 0.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getInputTypes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of &lt;code>Class&lt;/code> objects indicating what&#xA;     * types of objects may be used as arguments to the reader's&#xA;     * &lt;code>setInput&lt;/code> method.&#xA;     *&#xA;     * &lt;p> For most readers, which only accept input from an&#xA;     * &lt;code>ImageInputStream&lt;/code>, a single-element array&#xA;     * containing &lt;code>ImageInputStream.class&lt;/code> should be&#xA;     * returned.&#xA;     * &#xA;     * @return a non-&lt;code>null&lt;/code> array of&#xA;     * &lt;code>Class&lt;/code>objects of length at least 1.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.5"/>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="canDecodeInput">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="source">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> if the supplied source object appears&#xA;     * to be of the format supported by this reader.  Returning&#xA;     * &lt;code>true&lt;/code> from this method does not guarantee that&#xA;     * reading will succeed, only that there appears to be a&#xA;     * reasonable chance of success based on a brief inspection of the&#xA;     * stream contents.  If the source is an&#xA;     * &lt;code>ImageInputStream&lt;/code>, implementations will commonly&#xA;     * check the first several bytes of the stream for a &quot;magic&#xA;     * number&quot; associated with the format.  Once actual reading has&#xA;     * commenced, the reader may still indicate failure at any time&#xA;     * prior to the completion of decoding.&#xA;     *&#xA;     * &lt;p> It is important that the state of the object not be&#xA;     * disturbed in order that other &lt;code>ImageReaderSpi&lt;/code>s can&#xA;     * properly determine whether they are able to decode the object.&#xA;     * In particular, if the source is an&#xA;     * &lt;code>ImageInputStream&lt;/code>, a&#xA;     * &lt;code>mark&lt;/code>/&lt;code>reset&lt;/code> pair should be used to&#xA;     * preserve the stream position.&#xA;     *&#xA;     * &lt;p> Formats such as &quot;raw,&quot; which can potentially attempt&#xA;     * to read nearly any stream, should return &lt;code>false&lt;/code>&#xA;     * in order to avoid being invoked in preference to a closer&#xA;     * match.&#xA;     *&#xA;     * &lt;p> If &lt;code>source&lt;/code> is not an instance of one of the&#xA;     * classes returned by &lt;code>getInputTypes&lt;/code>, the method&#xA;     * should simply return &lt;code>false&lt;/code>.&#xA;     *&#xA;     * @param source the object (typically an&#xA;     * &lt;code>ImageInputStream&lt;/code>) to be decoded.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if it is likely that this stream can&#xA;     * be decoded.&#xA;     *&#xA;     * @exception IllegalArgumentException if &lt;code>source&lt;/code> is&#xA;     * &lt;code>null&lt;/code>.&#xA;     * @exception IOException if an I/O error occurs while reading the&#xA;     * stream.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="createReaderInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../ImageReader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an instance of the &lt;code>ImageReader&lt;/code>&#xA;     * implementation associated with this service provider.&#xA;     * The returned object will initially be in an initial state&#xA;     * as if its &lt;code>reset&lt;/code> method had been called.&#xA;     *&#xA;     * &lt;p> The default implementation simply returns&#xA;     * &lt;code>createReaderInstance(null)&lt;/code>.&#xA;     *&#xA;     * @return an &lt;code>ImageReader&lt;/code> instance.&#xA;     *&#xA;     * @exception IOException if an error occurs during loading, &#xA;     * or initialization of the reader class, or during instantiation&#xA;     * or initialization of the reader object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.9">
          <arguments xsi:type="literals:NullLiteral"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createReaderInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../ImageReader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="extension">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an instance of the &lt;code>ImageReader&lt;/code>&#xA;     * implementation associated with this service provider.&#xA;     * The returned object will initially be in an initial state&#xA;     * as if its &lt;code>reset&lt;/code> method had been called.&#xA;     *&#xA;     * &lt;p> An &lt;code>Object&lt;/code> may be supplied to the plug-in at&#xA;     * construction time.  The nature of the object is entirely&#xA;     * plug-in specific.&#xA;     *&#xA;     * &lt;p> Typically, a plug-in will implement this method using code&#xA;     * such as &lt;code>return new MyImageReader(this)&lt;/code>.&#xA;     *&#xA;     * @param extension a plug-in specific extension object, which may&#xA;     * be &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @return an &lt;code>ImageReader&lt;/code> instance.&#xA;     *&#xA;     * @exception IOException if the attempt to instantiate&#xA;     * the reader fails.&#xA;     * @exception IllegalArgumentException if the&#xA;     * &lt;code>ImageReader&lt;/code>'s contructor throws an&#xA;     * &lt;code>IllegalArgumentException&lt;/code> to indicate that the&#xA;     * extension object is unsuitable.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="isOwnReader">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="reader">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ImageReader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> if the &lt;code>ImageReader&lt;/code> object&#xA;     * passed in is an instance of the &lt;code>ImageReader&lt;/code> &#xA;     * associated with this service provider.&#xA;     *&#xA;     * &lt;p> The default implementation compares the fully-qualified&#xA;     * class name of the &lt;code>reader&lt;/code> argument with the class&#xA;     * name passed into the constructor.  This method may be overridden&#xA;     * if more sophisticated checking is required.&#xA;     *&#xA;     * @param reader an &lt;code>ImageReader&lt;/code> instance.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if &lt;code>reader&lt;/code> is recognized.&#xA;     *&#xA;     * @exception IllegalArgumentException if &lt;code>reader&lt;/code> is&#xA;     * &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="reader == null!"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="name">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.44"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ImageReaderWriterSpi.class.xmi#//@classifiers.0/@members.3"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getImageWriterSpiNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of &lt;code>String&lt;/code>s containing the fully&#xA;     * qualified names of all the &lt;code>ImageWriterSpi&lt;/code> classes&#xA;     * that can understand the internal metadata representation used&#xA;     * by the &lt;code>ImageReader&lt;/code> associated with this service&#xA;     * provider, or &lt;code>null&lt;/code> if there are no such&#xA;     * &lt;code>ImageWriter&lt;/code>s specified.  If a&#xA;     * non-&lt;code>null&lt;/code> value is returned, it must have non-zero&#xA;     * length.&#xA;     *&#xA;     * &lt;p> The first item in the array must be the name of the service&#xA;     * provider for the &quot;preferred&quot; writer, as it will be used to&#xA;     * instantiate the &lt;code>ImageWriter&lt;/code> returned by&#xA;     * &lt;code>ImageIO.getImageWriter(ImageReader)&lt;/code>.&#xA;     *&#xA;     * &lt;p> This mechanism may be used to obtain&#xA;     * &lt;code>ImageWriters&lt;/code> that will understand the internal&#xA;     * structure of non-pixel meta-data (see&#xA;     * &lt;code>IIOTreeInfo&lt;/code>) generated by an&#xA;     * &lt;code>ImageReader&lt;/code>.  By obtaining this data from the&#xA;     * &lt;code>ImageReader&lt;/code> and passing it on to one of the&#xA;     * &lt;code>ImageWriters&lt;/code> obtained with this method, a client&#xA;     * program can read an image, modify it in some way, and write it&#xA;     * back out while preserving all meta-data, without having to&#xA;     * understand anything about the internal structure of the&#xA;     * meta-data, or even about the image format.&#xA;     *&#xA;     * @return an array of &lt;code>String&lt;/code>s of length at least 1&#xA;     * containing names of &lt;code>ImageWriterSpi&lt;/code>, or&#xA;     * &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @see javax.imageio.ImageIO#getImageWriter(ImageReader)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <children xsi:type="literals:NullLiteral"/>
          </child>
          <expressionIf xsi:type="literals:NullLiteral"/>
          <expressionElse xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arrayDimensionsBefore/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.5"/>
              </next>
            </child>
          </expressionElse>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The service provider interface (SPI) for &lt;code>ImageReader&lt;/code>s.&#xA; * For more information on service provider classes, see the class comment&#xA; * for the &lt;code>IIORegistry&lt;/code> class.&#xA; * &#xA; * &lt;p> Each &lt;code>ImageReaderSpi&lt;/code> provides several types of information&#xA; * about the &lt;code>ImageReader&lt;/code> class with which it is associated.&#xA; *&#xA; * &lt;p> The name of the vendor who defined the SPI class and a&#xA; * brief description of the class are available via the&#xA; * &lt;code>getVendorName&lt;/code>, &lt;code>getDescription&lt;/code>,&#xA; * and &lt;code>getVersion&lt;/code> methods.&#xA; * These methods may be internationalized to provide locale-specific&#xA; * output.  These methods are intended mainly to provide short,&#xA; * human-readable information that might be used to organize a pop-up&#xA; * menu or other list.&#xA; *&#xA; * &lt;p> Lists of format names, file suffixes, and MIME types associated&#xA; * with the service may be obtained by means of the&#xA; * &lt;code>getFormatNames&lt;/code>, &lt;code>getFileSuffixes&lt;/code>, and&#xA; * &lt;code>getMIMETypes&lt;/code> methods.  These methods may be used to&#xA; * identify candidate &lt;code>ImageReader&lt;/code>s for decoding a&#xA; * particular file or stream based on manual format selection, file&#xA; * naming, or MIME associations (for example, when accessing a file&#xA; * over HTTP or as an email attachment).&#xA; *&#xA; * &lt;p> A more reliable way to determine which &lt;code>ImageReader&lt;/code>s&#xA; * are likely to be able to parse a particular data stream is provided&#xA; * by the &lt;code>canDecodeInput&lt;/code> method.  This methods allows the&#xA; * service provider to inspect the actual stream contents.&#xA; *&#xA; * &lt;p> Finally, an instance of the &lt;code>ImageReader&lt;/code> class&#xA; * associated with this service provider may be obtained by calling&#xA; * the &lt;code>createReaderInstance&lt;/code> method.  Any heavyweight&#xA; * initialization, such as the loading of native libraries or creation&#xA; * of large tables, should be deferred at least until the first&#xA; * invocation of this method.&#xA; *&#xA; * @see IIORegistry&#xA; * @see javax.imageio.ImageReader&#xA; *&#xA; * @version 0.5&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="ImageReaderWriterSpi.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
