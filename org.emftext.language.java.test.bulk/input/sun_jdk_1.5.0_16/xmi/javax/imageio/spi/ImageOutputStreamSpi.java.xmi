<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ImageOutputStreamSpi.java">
  <comments>/*&#xA; * @(#)ImageOutputStreamSpi.java&#x9;1.19 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>imageio</namespaces>
  <namespaces>spi</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/io/File.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>imageio</namespaces>
    <namespaces>stream</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../stream/ImageOutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ImageOutputStreamSpi">
    <members xsi:type="members:Field" name="outputClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * A &lt;code>Class&lt;/code> object indicating the legal object type&#xA;     * for use by the &lt;code>createInputStreamInstance&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="ImageOutputStreamSpi">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructs a blank &lt;code>ImageOutputStreamSpi&lt;/code>.  It is up&#xA;     * to the subclass to initialize instance variables and/or&#xA;     * override method implementations in order to provide working&#xA;     * versions of all methods.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="ImageOutputStreamSpi">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.2"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="vendorName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="version">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="outputClass">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs an &lt;code>ImageOutputStreamSpi&lt;/code> with a given&#xA;     * set of values.&#xA;     *&#xA;     * @param vendorName the vendor name.&#xA;     * @param version a version identifier.&#xA;     * @param outputClass a &lt;code>Class&lt;/code> object indicating the&#xA;     * legal object type for use by the&#xA;     * &lt;code>createOutputStreamInstance&lt;/code> method.&#xA;     *&#xA;     * @exception IllegalArgumentException if &lt;code>vendorName&lt;/code>&#xA;     * is &lt;code>null&lt;/code>.&#xA;     * @exception IllegalArgumentException if &lt;code>version&lt;/code>&#xA;     * is &lt;code>null&lt;/code>. &#xA;    */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getOutputClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>Class&lt;/code> object representing the class or&#xA;     * interface type that must be implemented by an output&#xA;     * destination in order to be &quot;wrapped&quot; in an&#xA;     * &lt;code>ImageOutputStream&lt;/code> via the&#xA;     * &lt;code>createOutputStreamInstance&lt;/code> method.&#xA;     *&#xA;     * &lt;p> Typical return values might include&#xA;     * &lt;code>OutputStream.class&lt;/code> or &lt;code>File.class&lt;/code>, but&#xA;     * any class may be used.&#xA;     *&#xA;     * @return a &lt;code>Class&lt;/code> variable.&#xA;     *&#xA;     * @see #createOutputStreamInstance(Object, boolean, File)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="canUseCacheFile">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> if the &lt;code>ImageOutputStream&lt;/code>&#xA;     * implementation associated with this service provider can&#xA;     * optionally make use of a cache &lt;code>File&lt;/code> for improved&#xA;     * performance and/or memory footrprint.  If &lt;code>false&lt;/code>,&#xA;     * the value of the &lt;code>cacheFile&lt;/code> argument to&#xA;     * &lt;code>createOutputStreamInstance&lt;/code> will be ignored.&#xA;     *&#xA;     * &lt;p> The default implementation returns &lt;code>false&lt;/code>.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if a cache file can be used by the&#xA;     * output streams created by this service provider.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="needsCacheFile">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> if the &lt;code>ImageOutputStream&lt;/code>&#xA;     * implementation associated with this service provider requires&#xA;     * the use of a cache &lt;code>File&lt;/code>.&#xA;     *&#xA;     * &lt;p> The default implementation returns &lt;code>false&lt;/code>.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if a cache file is needed by the&#xA;     * output streams created by this service provider.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createOutputStreamInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../stream/ImageOutputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="output">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="useCache">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cacheDir">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/io/File.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an instance of the &lt;code>ImageOutputStream&lt;/code>&#xA;     * implementation associated with this service provider.  If the&#xA;     * use of a cache file is optional, the &lt;code>useCache&lt;/code>&#xA;     * parameter will be consulted.  Where a cache is required, or &#xA;     * not applicable, the value of &lt;code>useCache&lt;/code> will be ignored.&#xA;     *&#xA;     * @param output an object of the class type returned by&#xA;     * &lt;code>getOutputClass&lt;/code>.&#xA;     * @param useCache a &lt;code>boolean&lt;/code> indicating whether a&#xA;     * cache file should be used, in cases where it is optional.&#xA;     * @param cacheDir a &lt;code>File&lt;/code> indicating where the &#xA;     * cache file should be created, or &lt;code>null&lt;/code> to use the&#xA;     * system directory.&#xA;     *&#xA;     * @return an &lt;code>ImageOutputStream&lt;/code> instance.&#xA;     *&#xA;     * @exception IllegalArgumentException if &lt;code>output&lt;/code> is&#xA;     * not an instance of the correct class or is &lt;code>null&lt;/code>.&#xA;     * @exception IllegalArgumentException if a cache file is needed,&#xA;     * but &lt;code>cacheDir&lt;/code> is non-&lt;code>null&lt;/code> and is not a&#xA;     * directory.&#xA;     * @exception IOException if a cache file is needed but cannot be&#xA;     * created.&#xA;     *&#xA;     * @see #getOutputClass&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="createOutputStreamInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../stream/ImageOutputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="output">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an instance of the &lt;code>ImageOutputStream&lt;/code>&#xA;     * implementation associated with this service provider.  A cache&#xA;     * file will be created in the system-dependent default&#xA;     * temporary-file directory, if needed.&#xA;     *&#xA;     * @param output an object of the class type returned by&#xA;     * &lt;code>getOutputClass&lt;/code>.&#xA;     *&#xA;     * @return an &lt;code>ImageOutputStream&lt;/code> instance.&#xA;     *&#xA;     * @exception IllegalArgumentException if &lt;code>output&lt;/code> is&#xA;     * not an instance of the correct class or is &lt;code>null&lt;/code>.&#xA;     * @exception IOException if a cache file is needed but cannot be&#xA;     * created.&#xA;     *&#xA;     * @see #getOutputClass()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          <arguments xsi:type="literals:NullLiteral"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The service provider interface (SPI) for&#xA; * &lt;code>ImageOutputStream&lt;/code>s.  For more information on service&#xA; * provider interfaces, see the class comment for the&#xA; * &lt;code>IIORegistry&lt;/code> class.&#xA; *&#xA; * &lt;p> This interface allows arbitrary objects to be &quot;wrapped&quot; by&#xA; * instances of &lt;code>ImageOutputStream&lt;/code>.  For example, a&#xA; * particular &lt;code>ImageOutputStreamSpi&lt;/code> might allow a generic&#xA; * &lt;code>OutputStream&lt;/code> to be used as a destination; another&#xA; * might output to a &lt;code>File&lt;/code> or to a device such as a serial&#xA; * port.&#xA; *&#xA; * &lt;p> By treating the creation of &lt;code>ImageOutputStream&lt;/code>s as&#xA; * a pluggable service, it becomes possible to handle future output&#xA; * destinations without changing the API.  Also, high-performance&#xA; * implementations of &lt;code>ImageOutputStream&lt;/code> (for example,&#xA; * native implementations for a particular platform) can be installed&#xA; * and used transparently by applications.&#xA; *&#xA; * @see IIORegistry&#xA; * @see javax.imageio.stream.ImageOutputStream&#xA; *&#xA; * @version 0.5&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="IIOServiceProvider.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
