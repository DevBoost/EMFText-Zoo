<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="XPathExpression.java">
  <comments>// $Id: XPathExpression.java,v 1.10.16.1 2004/07/01 17:49:23 ndw Exp $</comments>
  <comments>/*&#xA; * @(#)XPathExpression.java&#x9;1.6 04/07/26&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>xpath</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../org/xml/sax/InputSource.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>namespace</namespaces>
    <classifier xsi:type="classifiers:Class" href="../namespace/QName.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="XPathExpression">
    <members xsi:type="members:InterfaceMethod" name="evaluate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="item">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="returnType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../namespace/QName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XPathExpressionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Evaluate the compiled XPath expression in the specified context and return the result as the specified type.&lt;/p>&#xA;     *&#xA;     * &lt;p>See &lt;a href=&quot;#XPathExpression-evaluation&quot;>Evaluation of XPath Expressions&lt;/a> for context item evaluation,&#xA;     * variable, function and QName resolution and return type conversion.&lt;/p>&#xA;     * &#xA;     * &lt;p>If &lt;code>returnType&lt;/code> is not one of the types defined in {@link XPathConstants},&#xA;     * then an &lt;code>IllegalArgumentException&lt;/code> is thrown.&lt;/p>&#xA;     * &#xA;     * &lt;p>If a &lt;code>null&lt;/code> value is provided for &#xA;     * &lt;code>item&lt;/code>, an empty document will be used for the&#xA;     * context.&#xA;     * If &lt;code>returnType&lt;/code> is &lt;code>null&lt;/code>, then a &lt;code>NullPointerException&lt;/code> is thrown.&lt;/p> &#xA;     *&#xA;     * @param item The starting context (node or node list, for example).&#xA;     * @param returnType The desired return type.&#xA;     * &#xA;     * @return The &lt;code>Object&lt;/code> that is the result of evaluating the expression and converting the result to&#xA;     *   &lt;code>returnType&lt;/code>.&#xA;     * &#xA;     * @throws XPathExpressionException If the expression cannot be evaluated.&#xA;     * @throws IllegalArgumentException If &lt;code>returnType&lt;/code> is not one of the types defined in {@link XPathConstants}.&#xA;     * @throws NullPointerException If  &lt;code>returnType&lt;/code> is &lt;code>null&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="evaluate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="item">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XPathExpressionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Evaluate the compiled XPath expression in the specified context and return the result as a &lt;code>String&lt;/code>.&lt;/p>&#xA;     *&#xA;     * &lt;p>This method calls {@link #evaluate(Object item, QName returnType)} with a &lt;code>returnType&lt;/code> of&#xA;     * {@link XPathConstants#STRING}.&lt;/p>&#xA;     * &#xA;     * &lt;p>See &lt;a href=&quot;#XPathExpression-evaluation&quot;>Evaluation of XPath Expressions&lt;/a> for context item evaluation,&#xA;     * variable, function and QName resolution and return type conversion.&lt;/p>&#xA;     * &#xA;     * &lt;p>If a &lt;code>null&lt;/code> value is provided for &#xA;     * &lt;code>item&lt;/code>, an empty document will be used for the&#xA;     * context.&#xA;     *&#xA;     * @param item The starting context (node or node list, for example).&#xA;     * &#xA;     * @return The &lt;code>String&lt;/code> that is the result of evaluating the expression and converting the result to a &#xA;     *   &lt;code>String&lt;/code>.&#xA;     * &#xA;     * @throws XPathExpressionException If the expression cannot be evaluated.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="evaluate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="source">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../org/xml/sax/InputSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="returnType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../namespace/QName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XPathExpressionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Evaluate the compiled XPath expression in the context of the specified &lt;code>InputSource&lt;/code> and return the result as the&#xA;     * specified type.&lt;/p>&#xA;     *&#xA;     * &lt;p>This method builds a data model for the {@link InputSource} and calls&#xA;     * {@link #evaluate(Object item, QName returnType)} on the resulting document object.&lt;/p>&#xA;     * &#xA;     * &lt;p>See &lt;a href=&quot;#XPathExpression-evaluation&quot;>Evaluation of XPath Expressions&lt;/a> for context item evaluation,&#xA;     * variable, function and QName resolution and return type conversion.&lt;/p>&#xA;     * &#xA;     * &lt;p>If &lt;code>returnType&lt;/code> is not one of the types defined in {@link XPathConstants},&#xA;     * then an &lt;code>IllegalArgumentException&lt;/code> is thrown.&lt;/p>&#xA;     * &#xA;     * &lt;p>If &lt;code>source&lt;/code> or &lt;code>returnType&lt;/code> is &lt;code>null&lt;/code>,&#xA;     * then a &lt;code>NullPointerException&lt;/code> is thrown.&lt;/p> &#xA;     *&#xA;     * @param source The &lt;code>InputSource&lt;/code> of the document to evaluate over.&#xA;     * @param returnType The desired return type.&#xA;     * &#xA;     * @return The &lt;code>Object&lt;/code> that is the result of evaluating the expression and converting the result to&#xA;     *   &lt;code>returnType&lt;/code>.&#xA;     * &#xA;     * @throws XPathExpressionException If the expression cannot be evaluated.&#xA;     * @throws IllegalArgumentException If &lt;code>returnType&lt;/code> is not one of the types defined in {@link XPathConstants}.&#xA;     * @throws NullPointerException If  &lt;code>source&lt;/code> or &lt;code>returnType&lt;/code> is &lt;code>null&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="evaluate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="source">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../org/xml/sax/InputSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XPathExpressionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Evaluate the compiled XPath expression in the context of the specified &lt;code>InputSource&lt;/code> and return the result as a&#xA;     * &lt;code>String&lt;/code>.&lt;/p>&#xA;     *&#xA;     * &lt;p>This method calls {@link #evaluate(InputSource source, QName returnType)} with a &lt;code>returnType&lt;/code> of&#xA;     * {@link XPathConstants#STRING}.&lt;/p>&#xA;     * &#xA;     * &lt;p>See &lt;a href=&quot;#XPathExpression-evaluation&quot;>Evaluation of XPath Expressions&lt;/a> for context item evaluation,&#xA;     * variable, function and QName resolution and return type conversion.&lt;/p>&#xA;     * &#xA;     * &lt;p>If &lt;code>source&lt;/code> is &lt;code>null&lt;/code>, then a &lt;code>NullPointerException&lt;/code> is thrown.&lt;/p> &#xA;     *&#xA;     * @param source The &lt;code>InputSource&lt;/code> of the document to evaluate over.&#xA;     * &#xA;     * @return The &lt;code>String&lt;/code> that is the result of evaluating the expression and converting the result to a &#xA;     *   &lt;code>String&lt;/code>.&#xA;     * &#xA;     * @throws XPathExpressionException If the expression cannot be evaluated.&#xA;     * @throws NullPointerException If  &lt;code>source&lt;/code> is &lt;code>null&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>&lt;code>XPathExpression&lt;/code> provides access to compiled XPath expressions.&lt;/p>&#xA; *&#xA; * &lt;table id=&quot;XPathExpression-evaluation&quot; border=&quot;1&quot; cellpadding=&quot;2&quot;>&#xA; *   &lt;thead>&#xA; *     &lt;tr>&#xA; *       &lt;th colspan=&quot;2&quot;>Evaluation of XPath Expressions.&lt;/th>&#xA; *     &lt;/tr>&#xA; *   &lt;/thead>&#xA; *   &lt;tbody>&#xA; *     &lt;tr>&#xA; *       &lt;td>context&lt;/td>&#xA; *       &lt;td>&#xA; *         If a request is made to evaluate the expression in the absence&#xA; * of a context item, an empty document node will be used for the context.&#xA; * For the purposes of evaluating XPath expressions, a DocumentFragment&#xA; * is treated like a Document node.&#xA; *      &lt;/td>&#xA; *    &lt;/tr>&#xA; *    &lt;tr>&#xA; *      &lt;td>variables&lt;/td>&#xA; *      &lt;td>&#xA; *        If the expression contains a variable reference, its value will be found through the {@link XPathVariableResolver}.&#xA; *        An {@link XPathExpressionException} is raised if the variable resolver is undefined or&#xA; *        the resolver returns &lt;code>null&lt;/code> for the variable.&#xA; *        The value of a variable must be immutable through the course of any single evaluation.&lt;/p>&#xA; *      &lt;/td>&#xA; *    &lt;/tr>&#xA; *    &lt;tr>&#xA; *      &lt;td>functions&lt;/td>&#xA; *      &lt;td>&#xA; *        If the expression contains a function reference, the function will be found through the {@link XPathFunctionResolver}.&#xA; *        An {@link XPathExpressionException} is raised if the function resolver is undefined or&#xA; *        the function resolver returns &lt;code>null&lt;/code> for the function.&lt;/p>&#xA; *      &lt;/td>&#xA; *    &lt;/tr>&#xA; *    &lt;tr>&#xA; *      &lt;td>QNames&lt;/td>&#xA; *      &lt;td>&#xA; *        QNames in the expression are resolved against the XPath namespace context.&#xA; *      &lt;/td>&#xA; *    &lt;/tr>&#xA; *    &lt;tr>&#xA; *      &lt;td>result&lt;/td>&#xA; *      &lt;td>&#xA; *        This result of evaluating an expression is converted to an instance of the desired return type.&#xA; *        Valid return types are defined in {@link XPathConstants}.&#xA; *        Conversion to the return type follows XPath conversion rules.&lt;/p>&#xA; *      &lt;/td>&#xA; *    &lt;/tr>&#xA; * &lt;/table>&#xA; *&#xA; * @author  &lt;a href=&quot;mailto:Norman.Walsh@Sun.com&quot;>Norman Walsh&lt;/a>&#xA; * @author  &lt;a href=&quot;mailto:Jeff.Suttor@Sun.com&quot;>Jeff Suttor&lt;/a>&#xA; * @version $Revision: 1.10.16.1 $, $Date: 2004/07/01 17:49:23 $&#xA; * @see &lt;a href=&quot;http://www.w3.org/TR/xpath#section-Expressions&quot;>XML Path Language (XPath) Version 1.0, Expressions&lt;/a>&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
