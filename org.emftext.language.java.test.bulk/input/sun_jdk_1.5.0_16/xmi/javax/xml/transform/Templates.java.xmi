<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Templates.java">
  <comments>/*&#xA; * @(#)Templates.java&#x9;1.15 04/07/26&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>transform</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Properties.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Templates">
    <members xsi:type="members:InterfaceMethod" name="newTransformer">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Create a new transformation context for this Templates object.&#xA;     *&#xA;     * @return A valid non-null instance of a Transformer.&#xA;     *&#xA;     * @throws TransformerConfigurationException if a Transformer can not be created.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="Transformer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TransformerConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getOutputProperties">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Get the properties corresponding to the effective xsl:output element.&#xA;     * The object returned will&#xA;     * be a clone of the internal values. Accordingly, it can be mutated&#xA;     * without mutating the Templates object, and then handed in to&#xA;     * {@link javax.xml.transform.Transformer#setOutputProperties}.&#xA;     *&#xA;     * &lt;p>The properties returned should contain properties set by the stylesheet,&#xA;     * and these properties are &quot;defaulted&quot; by default properties specified by&#xA;     * &lt;a href=&quot;http://www.w3.org/TR/xslt#output&quot;>section 16 of the&#xA;     * XSL Transformations (XSLT) W3C Recommendation&lt;/a>.  The properties that&#xA;     * were specifically set by the stylesheet should be in the base&#xA;     * Properties list, while the XSLT default properties that were not&#xA;     * specifically set should be in the &quot;default&quot; Properties list.  Thus,&#xA;     * getOutputProperties().getProperty(String key) will obtain any&#xA;     * property in that was set by the stylesheet, &lt;em>or&lt;/em> the default&#xA;     * properties, while&#xA;     * getOutputProperties().get(String key) will only retrieve properties&#xA;     * that were explicitly set in the stylesheet.&lt;/p>&#xA;     *&#xA;     * &lt;p>For XSLT,&#xA;     * &lt;a href=&quot;http://www.w3.org/TR/xslt#attribute-value-templates&quot;>Attribute&#xA;     * Value Templates&lt;/a> attribute values will&#xA;     * be returned unexpanded (since there is no context at this point).  The&#xA;     * namespace prefixes inside Attribute Value Templates will be unexpanded,&#xA;     * so that they remain valid XPath values.&lt;/p>&#xA;     *&#xA;     * @return A Properties object, never null.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/util/Properties.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An object that implements this interface is the runtime representation of processed&#xA; * transformation instructions.&#xA; *&#xA; * &lt;p>Templates must be threadsafe for a given instance&#xA; * over multiple threads running concurrently, and may&#xA; * be used multiple times in a given session.&lt;/p>&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
