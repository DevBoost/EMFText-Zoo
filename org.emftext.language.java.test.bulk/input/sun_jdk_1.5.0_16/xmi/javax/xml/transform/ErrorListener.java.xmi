<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ErrorListener.java">
  <comments>// $Id: ErrorListener.java,v 1.2 2003/09/19 10:10:13 jsuttor Exp $</comments>
  <comments>/*&#xA; * @(#)ErrorListener.java&#x9;1.12 04/07/26&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>transform</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="ErrorListener">
    <members xsi:type="members:InterfaceMethod" name="warning">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exception">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TransformerException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TransformerException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of a warning.&#xA;     *&#xA;     * &lt;p>{@link javax.xml.transform.Transformer} can use this method to report&#xA;     * conditions that are not errors or fatal errors.  The default behaviour&#xA;     * is to take no action.&lt;/p>&#xA;     *&#xA;     * &lt;p>After invoking this method, the Transformer must continue with&#xA;     * the transformation. It should still be possible for the&#xA;     * application to process the document through to the end.&lt;/p>&#xA;     *&#xA;     * @param exception The warning information encapsulated in a&#xA;     *                  transformer exception.&#xA;     *&#xA;     * @throws javax.xml.transform.TransformerException if the application&#xA;     * chooses to discontinue the transformation.&#xA;     *&#xA;     * @see javax.xml.transform.TransformerException&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="error">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exception">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TransformerException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TransformerException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of a recoverable error.&#xA;     *&#xA;     * &lt;p>The transformer must continue to try and provide normal transformation&#xA;     * after invoking this method.  It should still be possible for the&#xA;     * application to process the document through to the end if no other errors&#xA;     * are encountered.&lt;/p>&#xA;     *&#xA;     * @param exception The error information encapsulated in a&#xA;     *                  transformer exception.&#xA;     *&#xA;     * @throws javax.xml.transform.TransformerException if the application&#xA;     * chooses to discontinue the transformation.&#xA;     *&#xA;     * @see javax.xml.transform.TransformerException&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="fatalError">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exception">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TransformerException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TransformerException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Receive notification of a non-recoverable error.&lt;/p>&#xA;     *&#xA;     * &lt;p>The &lt;code>Transformer&lt;/code> must continue to try and provide normal&#xA;     * transformation after invoking this method.  It should still be possible for the&#xA;     * application to process the document through to the end if no other errors&#xA;     * are encountered, but there is no guarantee that the output will be&#xA;     * useable.&lt;/p>&#xA;     *&#xA;     * @param exception The error information encapsulated in a&#xA;     *    &lt;code>TransformerException&lt;/code>.&#xA;     *&#xA;     * @throws javax.xml.transform.TransformerException if the application&#xA;     * chooses to discontinue the transformation.&#xA;     *&#xA;     * @see javax.xml.transform.TransformerException&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>To provide customized error handling, implement this interface and&#xA; * use the &lt;code>setErrorListener&lt;/code> method to register an instance of the&#xA; * implmentation with the {@link javax.xml.transform.Transformer}.  The&#xA; * &lt;code>Transformer&lt;/code> then reports all errors and warnings through this&#xA; * interface.&lt;/p>&#xA; *&#xA; * &lt;p>If an application does &lt;em>not&lt;/em> register its own custom&#xA; * &lt;code>ErrorListener&lt;/code>, the default &lt;code>ErrorListener&lt;/code>&#xA; * is used which reports all warnings and errors to &lt;code>System.err&lt;/code>&#xA; * and does not throw any &lt;code>Exception&lt;/code>s.&#xA; * Applications are &lt;em>strongly&lt;/em> encouraged to register and use&#xA; * &lt;code>ErrorListener&lt;/code>s that insure proper behavior for warnings and&#xA; * errors.&lt;/p>&#xA; *&#xA; * &lt;p>For transformation errors, a &lt;code>Transformer&lt;/code> must use this&#xA; * interface instead of throwing an &lt;code>Exception&lt;/code>: it is up to the&#xA; * application to decide whether to throw an &lt;code>Exception&lt;/code> for&#xA; * different types of errors and warnings.  Note however that the&#xA; * &lt;code>Transformer&lt;/code> is not required to continue with the transformation&#xA; * after a call to {@link #fatalError(TransformerException exception)}.&lt;/p>&#xA; *&#xA; * &lt;p>&lt;code>Transformer&lt;/code>s may use this mechanism to report XML parsing&#xA; * errors as well as transformation errors.&lt;/p>&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
