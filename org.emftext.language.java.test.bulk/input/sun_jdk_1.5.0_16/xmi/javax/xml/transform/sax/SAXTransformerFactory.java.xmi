<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="SAXTransformerFactory.java">
  <comments>// $Id: SAXTransformerFactory.java,v 1.2.22.1 2004/07/13 22:27:50 jsuttor Exp $</comments>
  <comments>/*&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <comments>/*&#xA; * @(#)SAXTransformerFactory.java&#x9;1.13 04/07/13&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>transform</namespaces>
  <namespaces>sax</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>transform</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../org/xml/sax/XMLFilter.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="SAXTransformerFactory">
    <members xsi:type="members:Field" name="FEATURE">
      <initialValue xsi:type="references:StringReference" value="http://javax.xml.transform.sax.SAXTransformerFactory/feature"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** If {@link javax.xml.transform.TransformerFactory#getFeature}&#xA;     * returns true when passed this value as an argument,&#xA;     * the TransformerFactory returned from&#xA;     * {@link javax.xml.transform.TransformerFactory#newInstance} may&#xA;     * be safely cast to a SAXTransformerFactory.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="FEATURE_XMLFILTER">
      <initialValue xsi:type="references:StringReference" value="http://javax.xml.transform.sax.SAXTransformerFactory/feature/xmlfilter"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** If {@link javax.xml.transform.TransformerFactory#getFeature}&#xA;     * returns true when passed this value as an argument,&#xA;     * the {@link #newXMLFilter(Source src)}&#xA;     * and {@link #newXMLFilter(Templates templates)} methods are supported.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="SAXTransformerFactory">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * The default constructor is protected on purpose.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="newTransformerHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="TransformerHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="src">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Source.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../TransformerConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get a TransformerHandler object that can process SAX&#xA;     * ContentHandler events into a Result, based on the transformation&#xA;     * instructions specified by the argument.&#xA;     *&#xA;     * @param src The Source of the transformation instructions.&#xA;     *&#xA;     * @return TransformerHandler ready to transform SAX events.&#xA;     *&#xA;     * @throws TransformerConfigurationException If for some reason the&#xA;     * TransformerHandler can not be created.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="newTransformerHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="TransformerHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="templates">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Templates.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../TransformerConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get a TransformerHandler object that can process SAX&#xA;     * ContentHandler events into a Result, based on the Templates argument.&#xA;     *&#xA;     * @param templates The compiled transformation instructions.&#xA;     *&#xA;     * @return TransformerHandler ready to transform SAX events.&#xA;     *&#xA;     * @throws TransformerConfigurationException If for some reason the&#xA;     * TransformerHandler can not be created.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="newTransformerHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="TransformerHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../TransformerConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get a TransformerHandler object that can process SAX&#xA;     * ContentHandler events into a Result. The transformation&#xA;     * is defined as an identity (or copy) transformation, for example&#xA;     * to copy a series of SAX parse events into a DOM tree.&#xA;     *&#xA;     * @return A non-null reference to a TransformerHandler, that may&#xA;     * be used as a ContentHandler for SAX parse events.&#xA;     *&#xA;     * @throws TransformerConfigurationException If for some reason the&#xA;     * TransformerHandler cannot be created.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="newTemplatesHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="TemplatesHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../TransformerConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get a TemplatesHandler object that can process SAX&#xA;     * ContentHandler events into a Templates object.&#xA;     *&#xA;     * @return A non-null reference to a TransformerHandler, that may&#xA;     * be used as a ContentHandler for SAX parse events.&#xA;     *&#xA;     * @throws TransformerConfigurationException If for some reason the&#xA;     * TemplatesHandler cannot be created.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="newXMLFilter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../org/xml/sax/XMLFilter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="src">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Source.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../TransformerConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create an XMLFilter that uses the given Source as the&#xA;     * transformation instructions.&#xA;     *&#xA;     * @param src The Source of the transformation instructions.&#xA;     *&#xA;     * @return An XMLFilter object, or null if this feature is not supported.&#xA;     *&#xA;     * @throws TransformerConfigurationException If for some reason the&#xA;     * TemplatesHandler cannot be created.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="newXMLFilter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../org/xml/sax/XMLFilter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="templates">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Templates.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../TransformerConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create an XMLFilter, based on the Templates argument..&#xA;     *&#xA;     * @param templates The compiled transformation instructions.&#xA;     *&#xA;     * @return An XMLFilter object, or null if this feature is not supported.&#xA;     *&#xA;     * @throws TransformerConfigurationException If for some reason the&#xA;     * TemplatesHandler cannot be created.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class extends TransformerFactory to provide SAX-specific&#xA; * factory methods.  It provides two types of ContentHandlers,&#xA; * one for creating Transformers, the other for creating Templates&#xA; * objects.&#xA; *&#xA; * &lt;p>If an application wants to set the ErrorHandler or EntityResolver&#xA; * for an XMLReader used during a transformation, it should use a URIResolver&#xA; * to return the SAXSource which provides (with getXMLReader) a reference to&#xA; * the XMLReader.&lt;/p>&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../TransformerFactory.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
