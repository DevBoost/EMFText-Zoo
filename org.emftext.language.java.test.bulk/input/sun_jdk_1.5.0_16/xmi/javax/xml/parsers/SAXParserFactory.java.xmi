<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="SAXParserFactory.java">
  <comments>// $Id: SAXParserFactory.java,v 1.39 2004/04/20 00:22:02 kk122374 Exp $</comments>
  <comments>/*&#xA; * @(#)SAXParserFactory.java&#x9;1.41 04/07/26&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>parsers</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>validation</namespaces>
    <classifier xsi:type="classifiers:Class" href="../validation/Schema.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotSupportedException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="SAXParserFactory">
    <members xsi:type="members:Field" name="DEFAULT_PROPERTY_NAME">
      <initialValue xsi:type="references:StringReference" value="javax.xml.parsers.SAXParserFactory"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** The default property name according to the JAXP spec */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="validating">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Should Parsers be validating?&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="namespaceAware">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Should Parsers be namespace aware?&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="SAXParserFactory">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * &lt;p>Protected constructor to force use of {@link #newInstance()}.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="newInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtain a new instance of a &lt;code>SAXParserFactory&lt;/code>. This&#xA;     * static method creates a new factory instance&#xA;     * This method uses the following ordered lookup procedure to determine&#xA;     * the &lt;code>SAXParserFactory&lt;/code> implementation class to&#xA;     * load:&#xA;     * &lt;ul>&#xA;     * &lt;li>&#xA;     * Use the &lt;code>javax.xml.parsers.SAXParserFactory&lt;/code> system&#xA;     * property.&#xA;     * &lt;/li>&#xA;     * &lt;li>&#xA;     * Use the properties file &quot;lib/jaxp.properties&quot; in the JRE directory.&#xA;     * This configuration file is in standard &lt;code>java.util.Properties&#xA;     * &lt;/code> format and contains the fully qualified name of the&#xA;     * implementation class with the key being the system property defined&#xA;     * above.&#xA;     * &#xA;     * The jaxp.properties file is read only once by the JAXP implementation&#xA;     * and it's values are then cached for future use.  If the file does not exist&#xA;     * when the first attempt is made to read from it, no further attempts are&#xA;     * made to check for its existence.  It is not possible to change the value&#xA;     * of any property in jaxp.properties after it has been read for the first time.&#xA;     * &lt;/li>&#xA;     * &lt;li>&#xA;     * Use the Services API (as detailed in the JAR specification), if&#xA;     * available, to determine the classname. The Services API will look&#xA;     * for a classname in the file&#xA;     * &lt;code>META-INF/services/javax.xml.parsers.SAXParserFactory&lt;/code>&#xA;     * in jars available to the runtime.&#xA;     * &lt;/li>&#xA;     * &lt;li>&#xA;     * Platform default &lt;code>SAXParserFactory&lt;/code> instance.&#xA;     * &lt;/li>&#xA;     * &lt;/ul>&#xA;     *&#xA;     * Once an application has obtained a reference to a&#xA;     * &lt;code>SAXParserFactory&lt;/code> it can use the factory to&#xA;     * configure and obtain parser instances.&#xA;     * &#xA;     * &#xA;     * &#xA;     * &lt;h2>Tip for Trouble-shooting&lt;/h2>&#xA;     * &lt;p>Setting the &lt;code>jaxp.debug&lt;/code> system property will cause&#xA;     * this method to print a lot of debug messages&#xA;     * to &lt;tt>System.err&lt;/tt> about what it is doing and where it is looking at.&lt;/p>&#xA;     * &#xA;     * &lt;p> If you have problems loading {@link DocumentBuilder}s, try:&lt;/p>&#xA;     * &lt;pre>&#xA;     * java -Djaxp.debug=1 YourProgram ....&#xA;     * &lt;/pre>&#xA;     * &#xA;     * &#xA;     * @return A new instance of a SAXParserFactory.&#xA;     *&#xA;     * @exception FactoryConfigurationError if the implementation is&#xA;     * not available or cannot be instantiated.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="FactoryFinder.class.xmi#//@classifiers.0/@members.7"/>
                <arguments xsi:type="references:StringReference" value="javax.xml.parsers.SAXParserFactory">
                  <comments>/* The default property name according to the JAXP spec */</comments>
                </arguments>
                <arguments xsi:type="references:StringReference" value="com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl">
                  <comments>/* The fallback implementation class name */</comments>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="FactoryFinder.class.xmi#//@classifiers.0"/>
            </child>
          </returnValue>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="FactoryConfigurationError.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@catcheBlocks.0/@parameter">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="FactoryFinder$ConfigurationError.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@catcheBlocks.0/@parameter">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.9"/>
                </next>
              </arguments>
            </throwable>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>FactoryFinder</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="FactoryFinder$ConfigurationError.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="newSAXParser">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SAXParser.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ParserConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Creates a new instance of a SAXParser using the currently&#xA;     * configured factory parameters.&lt;/p>&#xA;     *&#xA;     * @return A new instance of a SAXParser.&#xA;     *&#xA;     * @exception ParserConfigurationException if a parser cannot&#xA;     *   be created which satisfies the requested configuration.&#xA;     * @exception SAXException for SAX errors.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="setNamespaceAware">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="awareness">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Specifies that the parser produced by this code will&#xA;     * provide support for XML namespaces. By default the value of this is set&#xA;     * to &lt;code>false&lt;/code>.&#xA;     *&#xA;     * @param awareness true if the parser produced by this code will&#xA;     *                  provide support for XML namespaces; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setValidating">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="validating">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Specifies that the parser produced by this code will&#xA;     * validate documents as they are parsed. By default the value of this is&#xA;     * set to &lt;code>false&lt;/code>.&#xA;     * &#xA;     * &lt;p>&#xA;     * Note that &quot;the validation&quot; here means&#xA;     * &lt;a href=&quot;http://www.w3.org/TR/REC-xml#proc-types&quot;>a validating&#xA;     * parser&lt;/a> as defined in the XML recommendation.&#xA;     * In other words, it essentially just controls the DTD validation.&#xA;     * (except the legacy two properties defined in JAXP 1.2.&#xA;     * See &lt;a href=&quot;#validationCompatibility&quot;>here&lt;/a> for more details.)&#xA;     * &lt;/p>&#xA;     * &#xA;     * &lt;p>&#xA;     * To use modern schema languages such as W3C XML Schema or&#xA;     * RELAX NG instead of DTD, you can configure your parser to be&#xA;     * a non-validating parser by leaving the {@link #setValidating(boolean)}&#xA;     * method &lt;tt>false&lt;/tt>, then use the {@link #setSchema(Schema)}&#xA;     * method to associate a schema to a parser.&#xA;     * &lt;/p>&#xA;     *&#xA;     * @param validating true if the parser produced by this code will&#xA;     *                   validate documents as they are parsed; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isNamespaceAware">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates whether or not the factory is configured to produce&#xA;     * parsers which are namespace aware.&#xA;     *&#xA;     * @return true if the factory is configured to produce&#xA;     *         parsers which are namespace aware; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isValidating">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates whether or not the factory is configured to produce&#xA;     * parsers which validate the XML content during parse.&#xA;     *&#xA;     * @return true if the factory is configured to produce parsers which validate&#xA;     *         the XML content during parse; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setFeature">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ParserConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotSupportedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * &lt;p>Sets the particular feature in the underlying implementation of&#xA;     * org.xml.sax.XMLReader.&#xA;     * A list of the core features and properties can be found at&#xA;     * &lt;a href=&quot;http://www.saxproject.org/&quot;>http://www.saxproject.org/&lt;/a>&lt;/p>&#xA;     *&#xA;&#x9; * &lt;p>All implementations are required to support the {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature.&#xA;&#x9; * When the feature is&lt;/p>&#xA;&#x9; * &lt;ul>&#xA;&#x9; *   &lt;li>&#xA;&#x9; *     &lt;code>true&lt;/code>: the implementation will limit XML processing to conform to implementation limits.&#xA;&#x9; *     Examples include enity expansion limits and XML Schema constructs that would consume large amounts of resources.&#xA;&#x9; *     If XML processing is limited for security reasons, it will be reported via a call to the registered&#xA;&#x9; *     {@link org.xml.sax.ErrorHandler#fatalError(SAXParseException exception)}.&#xA;&#x9; *     See {@link SAXParser} &lt;code>parse&lt;/code> methods for handler specification.&#xA;&#x9; *   &lt;/li>&#xA;&#x9; *   &lt;li>&#xA;&#x9; *     When the feature is &lt;code>false&lt;/code>, the implementation will processing XML according to the XML specifications without&#xA;&#x9; *     regard to possible implementation limits.&#xA;&#x9; *   &lt;/li>&#xA;&#x9; * &lt;/ul>&#xA;&#x9; * &#xA;     * @param name The name of the feature to be set.&#xA;     * @param value The value of the feature to be set.&#xA;     * &#xA;     * @exception ParserConfigurationException if a parser cannot&#xA;     *     be created which satisfies the requested configuration.&#xA;     * @exception SAXNotRecognizedException When the underlying XMLReader does&#xA;     *            not recognize the property name.&#xA;     * @exception SAXNotSupportedException When the underlying XMLReader&#xA;     *            recognizes the property name but doesn't support the&#xA;     *            property.&#xA;     * @throws NullPointerException If the &lt;code>name&lt;/code> parameter is null.&#xA;     *&#xA;     * @see org.xml.sax.XMLReader#setFeature&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFeature">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ParserConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotSupportedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * &lt;p>Returns the particular property requested for in the underlying&#xA;     * implementation of org.xml.sax.XMLReader.&lt;/p>&#xA;     *&#xA;     * @param name The name of the property to be retrieved.&#xA;     * &#xA;     * @return Value of the requested property.&#xA;     *&#xA;     * @exception ParserConfigurationException if a parser cannot be created which satisfies the requested configuration.&#xA;     * @exception SAXNotRecognizedException When the underlying XMLReader does not recognize the property name.&#xA;     * @exception SAXNotSupportedException When the underlying XMLReader recognizes the property name but doesn't support the property.&#xA;     *&#xA;     * @see org.xml.sax.XMLReader#getProperty&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getSchema">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../validation/Schema.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* &lt;p>Get current state of canonicalization.&lt;/p>&#xA;     *&#xA;     * @return current state canonicalization control&#xA;     */</comments>
        <comments>/*&#xA;    public boolean getCanonicalization() {&#xA;        return canonicalState;&#xA;    }&#xA;    */</comments>
        <comments>/**&#xA;     * Gets the {@link Schema} object specified through&#xA;     * the {@link #setSchema(Schema schema)} method.&#xA;     * &#xA;     * &#xA;     * @throws UnsupportedOperationException&#xA;     *      For backward compatibility, when implementations for&#xA;     *      earlier versions of JAXP is used, this exception will be&#xA;     *      thrown.&#xA;     * &#xA;     * @return&#xA;     *      the {@link Schema} object that was last set through&#xA;     *      the {@link #setSchema(Schema)} method, or null&#xA;     *      if the method was not invoked since a {@link SAXParserFactory}&#xA;     *      is created.&#xA;     * &#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="This parser does not support specification &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot; version &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot;"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setSchema">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="schema">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../validation/Schema.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &lt;p>Set canonicalization control to &lt;code>true&lt;/code> or&#xA;     * &lt;/code>false&lt;/code>.&lt;/p>&#xA;     *&#xA;     * @param state of canonicalization&#xA;     */</comments>
        <comments>/*&#xA;    public void setCanonicalization(boolean state) {&#xA;        canonicalState = state;&#xA;    }&#xA;    */</comments>
        <comments>/**&#xA;     * &lt;p>Set the {@link Schema} to be used by parsers created&#xA;     * from this factory.&lt;/p>&#xA;     * &#xA;     * &lt;p>When a {@link Schema} is non-null, a parser will use a validator&#xA;     * created from it to validate documents before it passes information&#xA;     * down to the application.&lt;/p>&#xA;     * &#xA;     * &lt;p>When warnings/errors/fatal errors are found by the validator, the parser must&#xA;     * handle them as if those errors were found by the parser itself. &#xA;     * In other words, if the user-specified {@link org.xml.sax.ErrorHandler}&#xA;     * is set, it must receive those errors, and if not, they must be&#xA;     * treated according to the implementation specific&#xA;     * default error handling rules.&#xA;     * &#xA;     * &lt;p>A validator may modify the SAX event stream (for example by&#xA;     * adding default values that were missing in documents), and a parser&#xA;     * is responsible to make sure that the application will receive&#xA;     * those modified event stream.&lt;/p>  &#xA;     * &#xA;     * &lt;p>Initialy, &lt;code>null&lt;/code> is set as the {@link Schema}.&lt;/p> &#xA;     * &#xA;     * &lt;p>This processing will take effect even if&#xA;     * the {@link #isValidating()} method returns &lt;code>false&lt;/code>.&#xA;     * &#xA;     * &lt;p>It is an error to use&#xA;     * the &lt;code>http://java.sun.com/xml/jaxp/properties/schemaSource&lt;/code>&#xA;     * property and/or the &lt;code>http://java.sun.com/xml/jaxp/properties/schemaLanguage&lt;/code>&#xA;     * property in conjunction with a non-null {@link Schema} object.&#xA;     * Such configuration will cause a {@link SAXException}&#xA;     * exception when those properties are set on a {@link SAXParser}.&lt;/p>&#xA;     * &#xA;     * &lt;h4>Note for implmentors&lt;/h4>&#xA;     * &lt;p>&#xA;     * A parser must be able to work with any {@link Schema}&#xA;     * implementation. However, parsers and schemas are allowed&#xA;     * to use implementation-specific custom mechanisms&#xA;     * as long as they yield the result described in the specification.&#xA;     * &lt;/p>&#xA;     * &#xA;     * @param schema &lt;code>Schema&lt;/code> to use, &lt;code>null&lt;/code> to remove a schema.&#xA;     * &#xA;     * @throws UnsupportedOperationException&#xA;     *      For backward compatibility, when implementations for&#xA;     *      earlier versions of JAXP is used, this exception will be&#xA;     *      thrown.&#xA;     * &#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="This parser does not support specification &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot; version &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot;"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setXIncludeAware">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="state">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Set state of XInclude processing.&lt;/p>&#xA;     * &#xA;     * &lt;p>If XInclude markup is found in the document instance, should it be&#xA;     * processed as specified in &lt;a href=&quot;http://www.w3.org/TR/xinclude/&quot;>&#xA;     * XML Inclusions (XInclude) Version 1.0&lt;/a>.&lt;/p>&#xA;     * &#xA;     * &lt;p>XInclude processing defaults to &lt;code>false&lt;/code>.&lt;/p>&#xA;     * &#xA;     * @param state Set XInclude processing to &lt;code>true&lt;/code> or&#xA;     *   &lt;code>false&lt;/code>&#xA;     * &#xA;     * @throws UnsupportedOperationException&#xA;     *      For backward compatibility, when implementations for&#xA;     *      earlier versions of JAXP is used, this exception will be&#xA;     *      thrown.&#xA;     * &#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="This parser does not support specification &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot; version &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot;"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isXIncludeAware">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Get state of XInclude processing.&lt;/p>&#xA;     * &#xA;     * @return current state of XInclude processing&#xA;     * &#xA;     * @throws UnsupportedOperationException&#xA;     *      For backward compatibility, when implementations for&#xA;     *      earlier versions of JAXP is used, this exception will be&#xA;     *      thrown.&#xA;     * &#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="This parser does not support specification &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot; version &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot;"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </throwable>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Defines a factory API that enables applications to configure and&#xA; * obtain a SAX based parser to parse XML documents.&#xA; *&#xA; * @author &lt;a href=&quot;Jeff.Suttor@Sun.com&quot;>Jeff Suttor&lt;/a>&#xA; * @version $Revision: 1.39 $, $Date: 2004/04/20 00:22:02 $&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
