<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DocumentBuilderFactory.java">
  <comments>// $Id: DocumentBuilderFactory.java,v 1.39.16.1 2004/07/17 00:22:03 jsuttor Exp $</comments>
  <comments>/*&#xA; * @(#)DocumentBuilderFactory.java&#x9;1.39 04/07/27&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>parsers</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>validation</namespaces>
    <classifier xsi:type="classifiers:Class" href="../validation/Schema.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="DocumentBuilderFactory">
    <members xsi:type="members:Field" name="DEFAULT_PROPERTY_NAME">
      <initialValue xsi:type="references:StringReference" value="javax.xml.parsers.DocumentBuilderFactory"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** The default property name according to the JAXP spec */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="validating">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="namespaceAware">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="whitespace">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="expandEntityRef">
      <initialValue xsi:type="literals:BooleanLiteral" value="true"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="ignoreComments">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="coalescing">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="canonicalState">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Constructor" name="DocumentBuilderFactory">
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:ClassMethod" name="newInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtain a new instance of a&#xA;     * &lt;code>DocumentBuilderFactory&lt;/code>. This static method creates&#xA;     * a new factory instance.&#xA;     * This method uses the following ordered lookup procedure to determine&#xA;     * the &lt;code>DocumentBuilderFactory&lt;/code> implementation class to&#xA;     * load:&#xA;     * &lt;ul>&#xA;     * &lt;li>&#xA;     * Use the &lt;code>javax.xml.parsers.DocumentBuilderFactory&lt;/code> system&#xA;     * property.&#xA;     * &lt;/li>&#xA;     * &lt;li>&#xA;     * Use the properties file &quot;lib/jaxp.properties&quot; in the JRE directory.&#xA;     * This configuration file is in standard &lt;code>java.util.Properties&#xA;     * &lt;/code> format and contains the fully qualified name of the&#xA;     * implementation class with the key being the system property defined&#xA;     * above.&#xA;     * &#xA;     * The jaxp.properties file is read only once by the JAXP implementation&#xA;     * and it's values are then cached for future use.  If the file does not exist&#xA;     * when the first attempt is made to read from it, no further attempts are&#xA;     * made to check for its existence.  It is not possible to change the value&#xA;     * of any property in jaxp.properties after it has been read for the first time.&#xA;     * &lt;/li>&#xA;     * &lt;li>&#xA;     * Use the Services API (as detailed in the JAR specification), if&#xA;     * available, to determine the classname. The Services API will look&#xA;     * for a classname in the file&#xA;     * &lt;code>META-INF/services/javax.xml.parsers.DocumentBuilderFactory&lt;/code>&#xA;     * in jars available to the runtime.&#xA;     * &lt;/li>&#xA;     * &lt;li>&#xA;     * Platform default &lt;code>DocumentBuilderFactory&lt;/code> instance.&#xA;     * &lt;/li>&#xA;     * &lt;/ul>&#xA;     *&#xA;     * Once an application has obtained a reference to a&#xA;     * &lt;code>DocumentBuilderFactory&lt;/code> it can use the factory to&#xA;     * configure and obtain parser instances.&#xA;     * &#xA;     * &#xA;     * &lt;h2>Tip for Trouble-shooting&lt;/h2>&#xA;     * &lt;p>Setting the &lt;code>jaxp.debug&lt;/code> system property will cause&#xA;     * this method to print a lot of debug messages&#xA;     * to &lt;tt>System.err&lt;/tt> about what it is doing and where it is looking at.&lt;/p>&#xA;     * &#xA;     * &lt;p> If you have problems loading {@link DocumentBuilder}s, try:&lt;/p>&#xA;     * &lt;pre>&#xA;     * java -Djaxp.debug=1 YourProgram ....&#xA;     * &lt;/pre>&#xA;     * &#xA;     * @return New instance of a &lt;code>DocumentBuilderFactory&lt;/code>&#xA;     *&#xA;     * @exception FactoryConfigurationError if the implementation is not&#xA;     * available or cannot be instantiated.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="FactoryFinder.class.xmi#//@classifiers.0/@members.7"/>
                <arguments xsi:type="references:StringReference" value="javax.xml.parsers.DocumentBuilderFactory">
                  <comments>/* The default property name according to the JAXP spec */</comments>
                </arguments>
                <arguments xsi:type="references:StringReference" value="com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl">
                  <comments>/* The fallback implementation class name */</comments>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="FactoryFinder.class.xmi#//@classifiers.0"/>
            </child>
          </returnValue>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="FactoryConfigurationError.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@catcheBlocks.0/@parameter">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="FactoryFinder$ConfigurationError.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@catcheBlocks.0/@parameter">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.9"/>
                </next>
              </arguments>
            </throwable>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>FactoryFinder</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="FactoryFinder$ConfigurationError.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="newDocumentBuilder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DocumentBuilder.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ParserConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new instance of a {@link javax.xml.parsers.DocumentBuilder}&#xA;     * using the currently configured parameters.&#xA;     *&#xA;     * @exception ParserConfigurationException if a DocumentBuilder&#xA;     * cannot be created which satisfies the configuration requested.&#xA;     * @return A new instance of a DocumentBuilder.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="setNamespaceAware">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="awareness">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Specifies that the parser produced by this code will&#xA;     * provide support for XML namespaces. By default the value of this is set&#xA;     * to &lt;code>false&lt;/code>&#xA;     *&#xA;     * @param awareness true if the parser produced will provide support&#xA;     *                  for XML namespaces; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setValidating">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="validating">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Specifies that the parser produced by this code will&#xA;     * validate documents as they are parsed. By default the value of this&#xA;     * is set to &lt;code>false&lt;/code>.&#xA;     * &#xA;     * &lt;p>&#xA;     * Note that &quot;the validation&quot; here means&#xA;     * &lt;a href=&quot;http://www.w3.org/TR/REC-xml#proc-types&quot;>a validating&#xA;     * parser&lt;/a> as defined in the XML recommendation.&#xA;     * In other words, it essentially just controls the DTD validation.&#xA;     * (except the legacy two properties defined in JAXP 1.2.&#xA;     * See &lt;a href=&quot;#validationCompatibility&quot;>here&lt;/a> for more details.)&#xA;     * &lt;/p>&#xA;     * &#xA;     * &lt;p>&#xA;     * To use modern schema languages such as W3C XML Schema or&#xA;     * RELAX NG instead of DTD, you can configure your parser to be&#xA;     * a non-validating parser by leaving the {@link #setValidating(boolean)}&#xA;     * method &lt;tt>false&lt;/tt>, then use the {@link #setSchema(Schema)}&#xA;     * method to associate a schema to a parser.&#xA;     * &lt;/p>&#xA;     * &#xA;     * @param validating true if the parser produced will validate documents&#xA;     *                   as they are parsed; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setIgnoringElementContentWhitespace">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="whitespace">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Specifies that the parsers created by this  factory must eliminate&#xA;     * whitespace in element content (sometimes known loosely as&#xA;     * 'ignorable whitespace') when parsing XML documents (see XML Rec&#xA;     * 2.10). Note that only whitespace which is directly contained within&#xA;     * element content that has an element only content model (see XML&#xA;     * Rec 3.2.1) will be eliminated. Due to reliance on the content model&#xA;     * this setting requires the parser to be in validating mode. By default&#xA;     * the value of this is set to &lt;code>false&lt;/code>.&#xA;     *&#xA;     * @param whitespace true if the parser created must eliminate whitespace&#xA;     *                   in the element content when parsing XML documents;&#xA;     *                   false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setExpandEntityReferences">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="expandEntityRef">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Specifies that the parser produced by this code will&#xA;     * expand entity reference nodes. By default the value of this is set to&#xA;     * &lt;code>true&lt;/code>&#xA;     *&#xA;     * @param expandEntityRef true if the parser produced will expand entity&#xA;     *                        reference nodes; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setIgnoringComments">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ignoreComments">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Specifies that the parser produced by this code will&#xA;     * ignore comments. By default the value of this is set to &lt;code>false&#xA;     * &lt;/code>.&lt;/p>&#xA;     * &#xA;     * @param ignoreComments &lt;code>boolean&lt;/code> value to ignore comments during processing&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setCoalescing">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="coalescing">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Specifies that the parser produced by this code will&#xA;     * convert CDATA nodes to Text nodes and append it to the&#xA;     * adjacent (if any) text node. By default the value of this is set to&#xA;     * &lt;code>false&lt;/code>&#xA;     *&#xA;     * @param coalescing  true if the parser produced will convert CDATA nodes&#xA;     *                    to Text nodes and append it to the adjacent (if any)&#xA;     *                    text node; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isNamespaceAware">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates whether or not the factory is configured to produce&#xA;     * parsers which are namespace aware.&#xA;     *&#xA;     * @return  true if the factory is configured to produce parsers which&#xA;     *          are namespace aware; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isValidating">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates whether or not the factory is configured to produce&#xA;     * parsers which validate the XML content during parse.&#xA;     *&#xA;     * @return  true if the factory is configured to produce parsers&#xA;     *          which validate the XML content during parse; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isIgnoringElementContentWhitespace">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates whether or not the factory is configured to produce&#xA;     * parsers which ignore ignorable whitespace in element content.&#xA;     *&#xA;     * @return  true if the factory is configured to produce parsers&#xA;     *          which ignore ignorable whitespace in element content;&#xA;     *          false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isExpandEntityReferences">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates whether or not the factory is configured to produce&#xA;     * parsers which expand entity reference nodes.&#xA;     *&#xA;     * @return  true if the factory is configured to produce parsers&#xA;     *          which expand entity reference nodes; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isIgnoringComments">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates whether or not the factory is configured to produce&#xA;     * parsers which ignores comments.&#xA;     *&#xA;     * @return  true if the factory is configured to produce parsers&#xA;     *          which ignores comments; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isCoalescing">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates whether or not the factory is configured to produce&#xA;     * parsers which converts CDATA nodes to Text nodes and appends it to&#xA;     * the adjacent (if any) Text node.&#xA;     *&#xA;     * @return  true if the factory is configured to produce parsers&#xA;     *          which converts CDATA nodes to Text nodes and appends it to&#xA;     *          the adjacent (if any) Text node; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allows the user to set specific attributes on the underlying&#xA;     * implementation.&#xA;     * @param name The name of the attribute.&#xA;     * @param value The value of the attribute.&#xA;     * @exception IllegalArgumentException thrown if the underlying&#xA;     * implementation doesn't recognize the attribute.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttribute">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allows the user to retrieve specific attributes on the underlying&#xA;     * implementation.&#xA;     * @param name The name of the attribute.&#xA;     * @return value The value of the attribute.&#xA;     * @exception IllegalArgumentException thrown if the underlying&#xA;     * implementation doesn't recognize the attribute.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setFeature">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ParserConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;&#x9; * &lt;p>Set a feature for this &lt;code>DocumentBuilderFactory&lt;/code> and &lt;code>DocumentBuilder&lt;/code>s created by this factory.&lt;/p>&#xA;&#x9; * &#xA;&#x9; * &lt;p>&#xA;&#x9; * Feature names are fully qualified {@link java.net.URI}s.&#xA;&#x9; * Implementations may define their own features.&#xA;&#x9; * An {@link ParserConfigurationException} is thrown if this &lt;code>DocumentBuilderFactory&lt;/code> or the&#xA;&#x9; * &lt;code>DocumentBuilder&lt;/code>s it creates cannot support the feature.&#xA;&#x9; * It is possible for an &lt;code>DocumentBuilderFactory&lt;/code> to expose a feature value but be unable to change its state.&#xA;&#x9; * &lt;/p>&#xA;&#x9; * &#xA;&#x9; * &lt;p>&#xA;&#x9; * All implementations are required to support the {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature.&#xA;&#x9; * When the feature is:&lt;/p>&#xA;&#x9; * &lt;ul>&#xA;&#x9; *   &lt;li>&#xA;&#x9; *     &lt;code>true&lt;/code>: the implementation will limit XML processing to conform to implementation limits.&#xA;&#x9; *     Examples include enity expansion limits and XML Schema constructs that would consume large amounts of resources.&#xA;&#x9; *     If XML processing is limited for security reasons, it will be reported via a call to the registered&#xA;&#x9; *    {@link org.xml.sax.ErrorHandler#fatalError(SAXParseException exception)}.&#xA;&#x9; *     See {@link  DocumentBuilder#setErrorHandler(org.xml.sax.ErrorHandler errorHandler)}.&#xA;&#x9; *   &lt;/li>&#xA;&#x9; *   &lt;li>&#xA;&#x9; *     &lt;code>false&lt;/code>: the implementation will processing XML according to the XML specifications without&#xA;&#x9; *     regard to possible implementation limits.&#xA;&#x9; *   &lt;/li>&#xA;&#x9; * &lt;/ul>&#xA;&#x9; * &#xA;&#x9; * @param name Feature name.&#xA;&#x9; * @param value Is feature state &lt;code>true&lt;/code> or &lt;code>false&lt;/code>.&#xA;&#x9; *  &#xA;&#x9; * @throws ParserConfigurationException if this &lt;code>DocumentBuilderFactory&lt;/code> or the &lt;code>DocumentBuilder&lt;/code>s&#xA;&#x9; *   it creates cannot support this feature.&#xA;     * @throws NullPointerException If the &lt;code>name&lt;/code> parameter is null.&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFeature">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ParserConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;&#x9; * &lt;p>Get the state of the named feature.&lt;/p>&#xA;&#x9; * &#xA;&#x9; * &lt;p>&#xA;&#x9; * Feature names are fully qualified {@link java.net.URI}s.&#xA;&#x9; * Implementations may define their own features.&#xA;&#x9; * An {@link ParserConfigurationException} is thrown if this &lt;code>DocumentBuilderFactory&lt;/code> or the&#xA;&#x9; * &lt;code>DocumentBuilder&lt;/code>s it creates cannot support the feature.&#xA;&#x9; * It is possible for an &lt;code>DocumentBuilderFactory&lt;/code> to expose a feature value but be unable to change its state.&#xA;&#x9; * &lt;/p>&#xA;&#x9; * &#xA;&#x9; * @param name Feature name.&#xA;&#x9; * &#xA;&#x9; * @return State of the named feature.&#xA;&#x9; * &#xA;&#x9; * @throws ParserConfigurationException if this &lt;code>DocumentBuilderFactory&lt;/code>&#xA;&#x9; *   or the &lt;code>DocumentBuilder&lt;/code>s it creates cannot support this feature.&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getSchema">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../validation/Schema.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &lt;p>Get current state of canonicalization.&lt;/p>&#xA;     *&#xA;     * @return current state canonicalization control&#xA;     */</comments>
        <comments>/*&#xA;    public boolean getCanonicalization() {&#xA;        return canonicalState;&#xA;    }&#xA;    */</comments>
        <comments>/**&#xA;     * Gets the {@link Schema} object specified through&#xA;     * the {@link #setSchema(Schema schema)} method.&#xA;     * &#xA;     * &#xA;     * @throws UnsupportedOperationException&#xA;     *      For backward compatibility, when implementations for&#xA;     *      earlier versions of JAXP is used, this exception will be&#xA;     *      thrown.&#xA;     * &#xA;     * @return&#xA;     *      the {@link Schema} object that was last set through&#xA;     *      the {@link #setSchema(Schema)} method, or null&#xA;     *      if the method was not invoked since a {@link SAXParserFactory}&#xA;     *      is created.&#xA;     * &#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="This parser does not support specification &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot; version &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot;"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setSchema">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="schema">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../validation/Schema.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* &lt;p>Set canonicalization control to &lt;code>true&lt;/code> or&#xA;     * &lt;/code>false&lt;/code>.&lt;/p>&#xA;     *&#xA;     * @param state of canonicalization&#xA;     */</comments>
        <comments>/*&#xA;    public void setCanonicalization(boolean state) {&#xA;        canonicalState = state;&#xA;    }&#xA;    */</comments>
        <comments>/**&#xA;     * &lt;p>Set the {@link Schema} to be used by parsers created&#xA;     * from this factory.&#xA;     * &#xA;     * &lt;p>&#xA;     * When a {@link Schema} is non-null, a parser will use a validator&#xA;     * created from it to validate documents before it passes information&#xA;     * down to the application.&#xA;     * &#xA;     * &lt;p>When errors are found by the validator, the parser is responsible&#xA;     * to report them to the user-specified {@link org.w3c.dom.DOMErrorHandler}&#xA;     * (or if the error handler is not set, ignore them or throw them), just&#xA;     * like any other errors found by the parser itself.&#xA;     * In other words, if the user-specified {@link org.w3c.dom.DOMErrorHandler}&#xA;     * is set, it must receive those errors, and if not, they must be&#xA;     * treated according to the implementation specific&#xA;     * default error handling rules.&#xA;     * &#xA;     * &lt;p>&#xA;     * A validator may modify the outcome of a parse (for example by&#xA;     * adding default values that were missing in documents), and a parser&#xA;     * is responsible to make sure that the application will receive&#xA;     * modified DOM trees.  &#xA;     * &#xA;     * &lt;p>&#xA;     * Initialy, null is set as the {@link Schema}. &#xA;     * &#xA;     * &lt;p>&#xA;     * This processing will take effect even if&#xA;     * the {@link #isValidating()} method returns &lt;tt>false&lt;/tt>.&#xA;     * &#xA;     * &lt;p>It is an error to use&#xA;     * the &lt;code>http://java.sun.com/xml/jaxp/properties/schemaSource&lt;/code>&#xA;     * property and/or the &lt;code>http://java.sun.com/xml/jaxp/properties/schemaLanguage&lt;/code>&#xA;     * property in conjunction with a {@link Schema} object.&#xA;     * Such configuration will cause a {@link ParserConfigurationException}&#xA;     * exception when the {@link #newDocumentBuilder()} is invoked.&lt;/p>&#xA;     *&#xA;     *  &#xA;     * &lt;h4>Note for implmentors&lt;/h4>&#xA;     * &lt;p>&#xA;     * A parser must be able to work with any {@link Schema}&#xA;     * implementation. However, parsers and schemas are allowed&#xA;     * to use implementation-specific custom mechanisms&#xA;     * as long as they yield the result described in the specification.&#xA;     * &#xA;     * @param schema &lt;code>Schema&lt;/code> to use or &lt;code>null&lt;/code> to remove a schema.&#xA;     * &#xA;     * @throws UnsupportedOperationException&#xA;     *      For backward compatibility, when implementations for&#xA;     *      earlier versions of JAXP is used, this exception will be&#xA;     *      thrown.&#xA;     * &#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="This parser does not support specification &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot; version &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot;"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setXIncludeAware">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="state">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Set state of XInclude processing.&lt;/p>&#xA;     * &#xA;     * &lt;p>If XInclude markup is found in the document instance, should it be&#xA;     * processed as specified in &lt;a href=&quot;http://www.w3.org/TR/xinclude/&quot;>&#xA;     * XML Inclusions (XInclude) Version 1.0&lt;/a>.&lt;/p>&#xA;     * &#xA;     * &lt;p>XInclude processing defaults to &lt;code>false&lt;/code>.&lt;/p>&#xA;     * &#xA;     * @param state Set XInclude processing to &lt;code>true&lt;/code> or&#xA;     *   &lt;code>false&lt;/code>&#xA;     * &#xA;     * @throws UnsupportedOperationException&#xA;     *      For backward compatibility, when implementations for&#xA;     *      earlier versions of JAXP is used, this exception will be&#xA;     *      thrown.&#xA;     * &#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="This parser does not support specification &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot; version &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot;"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isXIncludeAware">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Get state of XInclude processing.&lt;/p>&#xA;     * &#xA;     * @return current state of XInclude processing&#xA;     * &#xA;     * @throws UnsupportedOperationException&#xA;     *      For backward compatibility, when implementations for&#xA;     *      earlier versions of JAXP is used, this exception will be&#xA;     *      thrown.&#xA;     * &#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="This parser does not support specification &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot; version &quot;"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Package.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.51"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="&quot;"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </throwable>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Defines a factory API that enables applications to obtain a&#xA; * parser that produces DOM object trees from XML documents.&#xA; *&#xA; * @author &lt;a href=&quot;Jeff.Suttor@Sun.com&quot;>Jeff Suttor&lt;/a>&#xA; * @version $Revision: 1.39.16.1 $, $Date: 2004/07/17 00:22:03 $&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
