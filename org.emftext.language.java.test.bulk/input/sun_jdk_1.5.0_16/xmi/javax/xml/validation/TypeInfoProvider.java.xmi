<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="TypeInfoProvider.java">
  <comments>// $Id: TypeInfoProvider.java,v 1.11 2004/02/06 01:16:10 kk122374 Exp $</comments>
  <comments>/*&#xA; * @(#)TypeInfoProvider.java&#x9;1.5 04/07/26&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>validation</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../org/w3c/dom/TypeInfo.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="TypeInfoProvider">
    <members xsi:type="members:Constructor" name="TypeInfoProvider">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructor for the derived class.&#xA;     * &#xA;     * &lt;p>&#xA;     * The constructor does nothing.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getElementTypeInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../org/w3c/dom/TypeInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Returns the immutable {@link TypeInfo} object for the current element.&lt;/p>&#xA;     * &#xA;     * &lt;p>&#xA;     * The method may only be called by the startElement event of&#xA;     * the {@link org.xml.sax.ContentHandler} that the application sets to the&#xA;     * {@link ValidatorHandler}.&lt;/p>&#xA;     * &#xA;     * @throws IllegalStateException&#xA;     *      If this method is called from other {@link org.xml.sax.ContentHandler}&#xA;     *      methods.&#xA;     * @return&#xA;     *      An immutable {@link TypeInfo} object that represents the&#xA;     *      type of the current element. &#xA;     *      Note that the caller can keep references to the obtained&#xA;     *      {@link TypeInfo} longer than the callback scope.&#xA;     * &#xA;     *      Otherwise, this method returns&#xA;     *      null if the validator is unable to&#xA;     *      determine the type of the current element for some reason&#xA;     *      (for example, if the validator is recovering from&#xA;     *      an earlier error.)&#xA;     * &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributeTypeInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../org/w3c/dom/TypeInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the immutable {@link TypeInfo} object for the specified&#xA;     * attribute of the current element.&#xA;     * &#xA;     * &lt;p>&#xA;     * The method may only be called by the startElement event of&#xA;     * the {@link org.xml.sax.ContentHandler} that the application sets to the&#xA;     * {@link ValidatorHandler}.&#xA;     * &#xA;     * @param index&#xA;     *      The index of the attribute. The same index for&#xA;     *      the {@link org.xml.sax.Attributes} object passed to the&#xA;     *      &lt;tt>startElement&lt;/tt> callback.&#xA;     * &#xA;     * @throws IndexOutOfBoundsException&#xA;     *      If the index is invalid.&#xA;     * @throws IllegalStateException&#xA;     *      If this method is called from other {@link org.xml.sax.ContentHandler}&#xA;     *      methods.&#xA;     * &#xA;     * @return&#xA;     *      An immutable {@link TypeInfo} object that represents the&#xA;     *      type of the specified attribute. &#xA;     *      Note that the caller can keep references to the obtained&#xA;     *      {@link TypeInfo} longer than the callback scope.&#xA;     * &#xA;     *      Otherwise, this method returns&#xA;     *      null if the validator is unable to&#xA;     *      determine the type.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isIdAttribute">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if the specified attribute is determined&#xA;     * to be ID.&#xA;     * &#xA;     * &lt;p>&#xA;     * Exacly how an attribute is &quot;determined to be ID&quot; is up to the&#xA;     * schema language. In case of W3C XML Schema, this means&#xA;     * that the actual type of the attribute is the built-in ID type&#xA;     * or its derived type.&#xA;     * &#xA;     * &lt;p>&#xA;     * A {@link javax.xml.parsers.DocumentBuilder} uses this information&#xA;     * to properly implement {@link org.w3c.dom.Attr#isId()}.&#xA;     * &#xA;     * &lt;p>&#xA;     * The method may only be called by the startElement event of&#xA;     * the {@link org.xml.sax.ContentHandler} that the application sets to the&#xA;     * {@link ValidatorHandler}.&#xA;     * &#xA;     * @param index&#xA;     *      The index of the attribute. The same index for&#xA;     *      the {@link org.xml.sax.Attributes} object passed to the&#xA;     *      &lt;tt>startElement&lt;/tt> callback.&#xA;     * &#xA;     * @throws IndexOutOfBoundsException&#xA;     *      If the index is invalid.&#xA;     * @throws IllegalStateException&#xA;     *      If this method is called from other {@link org.xml.sax.ContentHandler}&#xA;     *      methods.&#xA;     * &#xA;     * @return true&#xA;     *      if the type of the specified attribute is ID.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isSpecified">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>false&lt;/tt> if the attribute was added by the validator.&#xA;     * &#xA;     * &lt;p>&#xA;     * This method provides information necessary for&#xA;     * a {@link javax.xml.parsers.DocumentBuilder} to determine what&#xA;     * the DOM tree should return from the {@link org.w3c.dom.Attr#getSpecified()} method.&#xA;     * &#xA;     * &lt;p>&#xA;     * The method may only be called by the startElement event of&#xA;     * the {@link org.xml.sax.ContentHandler} that the application sets to the&#xA;     * {@link ValidatorHandler}.&#xA;     * &#xA;     * &lt;p>&#xA;     * A general guideline for validators is to return true if&#xA;     * the attribute was originally present in the pipeline, and&#xA;     * false if it was added by the validator.&#xA;     * &#xA;     * @param index&#xA;     *      The index of the attribute. The same index for&#xA;     *      the {@link org.xml.sax.Attributes} object passed to the&#xA;     *      &lt;tt>startElement&lt;/tt> callback.&#xA;     * &#xA;     * @throws IndexOutOfBoundsException&#xA;     *      If the index is invalid.&#xA;     * @throws IllegalStateException&#xA;     *      If this method is called from other {@link org.xml.sax.ContentHandler}&#xA;     *      methods.&#xA;     * &#xA;     * @return&#xA;     *      &lt;tt>true&lt;/tt> if the attribute was present before the validator&#xA;     *      processes input. &lt;tt>false&lt;/tt> if the attribute was added&#xA;     *      by the validator.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class provides access to the type information determined&#xA; * by {@link ValidatorHandler}. &#xA; * &#xA; * &lt;p>&#xA; * Some schema languages, such as W3C XML Schema, encourages a validator&#xA; * to report the &quot;type&quot; it assigns to each attribute/element.&#xA; * Those applications who wish to access this type information can invoke&#xA; * methods defined on this &quot;interface&quot; to access such type information.&#xA; *  &#xA; * &lt;p>&#xA; * Implementation of this &quot;interface&quot; can be obtained through the&#xA; * {@link ValidatorHandler#getTypeInfoProvider()} method.&#xA; * &#xA; * @author  &lt;a href=&quot;mailto:Kohsuke.Kawaguchi@Sun.com&quot;>Kohsuke Kawaguchi&lt;/a>&#xA; * @version $Revision: 1.11 $, $Date: 2004/02/06 01:16:10 $&#xA; * @see org.w3c.dom.TypeInfo &#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
