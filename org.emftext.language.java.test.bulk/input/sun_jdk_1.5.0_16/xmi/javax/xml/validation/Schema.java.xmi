<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Schema.java">
  <comments>// $Id: Schema.java,v 1.4 2003/12/06 00:21:36 jsuttor Exp $</comments>
  <comments>/*&#xA; * @(#)Schema.java&#x9;1.5 04/07/26&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>validation</namespaces>
  <classifiers xsi:type="classifiers:Class" name="Schema">
    <members xsi:type="members:Constructor" name="Schema">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructor for the derived class.&#xA;     * &#xA;     * &lt;p>&#xA;     * The constructor does nothing.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="newValidator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Validator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new {@link Validator} for this {@link Schema}.&#xA;     * &#xA;     * &lt;p>&#xA;     * A validator enforces/checks the set of constraints this object&#xA;     * represents.&#xA;     * &#xA;     * @return&#xA;     *      Always return a non-null valid object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="newValidatorHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ValidatorHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new {@link ValidatorHandler} for this {@link Schema}.&#xA;     * &#xA;     * @return&#xA;     *      Always return a non-null valid object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Immutable in-memory representation of grammar.&#xA; * &#xA; * &lt;p>&#xA; * This object represents a set of constraints that can be checked/&#xA; * enforced against an XML document. &#xA; * &#xA; * &lt;p>&#xA; * A {@link Schema} object is thread safe and applications are&#xA; * encouraged to share it across many parsers in many threads.&#xA; * &#xA; * &lt;p>&#xA; * A {@link Schema} object is immutable in the sense that it shouldn't&#xA; * change the set of constraints once it is created. In other words,&#xA; * if an application validates the same document twice against the same&#xA; * {@link Schema}, it must always produce the same result. &#xA; * &#xA; * &lt;p>&#xA; * A {@link Schema} object is usually created from {@link SchemaFactory}.&#xA; * &#xA; * &lt;p>&#xA; * Two kinds of validators can be created from a {@link Schema} object.&#xA; * One is {@link Validator}, which provides highly-level validation&#xA; * operations that cover typical use cases. The other is&#xA; * {@link ValidatorHandler}, which works on top of SAX for better&#xA; * modularity.&#xA; * &#xA; * &lt;p>&#xA; * This specification does not refine&#xA; * the {@link java.lang.Object#equals(java.lang.Object)} method.&#xA; * In other words, if you parse the same schema twice, you may&#xA; * still get &lt;code>!schemaA.equals(schemaB)&lt;/code>.&#xA; * &#xA; * @author &lt;a href=&quot;mailto:Kohsuke.Kawaguchi@Sun.com&quot;>Kohsuke Kawaguchi&lt;/a>&#xA; * @version $Revision: 1.4 $, $Date: 2003/12/06 00:21:36 $&#xA; * @see &lt;a href=&quot;http://www.w3.org/TR/xmlschema-1/&quot;>XML Schema Part 1: Structures&lt;/a>&#xA; * @see &lt;a href=&quot;http://www.w3.org/TR/xml11/&quot;>Extensible Markup Language (XML) 1.1&lt;/a>&#xA; * @see &lt;a href=&quot;http://www.w3.org/TR/REC-xml&quot;>Extensible Markup Language (XML) 1.0 (Second Edition)&lt;/a>&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
