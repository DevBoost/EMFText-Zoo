<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ValidatorHandler.java">
  <comments>// $Id: ValidatorHandler.java,v 1.23.16.1 2004/06/28 18:26:43 ndw Exp $</comments>
  <comments>/*&#xA; * @(#)ValidatorHandler.java&#x9;1.7 04/07/26&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>validation</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>ls</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../org/w3c/dom/ls/LSResourceResolver.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../org/xml/sax/ContentHandler.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../org/xml/sax/ErrorHandler.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotSupportedException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ValidatorHandler">
    <members xsi:type="members:Constructor" name="ValidatorHandler">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructor for derived classes.&#xA;     * &#xA;     * &lt;p>&#xA;     * The constructor does nothing.&#xA;     * &#xA;     * &lt;p>&#xA;     * Derived classes must create {@link ValidatorHandler} objects that have&#xA;     * &lt;tt>null&lt;/tt> {@link ErrorHandler} and&#xA;     * &lt;tt>null&lt;/tt> {@link LSResourceResolver}.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setContentHandler">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="receiver">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../org/xml/sax/ContentHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the {@link ContentHandler} which receives&#xA;     * the augmented validation result.&#xA;     *&#xA;     * &lt;p>&#xA;     * When a {@link ContentHandler} is specified, a&#xA;     * {@link ValidatorHandler} will work as a filter&#xA;     * and basically copy the incoming events to the&#xA;     * specified {@link ContentHandler}.&#xA;     * &#xA;     * &lt;p>&#xA;     * In doing so, a {@link ValidatorHandler} may modify&#xA;     * the events, for example by adding defaulted attributes.&#xA;     * &#xA;     * &lt;p>&#xA;     * A {@link ValidatorHandler} may buffer events to certain&#xA;     * extent, but to allow {@link ValidatorHandler} to be used&#xA;     * by a parser, the following requirement has to be met.&#xA;     * &#xA;     * &lt;ol>&#xA;     *  &lt;li>When&#xA;     *      {@link ContentHandler#startElement(String, String, String, Attributes)},&#xA;     *      {@link ContentHandler#endElement(String, String, String)},&#xA;     *      {@link ContentHandler#startDocument()}, or&#xA;     *      {@link ContentHandler#endDocument()}&#xA;     *      are invoked on a {@link ValidatorHandler},&#xA;     *      the same method on the user-specified {@link ContentHandler}&#xA;     *      must be invoked for the same event before the callback&#xA;     *      returns.&#xA;     *  &lt;li>{@link ValidatorHandler} may not introduce new elements that&#xA;     *      were not present in the input.&#xA;     * &#xA;     *  &lt;li>{@link ValidatorHandler} may not remove attributes that were&#xA;     *      present in the input.&#xA;     * &lt;/ol> &#xA;     * &#xA;     * &lt;p>&#xA;     * When a callback method on the specified {@link ContentHandler}&#xA;     * throws an exception, the same exception object must be thrown&#xA;     * from the {@link ValidatorHandler}. The {@link ErrorHandler}&#xA;     * should not be notified of such an exception.&#xA;     * &#xA;     * &lt;p>&#xA;     * This method can be called even during a middle of a validation.&#xA;     *&#xA;     * @param receiver&#xA;     *      A {@link ContentHandler} or a null value. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getContentHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../org/xml/sax/ContentHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the {@link ContentHandler} which receives the&#xA;     * augmented validation result.&#xA;     * &#xA;     * @return&#xA;     *      This method returns the object that was last set through&#xA;     *      the {@link #getContentHandler()} method, or null&#xA;     *      if that method has never been called since this {@link ValidatorHandler}&#xA;     *      has created.&#xA;     * &#xA;     * @see #setContentHandler(ContentHandler)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setErrorHandler">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="errorHandler">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../org/xml/sax/ErrorHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the {@link ErrorHandler} to receive errors encountered&#xA;     * during the validation.&#xA;     * &#xA;     * &lt;p>&#xA;     * Error handler can be used to customize the error handling process&#xA;     * during a validation. When an {@link ErrorHandler} is set,&#xA;     * errors found during the validation will be first sent&#xA;     * to the {@link ErrorHandler}.&#xA;     * &#xA;     * &lt;p>&#xA;     * The error handler can abort further validation immediately&#xA;     * by throwing {@link org.xml.sax.SAXException} from the handler. Or for example&#xA;     * it can print an error to the screen and try to continue the&#xA;     * validation by returning normally from the {@link ErrorHandler} &#xA;     * &#xA;     * &lt;p>&#xA;     * If any {@link Throwable} is thrown from an {@link ErrorHandler},&#xA;     * the same {@link Throwable} object will be thrown toward the&#xA;     * root of the call stack.&#xA;     * &#xA;     * &lt;p>&#xA;     * {@link ValidatorHandler} is not allowed to&#xA;     * throw {@link org.xml.sax.SAXException} without first reporting it to&#xA;     * {@link ErrorHandler}.&#xA;     * &#xA;     * &lt;p>&#xA;     * When the {@link ErrorHandler} is null, the implementation will&#xA;     * behave as if the following {@link ErrorHandler} is set:&#xA;     * &lt;pre>&#xA;     * class DraconianErrorHandler implements {@link ErrorHandler} {&#xA;     *     public void fatalError( {@link org.xml.sax.SAXParseException} e ) throws {@link org.xml.sax.SAXException} {&#xA;     *         throw e;&#xA;     *     }&#xA;     *     public void error( {@link org.xml.sax.SAXParseException} e ) throws {@link org.xml.sax.SAXException} {&#xA;     *         throw e;&#xA;     *     }&#xA;     *     public void warning( {@link org.xml.sax.SAXParseException} e ) throws {@link org.xml.sax.SAXException} {&#xA;     *         // noop&#xA;     *     }&#xA;     * }&#xA;     * &lt;/pre>&#xA;     * &#xA;     * &lt;p>&#xA;     * When a new {@link ValidatorHandler} object is created, initially&#xA;     * this field is set to null.&#xA;     * &#xA;     * @param   errorHandler&#xA;     *      A new error handler to be set. This parameter can be null.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getErrorHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../org/xml/sax/ErrorHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the current {@link ErrorHandler} set to this {@link ValidatorHandler}.&#xA;     * &#xA;     * @return&#xA;     *      This method returns the object that was last set through&#xA;     *      the {@link #setErrorHandler(ErrorHandler)} method, or null&#xA;     *      if that method has never been called since this {@link ValidatorHandler}&#xA;     *      has created.&#xA;     * &#xA;     * @see #setErrorHandler(ErrorHandler)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setResourceResolver">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="resourceResolver">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../org/w3c/dom/ls/LSResourceResolver.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the {@link LSResourceResolver} to customize&#xA;     * resource resolution while in a validation episode.&#xA;     * &#xA;     * &lt;p>&#xA;     * {@link ValidatorHandler} uses a {@link LSResourceResolver}&#xA;     * when it needs to locate external resources while a validation,&#xA;     * although exactly what constitutes &quot;locating external resources&quot; is&#xA;     * up to each schema language.&#xA;     * &#xA;     * &lt;p>&#xA;     * When the {@link LSResourceResolver} is null, the implementation will&#xA;     * behave as if the following {@link LSResourceResolver} is set:&#xA;     * &lt;pre>&#xA;     * class DumbLSResourceResolver implements {@link LSResourceResolver} {&#xA;     *     public {@link org.w3c.dom.ls.LSInput} resolveResource(&#xA;     *         String publicId, String systemId, String baseURI) {&#xA;     *         &#xA;     *         return null; // always return null&#xA;     *     }&#xA;     * }&#xA;     * &lt;/pre>&#xA;     * &#xA;     * &lt;p>&#xA;     * If a {@link LSResourceResolver} throws a {@link RuntimeException}&#xA;     *  (or instances of its derived classes),&#xA;     * then the {@link ValidatorHandler} will abort the parsing and  &#xA;     * the caller of the &lt;code>validate&lt;/code> method will receive&#xA;     * the same {@link RuntimeException}. &#xA;     * &#xA;     * &lt;p>&#xA;     * When a new {@link ValidatorHandler} object is created, initially&#xA;     * this field is set to null.&#xA;     * &#xA;     * @param   resourceResolver&#xA;     *      A new resource resolver to be set. This parameter can be null.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getResourceResolver">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../org/w3c/dom/ls/LSResourceResolver.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the current {@link LSResourceResolver} set to this {@link ValidatorHandler}.&#xA;     * &#xA;     * @return&#xA;     *      This method returns the object that was last set through&#xA;     *      the {@link #setResourceResolver(LSResourceResolver)} method, or null&#xA;     *      if that method has never been called since this {@link ValidatorHandler}&#xA;     *      has created.&#xA;     * &#xA;     * @see #setErrorHandler(ErrorHandler)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTypeInfoProvider">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeInfoProvider.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the {@link TypeInfoProvider} implementation of this&#xA;     * {@link ValidatorHandler}.&#xA;     * &#xA;     * &lt;p>&#xA;     * The obtained {@link TypeInfoProvider} can be queried during a parse&#xA;     * to access the type information determined by the validator.&#xA;     * &#xA;     * &lt;p>&#xA;     * Some schema languages do not define the notion of type,&#xA;     * for those languages, this method may not be supported.&#xA;     * However, to be compliant with this specification, implementations&#xA;     * for W3C XML Schema 1.0 must support this operation. &#xA;     * &#xA;     * @return&#xA;     *      null if the validator / schema language does not support&#xA;     *      the notion of {@link org.w3c.dom.TypeInfo}.&#xA;     *      Otherwise a non-null valid {@link TypeInfoProvider}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getFeature">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotSupportedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Look up the value of a feature flag.&#xA;     *&#xA;     * &lt;p>The feature name is any fully-qualified URI.  It is&#xA;     * possible for a {@link ValidatorHandler} to recognize a feature name but&#xA;     * temporarily be unable to return its value.&#xA;     * Some feature values may be available only in specific&#xA;     * contexts, such as before, during, or after a validation.&#xA;     *&#xA;     * &lt;p>Implementors are free (and encouraged) to invent their own features,&#xA;     * using names built on their own URIs.&lt;/p>&#xA;     *&#xA;     * @param name The feature name, which is a non-null fully-qualified URI.&#xA;     * @return The current value of the feature (true or false).&#xA;     * @exception org.xml.sax.SAXNotRecognizedException If the feature&#xA;     *            value can't be assigned or retrieved.&#xA;     * @exception org.xml.sax.SAXNotSupportedException When the&#xA;     *            {@link ValidatorHandler} recognizes the feature name but &#xA;     *            cannot determine its value at this time.&#xA;     * @throws NullPointerException&#xA;     *          When the name parameter is null.&#xA;     * @see #setFeature(String, boolean)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setFeature">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotSupportedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the value of a feature flag.&#xA;     *&#xA;     * &lt;p>&#xA;     * Feature can be used to control the way a {@link ValidatorHandler}&#xA;     * parses schemas, although {@link ValidatorHandler}s are not required&#xA;     * to recognize any specific property names.&lt;/p>&#xA;     *&#xA;     * &lt;p>The feature name is any fully-qualified URI.  It is&#xA;     * possible for a {@link ValidatorHandler} to expose a feature value but&#xA;     * to be unable to change the current value.&#xA;     * Some feature values may be immutable or mutable only &#xA;     * in specific contexts, such as before, during, or after &#xA;     * a validation.&lt;/p>&#xA;     *&#xA;     * @param name The feature name, which is a non-null fully-qualified URI.&#xA;     * @param value The requested value of the feature (true or false).&#xA;     * &#xA;     * @exception org.xml.sax.SAXNotRecognizedException If the feature&#xA;     *            value can't be assigned or retrieved.&#xA;     * @exception org.xml.sax.SAXNotSupportedException When the&#xA;     *            {@link ValidatorHandler} recognizes the feature name but &#xA;     *            cannot set the requested value.&#xA;     * @throws NullPointerException&#xA;     *          When the name parameter is null.&#xA;     * &#xA;     * @see #getFeature(String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setProperty">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotSupportedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the value of a property.&#xA;     *&#xA;     * &lt;p>The property name is any fully-qualified URI.  It is&#xA;     * possible for a {@link ValidatorHandler} to recognize a property name but&#xA;     * to be unable to change the current value.&#xA;     * Some property values may be immutable or mutable only &#xA;     * in specific contexts, such as before, during, or after &#xA;     * a validation.&lt;/p>&#xA;     *&#xA;     * &lt;p>{@link ValidatorHandler}s are not required to recognize setting&#xA;     * any specific property names.&lt;/p>&#xA;     *&#xA;     * @param name The property name, which is a non-null fully-qualified URI.&#xA;     * @param object The requested value for the property.&#xA;     * &#xA;     * @exception org.xml.sax.SAXNotRecognizedException If the property&#xA;     *            value can't be assigned or retrieved.&#xA;     * @exception org.xml.sax.SAXNotSupportedException When the&#xA;     *            {@link ValidatorHandler} recognizes the property name but &#xA;     *            cannot set the requested value.&#xA;     * @throws NullPointerException&#xA;     *          When the name parameter is null.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getProperty">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotSupportedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Look up the value of a property.&#xA;     *&#xA;     * &lt;p>The property name is any fully-qualified URI.  It is&#xA;     * possible for a {@link ValidatorHandler} to recognize a property name but&#xA;     * temporarily be unable to return its value.&#xA;     * Some property values may be available only in specific&#xA;     * contexts, such as before, during, or after a validation.&lt;/p>&#xA;     *&#xA;     * &lt;p>{@link ValidatorHandler}s are not required to recognize any specific&#xA;     * property names.&lt;/p>&#xA;     *&#xA;     * &lt;p>Implementors are free (and encouraged) to invent their own properties,&#xA;     * using names built on their own URIs.&lt;/p>&#xA;     *&#xA;     * @param name The property name, which is a non-null fully-qualified URI.&#xA;     * @return The current value of the property.&#xA;     * @exception org.xml.sax.SAXNotRecognizedException If the property&#xA;     *            value can't be assigned or retrieved.&#xA;     * @exception org.xml.sax.SAXNotSupportedException When the&#xA;     *            XMLReader recognizes the property name but &#xA;     *            cannot determine its value at this time.&#xA;     * @throws NullPointerException&#xA;     *          When the name parameter is null.&#xA;     * @see #setProperty(String, Object)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
        </throwable>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Streaming validator that works on SAX stream.&#xA; * &#xA; * &lt;p>&#xA; * A {@link ValidatorHandler} object is a thread-unsafe, non-reentrant object.&#xA; * In other words, it is the application's responsibility to make&#xA; * sure that one {@link ValidatorHandler} object is not used from&#xA; * more than one thread at any given time.&#xA; * &#xA; * &lt;p>&#xA; * {@link ValidatorHandler} checks if the SAX events follow &#xA; * the set of constraints described in the associated {@link Schema},&#xA; * and additionally it may modify the SAX events (for example&#xA; * by adding default values, etc.)&#xA; * &#xA; * &lt;p>&#xA; * {@link ValidatorHandler} extends from {@link ContentHandler},&#xA; * but it refines the underlying {@link ContentHandler} in&#xA; * the following way:&#xA; * &lt;ol>&#xA; *  &lt;li>startElement/endElement events must receive non-null String&#xA; *      for &lt;code>uri&lt;/code>, &lt;code>localName&lt;/code>, and &lt;code>qname&lt;/code>,&#xA; *      even though SAX allows some of them to be null.&#xA; *      Similarly, the user-specified {@link ContentHandler} will receive non-null&#xA; *      Strings for all three parameters.&#xA; * &#xA; *  &lt;li>Applications must ensure that {@link ValidatorHandler}'s&#xA; *      {@link ContentHandler#startPrefixMapping(String,String)} and&#xA; *      {@link ContentHandler#endPrefixMapping(String)} are invoked&#xA; *      properly. Similarly, the user-specified {@link ContentHandler}&#xA; *      will receive startPrefixMapping/endPrefixMapping events.&#xA; *      If the {@link ValidatorHandler} introduces additional namespace&#xA; *      bindings, the user-specified {@link ContentHandler} will receive&#xA; *      additional startPrefixMapping/endPrefixMapping events.&#xA; * &#xA; *  &lt;li>{@link org.xml.sax.Attributes} for the&#xA; *      {@link ContentHandler#startElement(String,String,String,Attributes)} method&#xA; *      may or may not include xmlns* attributes.&#xA; * &lt;/ol>&#xA; * &#xA; * &lt;p>&#xA; * A {@link ValidatorHandler} is automatically reset every time&#xA; * the startDocument method is invoked.&#xA; * &#xA; * &lt;h2>Recognized Properties and Features&lt;/h2>&#xA; * &lt;p>&#xA; * This spec defines the following feature that must be recognized&#xA; * by all {@link ValidatorHandler} implementations.&#xA; * &#xA; * &lt;h3>&lt;code>http://xml.org/sax/features/namespace-prefixes&lt;/code>&lt;/h3>&#xA; * &lt;p>&#xA; * This feature controls how a {@link ValidatorHandler} introduces&#xA; * namespace bindings that were not present in the original SAX event&#xA; * stream.&#xA; * When this feature is set to true, it must make&#xA; * sure that the user's {@link ContentHandler} will see &#xA; * the corresponding &lt;code>xmlns*&lt;/code> attribute in&#xA; * the {@link org.xml.sax.Attributes} object of the&#xA; * {@link ContentHandler#startElement(String,String,String,Attributes)}&#xA; * callback. Otherwise, &lt;code>xmlns*&lt;/code> attributes must not be&#xA; * added to {@link org.xml.sax.Attributes} that's passed to the&#xA; * user-specified {@link ContentHandler}.&#xA; * &lt;p> &#xA; * (Note that regardless of this switch, namespace bindings are&#xA; * always notified to applications through &#xA; * {@link ContentHandler#startPrefixMapping(String,String)} and&#xA; * {@link ContentHandler#endPrefixMapping(String)} methods of the&#xA; * {@link ContentHandler} specified by the user.)&#xA; * &#xA; * &lt;p>&#xA; * Note that this feature does &lt;em>NOT&lt;/em> affect the way&#xA; * a {@link ValidatorHandler} receives SAX events. It merely&#xA; * changes the way it augments SAX events.&#xA; * &#xA; * &lt;p>This feature is set to &lt;code>false&lt;/code> by default.&lt;/p>&#xA; * &#xA; * @author  &lt;a href=&quot;mailto:Kohsuke.Kawaguchi@Sun.com&quot;>Kohsuke Kawaguchi&lt;/a>&#xA; * @version $Revision: 1.23.16.1 $, $Date: 2004/06/28 18:26:43 $&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../org/xml/sax/ContentHandler.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
