<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Validator.java">
  <comments>// $Id: Validator.java,v 1.18.14.1.2.4 2004/07/13 22:27:52 jsuttor Exp $</comments>
  <comments>/*&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>validation</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>transform</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../transform/Result.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>transform</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../transform/Source.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>ls</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../org/w3c/dom/ls/LSResourceResolver.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../org/xml/sax/ErrorHandler.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotSupportedException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Validator">
    <members xsi:type="members:Constructor" name="Validator">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructor for derived classes.&#xA;     * &#xA;     * &lt;p>&#xA;     * The constructor does nothing.&#xA;     * &#xA;     * &lt;p>&#xA;     * Derived classes must create {@link Validator} objects that have&#xA;     * &lt;tt>null&lt;/tt> {@link ErrorHandler} and&#xA;     * &lt;tt>null&lt;/tt> {@link LSResourceResolver}.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="reset">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;&#x9; * &lt;p>Reset this &lt;code>Validator&lt;/code> to its original configuration.&lt;/p>&#xA;&#x9; * &#xA;&#x9; * &lt;p>&lt;code>Validator&lt;/code> is reset to the same state as when it was created with&#xA;&#x9; * {@link Schema#newValidator()}.&#xA;&#x9; * &lt;code>reset()&lt;/code> is designed to allow the reuse of existing &lt;code>Validator&lt;/code>s&#xA;&#x9; * thus saving resources associated with the creation of new &lt;code>Validator&lt;/code>s.&lt;/p>&#xA;&#x9; * &#xA;&#x9; * &lt;p>The reset &lt;code>Validator&lt;/code> is not guaranteed to have the same {@link LSResourceResolver} or {@link ErrorHandler}&#xA;&#x9; * &lt;code>Object&lt;/code>s, e.g. {@link Object#equals(Object obj)}.  It is guaranteed to have a functionally equal&#xA;&#x9; * &lt;code>LSResourceResolver&lt;/code> and &lt;code>ErrorHandler&lt;/code>.&lt;/p>&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="validate">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="source">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../transform/Source.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Validates the specified input.&#xA;     * &#xA;     * &lt;p>&#xA;     * This is just a convenience method of:&#xA;     * &lt;pre>&#xA;     * validate(source,null);&#xA;     * &lt;/pre>&#xA;     * &#xA;     * @see #setErrorHandler(ErrorHandler)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.3">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <arguments xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="validate">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="source">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../transform/Source.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="result">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../transform/Result.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Validates the specified input and send the augmented validation&#xA;     * result to the specified output.&#xA;     * &#xA;     * &lt;p>&#xA;     * This method places the following restrictions on the types of&#xA;     * the {@link Source}/{@link Result} accepted.&#xA;     * &#xA;     * &lt;h4>{@link Source}/{@link Result} accepted:&lt;/h4>&#xA;     * &lt;table border=1>&#xA;     * &lt;thead>&#xA;     *  &lt;tr>&#xA;     *   &lt;td>&lt;/td>&#xA;     *   &lt;td>{@link javax.xml.transform.sax.SAXSource}&lt;/td>&#xA;     *   &lt;td>{@link javax.xml.transform.dom.DOMSource}&lt;/td>&#xA;     *  &lt;/tr>&#xA;     * &lt;/thead>&#xA;     * &lt;tbody>&#xA;     *  &lt;tr>&#xA;     *   &lt;td>&lt;tt>null&lt;/tt>&lt;/td>&#xA;     *   &lt;td>OK&lt;/td>&#xA;     *   &lt;td>OK&lt;/td>&#xA;     *  &lt;/tr>&#xA;     *  &lt;tr>&#xA;     *   &lt;td>{@link javax.xml.transform.sax.SAXResult}&lt;/td>&#xA;     *   &lt;td>OK&lt;/td>&#xA;     *   &lt;td>Err&lt;/td>&#xA;     *  &lt;/tr>&#xA;     *  &lt;tr>&#xA;     *   &lt;td>{@link javax.xml.transform.dom.DOMResult}&lt;/td>&#xA;     *   &lt;td>Err&lt;/td>&#xA;     *   &lt;td>OK&lt;/td>&#xA;     *  &lt;/tr>&#xA;     * &lt;/tbody>&#xA;     * &lt;/table>&#xA;     *&#xA;     * &lt;p>&#xA;     * &lt;strong>Note that {@link javax.xml.transform.stream.StreamSource} instances are not allowed.&lt;/strong> To process&#xA;     * a &lt;code>StreamSource&lt;/code>, or to validate one {@link Source} into another kind of {@link Result}, use the identity transformer&#xA;     * (see {@link javax.xml.transform.TransformerFactory#newTransformer()}).&#xA;     * &#xA;     * &lt;p>&#xA;     * Errors found during the validation is sent to the specified&#xA;     * {@link ErrorHandler}.&#xA;     * &#xA;     * &lt;p>&#xA;     * If a document is valid, or if a document contains some errors&#xA;     * but none of them were fatal and the {@link ErrorHandler} didn't&#xA;     * throw any exception, then the method returns normally.&#xA;     * &#xA;     * @param source&#xA;     *      XML to be validated. Must not be null.&#xA;     * &#xA;     * @param result&#xA;     *      The {@link Result} object that receives (possibly augmented)&#xA;     *      XML. This parameter can be null if the caller is not interested&#xA;     *      in it.&#xA;     *      &#xA;     *      Note that when a {@link javax.xml.transform.dom.DOMResult} is used,&#xA;     *      a validator might just pass the same DOM node from&#xA;     *      {@link javax.xml.transform.dom.DOMSource} to&#xA;     *      {@link javax.xml.transform.dom.DOMResult}&#xA;     *      (in which case &lt;tt>source.getNode()==result.getNode()&lt;/tt>),&#xA;     *      it might copy the entire DOM tree, or it might alter the&#xA;     *      node given by the source.&#xA;     * &#xA;     * @throws IllegalArgumentException&#xA;     *      If the {@link Result} type doesn't match the {@link Source} type,&#xA;     *      or if the specified source is neither&#xA;     *      {@link javax.xml.transform.sax.SAXSource} nor&#xA;     *      {@link javax.xml.transform.dom.DOMSource}. &#xA;     * &#xA;     * @throws SAXException&#xA;     *      If the {@link ErrorHandler} throws a {@link SAXException} or&#xA;     *      if a fatal error is found and the {@link ErrorHandler} returns&#xA;     *      normally.&#xA;     * &#xA;     * @throws IOException&#xA;     *      If the validator is processing a&#xA;     *      {@link javax.xml.transform.sax.SAXSource} and the&#xA;     *      underlying {@link org.xml.sax.XMLReader} throws an&#xA;     *      {@link IOException}.&#xA;     * &#xA;     * @throws NullPointerException&#xA;     *      If the &lt;tt>source&lt;/tt> parameter is null.&#xA;     * &#xA;     * @see #validate(Source)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setErrorHandler">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="errorHandler">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../org/xml/sax/ErrorHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the {@link ErrorHandler} to receive errors encountered&#xA;     * during the &lt;code>validate&lt;/code> method invocation.&#xA;     * &#xA;     * &lt;p>&#xA;     * Error handler can be used to customize the error handling process&#xA;     * during a validation. When an {@link ErrorHandler} is set,&#xA;     * errors found during the validation will be first sent&#xA;     * to the {@link ErrorHandler}.&#xA;     * &#xA;     * &lt;p>&#xA;     * The error handler can abort further validation immediately&#xA;     * by throwing {@link SAXException} from the handler. Or for example&#xA;     * it can print an error to the screen and try to continue the&#xA;     * validation by returning normally from the {@link ErrorHandler} &#xA;     * &#xA;     * &lt;p>&#xA;     * If any {@link Throwable} is thrown from an {@link ErrorHandler},&#xA;     * the caller of the &lt;code>validate&lt;/code> method will be thrown&#xA;     * the same {@link Throwable} object.&#xA;     * &#xA;     * &lt;p>&#xA;     * {@link Validator} is not allowed to&#xA;     * throw {@link SAXException} without first reporting it to&#xA;     * {@link ErrorHandler}.&#xA;     * &#xA;     * &lt;p>&#xA;     * When the {@link ErrorHandler} is null, the implementation will&#xA;     * behave as if the following {@link ErrorHandler} is set:&#xA;     * &lt;pre>&#xA;     * class DraconianErrorHandler implements {@link ErrorHandler} {&#xA;     *     public void fatalError( {@link org.xml.sax.SAXParseException} e ) throws {@link SAXException} {&#xA;     *         throw e;&#xA;     *     }&#xA;     *     public void error( {@link org.xml.sax.SAXParseException} e ) throws {@link SAXException} {&#xA;     *         throw e;&#xA;     *     }&#xA;     *     public void warning( {@link org.xml.sax.SAXParseException} e ) throws {@link SAXException} {&#xA;     *         // noop&#xA;     *     }&#xA;     * }&#xA;     * &lt;/pre>&#xA;     * &#xA;     * &lt;p>&#xA;     * When a new {@link Validator} object is created, initially&#xA;     * this field is set to null.&#xA;     * &#xA;     * @param   errorHandler&#xA;     *      A new error handler to be set. This parameter can be null.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getErrorHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../org/xml/sax/ErrorHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the current {@link ErrorHandler} set to this {@link Validator}.&#xA;     * &#xA;     * @return&#xA;     *      This method returns the object that was last set through&#xA;     *      the {@link #setErrorHandler(ErrorHandler)} method, or null&#xA;     *      if that method has never been called since this {@link Validator}&#xA;     *      has created.&#xA;     * &#xA;     * @see #setErrorHandler(ErrorHandler)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setResourceResolver">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="resourceResolver">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../org/w3c/dom/ls/LSResourceResolver.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the {@link LSResourceResolver} to customize&#xA;     * resource resolution while in a validation episode.&#xA;     * &#xA;     * &lt;p>&#xA;     * {@link Validator} uses a {@link LSResourceResolver}&#xA;     * when it needs to locate external resources while a validation,&#xA;     * although exactly what constitutes &quot;locating external resources&quot; is&#xA;     * up to each schema language.&#xA;     * &#xA;     * &lt;p>&#xA;     * When the {@link LSResourceResolver} is null, the implementation will&#xA;     * behave as if the following {@link LSResourceResolver} is set:&#xA;     * &lt;pre>&#xA;     * class DumbLSResourceResolver implements {@link LSResourceResolver} {&#xA;     *     public {@link org.w3c.dom.ls.LSInput} resolveResource(&#xA;     *         String publicId, String systemId, String baseURI) {&#xA;     *         &#xA;     *         return null; // always return null&#xA;     *     }&#xA;     * }&#xA;     * &lt;/pre>&#xA;     * &#xA;     * &lt;p>&#xA;     * If a {@link LSResourceResolver} throws a {@link RuntimeException}&#xA;     *  (or instances of its derived classes),&#xA;     * then the {@link Validator} will abort the parsing and  &#xA;     * the caller of the &lt;code>validate&lt;/code> method will receive&#xA;     * the same {@link RuntimeException}. &#xA;     * &#xA;     * &lt;p>&#xA;     * When a new {@link Validator} object is created, initially&#xA;     * this field is set to null.&#xA;     * &#xA;     * @param   resourceResolver&#xA;     *      A new resource resolver to be set. This parameter can be null.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getResourceResolver">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../org/w3c/dom/ls/LSResourceResolver.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the current {@link LSResourceResolver} set to this {@link Validator}.&#xA;     * &#xA;     * @return&#xA;     *      This method returns the object that was last set through&#xA;     *      the {@link #setResourceResolver(LSResourceResolver)} method, or null&#xA;     *      if that method has never been called since this {@link Validator}&#xA;     *      has created.&#xA;     * &#xA;     * @see #setErrorHandler(ErrorHandler)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getFeature">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotSupportedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Look up the value of a feature flag.&#xA;     *&#xA;     * &lt;p>The feature name is any fully-qualified URI.  It is&#xA;     * possible for a {@link Validator} to recognize a feature name but&#xA;     * temporarily be unable to return its value.&#xA;     * Some feature values may be available only in specific&#xA;     * contexts, such as before, during, or after a validation.&#xA;     *&#xA;     * &lt;p>Implementors are free (and encouraged) to invent their own features,&#xA;     * using names built on their own URIs.&lt;/p>&#xA;     *&#xA;     * @param name The feature name, which is a non-null fully-qualified URI.&#xA;     * @return The current value of the feature (true or false).&#xA;     * @exception org.xml.sax.SAXNotRecognizedException If the feature&#xA;     *            value can't be assigned or retrieved.&#xA;     * @exception org.xml.sax.SAXNotSupportedException When the&#xA;     *            {@link Validator} recognizes the feature name but &#xA;     *            cannot determine its value at this time.&#xA;     * @throws NullPointerException&#xA;     *          When the name parameter is null.&#xA;     * @see #setFeature(String, boolean)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="the name parameter is null"/>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setFeature">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotSupportedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the value of a feature flag.&#xA;     *&#xA;     * &lt;p>&#xA;     * Feature can be used to control the way a {@link Validator}&#xA;     * parses schemas, although {@link Validator}s are not required&#xA;     * to recognize any specific property names.&lt;/p>&#xA;     *&#xA;     * &lt;p>The feature name is any fully-qualified URI.  It is&#xA;     * possible for a {@link Validator} to expose a feature value but&#xA;     * to be unable to change the current value.&#xA;     * Some feature values may be immutable or mutable only &#xA;     * in specific contexts, such as before, during, or after &#xA;     * a validation.&lt;/p>&#xA;     *&#xA;     * @param name The feature name, which is a non-null fully-qualified URI.&#xA;     * @param value The requested value of the feature (true or false).&#xA;     * &#xA;     * @exception org.xml.sax.SAXNotRecognizedException If the feature&#xA;     *            value can't be assigned or retrieved.&#xA;     * @exception org.xml.sax.SAXNotSupportedException When the&#xA;     *            {@link Validator} recognizes the feature name but &#xA;     *            cannot set the requested value.&#xA;     * @throws NullPointerException&#xA;     *          When the name parameter is null.&#xA;     * &#xA;     * @see #getFeature(String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="the name parameter is null"/>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setProperty">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotSupportedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the value of a property.&#xA;     *&#xA;     * &lt;p>The property name is any fully-qualified URI.  It is&#xA;     * possible for a {@link Validator} to recognize a property name but&#xA;     * to be unable to change the current value.&#xA;     * Some property values may be immutable or mutable only &#xA;     * in specific contexts, such as before, during, or after &#xA;     * a validation.&lt;/p>&#xA;     *&#xA;     * &lt;p>{@link Validator}s are not required to recognize setting&#xA;     * any specific property names.&lt;/p>&#xA;     *&#xA;     * @param name The property name, which is a non-null fully-qualified URI.&#xA;     * @param object The requested value for the property.&#xA;     * @exception org.xml.sax.SAXNotRecognizedException If the property&#xA;     *            value can't be assigned or retrieved.&#xA;     * @exception org.xml.sax.SAXNotSupportedException When the&#xA;     *            {@link Validator} recognizes the property name but &#xA;     *            cannot set the requested value.&#xA;     * @throws NullPointerException&#xA;     *          When the name parameter is null.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="the name parameter is null"/>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getProperty">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotSupportedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Look up the value of a property.&#xA;     *&#xA;     * &lt;p>The property name is any fully-qualified URI.  It is&#xA;     * possible for a {@link Validator} to recognize a property name but&#xA;     * temporarily be unable to return its value.&#xA;     * Some property values may be available only in specific&#xA;     * contexts, such as before, during, or after a validation.&lt;/p>&#xA;     *&#xA;     * &lt;p>{@link Validator}s are not required to recognize any specific&#xA;     * property names.&lt;/p>&#xA;     *&#xA;     * &lt;p>Implementors are free (and encouraged) to invent their own properties,&#xA;     * using names built on their own URIs.&lt;/p>&#xA;     *&#xA;     * @param name The property name, which is a non-null fully-qualified URI.&#xA;     * @return The current value of the property.&#xA;     * @exception org.xml.sax.SAXNotRecognizedException If the property&#xA;     *            value can't be assigned or retrieved.&#xA;     * @exception org.xml.sax.SAXNotSupportedException When the&#xA;     *            XMLReader recognizes the property name but &#xA;     *            cannot determine its value at this time.&#xA;     * @throws NullPointerException&#xA;     *          When the name parameter is null.&#xA;     * @see #setProperty(String, Object)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="the name parameter is null"/>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
        </throwable>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>A processor that checks an XML document against {@link Schema}.&lt;/p>&#xA; * &#xA; * &lt;p>&#xA; * A validator is a thread-unsafe and non-reentrant object.&#xA; * In other words, it is the application's responsibility to make&#xA; * sure that one {@link Validator} object is not used from&#xA; * more than one thread at any given time, and while the &lt;tt>validate&lt;/tt>&#xA; * method is invoked, applications may not recursively call&#xA; * the &lt;tt>validate&lt;/tt> method.&#xA; * &lt;p>&#xA; *&#xA; * Note that while the {@link #validate(javax.xml.transform.Source)} and {@link #validate(javax.xml.transform.Source, javax.xml.transform.Result)}&#xA; * methods take a {@link Source} instance, the &lt;code>Source&lt;/code>&#xA; * instance must be a &lt;code>SAXSource&lt;/code> or &lt;code>DOMSource&lt;/code>.&#xA; *&#xA; * @author  &lt;a href=&quot;mailto:Kohsuke.Kawaguchi@Sun.com&quot;>Kohsuke Kawaguchi&lt;/a>&#xA; * @version $Revision: 1.18.14.1.2.4 $, $Date: 2004/07/13 22:27:52 $&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
