<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="MidiFileReader.java">
  <comments>/*&#xA; * @(#)MidiFileReader.java&#x9;1.13 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sound</namespaces>
  <namespaces>midi</namespaces>
  <namespaces>spi</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>sound</namespaces>
    <namespaces>midi</namespaces>
    <classifier xsi:type="classifiers:Class" href="../MidiFileFormat.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>sound</namespaces>
    <namespaces>midi</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Sequence.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>sound</namespaces>
    <namespaces>midi</namespaces>
    <classifier xsi:type="classifiers:Class" href="../InvalidMidiDataException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="MidiFileReader">
    <members xsi:type="members:InterfaceMethod" name="getMidiFileFormat">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MidiFileFormat.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../InvalidMidiDataException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the MIDI file format of the input stream provided.  The stream must&#xA;     * point to valid MIDI file data.  In general, MIDI file readers may &#xA;     * need to read some data from the stream before determining whether they&#xA;     * support it.  These parsers must&#xA;     * be able to mark the stream, read enough data to determine whether they &#xA;     * support the stream, and, if not, reset the stream's read pointer to its original &#xA;     * position.  If the input stream does not support this, this method may fail&#xA;     * with an &lt;code>IOException&lt;/code>. &#xA;     * @param stream the input stream from which file format information should be&#xA;     * extracted&#xA;     * @return a &lt;code>MidiFileFormat&lt;/code> object describing the MIDI file format&#xA;     * @throws InvalidMidiDataException if the stream does not point to valid MIDI&#xA;     * file data recognized by the system&#xA;     * @throws IOException if an I/O exception occurs&#xA;     * @see InputStream#markSupported&#xA;     * @see InputStream#mark&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMidiFileFormat">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MidiFileFormat.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="url">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../InvalidMidiDataException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the MIDI file format of the URL provided.  The URL must&#xA;     * point to valid MIDI file data.&#xA;     * @param url the URL from which file format information should be&#xA;     * extracted&#xA;     * @return a &lt;code>MidiFileFormat&lt;/code> object describing the MIDI file format&#xA;     * @throws InvalidMidiDataException if the URL does not point to valid MIDI&#xA;     * file data recognized by the system&#xA;     * @throws IOException if an I/O exception occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMidiFileFormat">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MidiFileFormat.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="file">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../InvalidMidiDataException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the MIDI file format of the &lt;code>File&lt;/code> provided.  &#xA;     * The &lt;code>File&lt;/code> must point to valid MIDI file data.&#xA;     * @param file the &lt;code>File&lt;/code> from which file format information should be&#xA;     * extracted&#xA;     * @return a &lt;code>MidiFileFormat&lt;/code> object describing the MIDI file format&#xA;     * @throws InvalidMidiDataException if the &lt;code>File&lt;/code> does not point to valid MIDI&#xA;     * file data recognized by the system&#xA;     * @throws IOException if an I/O exception occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSequence">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Sequence.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../InvalidMidiDataException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains a MIDI sequence from the input stream provided.  The stream must&#xA;     * point to valid MIDI file data.  In general, MIDI file readers may &#xA;     * need to read some data from the stream before determining whether they&#xA;     * support it.  These parsers must&#xA;     * be able to mark the stream, read enough data to determine whether they &#xA;     * support the stream, and, if not, reset the stream's read pointer to its original &#xA;     * position.  If the input stream does not support this, this method may fail&#xA;     * with an IOException. &#xA;     * @param stream the input stream from which the &lt;code>Sequence&lt;/code> should be&#xA;     * constructed&#xA;     * @return a &lt;code>Sequence&lt;/code> object based on the MIDI file data contained&#xA;     * in the input stream.&#xA;     * @throws InvalidMidiDataException if the stream does not point to valid MIDI&#xA;     * file data recognized by the system&#xA;     * @throws IOException if an I/O exception occurs&#xA;     * @see InputStream#markSupported&#xA;     * @see InputStream#mark&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSequence">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Sequence.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="url">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../InvalidMidiDataException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains a MIDI sequence from the URL provided.  The URL must&#xA;     * point to valid MIDI file data.&#xA;     * @param url the URL for which the &lt;code>Sequence&lt;/code> should be&#xA;     * constructed&#xA;     * @return a &lt;code>Sequence&lt;/code> object based on the MIDI file data pointed&#xA;     * to by the URL&#xA;     * @throws InvalidMidiDataException if the URL does not point to valid MIDI&#xA;     * file data recognized by the system&#xA;     * @throws IOException if an I/O exception occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSequence">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Sequence.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="file">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../InvalidMidiDataException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains a MIDI sequence from the &lt;code>File&lt;/code> provided.  The &lt;code>File&lt;/code> must&#xA;     * point to valid MIDI file data.&#xA;     * @param file the &lt;code>File&lt;/code> from which the &lt;code>Sequence&lt;/code> should be&#xA;     * constructed&#xA;     * @return a &lt;code>Sequence&lt;/code> object based on the MIDI file data pointed&#xA;     * to by the &lt;code>File&lt;/code>&#xA;     * @throws InvalidMidiDataException if the &lt;code>File&lt;/code> does not point to valid MIDI&#xA;     * file data recognized by the system&#xA;     * @throws IOException if an I/O exception occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A &lt;code>MidiFileReader&lt;/code> supplies MIDI file-reading services.  Classes implementing this&#xA; * interface can parse the format information from one or more types of&#xA; * MIDI file, and can produce a &lt;code>Sequence&lt;/code> object from files of these types.&#xA; *&#xA; * @author Kara Kytle&#xA; * @version 1.13 03/12/19&#xA; * @since 1.3&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
