<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Patch.java">
  <comments>/*&#xA; * @(#)Patch.java&#x9;1.12 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sound</namespaces>
  <namespaces>midi</namespaces>
  <classifiers xsi:type="classifiers:Class" name="Patch">
    <members xsi:type="members:Field" name="bank">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Bank index&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="program">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Program change number&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="Patch">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bank">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="program">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new patch object from the specified bank and program&#xA;     * numbers.&#xA;     * @param bank the bank index (in the range from 0 to 16383)&#xA;     * @param program the program index (in the range from 0 to 127)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getBank">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of the bank that contains the instrument&#xA;     * whose location this &lt;code>Patch&lt;/code> specifies.&#xA;     * @return the bank number, whose range is from 0 to 16383&#xA;     * @see MidiChannel#programChange(int, int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getProgram">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the index, within&#xA;     * a bank, of the instrument whose location this &lt;code>Patch&lt;/code> specifies.&#xA;     * @return the instrument's program number, whose range is from 0 to 127&#xA;     *&#xA;     * @see MidiChannel#getProgram&#xA;     * @see MidiChannel#programChange(int)&#xA;     * @see MidiChannel#programChange(int, int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A &lt;code>Patch&lt;/code> object represents a location, on a MIDI &#xA; * synthesizer, into which a single instrument is stored (loaded).  &#xA; * Every &lt;code>Instrument&lt;/code> object has its own &lt;code>Patch&lt;/code>&#xA; * object that specifies the memory location&#xA; * into which that instrument should be loaded. The &#xA; * location is specified abstractly by a bank index and a program number (not by&#xA; * any scheme that directly refers to a specific address or offset in RAM).&#xA; * This is a hierarchical indexing scheme: MIDI provides for up to 16384 banks,&#xA; * each of which contains up to 128 program locations.  For example, a&#xA; * minimal sort of synthesizer might have only one bank of instruments, and &#xA; * only 32 instruments (programs) in that bank.  &#xA; * &lt;p>&#xA; * To select what instrument should play the notes on a particular MIDI&#xA; * channel, two kinds of MIDI message are used that specify a patch location:&#xA; * a bank-select command, and a program-change channel command.  The Java Sound&#xA; * equivalent is the &#xA; * {@link MidiChannel#programChange(int, int) programChange(int, int)}&#xA; * method of &lt;code>MidiChannel&lt;/code>.&#xA; * &#xA; * @see Instrument&#xA; * @see Instrument#getPatch()&#xA; * @see MidiChannel#programChange(int, int)&#xA; * @see Synthesizer#loadInstruments(Soundbank, Patch[])&#xA; * @see Soundbank&#xA; * @see Sequence#getPatchList()&#xA; *&#xA; * @author Kara Kytle&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
