<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Soundbank.java">
  <comments>/*&#xA; * @(#)Soundbank.java&#x9;1.24 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sound</namespaces>
  <namespaces>midi</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/net/URL.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Soundbank">
    <members xsi:type="members:InterfaceMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the name of the sound bank.&#xA;     * @return a &lt;code>String&lt;/code> naming the sound bank&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getVersion">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the version string for the sound bank.&#xA;     * @return a &lt;code>String&lt;/code> that indicates the sound bank's version&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getVendor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains a &lt;code>string&lt;/code> naming the company that provides the&#xA;     * sound bank&#xA;     * @return the vendor string&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDescription">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains a textual description of the sound bank, suitable for display.&#xA;     * @return a &lt;code>String&lt;/code> that describes the sound bank&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getResources">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SoundbankResource.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Extracts a list of non-Instrument resources contained in the sound bank.&#xA;     * @return an array of resources, exclusing instruments.  If the sound bank contains&#xA;     * no resources (other than instruments), returns an array of length 0.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getInstruments">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Instrument.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains a list of instruments contained in this sound bank.&#xA;     * @return an array of the &lt;code>Instruments&lt;/code> in this&#xA;     * &lt;code>SoundBank&lt;/code>&#xA;     * If the sound bank contains no instruments, returns an array of length 0.&#xA;     *&#xA;     * @see Synthesizer#getLoadedInstruments&#xA;     * @see #getInstrument(Patch)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getInstrument">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Instrument.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="patch">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Patch.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains an &lt;code>Instrument&lt;/code> from the given &lt;code>Patch&lt;/code>.&#xA;     * @param patch a &lt;code>Patch&lt;/code> object specifying the bank index&#xA;     * and program change number&#xA;     * @return the requested instrument, or &lt;code>null&lt;/code> if the&#xA;     * sound bank doesn't contain that instrument&#xA;     *&#xA;     * @see #getInstruments&#xA;     * @see Synthesizer#loadInstruments(Soundbank, Patch[])&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A &lt;code>Soundbank&lt;/code> contains a set of &lt;code>Instruments&lt;/code>&#xA; * that can be loaded into a &lt;code>Synthesizer&lt;/code>.&#xA; * Note that a Java Sound &lt;code>Soundbank&lt;/code> is different from a MIDI bank.&#xA; * MIDI permits up to 16383 banks, each containing up to 128 instruments&#xA; * (also sometimes called programs, patches, or timbres).&#xA; * However, a &lt;code>Soundbank&lt;/code> can contain 16383 times 128 instruments,&#xA; * because the instruments within a &lt;code>Soundbank&lt;/code> are indexed by both&#xA; * a MIDI program number and a MIDI bank number (via a &lt;code>Patch&lt;/code>&#xA; * object). Thus, a &lt;code>Soundbank&lt;/code> can be thought of as a collection&#xA; * of MIDI banks.&#xA; * &lt;p>&#xA; * &lt;code>Soundbank&lt;/code> includes methods that return &lt;code>String&lt;/code>&#xA; * objects containing the sound bank's name, manufacturer, version number, and&#xA; * description.  The precise content and format of these strings is left&#xA; * to the implementor.&#xA; * &lt;p>&#xA; * Different synthesizers use a variety of synthesis techniques.  A common&#xA; * one is wavetable synthesis, in which a segment of recorded sound is&#xA; * played back, often with looping and pitch change.  The Downloadable Sound&#xA; * (DLS) format uses segments of recorded sound, as does the Headspace Engine.&#xA; * &lt;code>Soundbanks&lt;/code> and &lt;code>Instruments&lt;/code> that are based on&#xA; * wavetable synthesis (or other uses of stored sound recordings) should&#xA; * typically implement the &lt;code>getResources()&lt;/code>&#xA; * method to provide access to these recorded segments.  This is optional,&#xA; * however; the method can return an zero-length array if the synthesis technique&#xA; * doesn't use sampled sound (FM synthesis and physical modeling are examples&#xA; * of such techniques), or if it does but the implementor chooses not to make the&#xA; * samples accessible.&#xA; *&#xA; * @see Synthesizer#getDefaultSoundbank&#xA; * @see Synthesizer#isSoundbankSupported&#xA; * @see Synthesizer#loadInstruments(Soundbank, Patch[])&#xA; * @see Patch&#xA; * @see Instrument&#xA; * @see SoundbankResource&#xA; *&#xA; * @version 1.24, 03/12/19&#xA; * @author David Rivas&#xA; * @author Kara Kytle&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
