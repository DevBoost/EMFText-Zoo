<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="SourceDataLine.java">
  <comments>/*&#xA; * @(#)SourceDataLine.java&#x9;1.20 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sound</namespaces>
  <namespaces>sampled</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="SourceDataLine">
    <comments>/**&#xA;     * Obtains the number of sample frames of audio data that can be written to &#xA;     * the mixer, via this data line, without blocking.  Note that the return &#xA;     * value measures sample frames, not bytes. &#xA;     * @return the number of sample frames currently available for writing&#xA;     * @see TargetDataLine#availableRead&#xA;     */</comments>
    <comments>//public int availableWrite();</comments>
    <members xsi:type="members:InterfaceMethod" name="open">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="format">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AudioFormat.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bufferSize">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="LineUnavailableException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Opens the line with the specified format and suggested buffer size,&#xA;     * causing the line to acquire any required&#xA;     * system resources and become operational.&#xA;     * &lt;p>&#xA;     * The buffer size is specified in bytes, but must represent an integral &#xA;     * number of sample frames.  Invoking this method with a requested buffer &#xA;     * size that does not meet this requirement may result in an &#xA;     * IllegalArgumentException.  The actual buffer size for the open line may &#xA;     * differ from the requested buffer size.  The value actually set may be &#xA;     * queried by subsequently calling &lt;code>{@link DataLine#getBufferSize}&lt;/code>.  &#xA;     * &lt;p>&#xA;     * If this operation succeeds, the line is marked as open, and an &#xA;     * &lt;code>{@link LineEvent.Type#OPEN OPEN}&lt;/code> event is dispatched to the &#xA;     * line's listeners.&#xA;     * &lt;p>&#xA;     * Invoking this method on a line which is already open is illegal&#xA;     * and may result in an &lt;code>IllegalStateException&lt;/code>.&#xA;     * &lt;p>&#xA;     * Note that some lines, once closed, cannot be reopened.  Attempts&#xA;     * to reopen such a line will always result in a &#xA;     * &lt;code>LineUnavailableException&lt;/code>.&#xA;     *&#xA;     * @param format the desired audio format&#xA;     * @param bufferSize the desired buffer size&#xA;     * @throws LineUnavailableException if the line cannot be&#xA;     * opened due to resource restrictions&#xA;     * @throws IllegalArgumentException if the buffer size does not represent&#xA;     * an integral number of sample frames,&#xA;     * or if &lt;code>format&lt;/code> is not fully specified or invalid&#xA;     * @throws IllegalStateException if the line is already open&#xA;     * @throws SecurityException if the line cannot be&#xA;     * opened due to security restrictions&#xA;     *&#xA;     * @see #open(AudioFormat)&#xA;     * @see Line#open&#xA;     * @see Line#close&#xA;     * @see Line#isOpen&#xA;     * @see LineEvent&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="open">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="format">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AudioFormat.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="LineUnavailableException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Opens the line with the specified format, causing the line to acquire any &#xA;     * required system resources and become operational.  &#xA;     *   &#xA;     * &lt;p>&#xA;     * The implementation chooses a buffer size, which is measured in bytes but &#xA;     * which encompasses an integral number of sample frames.  The buffer size &#xA;     * that the system has chosen may be queried by subsequently calling &#xA;     * &lt;code>{@link DataLine#getBufferSize}&lt;/code>.&#xA;     * &lt;p>&#xA;     * If this operation succeeds, the line is marked as open, and an &#xA;     * &lt;code>{@link LineEvent.Type#OPEN OPEN}&lt;/code> event is dispatched to the &#xA;     * line's listeners.&#xA;     * &lt;p>&#xA;     * Invoking this method on a line which is already open is illegal&#xA;     * and may result in an &lt;code>IllegalStateException&lt;/code>.&#xA;     * &lt;p>&#xA;     * Note that some lines, once closed, cannot be reopened.  Attempts&#xA;     * to reopen such a line will always result in a &#xA;     * &lt;code>LineUnavailableException&lt;/code>.&#xA;     *&#xA;     * @param format the desired audio format&#xA;     * @throws LineUnavailableException if the line cannot be&#xA;     * opened due to resource restrictions&#xA;     * @throws IllegalArgumentException if &lt;code>format&lt;/code>&#xA;     * is not fully specified or invalid&#xA;     * @throws IllegalStateException if the line is already open&#xA;     * @throws SecurityException if the line cannot be&#xA;     * opened due to security restrictions&#xA;     *&#xA;     * @see #open(AudioFormat, int)&#xA;     * @see Line#open&#xA;     * @see Line#close&#xA;     * @see Line#isOpen&#xA;     * @see LineEvent&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="off">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Writes audio data to the mixer via this source data line.  The requested &#xA;     * number of bytes of data are read from the specified array, &#xA;     * starting at the given offset into the array, and written to the data &#xA;     * line's buffer.  If the caller attempts to write more data than can &#xA;     * currently be written (see &lt;code>{@link DataLine#available available}&lt;/code>), &#xA;     * this method blocks until the requested amount of data has been written.  &#xA;     * This applies even if the requested amount of data to write is greater &#xA;     * than the data line's buffer size.  However, if the data line is closed, &#xA;     * stopped, or flushed before the requested amount has been written,&#xA;     * the method no longer blocks, but returns the number of bytes &#xA;     * written thus far. &#xA;     * &lt;p>&#xA;     * The number of bytes that can be written without blocking can be ascertained&#xA;     * using the &lt;code>{@link DataLine#available available}&lt;/code> method of the&#xA;     * &lt;code>DataLine&lt;/code> interface.  (While it is guaranteed that&#xA;     * this number of bytes can be written without blocking, there is no guarantee&#xA;     * that attempts to write additional data will block.)&#xA;     * &lt;p>&#xA;     * The number of bytes to write must represent an integral number of&#xA;     * sample frames, such that:&#xA;     * &lt;br>&#xA;     * &lt;center>&lt;code>[ bytes written ] % [frame size in bytes ] == 0&lt;/code>&lt;/center>&#xA;     * &lt;br>&#xA;     * The return value will always meet this requirement.  A request to write a &#xA;     * number of bytes representing a non-integral number of sample frames cannot &#xA;     * be fulfilled and may result in an &lt;code>IllegalArgumentException&lt;/code>.&#xA;     *&#xA;     * @param b a byte array containing data to be written to the data line&#xA;     * @param len the length, in bytes, of the valid data in the array &#xA;     * (in other words, the requested amount of data to write, in bytes)&#xA;     * @param off the offset from the beginning of the array, in bytes&#xA;     * @return the number of bytes actually written&#xA;     * @throws IllegalArgumentException if the requested number of bytes does&#xA;     * not represent an integral number of sample frames,&#xA;     * or if &lt;code>len&lt;/code> is negative&#xA;     * @throws ArrayIndexOutOfBoundsException if &lt;code>off&lt;/code> is negative,&#xA;     * or &lt;code>off+len&lt;/code> is greater than the length of the array&#xA;     * &lt;code>b&lt;/code>.&#xA;     *&#xA;     * @see TargetDataLine#read&#xA;     * @see DataLine#available&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A source data line is a data line to which data may be written.  It acts as&#xA; * a source to its mixer. An application writes audio bytes to a source data line,&#xA; * which handles the buffering of the bytes and delivers them to the mixer.&#xA; * The mixer may mix the samples with those from other sources and then deliver&#xA; * the mix to a target such as an output port (which may represent an audio output    &#xA; * device on a sound card).&#xA; * &lt;p>&#xA; * Note that the naming convention for this interface reflects the relationship&#xA; * between the line and its mixer.  From the perspective of an application,&#xA; * a source data line may act as a target for audio data.&#xA; * &lt;p>&#xA; * A source data line can be obtained from a mixer by invoking the &#xA; * &lt;code>{@link Mixer#getLine getLine}&lt;/code> method of &lt;code>Mixer&lt;/code> with &#xA; * an appropriate &lt;code>{@link DataLine.Info}&lt;/code> object.&#xA; * &lt;p>&#xA; * The &lt;code>SourceDataLine&lt;/code> interface provides a method for writing &#xA; * audio data to the data line's buffer. Applications that play or mix &#xA; * audio should write data to the source data line quickly enough to keep the &#xA; * buffer from underflowing (emptying), which could cause discontinuities in &#xA; * the audio that are perceived as clicks.  Applications can use the &#xA; * &lt;code>{@link DataLine#available available}&lt;/code> method defined in the&#xA; * &lt;code>DataLine&lt;/code> interface to determine the amount of data currently&#xA; * queued in the data line's buffer.  The amount of data which can be written&#xA; * to the buffer without blocking is the difference between the buffer size&#xA; * and the amount of queued data.  If the delivery of audio output &#xA; * stops due to underflow, a &lt;code>{@link LineEvent.Type#STOP STOP}&lt;/code> event is &#xA; * generated.  A &lt;code>{@link LineEvent.Type#START START}&lt;/code> event is generated&#xA; * when the audio output resumes. &#xA; *&#xA; * @author Kara Kytle&#xA; * @version 1.20 03/12/19&#xA; * @see Mixer&#xA; * @see DataLine&#xA; * @see TargetDataLine&#xA; * @since 1.3&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="DataLine.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
