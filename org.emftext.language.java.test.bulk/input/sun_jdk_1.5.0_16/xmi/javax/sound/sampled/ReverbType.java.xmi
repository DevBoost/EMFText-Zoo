<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ReverbType.java">
  <comments>/*&#xA; * @(#)ReverbType.java&#x9;1.13 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sound</namespaces>
  <namespaces>sampled</namespaces>
  <classifiers xsi:type="classifiers:Class" name="ReverbType">
    <members xsi:type="members:Field" name="name">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Descriptive name of the reverb type..&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="earlyReflectionDelay">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Early reflection delay in microseconds.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="earlyReflectionIntensity">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Early reflection intensity.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="lateReflectionDelay">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Late reflection delay in microseconds.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="lateReflectionIntensity">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Late reflection intensity.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="decayTime">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Total decay time&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="ReverbType">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.3"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.4"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.5"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="earlyReflectionDelay">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="earlyReflectionIntensity">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lateReflectionDelay">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lateReflectionIntensity">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="decayTime">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructs a new reverb type that has the specified reverberation&#xA;     * parameter values.&#xA;     * @param name the name of the new reverb type, or a zero-length &lt;code>String&lt;/code>&#xA;     * @param earlyReflectionDelay the new type's early reflection delay time in microseconds&#xA;     * @param earlyReflectionIntensity the new type's early reflection intensity in dB&#xA;     * @param lateReflectionDelay the new type's late reflection delay time in microseconds&#xA;     * @param lateReflectionIntensity the new type's late reflection intensity in dB&#xA;     * @param decayTime the new type's decay time in microseconds&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the name of this reverb type.&#xA;     * @return the name of this reverb type&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEarlyReflectionDelay">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the early reflection delay time in microseconds. &#xA;     * This is the amount of time between when the direct signal is&#xA;     * heard and when the first early reflections are heard.&#xA;     * @return  early reflection delay time for this reverb type, in microseconds&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEarlyReflectionIntensity">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the early reflection intensity in decibels. &#xA;     * This is the amplitude attenuation of the first early reflections&#xA;     * relative to the direct signal.&#xA;     * @return  early reflection intensity for this reverb type, in dB&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLateReflectionDelay">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the late reflection delay time in microseconds. &#xA;     * This is the amount of time between when the first early reflections &#xA;     * are heard and when the first late reflections are heard.&#xA;     * @return  late reflection delay time for this reverb type, in microseconds&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLateReflectionIntensity">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the late reflection intensity in decibels. &#xA;     * This is the amplitude attenuation of the first late reflections&#xA;     * relative to the direct signal.&#xA;     * @return  late reflection intensity for this reverb type, in dB&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDecayTime">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the decay time, which is the amount of time over which the&#xA;     * late reflections attenuate to effective zero.  The effective zero&#xA;     * value is implementation-dependent.&#xA;     * @return  the decay time of the late reflections, in microseconds&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates whether the specified object is equal to this reverb type,&#xA;     * returning &lt;code>true&lt;/code> if the objects are identical.&#xA;     * @param obj the reference object with which to compare&#xA;     * @return &lt;code>true&lt;/code> if this reverb type is the same as &#xA;     * &lt;code>obj&lt;/code>; &lt;code>false&lt;/code> otherwise&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.4"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
          </next>
          <self xsi:type="literals:Super"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Finalizes the hashcode method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.3"/>
          </next>
          <self xsi:type="literals:Super"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Provides a &lt;code>String&lt;/code> representation of the reverb type,&#xA;     * including its name and its parameter settings.  &#xA;     * The exact contents of the string may vary between implementations of &#xA;     * Java Sound.&#xA;     * @return reverberation type name and description&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <comments>//$$fb2001-07-20: fix for bug 4385060: The &quot;name&quot; attribute of class &quot;ReverbType&quot; is not accessible.</comments>
        <comments>//return (super.toString() + &quot;, early reflection delay &quot; + earlyReflectionDelay + </comments>
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <children xsi:type="references:StringReference" value=", early reflection delay "/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <children xsi:type="references:StringReference" value=" ns, early reflection intensity "/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <children xsi:type="references:StringReference" value=" dB, late deflection delay "/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <children xsi:type="references:StringReference" value=" ns, late reflection intensity "/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <children xsi:type="references:StringReference" value=" dB, decay time "/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </expression>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>ReverbType&lt;/code> class provides methods for &#xA; * accessing various reverberation settings to be applied to&#xA; * an audio signal.&#xA; * &lt;p>&#xA; * Reverberation simulates the reflection of sound off of&#xA; * the walls, ceiling, and floor of a room.  Depending on &#xA; * the size of the room, and how absorbent or reflective the materials in the&#xA; * room's surfaces are, the sound might bounce around for a &#xA; * long time before dying away.&#xA; * &lt;p>&#xA; * The reverberation parameters provided by &lt;code>ReverbType&lt;/code> consist &#xA; * of the delay time and intensity of early reflections, the delay time and&#xA; * intensity of late reflections, and an overall decay time.  &#xA; * Early reflections are the initial individual low-order reflections of the &#xA; * direct signal off the surfaces in the room.&#xA; * The late Relections are the dense, high-order reflections that characterize &#xA; * the room's reverberation.&#xA; * The delay times for the start of these two reflection types give the listener&#xA; * a sense of the overall size and complexity of the room's shape and contents.&#xA; * The larger the room, the longer the reflection delay times.&#xA; * The early and late reflections' intensities define the gain (in decibels) of the reflected&#xA; * signals as compared to the direct signal.  These intensities give the&#xA; * listener an impression of the absorptive nature of the surfaces and objects&#xA; * in the room.&#xA; * The decay time defines how long the reverberation takes to exponentially&#xA; * decay until it is no longer perceptible (&quot;effective zero&quot;).&#xA; * The larger and less absorbent the surfaces, the longer the decay time.&#xA; * &lt;p>&#xA; * The set of parameters defined here may not include all aspects of reverberation&#xA; * as specified by some systems.  For example, the Midi Manufacturer's Association&#xA; * (MMA) has an Interactive Audio Special Interest Group (IASIG), which has a&#xA; * 3-D Working Group that has defined a Level 2 Spec (I3DL2).  I3DL2&#xA; * supports filtering of reverberation and &#xA; * control of reverb density.  These properties are not included in the JavaSound 1.0&#xA; * definition of a reverb control.  In such a case, the implementing system&#xA; * should either extend the defined reverb control to include additional&#xA; * parameters, or else interpret the system's additional capabilities in a way that fits&#xA; * the model described here.  &#xA; * &lt;p>&#xA; * If implementing JavaSound on a I3DL2-compliant device:&#xA; * &lt;ul>&#xA; * &lt;li>Filtering is disabled (high-frequency attenuations are set to 0.0 dB)&#xA; * &lt;li>Density parameters are set to midway between minimum and maximum&#xA; * &lt;/ul>&#xA; * &lt;p>&#xA; * The following table shows what parameter values an implementation might use for a &#xA; * representative set of reverberation settings.  &#xA; * &lt;p>&#xA; * &#xA; * &lt;b>Reverberation Types and Parameters&lt;/b>&#xA; * &lt;p>&#xA; * &lt;table border=1 cellpadding=5 summary=&quot;reverb types and params: decay time, late intensity, late delay, early intensity, and early delay&quot;>&#xA; * &#xA; * &lt;tr>&#xA; *  &lt;th>Type&lt;/th>&#xA; *  &lt;th>Decay Time (ms)&lt;/th>&#xA; *  &lt;th>Late Intensity (dB)&lt;/th>&#xA; *  &lt;th>Late Delay (ms)&lt;/th>&#xA; *  &lt;th>Early Intensity (dB)&lt;/th>&#xA; *  &lt;th>Early Delay(ms)&lt;/th>&#xA; * &lt;/tr>&#xA; * &#xA; * &lt;tr>&#xA; *  &lt;td>Cavern&lt;/td>&#xA; *  &lt;td>2250&lt;/td>&#xA; *  &lt;td>-2.0&lt;/td>&#xA; *  &lt;td>41.3&lt;/td>&#xA; *  &lt;td>-1.4&lt;/td>&#xA; *  &lt;td>10.3&lt;/td>&#xA; * &lt;/tr>&#xA; * &#xA; * &lt;tr>&#xA; *  &lt;td>Dungeon&lt;/td>&#xA; *  &lt;td>1600&lt;/td>&#xA; *  &lt;td>-1.0&lt;/td>&#xA; *  &lt;td>10.3&lt;/td>&#xA; *  &lt;td>-0.7&lt;/td>&#xA; *  &lt;td>2.6&lt;/td>&#xA; * &lt;/tr>&#xA; * &#xA; * &lt;tr>&#xA; *  &lt;td>Garage&lt;/td>&#xA; *  &lt;td>900&lt;/td>&#xA; *  &lt;td>-6.0&lt;/td>&#xA; *  &lt;td>14.7&lt;/td>&#xA; *  &lt;td>-4.0&lt;/td>&#xA; *  &lt;td>3.9&lt;/td>&#xA; * &lt;/tr>&#xA; * &#xA; * &lt;tr>&#xA; *  &lt;td>Acoustic Lab&lt;/td>&#xA; *  &lt;td>280&lt;/td>&#xA; *  &lt;td>-3.0&lt;/td>&#xA; *  &lt;td>8.0&lt;/td>&#xA; *  &lt;td>-2.0&lt;/td>&#xA; *  &lt;td>2.0&lt;/td>&#xA; * &lt;/tr>&#xA; * &#xA; * &lt;tr>&#xA; *  &lt;td>Closet&lt;/td>&#xA; *  &lt;td>150&lt;/td>&#xA; *  &lt;td>-10.0&lt;/td>&#xA; *  &lt;td>2.5&lt;/td>&#xA; *  &lt;td>-7.0&lt;/td>&#xA; *  &lt;td>0.6&lt;/td>&#xA; * &lt;/tr>&#xA; * &#xA; * &lt;/table>&#xA; * &#xA; * @author Kara Kytle&#xA; * @version 1.13, 03/12/19&#xA; * @since 1.3&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
