<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Mixer.java">
  <comments>/*&#xA; * @(#)Mixer.java&#x9;1.31 04/07/14&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sound</namespaces>
  <namespaces>sampled</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Mixer">
    <comments>// class Info</comments>
    <members xsi:type="members:InterfaceMethod" name="getMixerInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.13"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains information about this mixer, including the product's name,&#xA;     * version, vendor, etc.&#xA;     * @return a mixer info object that describes this mixer&#xA;     * @see Mixer.Info&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSourceLineInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>Line</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Line$Info.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains information about the set of source lines supported&#xA;     * by this mixer.&#xA;     * Some source lines may only be available when this mixer is open.&#xA;     * @return array of &lt;code>Line.Info&lt;/code> objects representing source lines&#xA;     * for this mixer.  If no source lines are supported,&#xA;     * an array of length 0 is returned.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTargetLineInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>Line</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Line$Info.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains information about the set of target lines supported&#xA;     * by this mixer.&#xA;     * Some target lines may only be available when this mixer is open.&#xA;     * @return array of &lt;code>Line.Info&lt;/code> objects representing target lines&#xA;     * for this mixer.  If no target lines are supported,&#xA;     * an array of length 0 is returned.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSourceLineInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>Line</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Line$Info.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="info">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>Line</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Line$Info.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains information about source lines of a particular type supported&#xA;     * by the mixer.&#xA;     * Some source lines may only be available when this mixer is open.&#xA;     * @param info a &lt;code>Line.Info&lt;/code> object describing lines about which information&#xA;     * is queried&#xA;     * @return an array of &lt;code>Line.Info&lt;/code> objects describing source lines matching&#xA;     * the type requested.  If no matching source lines are supported, an array of length 0&#xA;     * is returned.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTargetLineInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>Line</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Line$Info.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="info">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>Line</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Line$Info.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains information about target lines of a particular type supported&#xA;     * by the mixer.&#xA;     * Some target lines may only be available when this mixer is open.&#xA;     * @param info a &lt;code>Line.Info&lt;/code> object describing lines about which information&#xA;     * is queried&#xA;     * @return an array of &lt;code>Line.Info&lt;/code> objects describing target lines matching&#xA;     * the type requested.  If no matching target lines are supported, an array of length 0&#xA;     * is returned.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isLineSupported">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="info">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>Line</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Line$Info.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates whether the mixer supports a line (or lines) that match&#xA;     * the specified &lt;code>Line.Info&lt;/code> object.&#xA;     * Some lines may only be supported when this mixer is open.&#xA;     * @param info describes the line for which support is queried&#xA;     * @return &lt;code>true&lt;/code> if at least one matching line is&#xA;     * supported, &lt;code>false&lt;/code> otherwise&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLine">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Line.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="info">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>Line</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Line$Info.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="LineUnavailableException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains a line that is available for use and that matches the description&#xA;     * in the specified &lt;code>Line.Info&lt;/code> object.&#xA;     *&#xA;     * &lt;p>If a &lt;code>DataLine&lt;/code> is requested, and &lt;code>info&lt;/code>&#xA;     * is an instance of &lt;code>DataLine.Info&lt;/code> specifying at&#xA;     * least one fully qualified audio format, the last one&#xA;     * will be used as the default format of the returned&#xA;     * &lt;code>DataLine&lt;/code>.&#xA;     *&#xA;     * @param info describes the desired line&#xA;     * @throws LineUnavailableException if a matching line&#xA;     * is not available due to resource restrictions&#xA;     * @throws IllegalArgumentException if this mixer does&#xA;     * not support any lines matching the description&#xA;     * @throws SecurityException if a matching line&#xA;     * is not available due to security restrictions&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMaxLines">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="info">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>Line</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Line$Info.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//$$fb 2002-04-12: fix for 4667258: behavior of Mixer.getMaxLines(Line.Info) method doesn't match the spec</comments>
        <comments>/**&#xA;     * Obtains the approximate maximum number of lines of the requested type that can be open&#xA;     * simultaneously on the mixer.&#xA;     *&#xA;     * Certain types of mixers do not have a hard bound and may allow opening more lines.&#xA;     * Since certain lines are a shared resource, a mixer may not be able to open the maximum&#xA;     * number of lines if another process has opened lines of this mixer.&#xA;     *&#xA;     * The requested type is any line that matches the description in&#xA;     * the provided &lt;code>Line.Info&lt;/code> object.  For example, if the info&#xA;     * object represents a speaker&#xA;     * port, and the mixer supports exactly one speaker port, this method&#xA;     * should return 1.  If the info object represents a source data line&#xA;     * and the mixer supports the use of 32 source data lines simultaneously,&#xA;     * the return value should be 32.&#xA;     * If there is no limit, this function returns &lt;code>AudioSystem.NOT_SPECIFIED&lt;/code>.&#xA;     * @param info a &lt;code>Line.Info&lt;/code> that describes the line for which&#xA;     * the number of supported instances is queried&#xA;     * @return the maximum number of matching lines supported, or &lt;code>AudioSystem.NOT_SPECIFIED&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSourceLines">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Line.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the set of all source lines currently open to this mixer.&#xA;     *&#xA;     * @return the source lines currently open to the mixer.&#xA;     * If no source lines are currently open to this mixer,  an&#xA;     * array of length 0 is returned.&#xA;     * @throws SecurityException if the matching lines&#xA;     * are not available due to security restrictions&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTargetLines">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Line.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the set of all target lines currently open from this mixer.&#xA;     *&#xA;     * @return target lines currently open from the mixer.&#xA;     * If no target lines are currently open from this mixer, an&#xA;     * array of length 0 is returned.&#xA;     * @throws SecurityException if the matching lines&#xA;     * are not available due to security restrictions&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="synchronize">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lines">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Line.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maintainSync">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Synchronizes two or more lines.  Any subsequent command that starts or stops&#xA;     * audio playback or capture for one of these lines will exert the&#xA;     * same effect on the other lines in the group, so that they start or stop playing or&#xA;     * capturing data simultaneously.&#xA;     *&#xA;     * @param lines the lines that should be synchronized&#xA;     * @param maintainSync &lt;code>true&lt;/code> if the synchronization&#xA;     * must be precisely maintained (i.e., the synchronization must be sample-accurate)&#xA;     * at all times during operation of the lines , or &lt;code>false&lt;/code>&#xA;     * if precise synchronization is required only during start and stop operations&#xA;     *&#xA;     * @throws IllegalArgumentException if the lines cannot be synchronized.&#xA;     * This may occur if the lines are of different types or have different&#xA;     * formats for which this mixer does not support synchronization, or if&#xA;     * all lines specified do not belong to this mixer.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="unsynchronize">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lines">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Line.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Releases synchronization for the specified lines.  The array must&#xA;     * be identical to one for which synchronization has already been&#xA;     * established; otherwise an exception may be thrown.  However, &lt;code>null&lt;/code>&#xA;     * may be specified, in which case all currently synchronized lines that belong&#xA;     * to this mixer are unsynchronized.&#xA;     * @param lines the synchronized lines for which synchronization should be&#xA;     * released, or &lt;code>null&lt;/code> for all this mixer's synchronized lines&#xA;     *&#xA;     * @throws IllegalArgumentException if the lines cannot be unsynchronized.&#xA;     * This may occur if the argument specified does not exactly match a set&#xA;     * of lines for which synchronization has already been established.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isSynchronizationSupported">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lines">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Line.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maintainSync">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reports whether this mixer supports synchronization of the specified set of lines.&#xA;     *&#xA;     * @param lines the set of lines for which synchronization support is queried&#xA;     * @param maintainSync &lt;code>true&lt;/code> if the synchronization&#xA;     * must be precisely maintained (i.e., the synchronization must be sample-accurate)&#xA;     * at all times during operation of the lines , or &lt;code>false&lt;/code>&#xA;     * if precise synchronization is required only during start and stop operations&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the lines can be synchronized, &lt;code>false&lt;/code>&#xA;     * otherwise&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="classifiers:Class" name="Info">
      <members xsi:type="members:Field" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <comments>/*final*/</comments>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;&#x9; * Mixer name.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="vendor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <comments>/*final*/</comments>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;&#x9; * Mixer vendor.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="description">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <comments>/*final*/</comments>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;&#x9; * Mixer description.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="version">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <comments>/*final*/</comments>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;&#x9; * Mixer version.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Constructor" name="Info">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.4/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.4/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.2"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.4/@parameters.2"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.3"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.4/@parameters.3"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="name">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="vendor">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="description">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="version">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Constructs a mixer's info object, passing it the given&#xA;&#x9; * textual information.&#xA;&#x9; * @param name the name of the mixer&#xA;&#x9; * @param vendor the company who manufactures or creates the hardware&#xA;&#x9; * or software mixer&#xA;&#x9; * @param description descriptive text about the mixer&#xA;&#x9; * @param version version information for the mixer&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="equals">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Indicates whether two info objects are equal, returning &lt;code>true&lt;/code> if&#xA;&#x9; * they are identical.&#xA;&#x9; * @param obj the reference object with which to compare this info&#xA;&#x9; * object&#xA;&#x9; * @return &lt;code>true&lt;/code> if this info object is the same as the&#xA;&#x9; * &lt;code>obj&lt;/code> argument; &lt;code>false&lt;/code> otherwise&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.4"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.5/@parameters.0"/>
            </next>
            <self xsi:type="literals:Super"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="hashCode">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Finalizes the hashcode method.&#xA;&#x9; *&#xA;&#x9; * @return the hashcode for this object&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <self xsi:type="literals:Super"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Obtains the name of the mixer.&#xA;&#x9; * @return a string that names the mixer&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getVendor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Obtains the vendor of the mixer.&#xA;&#x9; * @return a string that names the mixer's vendor&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.1"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getDescription">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Obtains the description of the mixer.&#xA;&#x9; * @return a textual description of the mixer&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.2"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getVersion">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Obtains the version of the mixer.&#xA;&#x9; * @return textual version information for the mixer&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.3"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="toString">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Provides a string representation of the mixer info.&#xA;&#x9; * @return a string describing the info object&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.0"/>
              <children xsi:type="references:StringReference" value=", version "/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.3"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </expression>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &lt;code>Mixer.Info&lt;/code> class represents information about an audio mixer,&#xA;     * including the product's name, version, and vendor, along with a textual&#xA;     * description.  This information may be retrieved through the&#xA;     * {@link Mixer#getMixerInfo() getMixerInfo}&#xA;     * method of the &lt;code>Mixer&lt;/code> interface.&#xA;     *&#xA;     * @author Kara Kytle&#xA;     * @version 1.31, 04/07/14&#xA;     * @since 1.3&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A mixer is an audio device with one or more lines.  It need not be&#xA; * designed for mixing audio signals.  A mixer that actually mixes audio&#xA; * has multiple input (source) lines and at least one output (target) line.&#xA; * The former are often instances of classes that implement&#xA; * &lt;code>{@link SourceDataLine}&lt;/code>,&#xA; * and the latter, &lt;code>{@link TargetDataLine}&lt;/code>.  &lt;code>{@link Port}&lt;/code>&#xA; * objects, too, are either source lines or target lines.&#xA; * A mixer can accept prerecorded, loopable sound as input, by having&#xA; * some of its source lines be instances of objects that implement the&#xA; * &lt;code>{@link Clip}&lt;/code> interface.&#xA; * &lt;p>&#xA; * Through methods of the &lt;code>Line&lt;/code> interface, which &lt;code>Mixer&lt;/code> extends,&#xA; * a mixer might provide a set of controls that are global to the mixer.  For example,&#xA; * the mixer can have a master gain control.  These global controls are distinct&#xA; * from the controls belonging to each of the mixer's individual lines.&#xA; * &lt;p>&#xA; * Some mixers, especially&#xA; * those with internal digital mixing capabilities, may provide&#xA; * additional capabilities by implementing the &lt;code>DataLine&lt;/code> interface.&#xA; * &lt;p>&#xA; * A mixer can support synchronization of its lines.  When one line in&#xA; * a synchronized group is started or stopped, the other lines in the group&#xA; * automatically start or stop simultaneously with the explicitly affected one.&#xA; *&#xA; * @author Kara Kytle&#xA; * @version 1.31, 04/07/14&#xA; * @since 1.3&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Line.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
