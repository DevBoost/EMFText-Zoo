<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="FloatControl.java">
  <comments>/*&#xA; * @(#)FloatControl.java&#x9;1.16 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sound</namespaces>
  <namespaces>sampled</namespaces>
  <classifiers xsi:type="classifiers:Class" name="FloatControl">
    <comments>// class Type</comments>
    <members xsi:type="members:Field" name="minimum">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// INSTANCE VARIABLES</comments>
        <comments>// FINAL VARIABLES</comments>
        <comments>/**&#xA;     * The minimum supported value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="maximum">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The maximum supported value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="precision">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The control's precision.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="updatePeriod">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The smallest time increment in which a value change&#xA;     * can be effected during a value shift, in microseconds.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="units">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * A label for the units in which the control values are expressed,&#xA;     * such as &quot;dB&quot; for decibels.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="minLabel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * A label for the minimum value, such as &quot;Left.&quot;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="maxLabel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * A label for the maximum value, such as &quot;Right.&quot;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="midLabel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * A label for the mid-point value, such as &quot;Center.&quot;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="value">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// STATE VARIABLES</comments>
        <comments>/**&#xA;     * The current value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="FloatControl">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.3"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.4"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.5"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.6"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.7"/>
                  <children xsi:type="literals:NullLiteral"/>
                </expression>
              </child>
              <expressionIf xsi:type="references:StringReference" value=""/>
              <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.7"/>
            </expression>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.8"/>
                  <children xsi:type="literals:NullLiteral"/>
                </expression>
              </child>
              <expressionIf xsi:type="references:StringReference" value=""/>
              <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.8"/>
            </expression>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.9"/>
                  <children xsi:type="literals:NullLiteral"/>
                </expression>
              </child>
              <expressionIf xsi:type="references:StringReference" value=""/>
              <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.9"/>
            </expression>
          </value>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.23"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minimum">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maximum">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="precision">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="updatePeriod">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="initialValue">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="units">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minLabel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="midLabel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maxLabel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// CONSTRUCTORS</comments>
        <comments>/**&#xA;     * Constructs a new float control object with the given parameters&#xA;     *&#xA;     * @param type the kind of control represented by this float control object&#xA;     * @param minimum the smallest value permitted for the control&#xA;     * @param maximum the largest value permitted for the control&#xA;     * @param precision the resolution or granularity of the control.&#xA;     * This is the size of the increment between discrete valid values.&#xA;     * @param updatePeriod the smallest time interval, in microseconds, over which the control&#xA;     * can change from one discrete value to the next during a {@link #shift(float,float,int) shift}&#xA;     * @param initialValue the value that the control starts with when constructed&#xA;     * @param units the label for the units in which the control's values are expressed,&#xA;     * such as &quot;dB&quot; or &quot;frames per second&quot;&#xA;     * @param minLabel the label for the minimum value, such as &quot;Left&quot; or &quot;Off&quot;&#xA;     * @param midLabel the label for the midpoint value, such as &quot;Center&quot; or &quot;Default&quot;&#xA;     * @param maxLabel the label for the maximum value, such as &quot;Right&quot; or &quot;Full&quot;&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="FloatControl">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.4"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.5"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.6"/>
          <arguments xsi:type="references:StringReference" value=""/>
          <arguments xsi:type="references:StringReference" value=""/>
          <arguments xsi:type="references:StringReference" value=""/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.23"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minimum">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maximum">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="precision">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="updatePeriod">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="initialValue">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="units">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructs a new float control object with the given parameters.&#xA;     * The labels for the minimum, maximum, and mid-point values are set&#xA;     * to zero-length strings.&#xA;     *&#xA;     * @param type the kind of control represented by this float control object&#xA;     * @param minimum the smallest value permitted for the control&#xA;     * @param maximum the largest value permitted for the control&#xA;     * @param precision the resolution or granularity of the control.&#xA;     * This is the size of the increment between discrete valid values.&#xA;     * @param updatePeriod the smallest time interval, in microseconds, over which the control&#xA;     * can change from one discrete value to the next during a {@link #shift(float,float,int) shift}&#xA;     * @param initialValue the value that the control starts with when constructed&#xA;     * @param units the label for the units in which the control's values are expressed,&#xA;     * such as &quot;dB&quot; or &quot;frames per second&quot;&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="setValue">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newValue">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// METHODS</comments>
        <comments>/**&#xA;     * Sets the current value for the control.  The default implementation&#xA;     * simply sets the value as indicated.  If the value indicated is greater&#xA;     * than the maximum value, or smaller than the minimum value, an&#xA;     * IllegalArgumentException is thrown.&#xA;     * Some controls require that their line be open before they can be affected&#xA;     * by setting a value.&#xA;     * @param newValue desired new value&#xA;     * @throws IllegalArgumentException if the value indicated does not fall&#xA;     * within the allowable range&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Requested value "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                <children xsi:type="references:StringReference" value=" exceeds allowable maximum value "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <children xsi:type="references:StringReference" value="."/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Requested value "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                <children xsi:type="references:StringReference" value=" smaller than allowable minimum value "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <children xsi:type="references:StringReference" value="."/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getValue">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains this control's current value.&#xA;     * @return the current value&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaximum">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the maximum value permitted.&#xA;     * @return the maximum allowable value&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMinimum">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the minimum value permitted.&#xA;     * @return the minimum allowable value&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getUnits">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the label for the units in which the control's values are expressed,&#xA;     * such as &quot;dB&quot; or &quot;frames per second.&quot;&#xA;     * @return the units label, or a zero-length string if no label&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMinLabel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the label for the minimum value, such as &quot;Left&quot; or &quot;Off.&quot;&#xA;     * @return the minimum value label, or a zero-length string if no label&#x9; * has been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMidLabel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the label for the mid-point value, such as &quot;Center&quot; or &quot;Default.&quot;&#xA;     * @return the mid-point value label, or a zero-length string if no label&#x9; * has been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaxLabel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the label for the maximum value, such as &quot;Right&quot; or &quot;Full.&quot;&#xA;     * @return the maximum value label, or a zero-length string if no label&#x9; * has been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPrecision">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the resolution or granularity of the control, in the units&#xA;     * that the control measures.&#xA;     * The precision is the size of the increment between discrete valid values&#xA;     * for this control, over the set of supported floating-point values.&#xA;     * @return the control's precision&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getUpdatePeriod">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains the smallest time interval, in microseconds, over which the control's value can&#xA;     * change during a shift.  The update period is the inverse of the frequency with which&#xA;     * the control updates its value during a shift.  If the implementation does not support value shifting over&#xA;     * time, it should set the control's value to the final value immediately&#xA;     * and return -1 from this method.&#xA;     *&#xA;     * @return update period in microseconds, or -1 if shifting over time is unsupported&#xA;     * @see #shift&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="shift">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="from">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="to">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="microseconds">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Changes the control value from the initial value to the final&#xA;     * value linearly over the specified time period, specified in microseconds.&#xA;     * This method returns without blocking; it does not wait for the shift&#xA;     * to complete.  An implementation should complete the operation within the time&#xA;     * specified.  The default implementation simply changes the value&#xA;     * to the final value immediately.&#xA;     *&#xA;     * @param from initial value at the beginning of the shift&#xA;     * @param to final value after the shift&#xA;     * @param microseconds maximum duration of the shift in microseconds&#xA;     *&#xA;     * @see #getUpdatePeriod&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.11">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.1"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ABSTRACT METHOD IMPLEMENTATIONS: CONTROL</comments>
        <comments>/**&#xA;     * Provides a string representation of the control&#xA;     * @return a string description&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Control.class.xmi#//@classifiers.0/@members.2"/>
            </children>
            <children xsi:type="references:StringReference" value=" with current value: "/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.12"/>
            <children xsi:type="references:StringReference" value=" "/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <children xsi:type="references:StringReference" value=" (range: "/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <children xsi:type="references:StringReference" value=" - "/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <children xsi:type="references:StringReference" value=")"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="Type">
      <members xsi:type="members:Field" name="MASTER_GAIN">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.23"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="Master Gain"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.23"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// TYPE DEFINES</comments>
          <comments>// GAIN TYPES</comments>
          <comments>/**&#xA;&#x9; * Represents a control for the overall gain on a line.&#xA;&#x9; * &lt;p>&#xA;&#x9; * Gain is a quantity in decibels (dB) that is added to the intrinsic&#xA;&#x9; * decibel level of the audio signal--that is, the level of&#xA;&#x9; * the signal before it is altered by the gain control.  A positive&#xA;&#x9; * gain amplifies (boosts) the signal's volume, and a negative gain&#xA;&#x9; * attenuates (cuts) it.&#xA;&#x9; * The gain setting defaults to a value of 0.0 dB, meaning the signal's&#xA;&#x9; * loudness is unaffected.   Note that gain measures dB, not amplitude.&#xA;&#x9; * The relationship between a gain in decibels and the corresponding&#xA;&#x9; * linear amplitude multiplier is:&#xA;&#x9; *&#xA;&#x9; *&lt;CENTER>&lt;CODE> linearScalar = pow(10.0, gainDB/20.0) &lt;/CODE>&lt;/CENTER>&#xA;&#x9; * &lt;p>&#xA;&#x9; * The &lt;code>FloatControl&lt;/code> class has methods to impose a maximum and&#xA;&#x9; * minimum allowable value for gain.  However, because an audio signal might&#xA;&#x9; * already be at a high amplitude, the maximum setting does not guarantee&#xA;&#x9; * that the signal will be undistorted when the gain is applied to it (unless&#xA;&#x9; * the maximum is zero or negative). To avoid numeric overflow from excessively&#xA;&#x9; * large gain settings, a gain control can implement&#xA;&#x9; * clipping, meaning that the signal's amplitude will be limited to the maximum&#xA;&#x9; * value representable by its audio format, instead of wrapping around.&#xA;&#x9; * &lt;p>&#xA;&#x9; * These comments apply to gain controls in general, not just master gain controls.&#xA;&#x9; * A line can have more than one gain control.  For example, a mixer (which is&#xA;&#x9; * itself a line) might have a master gain control, an auxiliary return control,&#xA;&#x9; * a reverb return control, and, on each of its source lines, an individual aux&#xA;&#x9; * send and reverb send.&#xA;&#x9; *&#xA;&#x9; * @see #AUX_SEND&#xA;&#x9; * @see #AUX_RETURN&#xA;&#x9; * @see #REVERB_SEND&#xA;&#x9; * @see #REVERB_RETURN&#xA;&#x9; * @see #VOLUME&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="AUX_SEND">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.23"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="AUX Send"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.23"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Represents a control for the auxiliary send gain on a line.&#xA;&#x9; *&#xA;&#x9; * @see #MASTER_GAIN&#xA;&#x9; * @see #AUX_RETURN&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="AUX_RETURN">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.23"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="AUX Return"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.23"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Represents a control for the auxiliary return gain on a line.&#xA;&#x9; *&#xA;&#x9; * @see #MASTER_GAIN&#xA;&#x9; * @see #AUX_SEND&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="REVERB_SEND">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.23"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="Reverb Send"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.23"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Represents a control for the pre-reverb gain on a line.&#xA;&#x9; * This control may be used to affect how much&#xA;&#x9; * of a line's signal is directed to a mixer's internal reverberation unit.&#xA;&#x9; *&#xA;&#x9; * @see #MASTER_GAIN&#xA;&#x9; * @see #REVERB_RETURN&#xA;&#x9; * @see EnumControl.Type#REVERB&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="REVERB_RETURN">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.23"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="Reverb Return"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.23"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Represents a control for the post-reverb gain on a line.&#xA;&#x9; * This control may be used to control the relative amplitude&#xA;&#x9; * of the signal returned from an internal reverberation unit.&#xA;&#x9; *&#xA;&#x9; * @see #MASTER_GAIN&#xA;&#x9; * @see #REVERB_SEND&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="VOLUME">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.23"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="Volume"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.23"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// VOLUME</comments>
          <comments>/**&#xA;&#x9; * Represents a control for the volume on a line.&#xA;&#x9; */</comments>
          <comments>/*&#xA;&#x9; * $$kk: 08.30.99: ISSUE: what units?  linear or dB?&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PAN">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.23"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="Pan"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.23"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// PAN</comments>
          <comments>/**&#xA;&#x9; * Represents a control for the relative pan (left-right positioning)&#xA;&#x9; * of the signal.  The signal may be mono; the pan setting affects how&#xA;&#x9; * it is distributed by the mixer in a stereo mix.  The valid range of values is -1.0&#xA;&#x9; * (left channel only) to 1.0 (right channel&#xA;&#x9; * only).  The default is 0.0 (centered).&#xA;&#x9; *&#xA;&#x9; * @see #BALANCE&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="BALANCE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.23"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="Balance"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.23"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// BALANCE</comments>
          <comments>/**&#xA;&#x9; * Represents a control for the relative balance of a stereo signal&#xA;&#x9; * between two stereo speakers.  The valid range of values is -1.0 (left channel only) to 1.0 (right channel&#xA;&#x9; * only).  The default is 0.0 (centered).&#xA;&#x9; *&#xA;&#x9; * @see #PAN&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="SAMPLE_RATE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.23"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="Sample Rate"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.23"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// SAMPLE RATE</comments>
          <comments>/**&#xA;&#x9; * Represents a control that changes the sample rate of audio playback.  The net effect&#xA;&#x9; * of changing the sample rate depends on the relationship between&#xA;&#x9; * the media's natural rate and the rate that is set via this control.&#xA;&#x9; * The natural rate is the sample rate that is specified in the data line's&#xA;&#x9; * &lt;code>AudioFormat&lt;/code> object.  For example, if the natural rate&#xA;&#x9; * of the media is 11025 samples per second and the sample rate is set&#xA;&#x9; * to 22050 samples per second, the media will play back at twice the&#xA;&#x9; * normal speed.&#xA;&#x9; * &lt;p>&#xA;&#x9; * Changing the sample rate with this control does not affect the data line's&#xA;&#x9; * audio format.  Also note that whenever you change a sound's sample rate, a&#xA;&#x9; * change in the sound's pitch results.  For example, doubling the sample&#xA;&#x9; * rate has the effect of doubling the frequencies in the sound's spectrum,&#xA;&#x9; * which raises the pitch by an octave.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Constructor" name="Type">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@members.9/@parameters.0"/>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="name">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>// CONSTRUCTOR</comments>
          <comments>/**&#xA;&#x9; * Constructs a new float control type.&#xA;&#x9; * @param name&#x9;the name of the new float control type&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// INNER CLASSES</comments>
        <comments>/**&#xA;     * An instance of the &lt;code>FloatControl.Type&lt;/code> inner class identifies one kind of&#xA;     * float control.  Static instances are provided for the&#xA;     * common types.&#xA;     *&#xA;     * @author Kara Kytle&#xA;     * @version 1.16, 03/12/19&#xA;     * @since 1.3&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <namespaces>Control</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Control$Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A &lt;code>FloatControl&lt;/code> object provides control over a range of&#xA; * floating-point values.  Float controls are often&#xA; * represented in graphical user interfaces by continuously&#xA; * adjustable objects such as sliders or rotary knobs.  Concrete subclasses&#xA; * of &lt;code>FloatControl&lt;/code> implement controls, such as gain and pan, that&#xA; * affect a line's audio signal in some way that an application can manipulate.&#xA; * The &lt;code>{@link FloatControl.Type}&lt;/code>&#xA; * inner class provides static instances of types that are used to&#xA; * identify some common kinds of float control.&#xA; * &lt;p>&#xA; * The &lt;code>FloatControl&lt;/code> abstract class provides methods to set and get&#xA; * the control's current floating-point value.  Other methods obtain the possible&#xA; * range of values and the control's resolution (the smallest increment between&#xA; * returned values).  Some float controls allow ramping to a&#xA; * new value over a specified period of time.  &lt;code>FloatControl&lt;/code> also&#xA; * includes methods that return string labels for the minimum, maximum, and midpoint&#xA; * positions of the control.&#xA; *&#xA; * @see Line#getControls&#xA; * @see Line#isControlSupported&#xA; *&#xA; * @author David Rivas&#xA; * @author Kara Kytle&#xA; * @version 1.16, 03/12/19&#xA; * @since 1.3&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="Control.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
