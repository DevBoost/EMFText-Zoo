<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="TargetDataLine.java">
  <comments>/*&#xA; * @(#)TargetDataLine.java&#x9;1.20 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sound</namespaces>
  <namespaces>sampled</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="TargetDataLine">
    <comments>/**&#xA;     * Obtains the number of sample frames of audio data that can be read from &#xA;     * the target data line without blocking.  Note that the return value &#xA;     * measures sample frames, not bytes.&#xA;     * @return the number of sample frames currently available for reading&#xA;     * @see SourceDataLine#availableWrite&#xA;     */</comments>
    <comments>//public int availableRead();</comments>
    <members xsi:type="members:InterfaceMethod" name="open">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="format">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AudioFormat.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bufferSize">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="LineUnavailableException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Opens the line with the specified format and requested buffer size,&#xA;     * causing the line to acquire any required system resources and become &#xA;     * operational.  &#xA;     * &lt;p>&#xA;     * The buffer size is specified in bytes, but must represent an integral &#xA;     * number of sample frames.  Invoking this method with a requested buffer &#xA;     * size that does not meet this requirement may result in an &#xA;     * IllegalArgumentException.  The actual buffer size for the open line may &#xA;     * differ from the requested buffer size.  The value actually set may be &#xA;     * queried by subsequently calling &lt;code>{@link DataLine#getBufferSize}&lt;/code>  &#xA;     * &lt;p>&#xA;     * If this operation succeeds, the line is marked as open, and an &#xA;     * &lt;code>{@link LineEvent.Type#OPEN OPEN}&lt;/code> event is dispatched to the &#xA;     * line's listeners.&#xA;     * &lt;p>&#xA;     * Invoking this method on a line that is already open is illegal&#xA;     * and may result in an &lt;code>IllegalStateException&lt;/code>.&#xA;     * &lt;p>&#xA;     * Some lines, once closed, cannot be reopened.  Attempts&#xA;     * to reopen such a line will always result in a &#xA;     * &lt;code>LineUnavailableException&lt;/code>.&#xA;     *&#xA;     * @param format the desired audio format&#xA;     * @param bufferSize the desired buffer size, in bytes.&#xA;     * @throws LineUnavailableException if the line cannot be&#xA;     * opened due to resource restrictions&#xA;     * @throws IllegalArgumentException if the buffer size does not represent&#xA;     * an integral number of sample frames,&#xA;     * or if &lt;code>format&lt;/code> is not fully specified or invalid&#xA;     * @throws IllegalStateException if the line is already open&#xA;     * @throws SecurityException if the line cannot be&#xA;     * opened due to security restrictions&#xA;     *&#xA;     * @see #open(AudioFormat)&#xA;     * @see Line#open&#xA;     * @see Line#close&#xA;     * @see Line#isOpen&#xA;     * @see LineEvent&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="open">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="format">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AudioFormat.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="LineUnavailableException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Opens the line with the specified format, causing the line to acquire any &#xA;     * required system resources and become operational.  &#xA;     *   &#xA;     * &lt;p>&#xA;     * The implementation chooses a buffer size, which is measured in bytes but &#xA;     * which encompasses an integral number of sample frames.  The buffer size &#xA;     * that the system has chosen may be queried by subsequently calling &lt;code>{@link DataLine#getBufferSize}&lt;/code>  &#xA;     * &lt;p>&#xA;     * If this operation succeeds, the line is marked as open, and an &#xA;     * &lt;code>{@link LineEvent.Type#OPEN OPEN}&lt;/code> event is dispatched to the &#xA;     * line's listeners.&#xA;     * &lt;p>&#xA;     * Invoking this method on a line that is already open is illegal&#xA;     * and may result in an &lt;code>IllegalStateException&lt;/code>.&#xA;     * &lt;p>&#xA;     * Some lines, once closed, cannot be reopened.  Attempts&#xA;     * to reopen such a line will always result in a &#xA;     * &lt;code>LineUnavailableException&lt;/code>.&#xA;     *&#xA;     * @param format the desired audio format&#xA;     * @throws LineUnavailableException if the line cannot be&#xA;     * opened due to resource restrictions&#xA;     * @throws IllegalArgumentException if &lt;code>format&lt;/code>&#xA;     * is not fully specified or invalid&#xA;     * @throws IllegalStateException if the line is already open&#xA;     * @throws SecurityException if the line cannot be&#xA;     * opened due to security restrictions&#xA;     *&#xA;     * @see #open(AudioFormat, int)&#xA;     * @see Line#open&#xA;     * @see Line#close&#xA;     * @see Line#isOpen&#xA;     * @see LineEvent&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="off">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reads audio data from the data line's input buffer.   The requested &#xA;     * number of bytes is read into the specified array, starting at&#xA;     * the specified offset into the array in bytes.  This method blocks until&#xA;     * the requested amount of data has been read.  However, if the data line &#xA;     * is closed, stopped, drained, or flushed before the requested amount has &#xA;     * been read, the method no longer blocks, but returns the number of bytes&#xA;     * read thus far. &#xA;     * &lt;p>&#xA;     * The number of bytes that can be read without blocking can be ascertained&#xA;     * using the &lt;code>{@link DataLine#available available}&lt;/code> method of the&#xA;     * &lt;code>DataLine&lt;/code> interface.  (While it is guaranteed that&#xA;     * this number of bytes can be read without blocking, there is no guarantee&#xA;     * that attempts to read additional data will block.)&#xA;     * &lt;p>&#xA;     * The number of bytes to be read must represent an integral number of&#xA;     * sample frames, such that:&#xA;     * &lt;br>&#xA;     * &lt;center>&lt;code>[ bytes read ] % [frame size in bytes ] == 0&lt;/code>&lt;/center>&#xA;     * &lt;br>&#xA;     * The return value will always meet this requirement.  A request to read a &#xA;     * number of bytes representing a non-integral number of sample frames cannot &#xA;     * be fulfilled and may result in an IllegalArgumentException.&#xA;     *&#xA;     * @param b a byte array that will contain the requested input data when &#xA;     * this method returns&#xA;     * @param off the offset from the beginning of the array, in bytes&#xA;     * @param len the requested number of bytes to read&#xA;     * @return the number of bytes actually read&#xA;     * @throws IllegalArgumentException if the requested number of bytes does&#xA;     * not represent an integral number of sample frames.&#xA;     * or if &lt;code>len&lt;/code> is negative.&#xA;     * @throws ArrayIndexOutOfBoundsException if &lt;code>off&lt;/code> is negative,&#xA;     * or &lt;code>off+len&lt;/code> is greater than the length of the array&#xA;     * &lt;code>b&lt;/code>. &#xA;     *&#xA;     * @see SourceDataLine#write&#xA;     * @see DataLine#available&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A target data line is a type of &lt;code>{@link DataLine}&lt;/code> from which &#xA; * audio data can be read.  The most common example is a data line that gets&#xA; * its data from an audio capture device.  (The device is implemented as a&#xA; * mixer that writes to the target data line.)&#xA; * &lt;p>&#xA; * Note that the naming convention for this interface reflects the relationship&#xA; * between the line and its mixer.  From the perspective of an application,&#xA; * a target data line may act as a source for audio data.&#xA; * &lt;p>&#xA; * The target data line can be obtained from a mixer by invoking the &#xA; * &lt;code>{@link Mixer#getLine getLine}&lt;/code> &#xA; * method of &lt;code>Mixer&lt;/code> with an appropriate &#xA; * &lt;code>{@link DataLine.Info}&lt;/code> object.&#xA; * &lt;p>&#xA; * The &lt;code>TargetDataLine&lt;/code> interface provides a method for reading the&#xA; * captured data from the target data line's buffer.Applications &#xA; * that record audio should read data from the target data line quickly enough &#xA; * to keep the buffer from overflowing, which could cause discontinuities in &#xA; * the captured data that are perceived as clicks.  Applications can use the &#xA; * &lt;code>{@link DataLine#available available}&lt;/code> method defined in the&#xA; * &lt;code>DataLine&lt;/code> interface to determine the amount of data currently&#xA; * queued in the data line's buffer.  If the buffer does overflow,&#xA; * the oldest queued data is discarded and replaced by new data.&#xA; * &#xA; * @author Kara Kytle&#xA; * @version 1.20 03/12/19&#xA; * @see Mixer&#xA; * @see DataLine&#xA; * @see SourceDataLine&#xA; * @since 1.3&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="DataLine.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
