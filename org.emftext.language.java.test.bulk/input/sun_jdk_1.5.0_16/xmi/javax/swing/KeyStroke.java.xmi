<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../java.ecore#/0 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="KeyStroke.java">
  <comments>/*&#xA; * @(#)KeyStroke.java&#x9;1.49 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>event</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/awt/event/KeyEvent.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="KeyStroke">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="9060180771037902530"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Serial Version ID.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="KeyStroke">
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Constructor" name="KeyStroke">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.3"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keyChar">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keyCode">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="modifiers">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="onKeyRelease">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getKeyStroke">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keyChar">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a shared instance of a &lt;code>KeyStroke&lt;/code> &#xA;     * that represents a &lt;code>KEY_TYPED&lt;/code> event for the &#xA;     * specified character.&#xA;     *&#xA;     * @param keyChar the character value for a keyboard key&#xA;     * @return a KeyStroke object for that key&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0/@members.13"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:ReflectiveClassReference"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <child xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0/@members.16"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
            </child>
          </returnValue>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference">
          <next xsi:type="references:ReflectiveClassReference"/>
          <target xsi:type="classifiers:Class" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getKeyStroke">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keyChar">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="onKeyRelease">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Returns an instance of a KeyStroke, specifying whether the key is&#xA;     * considered to be activated when it is pressed or released. Unlike all&#xA;     * other factory methods in this class, the instances returned by this&#xA;     * method are not necessarily cached or shared.&#xA;     *&#xA;     * @param keyChar the character value for a keyboard key&#xA;     * @param onKeyRelease &lt;code>true&lt;/code> if this KeyStroke corresponds to a&#xA;     *        key release; &lt;code>false&lt;/code> otherwise.&#xA;     * @return a KeyStroke object for that key&#xA;     * @deprecated use getKeyStroke(char)&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/awt/event/KeyEvent.class.xmi#//@classifiers.0/@members.194"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/awt/event/KeyEvent.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getKeyStroke">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keyChar">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Character.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="modifiers">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a shared instance of a KeyStroke, given a Character object and a&#xA;     * set of modifiers. Note that the first parameter is of type Character&#xA;     * rather than char. This is to avoid inadvertent clashes with calls to&#xA;     * &lt;code>getKeyStroke(int keyCode, int modifiers)&lt;/code>.&#xA;     *&#xA;     * The modifiers consist of any combination of:&lt;ul>&#xA;     * &lt;li>java.awt.event.InputEvent.SHIFT_MASK (1)&#xA;     * &lt;li>java.awt.event.InputEvent.CTRL_MASK (2)&#xA;     * &lt;li>java.awt.event.InputEvent.META_MASK (4)&#xA;     * &lt;li>java.awt.event.InputEvent.ALT_MASK (8)&#xA;     * &lt;/ul>&#xA;     * Since these numbers are all different powers of two, any combination of&#xA;     * them is an integer in which each bit represents a different modifier&#xA;     * key. Use 0 to specify no modifiers.&#xA;     *&#xA;     * @param keyChar the Character object for a keyboard character&#xA;     * @param modifiers a bitwise-ored combination of any modifiers&#xA;     * @return an KeyStroke object for that key&#xA;     * @throws IllegalArgumentException if keyChar is null&#xA;     *&#xA;     * @see java.awt.event.InputEvent&#xA;     * @since 1.3&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0/@members.13"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:ReflectiveClassReference"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <child xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
            </child>
          </returnValue>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference">
          <next xsi:type="references:ReflectiveClassReference"/>
          <target xsi:type="classifiers:Class" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getKeyStroke">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keyCode">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="modifiers">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="onKeyRelease">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a shared instance of a KeyStroke, given a numeric key code and a&#xA;     * set of modifiers, specifying whether the key is activated when it is&#xA;     * pressed or released.&#xA;     * &lt;p>&#xA;     * The &quot;virtual key&quot; constants defined in java.awt.event.KeyEvent can be &#xA;     * used to specify the key code. For example:&lt;ul>&#xA;     * &lt;li>java.awt.event.KeyEvent.VK_ENTER &#xA;     * &lt;li>java.awt.event.KeyEvent.VK_TAB&#xA;     * &lt;li>java.awt.event.KeyEvent.VK_SPACE&#xA;     * &lt;/ul>&#xA;     * The modifiers consist of any combination of:&lt;ul>&#xA;     * &lt;li>java.awt.event.InputEvent.SHIFT_MASK (1)&#xA;     * &lt;li>java.awt.event.InputEvent.CTRL_MASK (2)&#xA;     * &lt;li>java.awt.event.InputEvent.META_MASK (4)&#xA;     * &lt;li>java.awt.event.InputEvent.ALT_MASK (8)&#xA;     * &lt;/ul>&#xA;     * Since these numbers are all different powers of two, any combination of&#xA;     * them is an integer in which each bit represents a different modifier&#xA;     * key. Use 0 to specify no modifiers.&#xA;     *&#xA;     * @param keyCode an int specifying the numeric code for a keyboard key&#xA;     * @param modifiers a bitwise-ored combination of any modifiers&#xA;     * @param onKeyRelease &lt;code>true&lt;/code> if the KeyStroke should represent&#xA;     *        a key release; &lt;code>false&lt;/code> otherwise.&#xA;     * @return a KeyStroke object for that key&#xA;     *&#xA;     * @see java.awt.event.KeyEvent&#xA;     * @see java.awt.event.InputEvent&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0/@members.13"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:ReflectiveClassReference"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <child xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0/@members.18"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
            </child>
          </returnValue>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference">
          <next xsi:type="references:ReflectiveClassReference"/>
          <target xsi:type="classifiers:Class" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getKeyStroke">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keyCode">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="modifiers">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a shared instance of a KeyStroke, given a numeric key code and a&#xA;     * set of modifiers. The returned KeyStroke will correspond to a key press.&#xA;     * &lt;p>&#xA;     * The &quot;virtual key&quot; constants defined in java.awt.event.KeyEvent can be &#xA;     * used to specify the key code. For example:&lt;ul>&#xA;     * &lt;li>java.awt.event.KeyEvent.VK_ENTER &#xA;     * &lt;li>java.awt.event.KeyEvent.VK_TAB&#xA;     * &lt;li>java.awt.event.KeyEvent.VK_SPACE&#xA;     * &lt;/ul>&#xA;     * The modifiers consist of any combination of:&lt;ul>&#xA;     * &lt;li>java.awt.event.InputEvent.SHIFT_MASK (1)&#xA;     * &lt;li>java.awt.event.InputEvent.CTRL_MASK (2)&#xA;     * &lt;li>java.awt.event.InputEvent.META_MASK (4)&#xA;     * &lt;li>java.awt.event.InputEvent.ALT_MASK (8)&#xA;     * &lt;/ul>&#xA;     * Since these numbers are all different powers of two, any combination of&#xA;     * them is an integer in which each bit represents a different modifier&#xA;     * key. Use 0 to specify no modifiers.&#xA;     *&#xA;     * @param keyCode an int specifying the numeric code for a keyboard key&#xA;     * @param modifiers a bitwise-ored combination of any modifiers&#xA;     * @return a KeyStroke object for that key&#xA;     *&#xA;     * @see java.awt.event.KeyEvent&#xA;     * @see java.awt.event.InputEvent&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0/@members.13"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:ReflectiveClassReference"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <child xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0/@members.19"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.1"/>
            </child>
          </returnValue>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference">
          <next xsi:type="references:ReflectiveClassReference"/>
          <target xsi:type="classifiers:Class" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getKeyStrokeForEvent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="anEvent">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/event/KeyEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a KeyStroke which represents the stroke which generated a given&#xA;     * KeyEvent.&#xA;     * &lt;p>&#xA;     * This method obtains the keyChar from a KeyTyped event, and the keyCode&#xA;     * from a KeyPressed or KeyReleased event. The KeyEvent modifiers are&#xA;     * obtained for all three types of KeyEvent.&#xA;     *&#xA;     * @param anEvent the KeyEvent from which to obtain the KeyStroke&#xA;     * @throws NullPointerException if &lt;code>anEvent&lt;/code> is null&#xA;     * @return the KeyStroke that precipitated the event&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0/@members.13"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:ReflectiveClassReference"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <child xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0/@members.20"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
            </child>
          </returnValue>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference">
          <next xsi:type="references:ReflectiveClassReference"/>
          <target xsi:type="classifiers:Class" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getKeyStroke">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Parses a string and returns a &lt;code>KeyStroke&lt;/code>. &#xA;     * The string must have the following syntax:&#xA;     * &lt;pre>&#xA;     *    &amp;lt;modifiers&amp;gt;* (&amp;lt;typedID&amp;gt; | &amp;lt;pressedReleasedID&amp;gt;)&#xA;     *&#xA;     *    modifiers := shift | control | ctrl | meta | alt | altGraph &#xA;     *    typedID := typed &amp;lt;typedKey&amp;gt;&#xA;     *    typedKey := string of length 1 giving Unicode character.&#xA;     *    pressedReleasedID := (pressed | released) key&#xA;     *    key := KeyEvent key code name, i.e. the name following &quot;VK_&quot;.&#xA;     * &lt;/pre>&#xA;     * If typed, pressed or released is not specified, pressed is assumed. Here&#xA;     * are some examples:&#xA;     * &lt;pre>&#xA;     *     &quot;INSERT&quot; => getKeyStroke(KeyEvent.VK_INSERT, 0);&#xA;     *     &quot;control DELETE&quot; => getKeyStroke(KeyEvent.VK_DELETE, InputEvent.CTRL_MASK);&#xA;     *     &quot;alt shift X&quot; => getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK);&#xA;     *     &quot;alt shift released X&quot; => getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true);&#xA;     *     &quot;typed a&quot; => getKeyStroke('a');&#xA;     * &lt;/pre>&#xA;     *&#xA;     * In order to maintain backward-compatibility, specifying a null String,&#xA;     * or a String which is formatted incorrectly, returns null.&#xA;     *&#xA;     * @param s a String formatted as described above&#xA;     * @return a KeyStroke object for that String, or null if the specified&#xA;     *         String is null, or is formatted incorrectly&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0/@members.13"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:ReflectiveClassReference"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0"/>
              </typeReference>
              <child xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0/@members.21"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
              </child>
            </returnValue>
          </statements>
          <catcheBlocks>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:NullLiteral"/>
            </statements>
            <parameter name="e">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference">
          <next xsi:type="references:ReflectiveClassReference"/>
          <target xsi:type="classifiers:Class" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0"/>
        </lockProvider>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A KeyStroke represents a key action on the keyboard, or equivalent input&#xA; * device. KeyStrokes can correspond to only a press or release of a particular&#xA; * key, just as KEY_PRESSED and KEY_RELEASED KeyEvents do; alternately, they&#xA; * can correspond to typing a specific Java character, just as KEY_TYPED&#xA; * KeyEvents do. In all cases, KeyStrokes can specify modifiers (alt, shift,&#xA; * control, meta, or a combination thereof) which must be present during the&#xA; * action for an exact match.&#xA; * &lt;p>&#xA; * KeyStrokes are used to define high-level (semantic) action events. Instead&#xA; * of trapping every keystroke and throwing away the ones you are not&#xA; * interested in, those keystrokes you care about automatically initiate&#xA; * actions on the Components with which they are registered.&#xA; * &lt;p>&#xA; * KeyStrokes are immutable, and are intended to be unique. Client code cannot&#xA; * create a KeyStroke; a variant of &lt;code>getKeyStroke&lt;/code> must be used&#xA; * instead. These factory methods allow the KeyStroke implementation to cache&#xA; * and share instances efficiently.&#xA; * &lt;p>&#xA; * &lt;strong>Warning:&lt;/strong>&#xA; * Serialized objects of this class will not be compatible with&#xA; * future Swing releases. The current serialization support is&#xA; * appropriate for short term storage or RMI between applications running&#xA; * the same version of Swing.  As of 1.4, support for long term storage&#xA; * of all JavaBeans&lt;sup>&lt;font size=&quot;-2&quot;>TM&lt;/font>&lt;/sup>&#xA; * has been added to the &lt;code>java.beans&lt;/code> package.&#xA; * Please see {@link java.beans.XMLEncoder}.&#xA; *&#xA; * @see javax.swing.text.Keymap&#xA; * @see #getKeyStroke&#xA; *&#xA; * @version 1.49, 05/18/04&#xA; * @author Arnaud Weber&#xA; * @author David Mendenhall&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../../java/awt/AWTKeyStroke.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
