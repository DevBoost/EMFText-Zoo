<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/types ../../../java.ecore#/16" name="AttributeSet.java">
  <comments>/*&#xA; * @(#)AttributeSet.java&#x9;1.40 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <namespaces>text</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="AttributeSet">
    <members xsi:type="classifiers:Interface" name="FontAttribute">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This interface is the type signature that is expected&#xA;     * to be present on any attribute key that contributes to&#xA;     * the determination of what font to use to render some &#xA;     * text.  This is not considered to be a closed set, the &#xA;     * definition can change across version of the platform and can &#xA;     * be amended by additional user added entries that &#xA;     * correspond to logical settings that are specific to&#xA;     * some type of content.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="classifiers:Interface" name="ColorAttribute">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This interface is the type signature that is expected&#xA;     * to be present on any attribute key that contributes to&#xA;     * presentation of color.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="classifiers:Interface" name="CharacterAttribute">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This interface is the type signature that is expected&#xA;     * to be present on any attribute key that contributes to&#xA;     * character level presentation.  This would be any attribute&#xA;     * that applies to a so-called &lt;term>run&lt;/term> of &#xA;     * style.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="classifiers:Interface" name="ParagraphAttribute">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This interface is the type signature that is expected&#xA;     * to be present on any attribute key that contributes to&#xA;     * the paragraph level presentation.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributeCount">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of attributes contained in this set.&#xA;     *&#xA;     * @return the number of attributes >= 0&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isDefined">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attrName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Checks whether the named attribute has a value specified in&#xA;     * the set without resolving through another attribute&#xA;     * set.&#xA;     *&#xA;     * @param attrName the attribute name&#xA;     * @return true if the attribute has a value specified&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isEqual">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines if the two attribute sets are equivalent.&#xA;     *&#xA;     * @param attr an attribute set&#xA;     * @return true if the sets are equivalent&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="copyAttributes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an attribute set that is guaranteed not&#xA;     * to change over time.  &#xA;     *&#xA;     * @return a copy of the attribute set&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttribute">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Fetches the value of the given attribute. If the value is not found&#xA;     * locally, the search is continued upward through the resolving &#xA;     * parent (if one exists) until the value is either&#xA;     * found or there are no more parents.  If the value is not found,&#xA;     * null is returned.&#xA;     *&#xA;     * @param key the non-null key of the attribute binding&#xA;     * @return the value&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributeNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an enumeration over the names of the attributes in the set.&#xA;     * The values of the &lt;code>Enumeration&lt;/code> may be anything&#xA;     * and are not constrained to a particular &lt;code>Object&lt;/code> type.&#xA;     * The set does not include the resolving parent, if one is defined.&#xA;     *&#xA;     * @return the names&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="containsAttribute">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns true if this set contains this attribute with an equal value.&#xA;     *&#xA;     * @param name the non-null attribute name&#xA;     * @param value the value&#xA;     * @return true if the set contains the attribute with an equal value&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="containsAttributes">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns true if this set contains all the attributes with equal values.&#xA;     *&#xA;     * @param attributes the set of attributes to check against&#xA;     * @return true if this set contains all the attributes with equal values&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getResolveParent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the resolving parent.&#xA;     *&#xA;     * @return the parent&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="NameAttribute">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="StyleConstants.class.xmi#//@classifiers.0/@members.2"/>
        </next>
        <target xsi:type="classifiers:Class" href="StyleConstants.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute name used to name the collection of&#xA;     * attributes.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ResolveAttribute">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="StyleConstants.class.xmi#//@classifiers.0/@members.3"/>
        </next>
        <target xsi:type="classifiers:Class" href="StyleConstants.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute name used to identify the resolving parent&#xA;     * set of attributes, if one is defined.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A collection of unique attributes.  This is a read-only, &#xA; * immutable interface.  An attribute is basically a key and&#xA; * a value assigned to the key.  The collection may represent&#xA; * something like a style run, a logical style, etc.  These&#xA; * are generally used to describe features that will contribute&#xA; * to some graphical representation such as a font.  The&#xA; * set of possible keys is unbounded and can be anything.&#xA; * Typically View implementations will respond to attribute&#xA; * definitions and render something to represent the attributes.&#xA; * &lt;p>&#xA; * Attributes can potentially resolve in a hierarchy.  If a &#xA; * key doesn't resolve locally, and a resolving parent&#xA; * exists, the key will be resolved through the parent.&#xA; *&#xA; * @author  Timothy Prinzing&#xA; * @version 1.40 05/05/04&#xA; * @see MutableAttributeSet&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
