<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../java.ecore#/17" name="StringContent.java">
  <comments>/*&#xA; * @(#)StringContent.java&#x9;1.44 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <namespaces>text</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>undo</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SwingUtilities.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="StringContent">
    <members xsi:type="members:Constructor" name="StringContent">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new StringContent object.  Initial size defaults to 10.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="StringContent">
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Char"/>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:CharacterLiteral" value="10"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="initialLength">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new StringContent object, with the initial&#xA;     * size specified.  If the length is &lt; 1, a size of 1 is used.&#xA;     *&#xA;     * @param initialLength the initial size&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="length">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the length of the content.&#xA;     *&#xA;     * @return the length >= 1&#xA;     * @see AbstractDocument.Content#length&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="insertString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../undo/UndoableEdit.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="where">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts a string into the content.&#xA;     *&#xA;     * @param where the starting position >= 0 &amp;&amp; &lt; length()&#xA;     * @param str the non-null string to insert&#xA;     * @return an UndoableEdit object for undoing&#xA;     * @exception BadLocationException if the specified position is invalid&#xA;     * @see AbstractDocument.Content#insertString&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Invalid location"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="chars">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.73"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@variable"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.21"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="remove">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../undo/UndoableEdit.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="where">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nitems">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes part of the content.  where + nitems must be &lt; length().&#xA;     *&#xA;     * @param where the starting position >= 0&#xA;     * @param nitems the number of characters to remove >= 0&#xA;     * @return an UndoableEdit object for undoing&#xA;     * @exception BadLocationException if the specified position is invalid&#xA;     * @see AbstractDocument.Content#remove&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Invalid range"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="removedString">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="edit">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../undo/UndoableEdit.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.22"/>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.1/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.11">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.2/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="where">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves a portion of the content.  where + len must be &lt;= length().&#xA;     *&#xA;     * @param where the starting position >= 0&#xA;     * @param len the length to retrieve >= 0&#xA;     * @return a string representing the content; may be empty&#xA;     * @exception BadLocationException if the specified position is invalid&#xA;     * @see AbstractDocument.Content#getString&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Invalid range"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getChars">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="where">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="chars">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Segment.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves a portion of the content.  where + len must be &lt;= length()&#xA;     *&#xA;     * @param where the starting position >= 0&#xA;     * @param len the number of characters to retrieve >= 0&#xA;     * @param chars the Segment object to return the characters in&#xA;     * @exception BadLocationException if the specified position is invalid&#xA;     * @see AbstractDocument.Content#getChars&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Invalid location"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Segment.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Segment.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Segment.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createPosition">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Position.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a position within the content that will&#xA;     * track change as the content is mutated.&#xA;     *&#xA;     * @param offset the offset to create a position for >= 0&#xA;     * @return the position&#xA;     * @exception BadLocationException if the specified position is invalid&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// some small documents won't have any sticky positions</comments>
        <comments>// at all, so the buffer is created lazily.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="replace">
      <typeReference xsi:type="types:Void">
        <comments>// --- local methods ---------------------------------------</comments>
        <comments>/**&#xA;     * Replaces some of the characters in the array&#xA;     * @param offset  offset into the array to start the replace&#xA;     * @param length  number of characters to remove&#xA;     * @param replArray replacement array&#xA;     * @param replOffset offset into the replacement array&#xA;     * @param replLength number of character to use from the&#xA;     *   replacement array.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="replArray">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="replOffset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="replLength">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="delta">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.4"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="src">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nmove">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@variable"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dest">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="newLength">
              <typeReference xsi:type="types:Int">
                <comments>// need to grow the array</comments>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Math.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="expressions:MultiplicativeExpression">
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15">
                      <next xsi:type="references:IdentifierReference"/>
                    </children>
                    <multiplicativeOperators xsi:type="operators:Multiplication"/>
                  </arguments>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Math.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="newData">
              <typeReference xsi:type="types:Char"/>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Char"/>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.4/@statement/@statements.0/@variable"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.4/@statement/@statements.1/@variable"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.2"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.3"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.4/@statement/@statements.1/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.4"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.4/@statement/@statements.1/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.3/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@variable"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.4/@statement/@statements.1/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </expression>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <comments>// patch the existing array</comments>
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.3/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@variable"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.2"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.3"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.4"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="resize">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ncount">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="ndata">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Char"/>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Math.class.xmi#//@classifiers.0/@members.37"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Math.class.xmi#//@classifiers.0"/>
            </arguments>
          </next>
          <target xsi:type="classifiers:Class" href="../../../java/lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="updateMarksForInsert">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                <comments>// zero is a special case where we update only</comments>
                <comments>// marks after it.</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="n">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="mark">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.18"/>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.18"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@init"/>
                  </next>
                </child>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
                  <comments>// this record is no longer used, get rid of it</comments>
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.26"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@init"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@init"/>
                  <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@statement/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.2"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@statement/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.1"/>
                    </child>
                    <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.1"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </condition>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="updateMarksForRemove">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="n">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="mark">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.18"/>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.18"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@init"/>
                  </next>
                </child>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
                  <comments>// this record is no longer used, get rid of it</comments>
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.26"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@init"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@init"/>
                  <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@statement/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.2"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@statement/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.1"/>
                    </child>
                    <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.1"/>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </expression>
                </children>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@statement/@statements.0/@variable">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.1"/>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@statement/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.1"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                  <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                </condition>
              </elseStatement>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPositionsInRange">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns a Vector containing instances of UndoPosRef for the&#xA;     * Positions in the range&#xA;     * &lt;code>offset&lt;/code> to &lt;code>offset&lt;/code> + &lt;code>length&lt;/code>.&#xA;     * If &lt;code>v&lt;/code> is not null the matching Positions are placed in&#xA;     * there. The vector with the resulting Positions are returned.&#xA;     * &lt;p>&#xA;     * This is meant for internal usage, and is generally not of interest&#xA;     * to subclasses.&#xA;     *&#xA;     * @param v the Vector to use, with a new one created on null&#xA;     * @param offset the starting offset >= 0&#xA;     * @param length the length >= 0&#xA;     * @return the set of instances&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="n">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="end">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.1"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="placeIn">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
                <children xsi:type="literals:NullLiteral"/>
              </expression>
            </child>
            <expressionIf xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </expressionIf>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="mark">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.18"/>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.18"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.3/@init"/>
                  </next>
                </child>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
                  <comments>// this record is no longer used, get rid of it</comments>
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.26"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.3/@init"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.3/@init"/>
                  <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.3/@statement/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.2"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.28"/>
                    <arguments xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@members.20"/>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.3/@statement/@statements.0/@variable"/>
                    </arguments>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.3/@statement/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.1"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.1"/>
                  <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                </children>
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.3/@statement/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.1"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@variable"/>
                  <relationOperators xsi:type="operators:LessThanOrEqual"/>
                </children>
              </condition>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.3/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.3/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="updateUndoPositions">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="positions">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Resets the location for all the UndoPosRef instances&#xA;     * in &lt;code>positions&lt;/code>.&#xA;     * &lt;p>&#xA;     * This is meant for internal usage, and is generally not of interest&#xA;     * to subclasses.&#xA;     *&#xA;     * @param positions the positions of the instances&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="ref">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.20"/>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.20"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@init"/>
                  </next>
                </child>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// Check if the Position is still valid.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.26"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@init"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@statement/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.3">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.2"/>
              </next>
            </condition>
            <elseStatement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@statement/@statements.0/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.20/@members.1"/>
              </expression>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@init"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="counter">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@init"/>
          <operator xsi:type="operators:MinusMinus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:Field" name="empty">
      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
        <typeReference xsi:type="types:Char"/>
        <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </initialValue>
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="data">
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="count">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="marks">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="classifiers:Class" name="PosRec">
      <members xsi:type="members:Constructor" name="PosRec">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.0/@parameters.0"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
          <typeReference xsi:type="types:Int"/>
        </parameters>
      </members>
      <members xsi:type="members:Field" name="offset">
        <typeReference xsi:type="types:Int"/>
      </members>
      <members xsi:type="members:Field" name="unused">
        <typeReference xsi:type="types:Boolean"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * holds the data for a mark... separately from&#xA;     * the real mark so that the real mark can be &#xA;     * collected if there are no more references to&#xA;     * it.... the update table holds only a reference&#xA;     * to this grungy thing.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="classifiers:Class" name="StickyPosition">
      <members xsi:type="members:Constructor" name="StickyPosition">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@members.4"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.18"/>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@members.0/@parameters.0"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.28"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@members.4"/>
            </next>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
          <typeReference xsi:type="types:Int"/>
        </parameters>
      </members>
      <members xsi:type="members:ClassMethod" name="getOffset">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@members.4">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.1"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="finalize">
        <typeReference xsi:type="types:Void"/>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Throwable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Protected"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@members.4">
              <comments>// schedule the record to be removed later</comments>
              <comments>// on another thread.</comments>
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.2"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:BooleanLiteral" value="true"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="toString">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/Integer.class.xmi#//@classifiers.0/@members.15"/>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.19/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:Field" name="rec">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * This really wants to be a weak reference but&#xA;     * in 1.1 we don't have a 100% pure solution for&#xA;     * this... so this class trys to hack a solution &#xA;     * to causing the marks to be collected.&#xA;     */</comments>
      </annotationsAndModifiers>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Position.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
    </members>
    <members xsi:type="classifiers:Class" name="UndoPosRef">
      <members xsi:type="members:Constructor" name="UndoPosRef">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.3"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.0/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.2"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.0/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.1"/>
            </value>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="rec">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:ClassMethod" name="resetLocation">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Resets the location of the Position to the offset when the&#xA;&#x9; * receiver was instantiated.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.3">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.1"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.2"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:Field" name="undoLocation">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/** Location to reset to when resetLocatino is invoked. */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="rec">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/** Position to reset offset. */</comments>
        </annotationsAndModifiers>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Used to hold a reference to a Position that is being reset as the&#xA;     * result of removing from the content.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="classifiers:Class" name="InsertUndo">
      <comments>/**&#xA;     * UnoableEdit created for inserts.&#xA;     */</comments>
      <members xsi:type="members:Constructor" name="InsertUndo">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.3"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.0/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.4"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.0/@parameters.1"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="length">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      </members>
      <members xsi:type="members:ClassMethod" name="undo">
        <typeReference xsi:type="types:Void"/>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../undo/CannotUndoException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../undo/AbstractUndoableEdit.class.xmi#//@classifiers.0/@members.6"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expression>
        </statements>
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:SynchronizedBlock">
            <statements xsi:type="statements:Condition">
              <comments>// Get the Positions in the range being removed.</comments>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.6"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.3"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.4"/>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.5"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.3"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.4"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.4">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.3"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.4"/>
              </expression>
            </statements>
            <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:SelfReference">
                <self xsi:type="literals:This"/>
              </next>
            </lockProvider>
          </statements>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../undo/CannotUndoException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </throwable>
            </statements>
            <parameter name="bl">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="redo">
        <typeReference xsi:type="types:Void"/>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../undo/CannotRedoException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../undo/AbstractUndoableEdit.class.xmi#//@classifiers.0/@members.8"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expression>
        </statements>
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:SynchronizedBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.3">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.3"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.5"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.5"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <comments>// Update the Positions that were in the range removed.</comments>
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.6"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.6"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:NullLiteral"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.6"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:SelfReference">
                <self xsi:type="literals:This"/>
              </next>
            </lockProvider>
          </statements>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../undo/CannotRedoException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </throwable>
            </statements>
            <parameter name="bl">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
      </members>
      <members xsi:type="members:Field" name="offset">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>// Where the string goes.</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="length">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>// Length of the string.</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="string">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>// The string that was inserted. To cut down on space needed this</comments>
          <comments>// will only be valid after an undo.</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="posRefs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>// An array of instances of UndoPosRef for the Positions in the</comments>
          <comments>// range that was removed, valid after undo.</comments>
        </annotationsAndModifiers>
      </members>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../undo/AbstractUndoableEdit.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="RemoveUndo">
      <comments>/**&#xA;     * UndoableEdit created for removes.&#xA;     */</comments>
      <members xsi:type="members:Constructor" name="RemoveUndo">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.3"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.0/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.5"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.0/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.4"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.0/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.6"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
                <arguments xsi:type="literals:NullLiteral"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.0/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.4"/>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="string">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      </members>
      <members xsi:type="members:ClassMethod" name="undo">
        <typeReference xsi:type="types:Void"/>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../undo/CannotUndoException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../undo/AbstractUndoableEdit.class.xmi#//@classifiers.0/@members.6"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expression>
        </statements>
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:SynchronizedBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.3">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.3"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.5"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <comments>// Update the Positions that were in the range removed.</comments>
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.6"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.6"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:NullLiteral"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.6"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.5"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
            <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:SelfReference">
                <self xsi:type="literals:This"/>
              </next>
            </lockProvider>
          </statements>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../undo/CannotUndoException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </throwable>
            </statements>
            <parameter name="bl">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="redo">
        <typeReference xsi:type="types:Void"/>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../undo/CannotRedoException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../undo/AbstractUndoableEdit.class.xmi#//@classifiers.0/@members.8"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expression>
        </statements>
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:SynchronizedBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.5"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.3"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.4"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <comments>// Get the Positions in the range being removed.</comments>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.6"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.3"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.4"/>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.4">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.3"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.4"/>
              </expression>
            </statements>
            <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:SelfReference">
                <self xsi:type="literals:This"/>
              </next>
            </lockProvider>
          </statements>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../undo/CannotRedoException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </throwable>
            </statements>
            <parameter name="bl">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
      </members>
      <members xsi:type="members:Field" name="offset">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>// Where the string goes.</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="length">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>// Length of the string.</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="string">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>// The string that was inserted. This will be null after an undo.</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="posRefs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>// An array of instances of UndoPosRef for the Positions in the</comments>
          <comments>// range that was removed, valid before undo.</comments>
        </annotationsAndModifiers>
      </members>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../undo/AbstractUndoableEdit.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An implementation of the AbstractDocument.Content interface that is &#xA; * a brute force implementation that is useful for relatively small &#xA; * documents and/or debugging.  It manages the character content&#xA; * as a simple character array.  It is also quite inefficient.  &#xA; * &lt;p>&#xA; * It is generally recommended that the gap buffer or piece table &#xA; * implementations be used instead.  This buffer does not scale up&#xA; * to large sizes.&#xA; * &lt;p>&#xA; * &lt;strong>Warning:&lt;/strong>&#xA; * Serialized objects of this class will not be compatible with&#xA; * future Swing releases. The current serialization support is&#xA; * appropriate for short term storage or RMI between applications running&#xA; * the same version of Swing.  As of 1.4, support for long term storage&#xA; * of all JavaBeans&lt;sup>&lt;font size=&quot;-2&quot;>TM&lt;/font>&lt;/sup>&#xA; * has been added to the &lt;code>java.beans&lt;/code> package.&#xA; * Please see {@link java.beans.XMLEncoder}.&#xA; *&#xA; * @author  Timothy Prinzing&#xA; * @version 1.44 12/19/03&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <namespaces>AbstractDocument</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="AbstractDocument$Content.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
