<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../../java.ecore#/17" name="Parser.java">
  <comments>/*&#xA; * @(#)Parser.java&#x9;1.43 05/05/27&#xA; *&#xA; * Copyright 2005 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <namespaces>text</namespaces>
  <namespaces>html</namespaces>
  <namespaces>parser</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>text</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../SimpleAttributeSet.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>text</namespaces>
    <namespaces>html</namespaces>
    <classifier xsi:type="classifiers:Class" href="../HTML.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>text</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../ChangedCharSetException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../java/util/Properties.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../java/net/URL.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>misc</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../sun/misc/MessageUtils.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Parser">
    <members xsi:type="members:Field" name="text">
      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
        <typeReference xsi:type="types:Char"/>
        <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="1024"/>
      </initialValue>
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsAfter/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="textpos">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="last">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="space">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="str">
      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
        <typeReference xsi:type="types:Char"/>
        <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
      </initialValue>
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsAfter/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="strpos">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="dtd">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DTD.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:Field" name="ch">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="ln">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="in">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/Reader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="recent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Element.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="stack">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TagStack.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="skipTag">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="lastFormSent">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="attributes">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../SimpleAttributeSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../SimpleAttributeSet.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="seenHtml">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// State for &lt;html>, &lt;head> and &lt;body>.  Since people like to slap</comments>
        <comments>// together HTML documents without thinking, occasionally they</comments>
        <comments>// have multiple instances of these tags.  These booleans track</comments>
        <comments>// the first sightings of these tags so they can be safely ignored</comments>
        <comments>// by the parser if repeated.</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="seenHead">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="seenBody">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="ignoreSpace">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The html spec does not specify how spaces are coalesced very well.&#xA;     * If strict == false, ignoreSpace is used to try and mimic the behavior&#xA;     * of the popular browsers.&#xA;     * &lt;p>&#xA;     * The problematic scenarios are:&#xA;     * '&amp;lt;b>blah &amp;lt;i> &amp;lt;strike> foo' which can be treated as:&#xA;     * '&amp;lt;b>blah &amp;lt;i>&amp;lt;strike>foo'&#xA;     * as well as:&#xA;     * '&amp;lt;p>&amp;lt;a href=&quot;xx&quot;> &amp;lt;em>Using&amp;lt;/em>&amp;lt;/a>&amp;lt;/p>'&#xA;     * which appears to be treated as:&#xA;     * '&amp;lt;p>&amp;lt;a href=&quot;xx&quot;>&amp;lt;em>Using&amp;lt;/em>&amp;lt;/a>&amp;lt;/p>'&#xA;     * &lt;p>&#xA;     * When a tag that breaks flow, or trailing whitespace is encountered&#xA;     * ignoreSpace is set to true. From then on, all whitespace will be&#xA;     * ignored.&#xA;     * ignoreSpace will be set back to false the first time a&#xA;     * non whitespace character is encountered. This appears to give&#xA;     * behavior closer to the popular browsers.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="strict">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * This flag determines whether or not the Parser will be strict&#xA;     * in enforcing SGML compatibility.  If false, it will be lenient&#xA;     * with certain common classes of erroneous HTML constructs.&#xA;     * Strict or not, in either case an error will be recorded.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="crlfCount">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Number of \r\n's encountered. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="crCount">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Number of \r's encountered. A \r\n will not increment this. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="lfCount">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Number of \n's encountered. A \r\n will not increment this. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="currentBlockStartPos">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>//</comments>
        <comments>// To correctly identify the start of a tag/comment/text we need two</comments>
        <comments>// ivars. Two are needed as handleText isn't invoked until the tag</comments>
        <comments>// after the text has been parsed, that is the parser parses the text,</comments>
        <comments>// then a tag, then invokes handleText followed by handleStart.</comments>
        <comments>//</comments>
        <comments>/** The start position of the current block. Block is overloaded here,&#xA;     * it really means the current start position for the current comment,&#xA;     * tag, text. Use getBlockStartPosition to access this. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="lastBlockStartPos">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Start position of the last block. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="cp1252Map">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <comments>// &amp;#159;</comments>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8218"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="402">
            <comments>// &amp;#130;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8222">
            <comments>// &amp;#131;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8230">
            <comments>// &amp;#132;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8224">
            <comments>// &amp;#133;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8225">
            <comments>// &amp;#134;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="710">
            <comments>// &amp;#135;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8240">
            <comments>// &amp;#136;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="352">
            <comments>// &amp;#137;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8249">
            <comments>// &amp;#138;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="338">
            <comments>// &amp;#139;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="141">
            <comments>// &amp;#140;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="142">
            <comments>// &amp;#141;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="143">
            <comments>// &amp;#142;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="144">
            <comments>// &amp;#143;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8216">
            <comments>// &amp;#144;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8217">
            <comments>// &amp;#145;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8220">
            <comments>// &amp;#146;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8221">
            <comments>// &amp;#147;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8226">
            <comments>// &amp;#148;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8211">
            <comments>// &amp;#149;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8212">
            <comments>// &amp;#150;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="732">
            <comments>// &amp;#151;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8482">
            <comments>// &amp;#152;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="353">
            <comments>// &amp;#153;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8250">
            <comments>// &amp;#154;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="339">
            <comments>// &amp;#155;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="157">
            <comments>// &amp;#156;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="158">
            <comments>// &amp;#157;</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="376">
            <comments>// &amp;#158;</comments>
          </initialValues>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * array for mapping numeric references in range&#xA;     * 130-159 to displayable Unicode characters.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="Parser">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtd">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DTD.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getCurrentLine">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * @return the line number of the line currently being parsed&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBlockStartPosition">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the start position of the current block. Block is&#xA;     * overloaded here, it really means the current start position for&#xA;     * the current comment tag, text, block.... This is provided for&#xA;     * subclassers that wish to know the start of the current block when&#xA;     * called with one of the handleXXX methods.&#xA;     */</comments>
      </typeReference>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../java/lang/Math.class.xmi#//@classifiers.0/@members.33"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Math.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="makeTag">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="elem">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Element.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fictional">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Makes a TagElement.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="makeTag">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="elem">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Element.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
          <arguments xsi:type="literals:BooleanLiteral"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAttributes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../SimpleAttributeSet.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="flushAttributes">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../SimpleAttributeSet.class.xmi#//@classifiers.0/@members.19"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="handleText">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="text">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Called when PCDATA is encountered.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="handleTitle">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="text">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Called when an HTML title tag is encountered.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <comments>// default behavior is to call handleText. Subclasses</comments>
          <comments>// can override if necessary.</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="handleComment">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="text">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Called when an HTML comment is encountered.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="handleEOFInComment">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="commentEndPos">
          <typeReference xsi:type="types:Int">
            <comments>// We've reached EOF.  Our recovery strategy is to</comments>
            <comments>// see if we have more than one line in the comment;</comments>
            <comments>// if so, we pretend that the comment was an unterminated</comments>
            <comments>// single line comment, and reparse the lines after the</comments>
            <comments>// first line as normal HTML content.</comments>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.58">
            <arguments xsi:type="literals:CharacterLiteral" value="10"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
              </arguments>
            </expression>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../java/io/Reader.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../java/io/CharArrayReader.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.55">
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                  </arguments>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:CharacterLiteral" value="62"/>
              </expression>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
                  <arguments xsi:type="references:StringReference" value="ioexception"/>
                </expression>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.57"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
              <comments>// no newline, so signal an error</comments>
              <arguments xsi:type="references:StringReference" value="eof.comment"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="handleEmptyTag">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tag">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ChangedCharSetException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Called when an empty tag is encountered.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="handleStartTag">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tag">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Called when a start tag is encountered.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="handleEndTag">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tag">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Called when an end tag is encountered.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="handleError">
      <comments>/*&#xA;&#x9;Thread.dumpStack();&#xA;&#x9;System.out.println(&quot;**** &quot; + stack);&#xA;&#x9;System.out.println(&quot;line &quot; + ln + &quot;: error: &quot; + msg);&#xA;&#x9;System.out.println();&#xA;&#x9;*/</comments>
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ln">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="msg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * An error has occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="handleText">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Output text.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tag">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="TagElement.class.xmi#//@classifiers.0/@members.5"/>
          </next>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Return"/>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                  <children xsi:type="literals:NullLiteral"/>
                </expression>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="TagElement.class.xmi#//@classifiers.0/@members.5"/>
                </next>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="TagStack.class.xmi#//@classifiers.0/@members.13"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="DTD.class.xmi#//@classifiers.0/@members.4"/>
                      </next>
                    </arguments>
                  </next>
                </child>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <comments>// enlarge buffer if needed</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="newtext">
                      <typeReference xsi:type="types:Char"/>
                      <arrayDimensionsAfter/>
                      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                        <typeReference xsi:type="types:Char"/>
                        <sizes xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                            <next xsi:type="references:IdentifierReference"/>
                          </children>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="200"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </sizes>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.2/@statement/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                          <next xsi:type="references:IdentifierReference"/>
                        </arguments>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.2/@statement/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <relationOperators xsi:type="operators:GreaterThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <comments>// output pending space</comments>
                    <arraySelectors>
                      <position xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </position>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:CharacterLiteral" value="32"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:BooleanLiteral" value="true"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
                  </children>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.21"/>
                        </next>
                        <target xsi:type="members:ClassMethod" href="TagElement.class.xmi#//@classifiers.0/@members.7"/>
                      </next>
                    </child>
                  </children>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="newtext">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Char"/>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.3/@variable"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Handles cases of bad html where the title tag</comments>
        <comments>// was getting lost when we did error recovery.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.3/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:StringReference" value="title"/>
              </next>
              <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
            </next>
            <target xsi:type="members:ClassMethod" href="TagElement.class.xmi#//@classifiers.0/@members.7"/>
          </next>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.3/@variable"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="error">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="err">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg1">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg2">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg3">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Invoke the error handler.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.40">
          <comments>// big hack, but this should never get used...</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.1"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.2"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.3"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="error">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="err">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg1">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg2">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.2"/>
          <arguments xsi:type="references:StringReference" value="?"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="error">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="err">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg1">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.1"/>
          <arguments xsi:type="references:StringReference" value="?"/>
          <arguments xsi:type="references:StringReference" value="?"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="error">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="err">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.0"/>
          <arguments xsi:type="references:StringReference" value="?"/>
          <arguments xsi:type="references:StringReference" value="?"/>
          <arguments xsi:type="references:StringReference" value="?"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="startTag">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tag">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ChangedCharSetException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Handle a start tag. The new tag is pushed&#xA;     * onto the tag stack. The attribute list is&#xA;     * checked for required attributes.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="elem">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Element.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="TagElement.class.xmi#//@classifiers.0/@members.7"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// If the tag is an empty tag and texpos != 0</comments>
        <comments>// this implies that there is text before the</comments>
        <comments>// start tag that needs to be processed before</comments>
        <comments>// handling the tag.</comments>
        <comments>//</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.21"/>
              </next>
            </child>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <comments>// this variable gets updated in handleText().</comments>
                <comments>// Since in this case we do not call handleText()</comments>
                <comments>// we need to update it here.</comments>
                <comments>//</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <comments>// Note that we should really check last.breakFlows before</comments>
                <comments>// assuming this should be false.</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// check required attributes</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
                  <arguments xsi:type="references:StringReference" value="req.att "/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.3/@init">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="AttributeList.class.xmi#//@classifiers.0/@members.10"/>
                    </next>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.3/@init">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                  </children>
                  <children xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DTDConstants.class.xmi#//@classifiers.0/@members.20"/>
                  </children>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../SimpleAttributeSet.class.xmi#//@classifiers.0/@members.6"/>
                      </next>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../SimpleAttributeSet.class.xmi#//@classifiers.0/@members.8"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.3/@init">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.0"/>
                            </next>
                          </arguments>
                        </next>
                      </child>
                    </expression>
                  </children>
                </expression>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.3/@init"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="a">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="AttributeList.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Element.class.xmi#//@classifiers.0/@members.8"/>
            </next>
          </initialValue>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.3/@init"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.3/@init">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.5"/>
            </next>
          </value>
        </updates>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <comments>/*&#xA;&#x9;} else if (elem.getName().equals(&quot;form&quot;)) {&#xA;&#x9;    handleStartTag(tag);&#xA;            */</comments>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.21"/>
          </next>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="TagStack.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="endTag">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="omitted">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Handle an end tag. The end tag is popped&#xA;     * from the tag stack.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
              <arguments xsi:type="references:StringReference" value="end.missing"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                  <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </child>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                <arguments xsi:type="references:StringReference" value="end.unexpected"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                    <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </arguments>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="TagStack.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </child>
          </condition>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
          <comments>// handle the tag</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                <children xsi:type="literals:NullLiteral"/>
              </expression>
            </child>
            <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </expressionIf>
            <expressionElse xsi:type="literals:NullLiteral"/>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ignoreElement">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="elem">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Element.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="stackElement">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
              </next>
              <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="elemName">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>/* We ignore all elements that are not valid in the context of&#xA;&#x9;   a table except &lt;td>, &lt;th> (these we handle in&#xA;&#x9;   legalElementContext()) and #pcdata.  We also ignore the&#xA;&#x9;   &lt;font> tag in the context of &lt;ul> and &lt;ol> We additonally&#xA;&#x9;   ignore the &lt;meta> and the &lt;style> tag if the body tag has&#xA;&#x9;   been seen. **/</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:StringReference" value="html"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:StringReference" value="head"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:StringReference" value="body"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="s">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="TagStack.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
            </variable>
          </statements>
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.3/@statement/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.3/@statement/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.3/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.3/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                        <arguments xsi:type="references:StringReference" value="dl"/>
                      </next>
                      <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                    <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </child>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.3/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="references:StringReference" value="dt"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="references:StringReference" value="dd"/>
            </next>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                    <arguments xsi:type="references:StringReference" value="table"/>
                  </next>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:StringReference" value="#pcdata"/>
                    </next>
                  </child>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:StringReference" value="input"/>
                    </next>
                  </child>
                </expression>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                    <arguments xsi:type="references:StringReference" value="font"/>
                  </next>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:StringReference" value="ul"/>
                    </next>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:StringReference" value="ol"/>
                    </next>
                  </children>
                </expression>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:StringReference" value="meta"/>
                </next>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:StringReference" value="style"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:StringReference" value="table"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:StringReference" value="a"/>
                </next>
              </children>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="markFirstTime">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="elem">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Element.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Marks the first time a tag has been seen in a document&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="elemName">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
            <arguments xsi:type="references:StringReference" value="html"/>
          </next>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:BooleanLiteral" value="true"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="references:StringReference" value="head"/>
            </next>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="newBuf">
                      <typeReference xsi:type="types:Char">
                        <comments>// Refer to note in definition of buf for details on this.</comments>
                      </typeReference>
                      <arrayDimensionsBefore/>
                      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                        <typeReference xsi:type="types:Char"/>
                        <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="256"/>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.1/@elseStatement/@elseStatement/@statement/@statements.0/@statement/@statements.0/@variable">
                        <arraySelectors>
                          <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        </arraySelectors>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74">
                        <arraySelectors>
                          <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        </arraySelectors>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.1/@elseStatement/@elseStatement/@statement/@statements.0/@statement/@statements.0/@variable"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:StringReference" value="body"/>
              </next>
            </condition>
          </elseStatement>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="legalElementContext">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Create a legal content for an element.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="elem">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Element.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ChangedCharSetException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <statements xsi:type="statements:Condition">
        <comments>// System.out.println(&quot;-- legalContext -- &quot; + elem);</comments>
        <comments>// Deal with the empty stack</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <comments>// System.out.println(&quot;-- stack is empty&quot;);</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
                  <comments>// System.out.println(&quot;-- pushing html&quot;);</comments>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="DTD.class.xmi#//@classifiers.0/@members.5"/>
                      </next>
                    </arguments>
                    <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                  </arguments>
                </expression>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
                </returnValue>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DTD.class.xmi#//@classifiers.0/@members.5"/>
                </next>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Is it allowed in the current context</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
              <comments>// System.out.println(&quot;-- legal context&quot;);</comments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="TagStack.class.xmi#//@classifiers.0/@members.13"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
          </next>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="insertTag">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="stackElemName">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// The use of all error recovery strategies are contingent</comments>
              <comments>// on the value of the strict property.</comments>
              <comments>//</comments>
              <comments>// These are commonly occuring errors.  if insertTag is true,</comments>
              <comments>// then we want to adopt an error recovery strategy that</comments>
              <comments>// involves attempting to insert an additional tag to</comments>
              <comments>// legalize the context.  The two errors addressed here</comments>
              <comments>// are:</comments>
              <comments>// 1) when a &lt;td> or &lt;th> is seen soon after a &lt;table> tag.</comments>
              <comments>//    In this case we insert a &lt;tr>.</comments>
              <comments>// 2) when any other tag apart from a &lt;tr> is seen</comments>
              <comments>//    in the context of a &lt;tr>.  In this case we would</comments>
              <comments>//    like to add a &lt;td>.  If a &lt;tr> is seen within a</comments>
              <comments>//    &lt;tr> context, then we will close out the current</comments>
              <comments>//    &lt;tr>.</comments>
              <comments>//</comments>
              <comments>// This insertion strategy is handled later in the method.</comments>
              <comments>// The reason for checking this now, is that in other cases</comments>
              <comments>// we would like to apply other error recovery strategies for example</comments>
              <comments>// ignoring tags.</comments>
              <comments>//</comments>
              <comments>// In certain cases it is better to ignore a tag than try to</comments>
              <comments>// fix the situation.  So the first test is to see if this</comments>
              <comments>// is what we need to do.</comments>
              <comments>//</comments>
              <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
              </next>
              <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="elemName">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.3/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:StringReference" value="table"/>
                    </next>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.4/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:StringReference" value="td"/>
                    </next>
                  </children>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.3/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:StringReference" value="table"/>
                    </next>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.4/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:StringReference" value="th"/>
                    </next>
                  </children>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.3/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:StringReference" value="tr"/>
                    </next>
                  </children>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.4/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                        <arguments xsi:type="references:StringReference" value="tr"/>
                      </next>
                    </child>
                  </children>
                </expression>
              </children>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                  <arguments xsi:type="references:StringReference" value="tag.ignore"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.48">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
              </value>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.2/@variable"/>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                    <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                    <arguments xsi:type="references:StringReference" value="body"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </children>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Check for anything after the start of the table besides tr, td, th</comments>
        <comments>// or caption, and if those aren't there, insert the &lt;tr> and call</comments>
        <comments>// legalElementContext again.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="e">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="Element.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DTD.class.xmi#//@classifiers.0/@members.25"/>
                  <arguments xsi:type="references:StringReference" value="tr"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="t">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.7/@statement/@statements.0/@variable"/>
                <arguments xsi:type="literals:BooleanLiteral" value="true"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.7/@statement/@statements.1/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.7/@statement/@statements.1/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
              <arguments xsi:type="references:StringReference" value="start.missing"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </arguments>
            </expression>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.3/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="references:StringReference" value="table"/>
            </next>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.4/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:StringReference" value="tr"/>
              </next>
            </child>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.4/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:StringReference" value="td"/>
              </next>
            </child>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.4/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:StringReference" value="th"/>
              </next>
            </child>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.4/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:StringReference" value="caption"/>
              </next>
            </child>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// They try to find a legal context by checking if the current</comments>
        <comments>// tag is valid in an enclosing context.  If so</comments>
        <comments>// close out the tags by outputing end tags and then</comments>
        <comments>// insert the curent tag.  If the tags that are</comments>
        <comments>// being closed out do not have an optional end tag</comments>
        <comments>// specification in the DTD then an html error is</comments>
        <comments>// reported.</comments>
        <comments>//</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:WhileLoop">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.8/@statement/@statements.0/@init"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.8/@statement/@statements.0/@init">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="TagStack.class.xmi#//@classifiers.0/@members.13"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
                  </next>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Break"/>
                </statement>
                <condition xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.8/@statement/@statements.0/@init">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="TagStack.class.xmi#//@classifiers.0/@members.14"/>
                      </next>
                    </child>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Negate"/>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.8/@statement/@statements.0/@init">
                          <next xsi:type="references:IdentifierReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.16"/>
                            </next>
                            <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                          </next>
                        </child>
                      </children>
                    </expression>
                  </children>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.8/@statement/@statements.0/@init"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="s">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="TagStack.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </initialValue>
            </init>
            <updates xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.8/@statement/@statements.0/@init"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.8/@statement/@statements.0/@init">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </value>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.2/@variable"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="TagStack.class.xmi#//@classifiers.0/@members.14"/>
            </next>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </children>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="next">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// Check if we know what tag is expected next.</comments>
              <comments>// If so insert the tag.  Report an error if the</comments>
              <comments>// tag does not have its start tag spec in the DTD as optional.</comments>
              <comments>//</comments>
              <target xsi:type="classifiers:Class" href="Element.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="TagStack.class.xmi#//@classifiers.0/@members.9"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="t">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// System.out.println(&quot;-- omitting start tag: &quot; + next);</comments>
                  <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.9/@variable"/>
                <arguments xsi:type="literals:BooleanLiteral" value="true"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.10/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.10/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                  <arguments xsi:type="references:StringReference" value="start.missing"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.9/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.15"/>
                </next>
              </child>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.9/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.9/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.15"/>
                </next>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.9/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="DTD.class.xmi#//@classifiers.0/@members.9"/>
                    </next>
                  </children>
                </children>
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="DTD.class.xmi#//@classifiers.0/@members.4"/>
                    </next>
                  </children>
                </children>
              </expression>
            </child>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Traverse the list of expected elements and determine if adding</comments>
        <comments>// any of these elements would make for a legal context.</comments>
        <comments>//</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="content">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="ContentModel.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="TagStack.class.xmi#//@classifiers.0/@members.10"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="elemVec">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ContentModel.class.xmi#//@classifiers.0/@members.10"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.1/@variable"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ForLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="e">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="Element.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="Element.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@init">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:InterfaceMethod" href="../../../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.1"/>
                          </next>
                        </child>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <comments>// Ensure that this element has not been included as</comments>
                    <comments>// part of the exclusions in the DTD.</comments>
                    <comments>//</comments>
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Continue"/>
                    </statement>
                    <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="TagStack.class.xmi#//@classifiers.0/@members.11"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.20"/>
                          </next>
                        </arguments>
                      </next>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="reqAtts">
                      <typeReference xsi:type="types:Boolean"/>
                      <initialValue xsi:type="literals:BooleanLiteral"/>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ForLoop">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@statement/@statements.2/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="literals:BooleanLiteral" value="true"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Break"/>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@statement/@statements.3/@init">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.3"/>
                            </next>
                          </children>
                          <children xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="DTDConstants.class.xmi#//@classifiers.0/@members.20"/>
                          </children>
                        </condition>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@statement/@statements.3/@init"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                    <init xsi:type="variables:LocalVariable" name="a">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="AttributeList.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.19"/>
                        </next>
                      </initialValue>
                    </init>
                    <updates xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@statement/@statements.3/@init"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@statement/@statements.3/@init">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.5"/>
                        </next>
                      </value>
                    </updates>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <comments>// Ensure that no tag that has required attributes</comments>
                    <comments>// gets inserted.</comments>
                    <comments>//</comments>
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Continue"/>
                    </statement>
                    <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@statement/@statements.2/@variable"/>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="m">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="ContentModel.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.18"/>
                        </next>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="t">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <comments>// System.out.println(&quot;-- adding a legal tag: &quot; + e);</comments>
                              <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@statement/@statements.0/@variable"/>
                            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@statement/@statements.6/@statement/@statements.0/@variable"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@statement/@statements.6/@statement/@statements.0/@variable"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                          <arguments xsi:type="references:StringReference" value="start.missing"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                            </next>
                          </arguments>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
                        </returnValue>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@statement/@statements.5/@variable"/>
                        <children xsi:type="literals:NullLiteral"/>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@statement/@statements.5/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="ContentModel.class.xmi#//@classifiers.0/@members.11"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
                        </next>
                      </children>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.2/@statement/@statements.1/@init">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </condition>
                <init xsi:type="variables:LocalVariable" name="v">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.16"/>
                    </next>
                  </initialValue>
                </init>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.11/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Check if the stack can be terminated.  If so add the appropriate</comments>
        <comments>// end tag.  Report an error if the tag being ended does not have its</comments>
        <comments>// end tag spec in the DTD as optional.</comments>
        <comments>//</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <comments>// System.out.println(&quot;-- omitting end tag: &quot; + stack.elem);</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                  <arguments xsi:type="references:StringReference" value="end.missing"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </child>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
              <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="TagStack.class.xmi#//@classifiers.0/@members.14"/>
            </next>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DTD.class.xmi#//@classifiers.0/@members.10"/>
                </next>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </children>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>// At this point we know that something is screwed up.</comments>
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="legalTagContext">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Create a legal context for a tag.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tag">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ChangedCharSetException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="TagElement.class.xmi#//@classifiers.0/@members.7"/>
                </next>
              </arguments>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="TagElement.class.xmi#//@classifiers.0/@members.7"/>
            </next>
          </arguments>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Avoid putting a block tag in a flow tag.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
              <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="TagElement.class.xmi#//@classifiers.0/@members.5"/>
            </next>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="TagElement.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </child>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// Avoid putting something wierd in the head of the document.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:WhileLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                      <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.2/@init"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                  <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Return"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.2/@init">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="TagElement.class.xmi#//@classifiers.0/@members.7"/>
                  </next>
                  <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DTD.class.xmi#//@classifiers.0/@members.9"/>
                </next>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.2/@init"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="TagStack.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.2/@init"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.2/@init">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </value>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
          <comments>// Everything failed</comments>
          <arguments xsi:type="references:StringReference" value="tag.unexpected"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
              </next>
              <target xsi:type="members:ClassMethod" href="TagElement.class.xmi#//@classifiers.0/@members.7"/>
            </next>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="errorContext">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Error context. Something went wrong, make sure we are in&#xA;     * the document's body context&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ChangedCharSetException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="TagElement.class.xmi#//@classifiers.0/@members.7"/>
                  </next>
                  <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DTD.class.xmi#//@classifiers.0/@members.10"/>
                </next>
              </children>
            </expression>
          </children>
        </condition>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </value>
        </updates>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DTD.class.xmi#//@classifiers.0/@members.10"/>
                </next>
              </arguments>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DTD.class.xmi#//@classifiers.0/@members.10"/>
                  </next>
                </arguments>
                <arguments xsi:type="literals:BooleanLiteral" value="true"/>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addString">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Add a char to the string buffer.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="newstr">
              <typeReference xsi:type="types:Char"/>
              <arrayDimensionsAfter/>
              <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Char"/>
                <sizes xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </sizes>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@statements.0/@statement/@statements.0/@variable"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                  <next xsi:type="references:IdentifierReference"/>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@statements.0/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
            <next xsi:type="references:IdentifierReference"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
            <arraySelectors>
              <position xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                <operator xsi:type="operators:PlusPlus"/>
              </position>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:Char"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0"/>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Get the string that's been accumulated.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="newStr">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Char"/>
            <sizes xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </sizes>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.0/@variable"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.0/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getChars">
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="newStr">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Char"/>
            <sizes xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </sizes>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@statements.0/@variable"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getChars">
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="endPos">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="newStr">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Char"/>
            <sizes xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.1"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </sizes>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.0/@variable"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.1"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>// REMIND: it's not clear whether this version should set strpos or not</comments>
        <comments>// strpos = pos;</comments>
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="resetStrBuffer">
      <typeReference xsi:type="types:Void"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="strIndexOf">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@init"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@init"/>
                </arraySelectors>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="skipSpace">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Skip space.&#xA;     * [5] 297:5&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Switch">
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="10"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:CharacterLiteral" value="10"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="13"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="32"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="9"/>
            </cases>
            <cases xsi:type="statements:DefaultSwitchCase">
              <statements xsi:type="statements:Return"/>
            </cases>
            <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parseIdentifier">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Parse identifier. Uppercase characters are folded&#xA;     * to lowercase when lower is true. Returns falsed if&#xA;     * no identifier is found. [55] 346:17&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lower">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <statements xsi:type="statements:Switch">
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="65"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="66"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="67"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="68"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="69"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="70"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="71"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="72"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="73"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="74"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="75"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="76"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="77"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="78"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="79"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="80"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="81"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="82"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="83"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="84"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="85"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="86"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="87"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="88"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="89"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="literals:CharacterLiteral" value="97"/>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                        <children xsi:type="literals:CharacterLiteral" value="65"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </expression>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0"/>
          </statements>
          <condition xsi:type="literals:CharacterLiteral" value="90"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="97"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="98"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="99"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="100"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="101"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="102"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="103"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="104"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="105"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="106"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="107"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="108"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="109"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="110"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="111"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="112"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="113"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="114"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="115"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="116"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="117"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="118"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="119"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="120"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="121"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="literals:CharacterLiteral" value="122"/>
        </cases>
        <cases xsi:type="statements:DefaultSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
        </cases>
        <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Switch">
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="65"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="66"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="67"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="68"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="69"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="70"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="71"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="72"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="73"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="74"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="75"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="76"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="77"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="78"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="79"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="80"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="81"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="82"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="83"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="84"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="85"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="86"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="87"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="88"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="89"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="literals:CharacterLiteral" value="97"/>
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                            <children xsi:type="literals:CharacterLiteral" value="65"/>
                            <additiveOperators xsi:type="operators:Subtraction"/>
                          </expression>
                        </children>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0"/>
              </statements>
              <condition xsi:type="literals:CharacterLiteral" value="90"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="97"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="98"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="99"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="100"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="101"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="102"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="103"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="104"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="105"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="106"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="107"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="108"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="109"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="110"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="111"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="112"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="113"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="114"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="115"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="116"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="117"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="118"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="119"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="120"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="121"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="122"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="48"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="49"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="50"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="51"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="52"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="53"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="54"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="55"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="56"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="57"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="46"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="45"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:Break">
                <comments>// not officially allowed</comments>
              </statements>
              <condition xsi:type="literals:CharacterLiteral" value="95"/>
            </cases>
            <cases xsi:type="statements:DefaultSwitchCase">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
              </statements>
            </cases>
            <variable xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
            </variable>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parseEntityReference">
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsBefore/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Parse an entity reference. [59] 350:17&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="pos">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="n">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:WhileLoop">
                    <comments>// parse decimal reference</comments>
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.0/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="expressions:NestedExpression">
                              <expression xsi:type="expressions:MultiplicativeExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.0/@variable"/>
                                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
                                <multiplicativeOperators xsi:type="operators:Multiplication"/>
                              </expression>
                            </children>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                            <children xsi:type="literals:CharacterLiteral" value="48"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                            <additiveOperators xsi:type="operators:Subtraction"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <children xsi:type="literals:CharacterLiteral" value="48"/>
                          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                        </expression>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <children xsi:type="literals:CharacterLiteral" value="57"/>
                          <relationOperators xsi:type="operators:LessThanOrEqual"/>
                        </expression>
                      </children>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <children xsi:type="literals:CharacterLiteral" value="48"/>
                      <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <children xsi:type="literals:CharacterLiteral" value="57"/>
                      <relationOperators xsi:type="operators:LessThanOrEqual"/>
                    </expression>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7">
                        <comments>// parse hexadecimal reference</comments>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="lch">
                      <typeReference xsi:type="types:Char"/>
                      <initialValue xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:Char"/>
                        <child xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../java/lang/Character.class.xmi#//@classifiers.0/@members.129"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Character.class.xmi#//@classifiers.0"/>
                        </child>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:WhileLoop">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.0/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:AdditiveExpression">
                                <children xsi:type="expressions:NestedExpression">
                                  <expression xsi:type="expressions:MultiplicativeExpression">
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.0/@variable"/>
                                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                                    <multiplicativeOperators xsi:type="operators:Multiplication"/>
                                  </expression>
                                </children>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.2/@statement/@statements.0/@elseStatement/@statements.1/@variable"/>
                                <children xsi:type="literals:CharacterLiteral" value="48"/>
                                <additiveOperators xsi:type="operators:Addition"/>
                                <additiveOperators xsi:type="operators:Subtraction"/>
                              </value>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:ConditionalAndExpression">
                          <children xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.2/@statement/@statements.0/@elseStatement/@statements.1/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="48"/>
                            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                          </children>
                          <children xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.2/@statement/@statements.0/@elseStatement/@statements.1/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="57"/>
                            <relationOperators xsi:type="operators:LessThanOrEqual"/>
                          </children>
                        </condition>
                        <elseStatement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.0/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:AdditiveExpression">
                                <children xsi:type="expressions:NestedExpression">
                                  <expression xsi:type="expressions:MultiplicativeExpression">
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.0/@variable"/>
                                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                                    <multiplicativeOperators xsi:type="operators:Multiplication"/>
                                  </expression>
                                </children>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.2/@statement/@statements.0/@elseStatement/@statements.1/@variable"/>
                                <children xsi:type="literals:CharacterLiteral" value="97"/>
                                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
                                <additiveOperators xsi:type="operators:Addition"/>
                                <additiveOperators xsi:type="operators:Subtraction"/>
                                <additiveOperators xsi:type="operators:Addition"/>
                              </value>
                            </expression>
                          </statements>
                        </elseStatement>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.2/@statement/@statements.0/@elseStatement/@statements.1/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Char"/>
                            <child xsi:type="references:IdentifierReference">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/Character.class.xmi#//@classifiers.0/@members.129"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="../../../../../java/lang/Character.class.xmi#//@classifiers.0"/>
                            </child>
                          </value>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalOrExpression">
                      <children xsi:type="expressions:ConditionalAndExpression">
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.2/@statement/@statements.0/@elseStatement/@statements.1/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="48"/>
                            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                          </expression>
                        </children>
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.2/@statement/@statements.0/@elseStatement/@statements.1/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="57"/>
                            <relationOperators xsi:type="operators:LessThanOrEqual"/>
                          </expression>
                        </children>
                      </children>
                      <children xsi:type="expressions:ConditionalAndExpression">
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.2/@statement/@statements.0/@elseStatement/@statements.1/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="97"/>
                            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                          </expression>
                        </children>
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.2/@statement/@statements.0/@elseStatement/@statements.1/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="102"/>
                            <relationOperators xsi:type="operators:LessThanOrEqual"/>
                          </expression>
                        </children>
                      </children>
                    </condition>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Switch">
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="literals:CharacterLiteral" value="10"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
                          <operator xsi:type="operators:PlusPlus"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                        </expression>
                      </children>
                      <children xsi:type="literals:CharacterLiteral" value="10"/>
                    </condition>
                    <elseStatement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
                          <operator xsi:type="operators:PlusPlus"/>
                        </expression>
                      </statements>
                    </elseStatement>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="literals:CharacterLiteral" value="13"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="literals:CharacterLiteral" value="59"/>
                </cases>
                <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="data">
                  <typeReference xsi:type="types:Char"/>
                  <arrayDimensionsAfter/>
                  <initialValue xsi:type="arrays:ArrayInstantiationByValues">
                    <arrayInitializer>
                      <initialValues xsi:type="references:MethodCall" target="//@classifiers.0/@members.62">
                        <arguments xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:Char"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.0/@variable"/>
                        </arguments>
                      </initialValues>
                    </arrayInitializer>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.2/@statement/@statements.2/@variable"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                    <children xsi:type="literals:CharacterLiteral" value="48"/>
                    <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                  </expression>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                    <children xsi:type="literals:CharacterLiteral" value="57"/>
                    <relationOperators xsi:type="operators:LessThanOrEqual"/>
                  </expression>
                </children>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                <children xsi:type="literals:CharacterLiteral" value="120"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                <children xsi:type="literals:CharacterLiteral" value="88"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
              <arguments xsi:type="literals:CharacterLiteral" value="35"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
                  <arguments xsi:type="references:StringReference" value="ident.expected"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="data">
                  <typeReference xsi:type="types:Char"/>
                  <arrayDimensionsAfter/>
                  <initialValue xsi:type="arrays:ArrayInstantiationByValues">
                    <arrayInitializer>
                      <initialValues xsi:type="literals:CharacterLiteral" value="38"/>
                      <initialValues xsi:type="literals:CharacterLiteral" value="35"/>
                    </arrayInitializer>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@statement/@statements.4/@statement/@statements.2/@variable"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.60">
                <arguments xsi:type="literals:BooleanLiteral"/>
              </child>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
            </expression>
          </children>
          <children xsi:type="literals:CharacterLiteral" value="35"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="data">
                <typeReference xsi:type="types:Char"/>
                <arrayDimensionsAfter/>
                <initialValue xsi:type="arrays:ArrayInstantiationByValues">
                  <arrayInitializer>
                    <initialValues xsi:type="literals:CharacterLiteral" value="38"/>
                  </arrayInitializer>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@elseStatement/@statement/@statements.0/@variable"/>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.60">
              <arguments xsi:type="literals:BooleanLiteral"/>
            </child>
          </condition>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Switch">
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="literals:CharacterLiteral" value="10"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </children>
              <children xsi:type="literals:CharacterLiteral" value="10"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="literals:CharacterLiteral" value="13"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="literals:CharacterLiteral" value="59"/>
        </cases>
        <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="ent">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Entity.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DTD.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// entities are case sensitive - however if strict</comments>
        <comments>// is false then we will try to make a match by</comments>
        <comments>// converting the string to all lowercase.</comments>
        <comments>//</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.4/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DTD.class.xmi#//@classifiers.0/@members.22"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.68"/>
                    </next>
                  </arguments>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.4/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                  <arguments xsi:type="references:StringReference" value="invalid.entref"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="arrays:ArrayInstantiationBySize">
                  <typeReference xsi:type="types:Char"/>
                  <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </returnValue>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="str">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>/* given that there is not a match restore the entity reference */</comments>
                  <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="&amp;"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="b">
              <typeReference xsi:type="types:Char"/>
              <arrayDimensionsAfter/>
              <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Char"/>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.6/@statement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                </sizes>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.6/@statement/@statements.1/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.29"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.6/@statement/@statements.2/@variable">
                  <next xsi:type="references:IdentifierReference"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.6/@statement/@statements.2/@variable"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.6/@statement/@statements.2/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.4/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.4/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Entity.class.xmi#//@classifiers.0/@members.8"/>
              </next>
            </child>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.4/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Entity.class.xmi#//@classifiers.0/@members.9"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="mapNumericReference">
      <typeReference xsi:type="types:Char"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Converts numeric character reference to Unicode character.&#xA;     *&#xA;     * Normally the code in a reference should be always converted&#xA;     * to the Unicode character with the same code, but due to&#xA;     * wide usage of Cp1252 charset most browsers map numeric references&#xA;     * in the range 130-159 (which are control chars in Unicode set)&#xA;     * to displayable characters with other codes.&#xA;     *&#xA;     * @param c the code of numeric character reference.&#xA;     * @return the character corresponding to the reference code.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@parameters.0"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="130"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="159"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <arraySelectors>
            <position xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="130"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </position>
          </arraySelectors>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parseComment">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Parse a comment. [92] 391:7&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="c">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Switch">
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:Condition">
                <comments>/** Presuming that the start string of a comment &quot;&lt;!--&quot; has&#xA;&#x9;&#x9;      already been parsed, the '-' character is valid only as&#xA;&#x9;&#x9;      part of a comment termination and further more it must&#xA;&#x9;&#x9;      be present in even numbers. Hence if strict is true, we&#xA;&#x9;&#x9;      presume the comment has been terminated and return.&#xA;&#x9;&#x9;      However if strict is false, then there is no even number&#xA;&#x9;&#x9;      requirement and this character can appear anywhere in the&#xA;&#x9;&#x9;      comment.  The parser reads on until it sees the following&#xA;&#x9;&#x9;      pattern: &quot;-->&quot; or &quot;--!>&quot;.&#xA;&#x9;&#x9;   **/</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Return"/>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                        </expression>
                      </children>
                      <children xsi:type="literals:CharacterLiteral" value="62"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:Return"/>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                            </expression>
                          </children>
                          <children xsi:type="literals:CharacterLiteral" value="62"/>
                        </condition>
                        <elseStatement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                              <comments>/* to account for extra read()'s that happened */</comments>
                              <arguments xsi:type="literals:CharacterLiteral" value="45"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                              <arguments xsi:type="literals:CharacterLiteral" value="33"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Continue"/>
                        </elseStatement>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <children xsi:type="literals:CharacterLiteral" value="33"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                        <arraySelectors>
                          <position xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <additiveOperators xsi:type="operators:Subtraction"/>
                          </position>
                        </arraySelectors>
                      </children>
                      <children xsi:type="literals:CharacterLiteral" value="45"/>
                    </expression>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Return"/>
                    </statement>
                    <condition xsi:type="expressions:ConditionalOrExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
                      <children xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                        <children xsi:type="literals:CharacterLiteral" value="62"/>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:Return"/>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                            </expression>
                          </children>
                          <children xsi:type="literals:CharacterLiteral" value="62"/>
                        </condition>
                        <elseStatement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                              <comments>/* to account for extra read()'s that happened */</comments>
                              <arguments xsi:type="literals:CharacterLiteral" value="45"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                              <arguments xsi:type="literals:CharacterLiteral" value="33"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Continue"/>
                        </elseStatement>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <children xsi:type="literals:CharacterLiteral" value="33"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                      <comments>/* to account for the extra read() */</comments>
                      <arguments xsi:type="literals:CharacterLiteral" value="45"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:CharacterLiteral" value="45"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="45"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36"/>
              </statements>
              <statements xsi:type="statements:Return"/>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </condition>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="10"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="62"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:CharacterLiteral" value="10"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@statement/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:CharacterLiteral" value="10"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="13"/>
            </cases>
            <cases xsi:type="statements:DefaultSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </cases>
            <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@statement/@statements.0/@variable"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parseLiteral">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Parse literal content. [46] 343:1 and [47] 344:1&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="replace">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="c">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Switch">
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                  <arguments xsi:type="references:StringReference" value="eof.literal"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                      </next>
                      <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                  <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Return"/>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </condition>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                          <next xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                              </next>
                              <target xsi:type="members:Field" href="Element.class.xmi#//@classifiers.0/@members.1"/>
                            </next>
                            <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                          </next>
                        </children>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </expression>
                    </children>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </initialValue>
                  <additionalLocalVariables name="j">
                    <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </additionalLocalVariables>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <comments>// match end tag</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:WhileLoop">
                    <statement xsi:type="statements:EmptyStatement"/>
                    <condition xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:RelationExpression">
                          <children xsi:type="expressions:PrefixUnaryModificationExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@cases.1/@statements.1/@variable"/>
                            <operator xsi:type="operators:PlusPlus"/>
                          </children>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                          <relationOperators xsi:type="operators:LessThan"/>
                        </expression>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../../java/lang/Character.class.xmi#//@classifiers.0/@members.128"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                                <arraySelectors>
                                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@cases.1/@statements.1/@variable"/>
                                </arraySelectors>
                              </arguments>
                            </next>
                            <target xsi:type="classifiers:Class" href="../../../../../java/lang/Character.class.xmi#//@classifiers.0"/>
                          </children>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                            <next xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                                  <arguments xsi:type="expressions:SuffixUnaryModificationExpression">
                                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@cases.1/@statements.1/@variable/@additionalLocalVariables.0"/>
                                    <operator xsi:type="operators:PlusPlus"/>
                                  </arguments>
                                </next>
                                <target xsi:type="members:Field" href="Element.class.xmi#//@classifiers.0/@members.1"/>
                              </next>
                              <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                            </next>
                          </children>
                        </expression>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                          <value xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                                <next xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:IdentifierReference">
                                    <next xsi:type="references:MethodCall">
                                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                                    </next>
                                    <target xsi:type="members:Field" href="Element.class.xmi#//@classifiers.0/@members.1"/>
                                  </next>
                                  <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                                </next>
                              </children>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                              <additiveOperators xsi:type="operators:Addition"/>
                            </expression>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                              <operator xsi:type="operators:MinusMinus"/>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:ConditionalAndExpression">
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:RelationExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                              <relationOperators xsi:type="operators:GreaterThan"/>
                            </expression>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:Equal"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                                <arraySelectors>
                                  <position xsi:type="expressions:AdditiveExpression">
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                    <additiveOperators xsi:type="operators:Subtraction"/>
                                  </position>
                                </arraySelectors>
                              </children>
                              <children xsi:type="literals:CharacterLiteral" value="10"/>
                            </expression>
                          </children>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                          <arguments xsi:type="literals:BooleanLiteral"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Return"/>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@cases.1/@statements.1/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@cases.1/@statements.1/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                        <arraySelectors>
                          <position xsi:type="expressions:SuffixUnaryModificationExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@cases.1/@statements.1/@variable"/>
                            <operator xsi:type="operators:PlusPlus"/>
                          </position>
                        </arraySelectors>
                      </children>
                      <children xsi:type="literals:CharacterLiteral" value="60"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                        <arraySelectors>
                          <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@cases.1/@statements.1/@variable"/>
                        </arraySelectors>
                      </children>
                      <children xsi:type="literals:CharacterLiteral" value="47"/>
                    </expression>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="62"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="data">
                  <typeReference xsi:type="types:Char"/>
                  <arrayDimensionsAfter/>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.61"/>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="newtext">
                      <typeReference xsi:type="types:Char"/>
                      <arrayDimensionsAfter/>
                      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                        <typeReference xsi:type="types:Char"/>
                        <sizes xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../java/lang/Math.class.xmi#//@classifiers.0/@members.33"/>
                            <arguments xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@cases.2/@statements.0/@variable">
                                <next xsi:type="references:IdentifierReference"/>
                              </children>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
                              <additiveOperators xsi:type="operators:Addition"/>
                              <additiveOperators xsi:type="operators:Addition"/>
                            </arguments>
                            <arguments xsi:type="expressions:MultiplicativeExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                                <next xsi:type="references:IdentifierReference"/>
                              </children>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                              <multiplicativeOperators xsi:type="operators:Multiplication"/>
                            </arguments>
                          </next>
                          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Math.class.xmi#//@classifiers.0"/>
                        </sizes>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@cases.2/@statements.1/@statement/@statements.0/@variable"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                          <next xsi:type="references:IdentifierReference"/>
                        </arguments>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@cases.2/@statements.1/@statement/@statements.0/@variable"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@cases.2/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference"/>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <relationOperators xsi:type="operators:GreaterThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@cases.2/@statements.0/@variable"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@cases.2/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference"/>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@cases.2/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Continue"/>
              <condition xsi:type="literals:CharacterLiteral" value="38"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="10"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:CharacterLiteral" value="10"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:CharacterLiteral" value="10"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="13"/>
            </cases>
            <cases xsi:type="statements:DefaultSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </cases>
            <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.0/@variable"/>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// output character</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="newtext">
                  <typeReference xsi:type="types:Char"/>
                  <arrayDimensionsAfter/>
                  <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                    <typeReference xsi:type="types:Char"/>
                    <sizes xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                        <next xsi:type="references:IdentifierReference"/>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </sizes>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.2/@statement/@statements.0/@variable"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <next xsi:type="references:IdentifierReference"/>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.2/@statement/@statements.0/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <next xsi:type="references:IdentifierReference"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Char"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.0/@variable"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parseAttributeValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Parse attribute value. [33] 331:1&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lower">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="delim">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Switch">
        <comments>// Check for a delimiter</comments>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="literals:CharacterLiteral" value="39"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="literals:CharacterLiteral" value="34"/>
        </cases>
        <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <comments>// Parse the rest of the value</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="c">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Switch">
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </returnValue>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="10"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:CharacterLiteral" value="10"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </returnValue>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="13"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:CharacterLiteral" value="32"/>
                  </expression>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <condition xsi:type="literals:CharacterLiteral" value="9"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </returnValue>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="32"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="62"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </returnValue>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="60"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="39"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </returnValue>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@variable"/>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
                        <arguments xsi:type="references:StringReference" value="attvalerr"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:Return">
                          <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          </returnValue>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:ConditionalOrExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
                        <children xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <children xsi:type="literals:CharacterLiteral" value="32"/>
                        </children>
                      </condition>
                      <elseStatement xsi:type="statements:Block">
                        <statements xsi:type="statements:Continue"/>
                      </elseStatement>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@variable"/>
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Subtraction"/>
                      <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </children>
                  </condition>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="34"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
                      <comments>/* In SGML a construct like &lt;img src=/cgi-bin/foo?x=1>&#xA;&#x9;&#x9;       is considered invalid since an = sign can only be contained&#xA;&#x9;&#x9;       in an attributes value if the string is quoted.&#xA;&#x9;&#x9;       */</comments>
                      <arguments xsi:type="references:StringReference" value="attvalerr"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <comments>/* If strict is true then we return with the string we have thus far.&#xA;&#x9;&#x9;       Otherwise we accept the = sign as part of the attribute's value and&#xA;&#x9;&#x9;       process the rest of the img tag. */</comments>
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        </returnValue>
                      </statements>
                    </statement>
                    <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="61"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <relationOperators xsi:type="operators:LessThan"/>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="data">
                  <typeReference xsi:type="types:Char"/>
                  <arrayDimensionsAfter/>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.61"/>
                </variable>
              </statements>
              <statements xsi:type="statements:ForLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.1/@cases.9/@statements.1/@variable">
                        <arraySelectors>
                          <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.1/@cases.9/@statements.2/@init"/>
                        </arraySelectors>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                      <arguments xsi:type="expressions:ConditionalExpression">
                        <child xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:ConditionalAndExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
                            <children xsi:type="expressions:NestedExpression">
                              <expression xsi:type="expressions:RelationExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
                                <children xsi:type="literals:CharacterLiteral" value="65"/>
                                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                              </expression>
                            </children>
                            <children xsi:type="expressions:NestedExpression">
                              <expression xsi:type="expressions:RelationExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
                                <children xsi:type="literals:CharacterLiteral" value="90"/>
                                <relationOperators xsi:type="operators:LessThanOrEqual"/>
                              </expression>
                            </children>
                          </expression>
                        </child>
                        <expressionIf xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="literals:CharacterLiteral" value="97"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
                          <children xsi:type="literals:CharacterLiteral" value="65"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </expressionIf>
                        <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
                      </arguments>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.1/@cases.9/@statements.2/@init"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.1/@cases.9/@statements.1/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <init xsi:type="variables:LocalVariable" name="i">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </init>
                <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.1/@cases.9/@statements.2/@init"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </updates>
              </statements>
              <statements xsi:type="statements:Continue"/>
              <condition xsi:type="literals:CharacterLiteral" value="38"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </returnValue>
              </statements>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </condition>
            </cases>
            <cases xsi:type="statements:DefaultSwitchCase">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="literals:CharacterLiteral" value="97"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
                        <children xsi:type="literals:CharacterLiteral" value="65"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
                      <children xsi:type="literals:CharacterLiteral" value="65"/>
                      <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
                      <children xsi:type="literals:CharacterLiteral" value="90"/>
                      <relationOperators xsi:type="operators:LessThanOrEqual"/>
                    </expression>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </cases>
            <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parseAttributeSpecificationList">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Parse attribute specification List. [31] 327:17&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="elem">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Element.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.59"/>
          </statements>
          <statements xsi:type="statements:Switch">
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="47"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="62"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="60"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:Return"/>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </condition>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.63"/>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:CharacterLiteral" value="45"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
                      <arguments xsi:type="references:StringReference" value="invalid.tagchar"/>
                      <arguments xsi:type="references:StringReference" value="-"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                        </next>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Continue"/>
              <condition xsi:type="literals:CharacterLiteral" value="45"/>
            </cases>
            <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="att">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="AttributeList.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="literals:NullLiteral"/>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="attname">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="literals:NullLiteral"/>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="attvalue">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="literals:NullLiteral"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.59"/>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <comments>//&#x9;&#x9;    attvalue = parseAttributeValue((att != null) &amp;&amp; (att.type != CDATA) &amp;&amp; (att.type != NOTATION));</comments>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.59"/>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.23"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                        </next>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable">
                        <comments>//  Bug ID 4102750</comments>
                        <comments>//  Load the NAME of an Attribute Case Sensitive</comments>
                        <comments>//  The case of the NAME  must be intact</comments>
                        <comments>//  MG 021898</comments>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
                        <arguments xsi:type="expressions:ConditionalAndExpression">
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:NotEqual"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                              <children xsi:type="literals:NullLiteral"/>
                            </expression>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:NotEqual"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable">
                                <next xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.1"/>
                                </next>
                              </children>
                              <children xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="DTDConstants.class.xmi#//@classifiers.0/@members.0"/>
                              </children>
                            </expression>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:NotEqual"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable">
                                <next xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.1"/>
                                </next>
                              </children>
                              <children xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="DTDConstants.class.xmi#//@classifiers.0/@members.10"/>
                              </children>
                            </expression>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:NotEqual"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable">
                                <next xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.1"/>
                                </next>
                              </children>
                              <children xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="DTDConstants.class.xmi#//@classifiers.0/@members.6"/>
                              </children>
                            </expression>
                          </children>
                        </arguments>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <children xsi:type="literals:CharacterLiteral" value="61"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.24"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable"/>
                        </next>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.23"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                            </next>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="AttributeList.class.xmi#//@classifiers.0/@members.14"/>
                                </next>
                              </value>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </condition>
                        <elseStatement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable">
                                <comments>// Make it null so that NULL_ATTRIBUTE_VALUE is</comments>
                                <comments>// used</comments>
                              </child>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="literals:NullLiteral"/>
                            </expression>
                          </statements>
                        </elseStatement>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                  </statements>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.60">
              <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7">
                      <comments>// allows for comma separated attribute-value pairs</comments>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Continue"/>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
                </children>
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <children xsi:type="literals:CharacterLiteral" value="44"/>
                </children>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7">
                        <comments>// allows for quoted attributes</comments>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.59"/>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <children xsi:type="literals:CharacterLiteral" value="34"/>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.59"/>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.59"/>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.23"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                                </next>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
                                <arguments xsi:type="expressions:ConditionalAndExpression">
                                  <children xsi:type="expressions:NestedExpression">
                                    <expression xsi:type="expressions:EqualityExpression">
                                      <equalityOperators xsi:type="operators:NotEqual"/>
                                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                                      <children xsi:type="literals:NullLiteral"/>
                                    </expression>
                                  </children>
                                  <children xsi:type="expressions:NestedExpression">
                                    <expression xsi:type="expressions:EqualityExpression">
                                      <equalityOperators xsi:type="operators:NotEqual"/>
                                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable">
                                        <next xsi:type="references:IdentifierReference">
                                          <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.1"/>
                                        </next>
                                      </children>
                                      <children xsi:type="references:IdentifierReference">
                                        <target xsi:type="members:Field" href="DTDConstants.class.xmi#//@classifiers.0/@members.0"/>
                                      </children>
                                    </expression>
                                  </children>
                                  <children xsi:type="expressions:NestedExpression">
                                    <expression xsi:type="expressions:EqualityExpression">
                                      <equalityOperators xsi:type="operators:NotEqual"/>
                                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable">
                                        <next xsi:type="references:IdentifierReference">
                                          <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.1"/>
                                        </next>
                                      </children>
                                      <children xsi:type="references:IdentifierReference">
                                        <target xsi:type="members:Field" href="DTDConstants.class.xmi#//@classifiers.0/@members.10"/>
                                      </children>
                                    </expression>
                                  </children>
                                </arguments>
                              </value>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <children xsi:type="literals:CharacterLiteral" value="61"/>
                        </condition>
                        <elseStatement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.24"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable"/>
                                </next>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Condition">
                            <statement xsi:type="statements:Block">
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                                  <assignmentOperator xsi:type="operators:Assignment"/>
                                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0">
                                    <next xsi:type="references:MethodCall">
                                      <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.23"/>
                                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                                    </next>
                                  </value>
                                </expression>
                              </statements>
                              <statements xsi:type="statements:Condition">
                                <statement xsi:type="statements:Block">
                                  <statements xsi:type="statements:ExpressionStatement">
                                    <expression xsi:type="expressions:AssignmentExpression">
                                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable"/>
                                      <assignmentOperator xsi:type="operators:Assignment"/>
                                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable">
                                        <next xsi:type="references:MethodCall">
                                          <target xsi:type="members:ClassMethod" href="AttributeList.class.xmi#//@classifiers.0/@members.14"/>
                                        </next>
                                      </value>
                                    </expression>
                                  </statements>
                                </statement>
                                <condition xsi:type="expressions:EqualityExpression">
                                  <equalityOperators xsi:type="operators:NotEqual"/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                                  <children xsi:type="literals:NullLiteral"/>
                                </condition>
                              </statements>
                            </statement>
                            <condition xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:Equal"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                              <children xsi:type="literals:NullLiteral"/>
                            </condition>
                          </statements>
                        </elseStatement>
                      </statements>
                    </statement>
                    <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.60">
                      <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                    </condition>
                    <elseStatement xsi:type="statements:Block">
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="str">
                          <typeReference xsi:type="types:Char"/>
                          <arrayDimensionsAfter/>
                          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
                            <arrayInitializer>
                              <initialValues xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:Char"/>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                              </initialValues>
                            </arrayInitializer>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
                          <arguments xsi:type="references:StringReference" value="invalid.tagchar"/>
                          <arguments xsi:type="instantiations:NewConstructorCall">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.5/@elseStatement/@elseStatement/@statement/@statements.2/@elseStatement/@statements.0/@variable"/>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                            </next>
                          </arguments>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Continue"/>
                    </elseStatement>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                    <children xsi:type="literals:CharacterLiteral" value="34"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.59"/>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                          </next>
                        </value>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.23"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                          </next>
                        </value>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
                          <arguments xsi:type="expressions:ConditionalAndExpression">
                            <children xsi:type="expressions:NestedExpression">
                              <expression xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:NotEqual"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                                <children xsi:type="literals:NullLiteral"/>
                              </expression>
                            </children>
                            <children xsi:type="expressions:NestedExpression">
                              <expression xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:NotEqual"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable">
                                  <next xsi:type="references:IdentifierReference">
                                    <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.1"/>
                                  </next>
                                </children>
                                <children xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="DTDConstants.class.xmi#//@classifiers.0/@members.0"/>
                                </children>
                              </expression>
                            </children>
                            <children xsi:type="expressions:NestedExpression">
                              <expression xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:NotEqual"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable">
                                  <next xsi:type="references:IdentifierReference">
                                    <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.1"/>
                                  </next>
                                </children>
                                <children xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="DTDConstants.class.xmi#//@classifiers.0/@members.10"/>
                                </children>
                              </expression>
                            </children>
                          </arguments>
                        </value>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../SimpleAttributeSet.class.xmi#//@classifiers.0/@members.6"/>
                        </next>
                      </expression>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                        <children xsi:type="literals:CharacterLiteral" value="61"/>
                      </expression>
                    </children>
                  </condition>
                  <elseStatement xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.59"/>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
                            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
                          <arguments xsi:type="references:StringReference" value="attvalerr"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Return"/>
                    </statement>
                    <condition xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Negate"/>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <children xsi:type="literals:CharacterLiteral" value="61"/>
                        </expression>
                      </children>
                    </condition>
                    <elseStatement xsi:type="statements:Block">
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="str">
                          <typeReference xsi:type="types:Char"/>
                          <arrayDimensionsAfter/>
                          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
                            <arrayInitializer>
                              <initialValues xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:Char"/>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                              </initialValues>
                            </arrayInitializer>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
                          <arguments xsi:type="references:StringReference" value="invalid.tagchar"/>
                          <arguments xsi:type="instantiations:NewConstructorCall">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.5/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.0/@variable"/>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                            </next>
                          </arguments>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Continue"/>
                        </statement>
                        <condition xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Negate"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
                        </condition>
                        <elseStatement xsi:type="statements:Block">
                          <statements xsi:type="statements:Return"/>
                        </elseStatement>
                      </statements>
                    </elseStatement>
                  </elseStatement>
                </elseStatement>
              </elseStatement>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="AttributeList.class.xmi#//@classifiers.0/@members.10"/>
                    </next>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
                  <arguments xsi:type="references:StringReference" value="invalid.tagatt"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// Check out the value</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
                  <arguments xsi:type="references:StringReference" value="multi.tagatt"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../SimpleAttributeSet.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
              </next>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:ConditionalExpression">
                    <child xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ConditionalAndExpression">
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:NotEqual"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                            <children xsi:type="literals:NullLiteral"/>
                          </expression>
                        </children>
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:NotEqual"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.4"/>
                              </next>
                            </children>
                            <children xsi:type="literals:NullLiteral"/>
                          </expression>
                        </children>
                      </expression>
                    </child>
                    <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.4"/>
                      </next>
                    </expressionIf>
                    <expressionElse xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../HTML.class.xmi#//@classifiers.0/@members.2"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../HTML.class.xmi#//@classifiers.0"/>
                    </expressionElse>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
                    <arguments xsi:type="references:StringReference" value="invalid.tagattval"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                      </next>
                    </arguments>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </expression>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.2"/>
                      </next>
                    </children>
                    <children xsi:type="literals:NullLiteral"/>
                  </expression>
                </children>
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.2/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.17"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable"/>
                      </next>
                      <target xsi:type="members:Field" href="AttributeList.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </child>
                </children>
              </condition>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="attkey">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>HTML</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../HTML$Attribute.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../HTML.class.xmi#//@classifiers.0/@members.10"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                </next>
                <target xsi:type="classifiers:Class" href="../HTML.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.68"/>
                    </next>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.9/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../HTML$Attribute.class.xmi#//@classifiers.0/@members.36"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../HTML$Attribute.class.xmi#//@classifiers.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../HTML.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../SimpleAttributeSet.class.xmi#//@classifiers.0/@members.15"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.3/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.9/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../SimpleAttributeSet.class.xmi#//@classifiers.0/@members.15"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.9/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statement/@statements.4/@variable"/>
                  </next>
                </expression>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parseDTDMarkup">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Parses th Document Declaration Type markup declaration.&#xA;     * Currently ignores it.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="strBuff">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
        </expression>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Switch">
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
                  </next>
                </returnValue>
              </statements>
              <condition xsi:type="literals:CharacterLiteral" value="62"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
                  <arguments xsi:type="references:StringReference" value="invalid.markup"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
                  </next>
                </returnValue>
              </statements>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </condition>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="10"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="34"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:CharacterLiteral" value="10"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="13"/>
            </cases>
            <cases xsi:type="statements:DefaultSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                    <arguments xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:Char"/>
                      <child xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:AndExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                        </expression>
                      </child>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </cases>
            <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parseMarkupDeclarations">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="strBuff">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Parse markup declarations.&#xA;     * Currently only handles the Document Type Declaration markup.&#xA;     * Returns true if it is a markup declaration false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>/* Currently handles only the DOCTYPE */</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.67"/>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.6"/>
                </next>
              </children>
              <children xsi:type="references:StringReference" value="DOCTYPE">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@parameters.0">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                    <arguments xsi:type="references:StringReference" value="DOCTYPE"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.70"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
              </next>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parseInvalidTag">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Parse an invalid tag.&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <statements xsi:type="statements:WhileLoop">
        <comments>// ignore all data upto the close bracket '>'</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.59"/>
          </statements>
          <statements xsi:type="statements:Switch">
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="62"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Return"/>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </condition>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:Return"/>
              <condition xsi:type="literals:CharacterLiteral" value="60"/>
            </cases>
            <cases xsi:type="statements:DefaultSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
            </cases>
            <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parseTag">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Parse a start or end tag.&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="elem">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Element.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="net">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="warned">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="unknown">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Switch">
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Switch">
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:WhileLoop">
                <comments>// Parse comment. [92] 391:7</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Condition">
                            <statement xsi:type="statements:Block">
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                                  <assignmentOperator xsi:type="operators:Assignment"/>
                                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                                </expression>
                              </statements>
                            </statement>
                            <condition xsi:type="expressions:ConditionalAndExpression">
                              <children xsi:type="expressions:UnaryExpression">
                                <operators xsi:type="operators:Negate"/>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
                              </children>
                              <children xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:Equal"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                                <children xsi:type="literals:CharacterLiteral" value="45"/>
                              </children>
                            </condition>
                          </statements>
                          <statements xsi:type="statements:Condition">
                            <comments>// send over any text you might see</comments>
                            <comments>// before parsing and sending the</comments>
                            <comments>// comment</comments>
                            <statement xsi:type="statements:Block">
                              <statements xsi:type="statements:LocalVariableStatement">
                                <variable name="newtext">
                                  <typeReference xsi:type="types:Char"/>
                                  <arrayDimensionsAfter/>
                                  <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                                    <typeReference xsi:type="types:Char"/>
                                    <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                                  </initialValue>
                                </variable>
                              </statements>
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.0/@statements.0/@cases.0/@statements.0/@statement/@statements.0/@statement/@statements.0/@statement/@statements.2/@statement/@statements.0/@variable"/>
                                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                                  </next>
                                  <target xsi:type="classifiers:Class" href="../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                                </expression>
                              </statements>
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.0/@statements.0/@cases.0/@statements.0/@statement/@statements.0/@statement/@statements.0/@statement/@statements.2/@statement/@statements.0/@variable"/>
                                </expression>
                              </statements>
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
                                  <assignmentOperator xsi:type="operators:Assignment"/>
                                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
                                </expression>
                              </statements>
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                                  <assignmentOperator xsi:type="operators:Assignment"/>
                                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                </expression>
                              </statements>
                            </statement>
                            <condition xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:NotEqual"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                            </condition>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.63"/>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="DTD.class.xmi#//@classifiers.0/@members.25"/>
                                    <arguments xsi:type="references:StringReference" value="comment"/>
                                  </next>
                                </arguments>
                                <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
                              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.55">
                                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                              </arguments>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Continue"/>
                        </statement>
                        <condition xsi:type="expressions:ConditionalOrExpression">
                          <children xsi:type="expressions:UnaryExpression">
                            <operators xsi:type="operators:Negate"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:Equal"/>
                              <children xsi:type="expressions:NestedExpression">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                                  <assignmentOperator xsi:type="operators:Assignment"/>
                                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                                </expression>
                              </children>
                              <children xsi:type="literals:CharacterLiteral" value="45"/>
                            </expression>
                          </children>
                        </condition>
                        <elseStatement xsi:type="statements:Condition">
                          <statement xsi:type="statements:Block">
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="expressions:AssignmentExpression">
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.2/@variable"/>
                                <assignmentOperator xsi:type="operators:Assignment"/>
                                <value xsi:type="literals:BooleanLiteral" value="true"/>
                              </expression>
                            </statements>
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                                <arguments xsi:type="references:StringReference" value="invalid.commentchar"/>
                                <arguments xsi:type="references:StringReference" value="-"/>
                              </expression>
                            </statements>
                          </statement>
                          <condition xsi:type="expressions:UnaryExpression">
                            <operators xsi:type="operators:Negate"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.2/@variable"/>
                          </condition>
                        </elseStatement>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <children xsi:type="literals:CharacterLiteral" value="45"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.59"/>
                  </statements>
                  <statements xsi:type="statements:Switch">
                    <cases xsi:type="statements:NormalSwitchCase">
                      <statements xsi:type="statements:Continue"/>
                      <condition xsi:type="literals:CharacterLiteral" value="45"/>
                    </cases>
                    <cases xsi:type="statements:NormalSwitchCase">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                        </expression>
                      </statements>
                      <condition xsi:type="literals:CharacterLiteral" value="62"/>
                    </cases>
                    <cases xsi:type="statements:NormalSwitchCase">
                      <statements xsi:type="statements:Return"/>
                      <condition xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </condition>
                    </cases>
                    <cases xsi:type="statements:DefaultSwitchCase">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.2/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="literals:BooleanLiteral" value="true"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                              <arguments xsi:type="references:StringReference" value="invalid.commentchar"/>
                              <arguments xsi:type="references:IdentifierReference">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.82"/>
                                  <arguments xsi:type="expressions:CastExpression">
                                    <typeReference xsi:type="types:Char"/>
                                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                                  </arguments>
                                </next>
                                <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                              </arguments>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Negate"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.2/@variable"/>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:Break"/>
                    </cases>
                    <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  </statements>
                </statement>
                <condition xsi:type="literals:BooleanLiteral" value="true"/>
              </statements>
              <condition xsi:type="literals:CharacterLiteral" value="45"/>
            </cases>
            <cases xsi:type="statements:DefaultSwitchCase">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="strBuff">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <comments>// deal with marked sections</comments>
                      <target xsi:type="classifiers:Class" href="../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:WhileLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.0/@statements.0/@cases.1/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                        <arguments xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:Char"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Return"/>
                    </statement>
                    <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.68">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.0/@statements.0/@cases.1/@statements.0/@variable"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Switch">
                    <cases xsi:type="statements:NormalSwitchCase">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                        </expression>
                      </statements>
                      <condition xsi:type="literals:CharacterLiteral" value="62"/>
                    </cases>
                    <cases xsi:type="statements:NormalSwitchCase">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
                          <arguments xsi:type="references:StringReference" value="invalid.markup"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Return"/>
                      <condition xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </condition>
                    </cases>
                    <cases xsi:type="statements:NormalSwitchCase">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                          <operator xsi:type="operators:PlusPlus"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                          <operator xsi:type="operators:PlusPlus"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Break"/>
                      <condition xsi:type="literals:CharacterLiteral" value="10"/>
                    </cases>
                    <cases xsi:type="statements:NormalSwitchCase">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                          <operator xsi:type="operators:PlusPlus"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
                              <operator xsi:type="operators:PlusPlus"/>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                            </expression>
                          </children>
                          <children xsi:type="literals:CharacterLiteral" value="10"/>
                        </condition>
                        <elseStatement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
                              <operator xsi:type="operators:PlusPlus"/>
                            </expression>
                          </statements>
                        </elseStatement>
                      </statements>
                      <statements xsi:type="statements:Break"/>
                      <condition xsi:type="literals:CharacterLiteral" value="13"/>
                    </cases>
                    <cases xsi:type="statements:DefaultSwitchCase">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Break"/>
                    </cases>
                    <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  </statements>
                </statement>
                <condition xsi:type="literals:BooleanLiteral" value="true"/>
              </statements>
            </cases>
            <variable xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
            </variable>
          </statements>
          <condition xsi:type="literals:CharacterLiteral" value="33"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Switch">
            <comments>// parse end tag [19] 317:4</comments>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <condition xsi:type="literals:CharacterLiteral" value="62"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:Condition">
                <comments>// empty end tag. either &lt;/> or &lt;/&lt;</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
                      <arguments xsi:type="references:StringReference" value="invalid.shortend"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Return"/>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="60"/>
            </cases>
            <cases xsi:type="statements:DefaultSwitchCase">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
                      <arguments xsi:type="references:StringReference" value="expected.endtagname"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Return"/>
                </statement>
                <condition xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.60">
                    <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                  </child>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.59"/>
              </statements>
              <statements xsi:type="statements:Switch">
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                  <condition xsi:type="literals:CharacterLiteral" value="62"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="literals:CharacterLiteral" value="60"/>
                </cases>
                <cases xsi:type="statements:DefaultSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                      <arguments xsi:type="references:StringReference" value="expected"/>
                      <arguments xsi:type="references:StringReference" value="'>'"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:WhileLoop">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <children xsi:type="expressions:UnaryExpression">
                            <operators xsi:type="operators:Subtraction"/>
                            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          </children>
                        </expression>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <children xsi:type="literals:CharacterLiteral" value="10"/>
                        </expression>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <children xsi:type="literals:CharacterLiteral" value="62"/>
                        </expression>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <children xsi:type="literals:CharacterLiteral" value="62"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                </cases>
                <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="elemStr">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                      <arguments xsi:type="references:StringReference" value="end.unrecognized"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.0/@cases.2/@statements.3/@variable"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <comments>// Ignore RE before end tag</comments>
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                          <operator xsi:type="operators:MinusMinus"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          <relationOperators xsi:type="operators:GreaterThan"/>
                        </expression>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                            <arraySelectors>
                              <position xsi:type="expressions:AdditiveExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                <additiveOperators xsi:type="operators:Subtraction"/>
                              </position>
                            </arraySelectors>
                          </children>
                          <children xsi:type="literals:CharacterLiteral" value="10"/>
                        </expression>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="DTD.class.xmi#//@classifiers.0/@members.25"/>
                          <arguments xsi:type="references:StringReference" value="unknown"/>
                        </next>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="Element.class.xmi#//@classifiers.0/@members.1"/>
                        </next>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.0/@cases.2/@statements.3/@variable"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.3/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:BooleanLiteral" value="true"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="DTD.class.xmi#//@classifiers.0/@members.24"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.0/@cases.2/@statements.3/@variable"/>
                    </next>
                  </child>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="DTD.class.xmi#//@classifiers.0/@members.25"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.0/@cases.2/@statements.3/@variable"/>
                        </next>
                      </value>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Break"/>
            </cases>
            <variable xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// If the stack is null, we're seeing end tags without any begin</comments>
            <comments>// tags.  Ignore them.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                  <arguments xsi:type="references:StringReference" value="end.extra.tag"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
              <statements xsi:type="statements:Return"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// Ignore RE before end tag</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <comments>// In a pre tag, if there are blank lines</comments>
                <comments>// we do not want to remove the newline</comments>
                <comments>// before the end tag.  Hence this code.</comments>
                <comments>//</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                          <operator xsi:type="operators:MinusMinus"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          <relationOperators xsi:type="operators:GreaterThan"/>
                        </expression>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                            <arraySelectors>
                              <position xsi:type="expressions:AdditiveExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                                <additiveOperators xsi:type="operators:Subtraction"/>
                              </position>
                            </arraySelectors>
                          </children>
                          <children xsi:type="literals:CharacterLiteral" value="10"/>
                        </expression>
                      </children>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.7"/>
                  </next>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                      <operator xsi:type="operators:MinusMinus"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:GreaterThan"/>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <arraySelectors>
                      <position xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </position>
                    </arraySelectors>
                  </children>
                  <children xsi:type="literals:CharacterLiteral" value="10"/>
                </expression>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// If the end tag is a form, since we did not put it</comments>
            <comments>// on the tag stack, there is no corresponding start</comments>
            <comments>// start tag to find. Hence do not touch the tag stack.</comments>
            <comments>//</comments>
            <comments>/*&#xA;&#x9;    if (!strict &amp;&amp; elem.getName().equals(&quot;form&quot;)) {&#xA;&#x9;&#x9;if (lastFormSent != null) {&#xA;&#x9;&#x9;    handleEndTag(lastFormSent);&#xA;&#x9;&#x9;    return;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;    // do nothing.&#xA;&#x9;&#x9;    return;&#xA;&#x9;&#x9;}&#xA;&#x9;    }&#xA;            */</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="t">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <comments>// we will not see a corresponding start tag</comments>
                      <comments>// on the the stack.  If we are seeing an</comments>
                      <comments>// end tag, lets send this on as an empty</comments>
                      <comments>// tag with the end tag attribute set to</comments>
                      <comments>// true.</comments>
                      <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.3/@statement/@statements.0/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../SimpleAttributeSet.class.xmi#//@classifiers.0/@members.15"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../HTML$Attribute.class.xmi#//@classifiers.0/@members.79"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../HTML$Attribute.class.xmi#//@classifiers.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../HTML.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="references:StringReference" value="true"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
                  </arguments>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Return"/>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.3/@variable"/>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// find the corresponding start tag</comments>
            <comments>// A commonly occuring error appears to be the insertion</comments>
            <comments>// of extra end tags in a table.  The intent here is ignore</comments>
            <comments>// such extra end tags.</comments>
            <comments>//</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="stackElem">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                      </next>
                      <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <comments>// If it isnt a valid end tag ignore it and return</comments>
                    <comments>//</comments>
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                          <arguments xsi:type="references:StringReference" value="tag.ignore"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                            </next>
                          </arguments>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Return"/>
                    </statement>
                    <condition xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.4/@statement/@statements.0/@variable"/>
                          </next>
                          <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                        </next>
                      </child>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.4/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                    <arguments xsi:type="references:StringReference" value="table"/>
                  </next>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                          <arguments xsi:type="references:StringReference" value="tag.ignore"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                            </next>
                          </arguments>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Return"/>
                    </statement>
                    <condition xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Negate"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                                <arguments xsi:type="references:StringReference" value="table"/>
                              </next>
                              <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                            </next>
                          </child>
                        </expression>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Negate"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.4/@statement/@statements.0/@variable"/>
                              </next>
                              <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                            </next>
                          </child>
                        </expression>
                      </children>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.4/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:StringReference" value="tr"/>
                    </next>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.4/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:StringReference" value="td"/>
                    </next>
                  </children>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="sp">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="TagStack.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
            </variable>
          </statements>
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.5/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.5/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.5/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.5/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </children>
                </expression>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                  <arguments xsi:type="references:StringReference" value="unmatched.endtag"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
              <statements xsi:type="statements:Return"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.5/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="elemName">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// People put font ending tags in the darndest places.</comments>
                  <comments>// Don't close other contexts based on them being between</comments>
                  <comments>// a font tag and the corresponding end tag.  Instead,</comments>
                  <comments>// ignore the end tag like it doesn't exist and allow the end</comments>
                  <comments>// of the document to close us out.</comments>
                  <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <comments>// Since closing out a center tag can have real wierd</comments>
                <comments>// effects on the formatting,  make sure that tags</comments>
                <comments>// for which omitting an end tag is legimitate</comments>
                <comments>// get closed out.</comments>
                <comments>//</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:WhileLoop">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                        <next xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.16"/>
                          </next>
                          <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                        </next>
                      </children>
                      <children xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.5/@variable"/>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                          <arguments xsi:type="literals:BooleanLiteral"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.1"/>
                        </next>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.8/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                    <arguments xsi:type="references:StringReference" value="center"/>
                  </next>
                </condition>
              </statements>
              <statements xsi:type="statements:Return"/>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.5/@variable"/>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.8/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:StringReference" value="font"/>
                    </next>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.8/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:StringReference" value="center"/>
                    </next>
                  </children>
                </expression>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:WhileLoop">
            <comments>// People do the same thing with center tags.  In this</comments>
            <comments>// case we would like to close off the center tag but</comments>
            <comments>// not necessarily all enclosing tags.</comments>
            <comments>// end tags</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                  <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.4/@cases.1/@statements.5/@variable"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
              <arguments xsi:type="literals:BooleanLiteral"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
          <condition xsi:type="literals:CharacterLiteral" value="47"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
              <arguments xsi:type="references:StringReference" value="eof"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </condition>
        </cases>
        <variable xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// start tag [14] 314:1</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
                  <arguments xsi:type="references:StringReference" value="expected.tagname"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Return"/>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <children xsi:type="literals:CharacterLiteral" value="62"/>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </expression>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.60">
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          </child>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="elemStr">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.5/@elseStatement/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:StringReference" value="img"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.5/@elseStatement/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:StringReference" value="image"/>
              </next>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>/* determine if this element is part of the dtd. */</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                  <comments>//&#x9;&#x9;parseInvalidTag();</comments>
                  <arguments xsi:type="references:StringReference" value="tag.unrecognized "/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.5/@elseStatement/@statements.0/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="DTD.class.xmi#//@classifiers.0/@members.25"/>
                      <arguments xsi:type="references:StringReference" value="unknown"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="Element.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.5/@elseStatement/@statements.0/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DTD.class.xmi#//@classifiers.0/@members.24"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.5/@elseStatement/@statements.0/@variable"/>
                </next>
              </child>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="DTD.class.xmi#//@classifiers.0/@members.25"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.5/@elseStatement/@statements.0/@variable"/>
                    </next>
                  </value>
                </expression>
              </statements>
            </elseStatement>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.66">
          <comments>// Parse attributes</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Switch">
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
          <condition xsi:type="literals:CharacterLiteral" value="47"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
            </expression>
          </statements>
          <condition xsi:type="literals:CharacterLiteral" value="62"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="literals:CharacterLiteral" value="60"/>
        </cases>
        <cases xsi:type="statements:DefaultSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
              <arguments xsi:type="references:StringReference" value="expected"/>
              <arguments xsi:type="references:StringReference" value="'>'"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
        </cases>
        <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
                  <arguments xsi:type="references:StringReference" value="javascript.unsupported"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:StringReference" value="script"/>
                </next>
                <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// ignore RE after start tag</comments>
        <comments>//</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              <children xsi:type="literals:CharacterLiteral" value="10"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:CharacterLiteral" value="10"/>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </expression>
                    </statements>
                  </elseStatement>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                <children xsi:type="literals:CharacterLiteral" value="13"/>
              </condition>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.21"/>
            </next>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="tag">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// ensure a legal context for the tag</comments>
              <target xsi:type="classifiers:Class" href="TagElement.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
            <arguments xsi:type="literals:BooleanLiteral"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>/** In dealing with forms, we have decided to treat&#xA;&#x9;    them as legal in any context.  Also, even though&#xA;&#x9;    they do have a start and an end tag, we will&#xA;&#x9;    not put this tag on the stack.  This is to deal&#xA;&#x9;    several pages in the web oasis that choose to&#xA;&#x9;    start and end forms in any possible location. **/</comments>
        <comments>/*&#xA;&#x9;if (!strict &amp;&amp; elem.getName().equals(&quot;form&quot;)) {&#xA;&#x9;    if (lastFormSent == null) {&#xA;&#x9;&#x9;lastFormSent = tag;&#xA;&#x9;    } else {&#xA;&#x9;&#x9;handleEndTag(lastFormSent);&#xA;&#x9;&#x9;lastFormSent = tag;&#xA;&#x9;    }&#xA;&#x9;} else {&#xA;        */</comments>
        <comments>// Smlly, if a tag is unknown, we will apply</comments>
        <comments>// no legalTagContext logic to it.</comments>
        <comments>//</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.10/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// If skip tag is true,  this implies that</comments>
            <comments>// the tag was illegal and that the error</comments>
            <comments>// recovery strategy adopted is to ignore</comments>
            <comments>// the tag.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Return"/>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.3/@variable"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <comments>/*&#xA;&#x9;}&#xA;            */</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.10/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Switch">
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
                  <arguments xsi:type="literals:BooleanLiteral"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="DTDConstants.class.xmi#//@classifiers.0/@members.0"/>
              </condition>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
                  <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="DTDConstants.class.xmi#//@classifiers.0/@members.15"/>
              </condition>
            </cases>
            <cases xsi:type="statements:DefaultSwitchCase">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.6"/>
                        </next>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.1/@variable"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Break"/>
            </cases>
            <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.17"/>
              </next>
            </variable>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Element.class.xmi#//@classifiers.0/@members.21"/>
            </next>
          </child>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parseContent">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Parse Content. [24] 320:1&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="curThread">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../java/lang/Thread.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../java/lang/Thread.class.xmi#//@classifiers.0/@members.33"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/Thread.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/Thread.class.xmi#//@classifiers.0/@members.52"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break">
                <comments>// resignal the interrupt</comments>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/Thread.class.xmi#//@classifiers.0/@members.54"/>
              </next>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="c">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Switch">
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70"/>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Continue"/>
              <condition xsi:type="literals:CharacterLiteral" value="60"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                      <comments>// null end tag.</comments>
                      <arguments xsi:type="literals:BooleanLiteral"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Continue"/>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </expression>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.6"/>
                    </next>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="47"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:Return"/>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </condition>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
                          <arguments xsi:type="references:StringReference" value="unexpected.pcdata"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="DTD.class.xmi#//@classifiers.0/@members.4"/>
                          </next>
                        </arguments>
                      </child>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="literals:BooleanLiteral"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="TagElement.class.xmi#//@classifiers.0/@members.5"/>
                      </next>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="data">
                  <typeReference xsi:type="types:Char"/>
                  <arrayDimensionsAfter/>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.61"/>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="newtext">
                      <typeReference xsi:type="types:Char"/>
                      <arrayDimensionsAfter/>
                      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                        <typeReference xsi:type="types:Char"/>
                        <sizes xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../java/lang/Math.class.xmi#//@classifiers.0/@members.33"/>
                            <arguments xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.3/@cases.3/@statements.1/@variable">
                                <next xsi:type="references:IdentifierReference"/>
                              </children>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
                              <additiveOperators xsi:type="operators:Addition"/>
                              <additiveOperators xsi:type="operators:Addition"/>
                            </arguments>
                            <arguments xsi:type="expressions:MultiplicativeExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                                <next xsi:type="references:IdentifierReference"/>
                              </children>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                              <multiplicativeOperators xsi:type="operators:Multiplication"/>
                            </arguments>
                          </next>
                          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Math.class.xmi#//@classifiers.0"/>
                        </sizes>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.3/@cases.3/@statements.2/@statement/@statements.0/@variable"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                          <next xsi:type="references:IdentifierReference"/>
                        </arguments>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.3/@cases.3/@statements.2/@statement/@statements.0/@variable"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.3/@cases.3/@statements.1/@variable">
                      <next xsi:type="references:IdentifierReference"/>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <relationOperators xsi:type="operators:GreaterThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:BooleanLiteral"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                        <arraySelectors>
                          <position xsi:type="expressions:SuffixUnaryModificationExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                            <operator xsi:type="operators:PlusPlus"/>
                          </position>
                        </arraySelectors>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:CharacterLiteral" value="32"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.3/@cases.3/@statements.1/@variable"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.3/@cases.3/@statements.1/@variable">
                      <next xsi:type="references:IdentifierReference"/>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.3/@cases.3/@statements.1/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Continue"/>
              <condition xsi:type="literals:CharacterLiteral" value="38"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Break"/>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </expression>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.7"/>
                    </next>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:BooleanLiteral" value="true"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Continue"/>
              <condition xsi:type="literals:CharacterLiteral" value="10"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:CharacterLiteral" value="10"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:CharacterLiteral" value="10"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Break"/>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </expression>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.7"/>
                    </next>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:BooleanLiteral" value="true"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Continue"/>
              <condition xsi:type="literals:CharacterLiteral" value="13"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="literals:CharacterLiteral" value="9"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Break"/>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </expression>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.7"/>
                    </next>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:BooleanLiteral" value="true"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Continue"/>
              <condition xsi:type="literals:CharacterLiteral" value="32"/>
            </cases>
            <cases xsi:type="statements:DefaultSwitchCase">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
                          <arguments xsi:type="references:StringReference" value="unexpected.pcdata"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="DTD.class.xmi#//@classifiers.0/@members.4"/>
                          </next>
                        </arguments>
                      </child>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="literals:BooleanLiteral"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="TagElement.class.xmi#//@classifiers.0/@members.5"/>
                      </next>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </cases>
            <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@variable"/>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// enlarge buffer if needed</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="newtext">
                  <typeReference xsi:type="types:Char"/>
                  <arrayDimensionsAfter/>
                  <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                    <typeReference xsi:type="types:Char"/>
                    <sizes xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                        <next xsi:type="references:IdentifierReference"/>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </sizes>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.4/@statement/@statements.0/@variable"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <next xsi:type="references:IdentifierReference"/>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.4/@statement/@statements.0/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <next xsi:type="references:IdentifierReference"/>
              </children>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// output pending space</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
                      <operator xsi:type="operators:MinusMinus"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <arraySelectors>
                      <position xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </position>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:CharacterLiteral" value="32"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Char"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@variable"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral"/>
            </expression>
          </statements>
        </statement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEndOfLineString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the end of line string. This will return the end of line&#xA;     * string that has been encountered the most, one of \r, \n or \r\n.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:StringReference" value="&#xA;"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
              <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:StringReference" value="&#xD;&#xA;"/>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:StringReference" value="&#xD;"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:StringReference" value="&#xA;"/>
              </statements>
            </elseStatement>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parse">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="in">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/io/Reader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Parse an HTML stream, given a DTD.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </value>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.78"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Char"/>
                <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="1024"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Char"/>
                <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.71"/>
          </statements>
          <statements xsi:type="statements:WhileLoop">
            <comments>// NOTE: interruption may have occurred.  Control flows out</comments>
            <comments>// of here normally.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                  <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <finallyBlock>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../java/io/Reader.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </expression>
            </statements>
          </finallyBlock>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.52"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
              <arguments xsi:type="references:StringReference" value="ioexception"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.6/@catcheBlocks.0/@parameter"/>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.52"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
              <arguments xsi:type="references:StringReference" value="exception"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.6/@catcheBlocks.1/@parameter">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.44"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.6/@catcheBlocks.1/@parameter">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.9"/>
                </next>
              </arguments>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.6/@catcheBlocks.1/@parameter">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </expression>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.52"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
              <arguments xsi:type="references:StringReference" value="terminated"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.6/@catcheBlocks.2/@parameter">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.6/@catcheBlocks.2/@parameter"/>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../java/lang/ThreadDeath.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <finallyBlock>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <updates xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="TagStack.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </value>
            </updates>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </finallyBlock>
      </statements>
    </members>
    <members xsi:type="members:Field" name="buf">
      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
        <typeReference xsi:type="types:Char"/>
        <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      </initialValue>
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsAfter/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * Input cache.  This is much faster than calling down to a synchronized&#xA;     * method of BufferedReader for each byte.  Measurements done 5/30/97&#xA;     * show that there's no point in having a bigger buffer:  Increasing&#xA;     * the buffer to 8192 had no measurable impact for a program discarding&#xA;     * one character at a time (reading from an http URL to a local machine).&#xA;     * NOTE: If the current encoding is bogus, and we read too much&#xA;     * (past the content-type) we may suffer a MalformedInputException. For&#xA;     * this reason the initial size is 1 and when the body is encountered the&#xA;     * size is adjusted to 256.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="pos">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="len">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="currentPosition">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;&#x9;tracks position relative to the beginning of the&#xA;&#x9;document.&#xA;    */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="readCh">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ForLoop">
            <comments>// This loop allows us to ignore interrupts if the flag</comments>
            <comments>// says so</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:TryBlock">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../java/io/Reader.class.xmi#//@classifiers.0/@members.7"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74"/>
                      </next>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <catcheBlocks>
                  <statements xsi:type="statements:Throw">
                    <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.78/@statements.0/@statement/@statements.0/@statement/@statements.0/@catcheBlocks.0/@parameter"/>
                  </statements>
                  <parameter name="ex">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../java/io/InterruptedIOException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </parameter>
                </catcheBlocks>
              </statements>
            </statement>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <comments>// eof</comments>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </returnValue>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:PrefixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77"/>
          <operator xsi:type="operators:PlusPlus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74">
          <arraySelectors>
            <position xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75"/>
              <operator xsi:type="operators:PlusPlus"/>
            </position>
          </arraySelectors>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCurrentPos">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A simple DTD-driven HTML parser. The parser reads an&#xA; * HTML file from an InputStream and calls various methods&#xA; * (which should be overridden in a subclass) when tags and&#xA; * data are encountered.&#xA; * &lt;p>&#xA; * Unfortunately there are many badly implemented HTML parsers&#xA; * out there, and as a result there are many badly formatted&#xA; * HTML files. This parser attempts to parse most HTML files.&#xA; * This means that the implementation sometimes deviates from&#xA; * the SGML specification in favor of HTML.&#xA; * &lt;p>&#xA; * The parser treats \r and \r\n as \n. Newlines after starttags&#xA; * and before end tags are ignored just as specified in the SGML/HTML&#xA; * specification.&#xA; * &lt;p>&#xA; * The html spec does not specify how spaces are to be coalesced very well.&#xA; * Specifically, the following scenarios are not discussed (note that a&#xA; * space should be used here, but I am using &amp;amp;nbsp to force the space to&#xA; * be displayed):&#xA; * &lt;p>&#xA; * '&amp;lt;b>blah&amp;nbsp;&amp;lt;i>&amp;nbsp;&amp;lt;strike>&amp;nbsp;foo' which can be treated as:&#xA; * '&amp;lt;b>blah&amp;nbsp;&amp;lt;i>&amp;lt;strike>foo' &#xA; * &lt;p>as well as:&#xA; * '&amp;lt;p>&amp;lt;a href=&quot;xx&quot;>&amp;nbsp;&amp;lt;em>Using&amp;lt;/em>&amp;lt;/a>&amp;lt;/p>'&#xA; * which appears to be treated as:&#xA; * '&amp;lt;p>&amp;lt;a href=&quot;xx&quot;>&amp;lt;em>Using&amp;lt;/em>&amp;lt;/a>&amp;lt;/p>'&#xA; * &lt;p>&#xA; * If &lt;code>strict&lt;/code> is false, when a tag that breaks flow,&#xA; * (&lt;code>TagElement.breaksFlows&lt;/code>) or trailing whitespace is&#xA; * encountered, all whitespace will be ignored until a non whitespace&#xA; * character is encountered. This appears to give behavior closer to&#xA; * the popular browsers.&#xA; *&#xA; * @see DTD&#xA; * @see TagElement&#xA; * @see SimpleAttributeSet&#xA; * @version 1.43, 05/27/05&#xA; * @author Arthur van Hoff&#xA; * @author Sunita Mani&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="DTDConstants.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
