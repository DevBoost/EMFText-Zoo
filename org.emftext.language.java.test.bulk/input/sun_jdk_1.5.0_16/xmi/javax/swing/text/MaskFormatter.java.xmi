<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../java.ecore#/17" name="MaskFormatter.java">
  <comments>/*&#xA; * @(#)MaskFormatter.java&#x9;1.12 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <namespaces>text</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>text</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>text</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="MaskFormatter">
    <members xsi:type="members:Field" name="DIGIT_KEY">
      <initialValue xsi:type="literals:CharacterLiteral" value="35"/>
      <typeReference xsi:type="types:Char"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Potential values in mask.</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="LITERAL_KEY">
      <initialValue xsi:type="literals:CharacterLiteral" value="39"/>
      <typeReference xsi:type="types:Char"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="UPPERCASE_KEY">
      <initialValue xsi:type="literals:CharacterLiteral" value="85"/>
      <typeReference xsi:type="types:Char"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="LOWERCASE_KEY">
      <initialValue xsi:type="literals:CharacterLiteral" value="76"/>
      <typeReference xsi:type="types:Char"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ALPHA_NUMERIC_KEY">
      <initialValue xsi:type="literals:CharacterLiteral" value="65"/>
      <typeReference xsi:type="types:Char"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CHARACTER_KEY">
      <initialValue xsi:type="literals:CharacterLiteral" value="63"/>
      <typeReference xsi:type="types:Char"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ANYTHING_KEY">
      <initialValue xsi:type="literals:CharacterLiteral" value="42"/>
      <typeReference xsi:type="types:Char"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="HEX_KEY">
      <initialValue xsi:type="literals:CharacterLiteral" value="72"/>
      <typeReference xsi:type="types:Char"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="EmptyMaskChars">
      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.49"/>
        </typeReference>
        <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.49"/>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="mask">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** The user specified mask. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="maskChars">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.49"/>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="validCharacters">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** List of valid characters. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="invalidCharacters">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** List of invalid characters. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="placeholderString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** String used for the passed in value if it does not completely&#xA;     * fill the mask. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="placeholder">
      <typeReference xsi:type="types:Char"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** String used to represent characters not present. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="containsLiteralChars">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Indicates if the value contains the literal characters. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="MaskFormatter">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="DefaultFormatter.class.xmi#//@classifiers.0/@members.13"/>
          <arguments xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:CharacterLiteral" value="32"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a MaskFormatter with no mask.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="MaskFormatter">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mask">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/text/ParseException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a &lt;code>MaskFormatter&lt;/code> with the specified mask.&#xA;     * A &lt;code>ParseException&lt;/code>&#xA;     * will be thrown if &lt;code>mask&lt;/code> is an invalid mask.&#xA;     *&#xA;     * @throws ParseException if mask does not contain valid mask characters&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="setMask">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mask">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/text/ParseException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the mask dictating the legal characters.&#xA;     * This will throw a &lt;code>ParseException&lt;/code> if &lt;code>mask&lt;/code> is&#xA;     * not valid.&#xA;     *&#xA;     * @throws ParseException if mask does not contain valid mask characters&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMask">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the formatting mask.&#xA;     *&#xA;     * @return Mask dictating legal character values.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setValidCharacters">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="validCharacters">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allows for further restricting of the characters that can be input.&#xA;     * Only characters specified in the mask, not in the&#xA;     * &lt;code>invalidCharacters&lt;/code>, and in&#xA;     * &lt;code>validCharacters&lt;/code> will be allowed to be input. Passing&#xA;     * in null (the default) implies the valid characters are only bound&#xA;     * by the mask and the invalid characters.&#xA;     *&#xA;     * @param validCharacters If non-null, specifies legal characters.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getValidCharacters">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the valid characters that can be input.&#xA;     *&#xA;     * @return Legal characters&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setInvalidCharacters">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="invalidCharacters">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allows for further restricting of the characters that can be input.&#xA;     * Only characters specified in the mask, not in the&#xA;     * &lt;code>invalidCharacters&lt;/code>, and in&#xA;     * &lt;code>validCharacters&lt;/code> will be allowed to be input. Passing&#xA;     * in null (the default) implies the valid characters are only bound&#xA;     * by the mask and the valid characters.&#xA;     *&#xA;     * @param invalidCharacters If non-null, specifies illegal characters.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getInvalidCharacters">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the characters that are not valid for input.&#xA;     *&#xA;     * @return illegal characters.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setPlaceholder">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="placeholder">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the string to use if the value does not completely fill in&#xA;     * the mask. A null value implies the placeholder char should be used.&#xA;     *&#xA;     * @param placeholder String used when formatting if the value does not&#xA;     *        completely fill the mask&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPlaceholder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the String to use if the value does not completely fill&#xA;     * in the mask.&#xA;     *&#xA;     * @return String used when formatting if the value does not&#xA;     *        completely fill the mask&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setPlaceholderCharacter">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="placeholder">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the character to use in place of characters that are not present&#xA;     * in the value, ie the user must fill them in. The default value is&#xA;     * a space.&#xA;     * &lt;p>&#xA;     * This is only applicable if the placeholder string has not been&#xA;     * specified, or does not completely fill in the mask.&#xA;     *&#xA;     * @param placeholder Character used when formatting if the value does not&#xA;     *        completely fill the mask&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPlaceholderCharacter">
      <typeReference xsi:type="types:Char"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the character to use in place of characters that are not present&#xA;     * in the value, ie the user must fill them in.&#xA;     *&#xA;     * @return Character used when formatting if the value does not&#xA;     *        completely fill the mask&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setValueContainsLiteralCharacters">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="containsLiteralChars">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * If true, the returned value and set value will also contain the literal&#xA;     * characters in mask.&#xA;     * &lt;p>&#xA;     * For example, if the mask is &lt;code>'(###) ###-####'&lt;/code>, the&#xA;     * current value is &lt;code>'(415) 555-1212'&lt;/code>, and&#xA;     * &lt;code>valueContainsLiteralCharacters&lt;/code> is&#xA;     * true &lt;code>stringToValue&lt;/code> will return&#xA;     * &lt;code>'(415) 555-1212'&lt;/code>. On the other hand, if&#xA;     * &lt;code>valueContainsLiteralCharacters&lt;/code> is false,&#xA;     * &lt;code>stringToValue&lt;/code> will return &lt;code>'4155551212'&lt;/code>.&#xA;     *&#xA;     * @param containsLiteralChars Used to indicate if literal characters in&#xA;     *        mask should be returned in stringToValue&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getValueContainsLiteralCharacters">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns true if &lt;code>stringToValue&lt;/code> should return literal&#xA;     * characters in the mask.&#xA;     *&#xA;     * @return True if literal characters in mask should be returned in&#xA;     *         stringToValue&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="stringToValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/text/ParseException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Parses the text, returning the appropriate Object representation of&#xA;     * the String &lt;code>value&lt;/code>. This strips the literal characters as&#xA;     * necessary and invokes supers &lt;code>stringToValue&lt;/code>, so that if&#xA;     * you have specified a value class (&lt;code>setValueClass&lt;/code>) an&#xA;     * instance of it will be created. This will throw a&#xA;     * &lt;code>ParseException&lt;/code> if the value does not match the current&#xA;     * mask.  Refer to {@link #setValueContainsLiteralCharacters} for details&#xA;     * on how literals are treated.&#xA;     *&#xA;     * @throws ParseException if there is an error in the conversion&#xA;     * @param value String to convert&#xA;     * @see #setValueContainsLiteralCharacters&#xA;     * @return Object representation of text&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="valueToString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/text/ParseException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a String representation of the Object &lt;code>value&lt;/code>&#xA;     * based on the mask.  Refer to&#xA;     * {@link #setValueContainsLiteralCharacters} for details&#xA;     * on how literals are treated.&#xA;     *&#xA;     * @throws ParseException if there is an error in the conversion&#xA;     * @param value Value to convert&#xA;     * @see #setValueContainsLiteralCharacters&#xA;     * @return String representation of value&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sValue">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
                <children xsi:type="literals:NullLiteral"/>
              </expression>
            </child>
            <expressionIf xsi:type="references:StringReference" value=""/>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.6"/>
              </next>
            </expressionElse>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="placeholder">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.25"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="valueCounter">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.3/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.2/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="install">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ftf">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Installs the &lt;code>DefaultFormatter&lt;/code> onto a particular&#xA;     * &lt;code>JFormattedTextField&lt;/code>.&#xA;     * This will invoke &lt;code>valueToString&lt;/code> to convert the&#xA;     * current value from the &lt;code>JFormattedTextField&lt;/code> to&#xA;     * a String. This will then install the &lt;code>Action&lt;/code>s from&#xA;     * &lt;code>getActions&lt;/code>, the &lt;code>DocumentFilter&lt;/code>&#xA;     * returned from &lt;code>getDocumentFilter&lt;/code> and the&#xA;     * &lt;code>NavigationFilter&lt;/code> returned from&#xA;     * &lt;code>getNavigationFilter&lt;/code> onto the&#xA;     * &lt;code>JFormattedTextField&lt;/code>.&#xA;     * &lt;p>&#xA;     * Subclasses will typically only need to override this if they&#xA;     * wish to install additional listeners on the&#xA;     * &lt;code>JFormattedTextField&lt;/code>.&#xA;     * &lt;p>&#xA;     * If there is a &lt;code>ParseException&lt;/code> in converting the&#xA;     * current value to a String, this will set the text to an empty&#xA;     * String, and mark the &lt;code>JFormattedTextField&lt;/code> as being&#xA;     * in an invalid state.&#xA;     * &lt;p>&#xA;     * While this is a public method, this is typically only useful&#xA;     * for subclassers of &lt;code>JFormattedTextField&lt;/code>.&#xA;     * &lt;code>JFormattedTextField&lt;/code> will invoke this method at&#xA;     * the appropriate times when the value changes, or its internal&#xA;     * state changes.&#xA;     *&#xA;     * @param ftf JFormattedTextField to format for, may be null indicating&#xA;     *            uninstall from current JFormattedTextField.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="DefaultFormatter.class.xmi#//@classifiers.0/@members.8"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// valueToString doesn't throw, but stringToValue does, need to</comments>
        <comments>// update the editValid state appropriately</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="value">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../JFormattedTextField.class.xmi#//@classifiers.0/@members.30"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.1/@statement/@statements.0/@variable"/>
                </arguments>
              </expression>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0/@members.8"/>
                  <arguments xsi:type="literals:BooleanLiteral"/>
                </expression>
              </statements>
              <parameter name="pe">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/text/ParseException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="stringToValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="completeMatch">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/text/ParseException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Actual &lt;code>stringToValue&lt;/code> implementation.&#xA;     * If &lt;code>completeMatch&lt;/code> is true, the value must exactly match&#xA;     * the mask, on the other hand if &lt;code>completeMatch&lt;/code> is false&#xA;     * the string must match the mask or the placeholder string.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="errorOffset">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="DefaultFormatter.class.xmi#//@classifiers.0/@members.17"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
              </next>
              <self xsi:type="literals:Super"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.1"/>
              </value>
            </expression>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/text/ParseException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="stringToValue passed invalid value"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable"/>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getInvalidOffset">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="string">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="completeMatch">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns -1 if the passed in string is valid, otherwise the index of&#xA;     * the first bogus character is returned.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="iLength">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <comments>// trivially false</comments>
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.0/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.0/@variable"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="aChar">
              <typeReference xsi:type="types:Char"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.2/@init"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.2/@init"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.2/@init"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.2/@statement/@statements.0/@variable"/>
                </child>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.1"/>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.2/@init"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.2/@statement/@statements.0/@variable"/>
                    </child>
                  </children>
                </expression>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.2/@init/@additionalLocalVariables.0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="counter">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <additionalLocalVariables name="max">
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </initialValue>
          </additionalLocalVariables>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="append">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="result">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="placeholder">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mask">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.49"/>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/text/ParseException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Invokes &lt;code>append&lt;/code> on the mask characters in&#xA;     * &lt;code>mask&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.4">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.3">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.1"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.2"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.3"/>
              </next>
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@init"/>
              </arraySelectors>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@init/@additionalLocalVariables.0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="counter">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <additionalLocalVariables name="maxCounter">
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.4">
              <next xsi:type="references:IdentifierReference"/>
            </initialValue>
          </additionalLocalVariables>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="updateInternalMask">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/text/ParseException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Updates the internal representation of the mask.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="mask">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.19"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="fixed">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/util/ArrayList.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/util/ArrayList.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="temp">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/util/ArrayList.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="maskChar">
                  <typeReference xsi:type="types:Char"/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@statement/@statements.0/@init"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Switch">
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/util/ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                        <arguments xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.51"/>
                          </typeReference>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@statement/@statements.0/@statement/@statements.0/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@statement/@statements.0/@init"/>
                            </next>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../java/util/ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                            <arguments xsi:type="instantiations:NewConstructorCall">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@members.50"/>
                              </typeReference>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@statement/@statements.0/@statement/@statements.0/@variable"/>
                            </arguments>
                          </next>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="expressions:PrefixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@statement/@statements.0/@init"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@statement/@statements.0/@init/@additionalLocalVariables.0"/>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Break">
                    <comments>// else: Could actually throw if else</comments>
                  </statements>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/util/ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                        <arguments xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.52"/>
                          </typeReference>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/util/ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                        <arguments xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.53"/>
                          </typeReference>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/util/ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                        <arguments xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.54"/>
                          </typeReference>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/util/ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                        <arguments xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.55"/>
                          </typeReference>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/util/ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                        <arguments xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.49"/>
                          </typeReference>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/util/ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                        <arguments xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.56"/>
                          </typeReference>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                </cases>
                <cases xsi:type="statements:DefaultSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/util/ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                        <arguments xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.50"/>
                          </typeReference>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@statement/@statements.0/@statement/@statements.0/@variable"/>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                </cases>
                <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@statement/@statements.0/@statement/@statements.0/@variable"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@statement/@statements.0/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@statement/@statements.0/@init/@additionalLocalVariables.0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="counter">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <additionalLocalVariables name="maxCounter">
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                </initialValue>
              </additionalLocalVariables>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@statement/@statements.0/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/util/ArrayList.class.xmi#//@classifiers.0/@members.8"/>
            </next>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.49"/>
                </typeReference>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/ArrayList.class.xmi#//@classifiers.0/@members.8"/>
                  </next>
                </sizes>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/util/ArrayList.class.xmi#//@classifiers.0/@members.15"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
              </next>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaskCharacter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.49"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns the MaskCharacter at the specified location.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10">
          <arraySelectors>
            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
          </arraySelectors>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isPlaceholder">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="aChar">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns true if the placeholder character matches aChar.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.27"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.1"/>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isValidCharacter">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="aChar">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns true if the passed in character matches the mask at the&#xA;     * specified location.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.1">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.1"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isLiteral">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns true if the character at the specified location is a literal,&#xA;     * that is it can not be edited.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaxLength">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns the maximum length the text can be.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10">
          <next xsi:type="references:IdentifierReference"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLiteral">
      <typeReference xsi:type="types:Char"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns the literal character at the specified location.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.2">
            <arguments xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:Char"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arguments>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCharacter">
      <typeReference xsi:type="types:Char"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="aChar">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns the character to insert at the specified location based on&#xA;     * the passed in character.  This provides a way to map certain sets&#xA;     * of characters to alternative values (lowercase to&#xA;     * uppercase...).&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.2">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.1"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="stripLiteralChars">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="string">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Removes the literal characters from the passed in string.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sb">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="last">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.56"/>
                                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.2/@init"/>
                              </next>
                            </arguments>
                          </next>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.2/@init"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.2/@init"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.56"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@variable"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.2/@init"/>
                            </next>
                          </arguments>
                        </next>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.2/@init"/>
                  </condition>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.2/@init"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.40">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.2/@init"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.2/@init/@additionalLocalVariables.0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="counter">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <additionalLocalVariables name="max">
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </initialValue>
          </additionalLocalVariables>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <comments>// Assume the mask isn't all literals.</comments>
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Return">
                  <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.55"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@variable"/>
                    </next>
                  </returnValue>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.55"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@variable"/>
                    </next>
                  </arguments>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </children>
          </condition>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="readObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/io/ObjectInputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Subclassed to update the internal representation of the mask after&#xA;     * the default read operation has completed.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/io/ObjectInputStream.class.xmi#//@classifiers.0/@members.19"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36"/>
        </statements>
        <catcheBlocks>
          <comments>// assert();</comments>
          <parameter name="pe">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/text/ParseException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isNavigatable">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Returns true if the MaskFormatter allows invalid, or&#xA;     * the offset is less than the max length and the character at&#xA;     * &lt;code>offset&lt;/code> is a literal.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </children>
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.40">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                  </child>
                </children>
              </expression>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="DefaultFormatter.class.xmi#//@classifiers.0/@members.14"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isValidEdit">
      <typeReference xsi:type="types:Boolean">
        <comments>/*&#xA;     * Returns true if the operation described by &lt;code>rh&lt;/code> will&#xA;     * result in a legal edit.  This may set the &lt;code>value&lt;/code>&#xA;     * field of &lt;code>rh&lt;/code>.&#xA;     * &lt;p>&#xA;     * This is overriden to return true for a partial match.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="rh">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="newString">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="DefaultFormatter.class.xmi#//@classifiers.0/@members.27"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.0/@statement/@statements.0/@variable"/>
                  <arguments xsi:type="literals:BooleanLiteral"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral"/>
              </statements>
              <parameter name="pe">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/text/ParseException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="DefaultFormatter.class.xmi#//@classifiers.0/@members.14"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="canReplace">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * This method does the following (assuming !getAllowsInvalid()):&#xA;     * iterate over the max of the deleted region or the text length, for&#xA;     * each character:&#xA;     * &lt;ol>&#xA;     * &lt;li>If it is valid (matches the mask at the particular position, or&#xA;     *     matches the literal character at the position), allow it&#xA;     * &lt;li>Else if the position identifies a literal character, add it. This&#xA;     *     allows for the user to paste in text that may/may not contain&#xA;     *     the literals.  For example, in pasing in 5551212 into ###-####&#xA;     *     when the 1 is evaluated it is illegal (by the first test), but there&#xA;     *     is a literal at this position (-), so it is used.  NOTE: This has&#xA;     *     a problem that you can't tell (without looking ahead) if you should&#xA;     *     eat literals in the text. For example, if you paste '555' into&#xA;     *     #5##, should it result in '5555' or '555 '? The current code will&#xA;     *     result in the latter, which feels a little better as selecting&#xA;     *     text than pasting will always result in the same thing.&#xA;     * &lt;li>Else if at the end of the inserted text, the replace the item with&#xA;     *     the placeholder&#xA;     * &lt;li>Otherwise the insert is bogus and false is returned.&#xA;     * &lt;/ol>&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="rh">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <comments>// This method is rather long, but much of the burden is in</comments>
        <comments>// maintaining a String and swapping to a StringBuffer only if</comments>
        <comments>// absolutely necessary.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="replace">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="literals:NullLiteral"/>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="text">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="tl">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.1/@variable"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </expression>
                </child>
                <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                </expressionIf>
                <expressionElse xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:WhileLoop">
                <comments>// Backspace, adjust to actually delete next non-literal.</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                        </next>
                      </child>
                      <operator xsi:type="operators:MinusMinus"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <relationOperators xsi:type="operators:GreaterThan"/>
                  </children>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.40">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </arguments>
                  </children>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.2/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="JTextComponent.class.xmi#//@classifiers.0/@members.93"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0/@members.6"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </children>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="max">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Math.class.xmi#//@classifiers.0/@members.37"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </children>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/lang/Math.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.2/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.2"/>
                        </next>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/Math.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Math.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="aChar">
                      <typeReference xsi:type="types:Char"/>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.1/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init/@additionalLocalVariables.0"/>
                        </next>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="instantiations:NewConstructorCall">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Condition">
                            <statement xsi:type="statements:Block">
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.1/@variable">
                                      <next xsi:type="references:MethodCall">
                                        <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.56"/>
                                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init/@additionalLocalVariables.0"/>
                                      </next>
                                    </arguments>
                                  </next>
                                </expression>
                              </statements>
                            </statement>
                            <condition xsi:type="expressions:RelationExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init/@additionalLocalVariables.0"/>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                              <relationOperators xsi:type="operators:GreaterThan"/>
                            </condition>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </condition>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                            </next>
                          </children>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
                              <arguments xsi:type="expressions:AdditiveExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                                  <next xsi:type="references:IdentifierReference">
                                    <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                                  </next>
                                </children>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init"/>
                                <additiveOperators xsi:type="operators:Addition"/>
                              </arguments>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@statement/@statements.0/@statement/@statements.0/@variable"/>
                            </arguments>
                          </next>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init/@additionalLocalVariables.0"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init/@additionalLocalVariables.0"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.2/@variable"/>
                    <relationOperators xsi:type="operators:LessThan"/>
                  </children>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                        </next>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.1/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init/@additionalLocalVariables.0"/>
                      </next>
                    </arguments>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
                                <arguments xsi:type="expressions:AdditiveExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                                    <next xsi:type="references:IdentifierReference">
                                      <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                                    </next>
                                  </children>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init"/>
                                  <additiveOperators xsi:type="operators:Addition"/>
                                </arguments>
                              </arguments>
                            </next>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:Condition">
                          <statement xsi:type="statements:Block">
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="expressions:AssignmentExpression">
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.4/@variable"/>
                                <assignmentOperator xsi:type="operators:Assignment"/>
                                <value xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Math.class.xmi#//@classifiers.0/@members.37"/>
                                    <arguments xsi:type="expressions:AdditiveExpression">
                                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.4/@variable"/>
                                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                      <additiveOperators xsi:type="operators:Addition"/>
                                    </arguments>
                                    <arguments xsi:type="expressions:AdditiveExpression">
                                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
                                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                                        <next xsi:type="references:IdentifierReference">
                                          <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                                        </next>
                                      </children>
                                      <additiveOperators xsi:type="operators:Subtraction"/>
                                    </arguments>
                                  </next>
                                  <target xsi:type="classifiers:Class" href="../../../java/lang/Math.class.xmi#//@classifiers.0"/>
                                </value>
                              </expression>
                            </statements>
                          </statement>
                          <condition xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init/@additionalLocalVariables.0"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.2/@variable"/>
                            <relationOperators xsi:type="operators:LessThan"/>
                          </condition>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable"/>
                        <children xsi:type="literals:NullLiteral"/>
                      </condition>
                      <elseStatement xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="instantiations:NewConstructorCall">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.4/@variable"/>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.1/@variable">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.56"/>
                                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init/@additionalLocalVariables.0"/>
                                  </next>
                                </arguments>
                              </next>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
                                  <arguments xsi:type="expressions:AdditiveExpression">
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                                      <next xsi:type="references:IdentifierReference">
                                        <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                                      </next>
                                    </children>
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init"/>
                                    <additiveOperators xsi:type="operators:Addition"/>
                                  </arguments>
                                </arguments>
                              </next>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Condition">
                            <statement xsi:type="statements:Block">
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.4/@variable">
                                    <comments>// Evaluate the character in text again.</comments>
                                  </child>
                                  <assignmentOperator xsi:type="operators:Assignment"/>
                                  <value xsi:type="references:IdentifierReference">
                                    <next xsi:type="references:MethodCall">
                                      <target xsi:type="members:ClassMethod" href="../../../java/lang/Math.class.xmi#//@classifiers.0/@members.37"/>
                                      <arguments xsi:type="expressions:AdditiveExpression">
                                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.4/@variable"/>
                                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                        <additiveOperators xsi:type="operators:Addition"/>
                                      </arguments>
                                      <arguments xsi:type="expressions:AdditiveExpression">
                                        <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
                                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                                          <next xsi:type="references:IdentifierReference">
                                            <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                                          </next>
                                        </children>
                                        <additiveOperators xsi:type="operators:Subtraction"/>
                                      </arguments>
                                    </next>
                                    <target xsi:type="classifiers:Class" href="../../../java/lang/Math.class.xmi#//@classifiers.0"/>
                                  </value>
                                </expression>
                              </statements>
                            </statement>
                            <condition xsi:type="expressions:RelationExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init/@additionalLocalVariables.0"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.2/@variable"/>
                              <relationOperators xsi:type="operators:LessThan"/>
                            </condition>
                            <elseStatement xsi:type="statements:Condition">
                              <statement xsi:type="statements:Block">
                                <statements xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="expressions:AssignmentExpression">
                                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                                      <next xsi:type="references:IdentifierReference">
                                        <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.6"/>
                                      </next>
                                    </child>
                                    <assignmentOperator xsi:type="operators:Assignment"/>
                                    <value xsi:type="expressions:AdditiveExpression">
                                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                                        <next xsi:type="references:IdentifierReference">
                                          <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                                        </next>
                                      </children>
                                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init"/>
                                      <additiveOperators xsi:type="operators:Addition"/>
                                    </value>
                                  </expression>
                                </statements>
                              </statement>
                              <condition xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:Equal"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                                  <next xsi:type="references:IdentifierReference">
                                    <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.6"/>
                                  </next>
                                </children>
                                <children xsi:type="expressions:UnaryExpression">
                                  <operators xsi:type="operators:Subtraction"/>
                                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                </children>
                              </condition>
                            </elseStatement>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init/@additionalLocalVariables.0"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          <relationOperators xsi:type="operators:GreaterThan"/>
                        </condition>
                        <elseStatement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                                <next xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                                </next>
                              </child>
                              <operator xsi:type="operators:PlusPlus"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                                <next xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.2"/>
                                </next>
                              </child>
                              <operator xsi:type="operators:MinusMinus"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init"/>
                              <operator xsi:type="operators:MinusMinus"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.4/@variable"/>
                              <operator xsi:type="operators:MinusMinus"/>
                            </expression>
                          </statements>
                        </elseStatement>
                      </elseStatement>
                    </statements>
                  </statement>
                  <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.40">
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                        </next>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                  </condition>
                  <elseStatement xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <comments>// placeholder</comments>
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="instantiations:NewConstructorCall">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Condition">
                            <statement xsi:type="statements:Block">
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.1/@variable"/>
                                  </next>
                                </expression>
                              </statements>
                            </statement>
                            <condition xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:NotEqual"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.1/@variable"/>
                              <children xsi:type="literals:NullLiteral"/>
                            </condition>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.27"/>
                          </next>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                                <next xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.6"/>
                                </next>
                              </child>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:AdditiveExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                                  <next xsi:type="references:IdentifierReference">
                                    <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                                  </next>
                                </children>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init"/>
                                <additiveOperators xsi:type="operators:Addition"/>
                              </value>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:ConditionalAndExpression">
                          <children xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.2/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                            <relationOperators xsi:type="operators:GreaterThan"/>
                          </children>
                          <children xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.6"/>
                              </next>
                            </children>
                            <children xsi:type="expressions:UnaryExpression">
                              <operators xsi:type="operators:Subtraction"/>
                              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            </children>
                          </children>
                        </condition>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init/@additionalLocalVariables.0"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.2/@variable"/>
                      <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                    </condition>
                    <elseStatement xsi:type="statements:Block">
                      <statements xsi:type="statements:Return">
                        <comments>// Bogus character.</comments>
                        <returnValue xsi:type="literals:BooleanLiteral"/>
                      </statements>
                    </elseStatement>
                  </elseStatement>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.4/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="counter">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <additionalLocalVariables name="textIndex">
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </additionalLocalVariables>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.5/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
                    </next>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.3"/>
                      </next>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.1/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.56"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                            </next>
                          </children>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </arguments>
                      </next>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.1/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </children>
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.2/@variable"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </children>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
                  <relationOperators xsi:type="operators:GreaterThan"/>
                </children>
              </condition>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                      </next>
                      <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="DefaultFormatter.class.xmi#//@classifiers.0/@members.12"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DefaultFormatter$ReplaceHolder.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </children>
                <children xsi:type="literals:NullLiteral"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="DefaultFormatter.class.xmi#//@classifiers.0/@members.14"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="DefaultFormatter.class.xmi#//@classifiers.0/@members.35"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
          </next>
          <self xsi:type="literals:Super"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="MaskCharacter">
      <members xsi:type="members:ClassMethod" name="isLiteral">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Subclasses should override this returning true if the instance&#xA;         * represents a literal character. The default implementation&#xA;         * returns false.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isValidCharacter">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="aChar">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Returns true if &lt;code>aChar&lt;/code> is a valid reprensentation of&#xA;         * the receiver. The default implementation returns true if the&#xA;         * receiver represents a literal character and &lt;code>getChar&lt;/code>&#xA;         * == aChar. Otherwise, this will return true is &lt;code>aChar&lt;/code>&#xA;         * is contained in the valid characters and not contained&#xA;         * in the invalid characters.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.2">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.1/@parameters.0"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.1/@parameters.0"/>
                </expression>
              </returnValue>
            </statements>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.0"/>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.1/@parameters.0"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.2">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.1/@parameters.0"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="filter">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.21"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.1/@statements.2/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.1/@statements.2/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.45"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.1/@parameters.0"/>
                </next>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.1/@statements.2/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.23"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.1/@statements.2/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.1/@statements.2/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.45"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.1/@parameters.0"/>
                </next>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getChar">
        <typeReference xsi:type="types:Char"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="aChar">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Returns the character to insert for &lt;code>aChar&lt;/code>. The&#xA;         * default implementation returns &lt;code>aChar&lt;/code>. Subclasses&#xA;         * that wish to do some sort of mapping, perhaps lower case to upper&#xA;         * case should override this and do the necessary mapping.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.2/@parameters.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="append">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="buff">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="formatting">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="index">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsBefore/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="placeholder">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/text/ParseException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Appends the necessary character in &lt;code>formatting&lt;/code> at&#xA;         * &lt;code>index&lt;/code> to &lt;code>buff&lt;/code>.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="inString">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.2">
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </children>
              <relationOperators xsi:type="operators:LessThan"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="aChar">
            <typeReference xsi:type="types:Char"/>
            <initialValue xsi:type="expressions:ConditionalExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@statements.0/@variable"/>
              <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.2">
                    <arraySelectors>
                      <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </arraySelectors>
                  </arguments>
                </next>
              </expressionIf>
              <expressionElse xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.2">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@statements.1/@variable"/>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:Throw">
                      <throwable xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../java/text/ParseException.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:StringReference" value="Invalid character: "/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@statements.1/@variable"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.2">
                          <arraySelectors>
                            <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          </arraySelectors>
                        </arguments>
                      </throwable>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@statements.0/@variable"/>
                    <children xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@statements.1/@variable"/>
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.2">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@statements.1/@variable"/>
                      </children>
                    </children>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.2">
                      <arraySelectors>
                        <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </arraySelectors>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.2">
                        <arraySelectors>
                          <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        </arraySelectors>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
            </statements>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.0"/>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.3">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.2">
                              <arraySelectors>
                                <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                              </arraySelectors>
                            </arguments>
                          </next>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.3"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </children>
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.2">
                      <arraySelectors>
                        <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </arraySelectors>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.3">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                      </next>
                    </children>
                    <relationOperators xsi:type="operators:LessThan"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.27"/>
                      </next>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.2">
                    <arraySelectors>
                      <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.2">
                      <arraySelectors>
                        <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </arraySelectors>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.2">
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </children>
              <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.2">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@statements.1/@variable"/>
                      </arguments>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.2">
                      <arraySelectors>
                        <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </arraySelectors>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.2">
                        <arraySelectors>
                          <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        </arraySelectors>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.1">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@statements.1/@variable"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:Throw">
                  <throwable xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../java/text/ParseException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:StringReference" value="Invalid character: "/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@statements.1/@variable"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@members.3/@parameters.2">
                      <arraySelectors>
                        <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </arraySelectors>
                    </arguments>
                  </throwable>
                </statements>
              </elseStatement>
            </elseStatement>
          </elseStatement>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>//</comments>
        <comments>// Interal classes used to represent the mask.</comments>
        <comments>//</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="classifiers:Class" name="LiteralCharacter">
      <members xsi:type="members:Field" name="fixedChar">
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Constructor" name="LiteralCharacter">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@members.1/@parameters.0"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="fixedChar">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
      </members>
      <members xsi:type="members:ClassMethod" name="isLiteral">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getChar">
        <typeReference xsi:type="types:Char"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="aChar">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@members.0"/>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Used to represent a fixed character in the mask.&#xA;     */</comments>
      </annotationsAndModifiers>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.49"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="DigitMaskCharacter">
      <members xsi:type="members:ClassMethod" name="isValidCharacter">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="aChar">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Character.class.xmi#//@classifiers.0/@members.108"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@members.0/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Character.class.xmi#//@classifiers.0"/>
              </children>
              <children xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.1">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@members.0/@parameters.0"/>
                </next>
                <self xsi:type="literals:Super"/>
              </children>
            </expression>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Represents a number, uses &lt;code>Character.isDigit&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.49"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="UpperCaseCharacter">
      <members xsi:type="members:ClassMethod" name="isValidCharacter">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="aChar">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Character.class.xmi#//@classifiers.0/@members.112"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@members.0/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Character.class.xmi#//@classifiers.0"/>
              </children>
              <children xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.1">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@members.0/@parameters.0"/>
                </next>
                <self xsi:type="literals:Super"/>
              </children>
            </expression>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getChar">
        <typeReference xsi:type="types:Char"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="aChar">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/Character.class.xmi#//@classifiers.0/@members.130"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@members.1/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Character.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Represents a character, lower case letters are mapped to upper case&#xA;     * using &lt;code>Character.toUpperCase&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.49"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="LowerCaseCharacter">
      <members xsi:type="members:ClassMethod" name="isValidCharacter">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="aChar">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Character.class.xmi#//@classifiers.0/@members.112"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@members.0/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Character.class.xmi#//@classifiers.0"/>
              </children>
              <children xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.1">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@members.0/@parameters.0"/>
                </next>
                <self xsi:type="literals:Super"/>
              </children>
            </expression>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getChar">
        <typeReference xsi:type="types:Char"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="aChar">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/Character.class.xmi#//@classifiers.0/@members.128"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@members.1/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Character.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Represents a character, upper case letters are mapped to lower case&#xA;     * using &lt;code>Character.toLowerCase&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.49"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="AlphaNumericCharacter">
      <members xsi:type="members:ClassMethod" name="isValidCharacter">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="aChar">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Character.class.xmi#//@classifiers.0/@members.114"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@members.0/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Character.class.xmi#//@classifiers.0"/>
              </children>
              <children xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.1">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@members.0/@parameters.0"/>
                </next>
                <self xsi:type="literals:Super"/>
              </children>
            </expression>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Represents either a character or digit, uses&#xA;     * &lt;code>Character.isLetterOrDigit&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.49"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="CharCharacter">
      <members xsi:type="members:ClassMethod" name="isValidCharacter">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="aChar">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Character.class.xmi#//@classifiers.0/@members.112"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@members.0/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Character.class.xmi#//@classifiers.0"/>
              </children>
              <children xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.1">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@members.0/@parameters.0"/>
                </next>
                <self xsi:type="literals:Super"/>
              </children>
            </expression>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Represents a letter, uses &lt;code>Character.isLetter&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.49"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="HexCharacter">
      <members xsi:type="members:ClassMethod" name="isValidCharacter">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="aChar">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="48"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="49"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="50"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="51"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="52"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="53"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="54"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="55"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="56"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="57"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="97"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="65"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="98"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="66"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="99"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="67"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="100"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="68"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="101"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="69"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="102"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                    <children xsi:type="literals:CharacterLiteral" value="70"/>
                  </children>
                </expression>
              </children>
              <children xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.49/@members.1">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.0/@parameters.0"/>
                </next>
                <self xsi:type="literals:Super"/>
              </children>
            </expression>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getChar">
        <typeReference xsi:type="types:Char"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="aChar">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.1/@parameters.0"/>
            </statements>
          </statement>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/Character.class.xmi#//@classifiers.0/@members.108"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.1/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Character.class.xmi#//@classifiers.0"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/Character.class.xmi#//@classifiers.0/@members.130"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.1/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Character.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Represents a hex character, 0-9a-fA-F. a-f is mapped to A-F&#xA;     */</comments>
      </annotationsAndModifiers>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.49"/>
      </extends>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;code>MaskFormatter&lt;/code> is used to format and edit strings. The behavior&#xA; * of a &lt;code>MaskFormatter&lt;/code> is controlled by way of a String mask&#xA; * that specifies the valid characters that can be contained at a particular&#xA; * location in the &lt;code>Document&lt;/code> model. The following characters can&#xA; * be specified:&#xA; *&#xA; * &lt;table border=1 summary=&quot;Valid characters and their descriptions&quot;>&#xA; * &lt;tr>&#xA; *    &lt;th>Character&amp;nbsp;&lt;/th>&#xA; *    &lt;th>&lt;p align=&quot;left&quot;>Description&lt;/p>&lt;/th>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; *    &lt;td>#&lt;/td>&#xA; *    &lt;td>Any valid number, uses &lt;code>Character.isDigit&lt;/code>.&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; *    &lt;td>'&lt;/td>&#xA; *    &lt;td>Escape character, used to escape any of the&#xA; *       special formatting characters.&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; *    &lt;td>U&lt;/td>&lt;td>Any character (&lt;code>Character.isLetter&lt;/code>). All&#xA; *        lowercase letters are mapped to upper case.&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&lt;td>L&lt;/td>&lt;td>Any character (&lt;code>Character.isLetter&lt;/code>). All&#xA; *        upper case letters are mapped to lower case.&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&lt;td>A&lt;/td>&lt;td>Any character or number (&lt;code>Character.isLetter&lt;/code>&#xA; *       or &lt;code>Character.isDigit&lt;/code>)&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&lt;td>?&lt;/td>&lt;td>Any character&#xA; *        (&lt;code>Character.isLetter&lt;/code>).&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&lt;td>*&lt;/td>&lt;td>Anything.&lt;/td>&lt;/tr>&#xA; * &lt;tr>&lt;td>H&lt;/td>&lt;td>Any hex character (0-9, a-f or A-F).&lt;/td>&lt;/tr>&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p>&#xA; * Typically characters correspond to one char, but in certain languages this&#xA; * is not the case. The mask is on a per character basis, and will thus&#xA; * adjust to fit as many chars as are needed.&#xA; * &lt;p>&#xA; * You can further restrict the characters that can be input by the&#xA; * &lt;code>setInvalidCharacters&lt;/code> and &lt;code>setValidCharacters&lt;/code>&#xA; * methods. &lt;code>setInvalidCharacters&lt;/code> allows you to specify&#xA; * which characters are not legal. &lt;code>setValidCharacters&lt;/code> allows&#xA; * you to specify which characters are valid. For example, the following&#xA; * code block is equivalent to a mask of '0xHHH' with no invalid/valid&#xA; * characters:&#xA; * &lt;pre>&#xA; * MaskFormatter formatter = new MaskFormatter(&quot;0x***&quot;);&#xA; * formatter.setValidCharacters(&quot;0123456789abcdefABCDEF&quot;);&#xA; * &lt;/pre>&#xA; * &lt;p>&#xA; * When initially formatting a value if the length of the string is&#xA; * less than the length of the mask, two things can happen. Either&#xA; * the placeholder string will be used, or the placeholder character will&#xA; * be used. Precedence is given to the placeholder string. For example:&#xA; * &lt;pre>&#xA; *   MaskFormatter formatter = new MaskFormatter(&quot;###-####&quot;);&#xA; *   formatter.setPlaceholderCharacter('_');&#xA; *   formatter.getDisplayValue(tf, &quot;123&quot;);&#xA; * &lt;/pre>&#xA; * &lt;p>&#xA; * Would result in the string '123-____'. If&#xA; * &lt;code>setPlaceholder(&quot;555-1212&quot;)&lt;/code> was invoked '123-1212' would&#xA; * result. The placeholder String is only used on the initial format,&#xA; * on subsequent formats only the placeholder character will be used.&#xA; * &lt;p>&#xA; * If a &lt;code>MaskFormatter&lt;/code> is configured to only allow valid characters&#xA; * (&lt;code>setAllowsInvalid(false)&lt;/code>) literal characters will be skipped as&#xA; * necessary when editing. Consider a &lt;code>MaskFormatter&lt;/code> with&#xA; * the mask &quot;###-####&quot; and current value &quot;555-1212&quot;. Using the right&#xA; * arrow key to navigate through the field will result in (| indicates the&#xA; * position of the caret):&#xA; * &lt;pre>&#xA; *   |555-1212&#xA; *   5|55-1212&#xA; *   55|5-1212&#xA; *   555-|1212&#xA; *   555-1|212&#xA; * &lt;/pre>&#xA; * The '-' is a literal (non-editable) character, and is skipped.&#xA; * &lt;p>&#xA; * Similar behavior will result when editing. Consider inserting the string&#xA; * '123-45' and '12345' into the &lt;code>MaskFormatter&lt;/code> in the&#xA; * previous example. Both inserts will result in the same String,&#xA; * '123-45__'. When &lt;code>MaskFormatter&lt;/code>&#xA; * is processing the insert at character position 3 (the '-'), two things can&#xA; * happen:&#xA; * &lt;ol>&#xA; *   &lt;li>If the inserted character is '-', it is accepted.&#xA; *   &lt;li>If the inserted character matches the mask for the next non-literal&#xA; *       character, it is accepted at the new location.&#xA; *   &lt;li>Anything else results in an invalid edit&#xA; * &lt;/ol>&#xA; * &lt;p>&#xA; * By default &lt;code>MaskFormatter&lt;/code> will not allow invalid edits, you can&#xA; * change this with the &lt;code>setAllowsInvalid&lt;/code> method, and will&#xA; * commit edits on valid edits (use the &lt;code>setCommitsOnValidEdit&lt;/code> to&#xA; * change this).&#xA; * &lt;p>&#xA; * By default, &lt;code>MaskFormatter&lt;/code> is in overwrite mode. That is as&#xA; * characters are typed a new character is not inserted, rather the character&#xA; * at the current location is replaced with the newly typed character. You&#xA; * can change this behavior by way of the method &lt;code>setOverwriteMode&lt;/code>.&#xA; * &lt;p>&#xA; * &lt;strong>Warning:&lt;/strong>&#xA; * Serialized objects of this class will not be compatible with&#xA; * future Swing releases. The current serialization support is&#xA; * appropriate for short term storage or RMI between applications running&#xA; * the same version of Swing.  As of 1.4, support for long term storage&#xA; * of all JavaBeans&lt;sup>&lt;font size=&quot;-2&quot;>TM&lt;/font>&lt;/sup>&#xA; * has been added to the &lt;code>java.beans&lt;/code> package.&#xA; * Please see {@link java.beans.XMLEncoder}.&#xA; *&#xA; * @version 1.12 12/19/03&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="DefaultFormatter.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
