<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DefaultFormatterFactory.java">
  <comments>/*&#xA; * @(#)DefaultFormatterFactory.java&#x9;1.8 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <namespaces>text</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>text</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/text/ParseException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <classifier xsi:type="classifiers:Class" href="../JFormattedTextField.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="DefaultFormatterFactory">
    <members xsi:type="members:Field" name="defaultFormat">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>JFormattedTextField</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Default &lt;code>AbstractFormatter&lt;/code> to use if a more specific one has&#xA;     * not been specified.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="displayFormat">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>JFormattedTextField</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;code>JFormattedTextField.AbstractFormatter&lt;/code> to use for display.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="editFormat">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>JFormattedTextField</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;code>JFormattedTextField.AbstractFormatter&lt;/code> to use for editing.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="nullFormat">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>JFormattedTextField</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;code>JFormattedTextField.AbstractFormatter&lt;/code> to use if the value&#xA;     * is null.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DefaultFormatterFactory">
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:Constructor" name="DefaultFormatterFactory">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaultFormat">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>JFormattedTextField</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a &lt;code>DefaultFormatterFactory&lt;/code> with the specified&#xA;     * &lt;code>JFormattedTextField.AbstractFormatter&lt;/code>.&#xA;     *&#xA;     * @param defaultFormat JFormattedTextField.AbstractFormatter to be used&#xA;     *                      if a more specific&#xA;     *                      JFormattedTextField.AbstractFormatter can not be&#xA;     *                      found.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DefaultFormatterFactory">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaultFormat">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>JFormattedTextField</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="displayFormat">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>JFormattedTextField</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a &lt;code>DefaultFormatterFactory&lt;/code> with the specified&#xA;     * &lt;code>JFormattedTextField.AbstractFormatter&lt;/code>s.&#xA;     *&#xA;     * @param defaultFormat JFormattedTextField.AbstractFormatter to be used&#xA;     *                      if a more specific&#xA;     *                      JFormattedTextField.AbstractFormatter can not be&#xA;     *                      found.&#xA;     * @param displayFormat JFormattedTextField.AbstractFormatter to be used&#xA;     *                      when the JFormattedTextField does not have focus.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DefaultFormatterFactory">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.2"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaultFormat">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>JFormattedTextField</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="displayFormat">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>JFormattedTextField</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="editFormat">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>JFormattedTextField</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a DefaultFormatterFactory with the specified&#xA;     * JFormattedTextField.AbstractFormatters.&#xA;     *&#xA;     * @param defaultFormat JFormattedTextField.AbstractFormatter to be used&#xA;     *                      if a more specific&#xA;     *                      JFormattedTextField.AbstractFormatter can not be&#xA;     *                      found.&#xA;     * @param displayFormat JFormattedTextField.AbstractFormatter to be used&#xA;     *                      when the JFormattedTextField does not have focus.&#xA;     * @param editFormat    JFormattedTextField.AbstractFormatter to be used&#xA;     *                      when the JFormattedTextField has focus.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DefaultFormatterFactory">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.3"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaultFormat">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>JFormattedTextField</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="displayFormat">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>JFormattedTextField</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="editFormat">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>JFormattedTextField</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nullFormat">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>JFormattedTextField</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a DefaultFormatterFactory with the specified&#xA;     * JFormattedTextField.AbstractFormatters.&#xA;     *&#xA;     * @param defaultFormat JFormattedTextField.AbstractFormatter to be used&#xA;     *                      if a more specific&#xA;     *                      JFormattedTextField.AbstractFormatter can not be&#xA;     *                      found.&#xA;     * @param displayFormat JFormattedTextField.AbstractFormatter to be used&#xA;     *                      when the JFormattedTextField does not have focus.&#xA;     * @param editFormat    JFormattedTextField.AbstractFormatter to be used&#xA;     *                      when the JFormattedTextField has focus.&#xA;     * @param nullFormat    JFormattedTextField.AbstractFormatter to be used&#xA;     *                      when the JFormattedTextField has a null value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="setDefaultFormatter">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="atf">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>JFormattedTextField</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the &lt;code>JFormattedTextField.AbstractFormatter&lt;/code> to use as&#xA;     * a last resort, eg in case a display, edit or null&#xA;     * &lt;code>JFormattedTextField.AbstractFormatter&lt;/code> has not been&#xA;     * specified.&#xA;     *&#xA;     * @param atf JFormattedTextField.AbstractFormatter used if a more&#xA;     *            specific is not specified&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDefaultFormatter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>JFormattedTextField</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;code>JFormattedTextField.AbstractFormatter&lt;/code> to use&#xA;     * as a last resort, eg in case a display, edit or null&#xA;     * &lt;code>JFormattedTextField.AbstractFormatter&lt;/code>&#xA;     * has not been specified.&#xA;     *&#xA;     * @return JFormattedTextField.AbstractFormatter used if a more specific&#xA;     *         one is not specified.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setDisplayFormatter">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="atf">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>JFormattedTextField</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the &lt;code>JFormattedTextField.AbstractFormatter&lt;/code> to use if&#xA;     * the &lt;code>JFormattedTextField&lt;/code> is not being edited and either&#xA;     * the value is not-null, or the value is null and a null formatter has &#xA;     * has not been specified.&#xA;     *&#xA;     * @param atf JFormattedTextField.AbstractFormatter to use when the&#xA;     *            JFormattedTextField does not have focus&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDisplayFormatter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>JFormattedTextField</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;code>JFormattedTextField.AbstractFormatter&lt;/code> to use&#xA;     * if the &lt;code>JFormattedTextField&lt;/code> is not being edited and either&#xA;     * the value is not-null, or the value is null and a null formatter has &#xA;     * has not been specified.&#xA;     *&#xA;     * @return JFormattedTextField.AbstractFormatter to use when the&#xA;     *         JFormattedTextField does not have focus&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setEditFormatter">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="atf">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>JFormattedTextField</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the &lt;code>JFormattedTextField.AbstractFormatter&lt;/code> to use if&#xA;     * the code>JFormattedTextField&lt;/code> is being edited and either&#xA;     * the value is not-null, or the value is null and a null formatter has &#xA;     * has not been specified.&#xA;     *&#xA;     * @param atf JFormattedTextField.AbstractFormatter to use when the&#xA;     *            component has focus&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEditFormatter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>JFormattedTextField</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;code>JFormattedTextField.AbstractFormatter&lt;/code> to use&#xA;     * if the &lt;code>JFormattedTextField&lt;/code> is being edited and either&#xA;     * the value is not-null, or the value is null and a null formatter has &#xA;     * has not been specified.&#xA;     *&#xA;     * @return JFormattedTextField.AbstractFormatter to use when the&#xA;     *         component has focus&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setNullFormatter">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="atf">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>JFormattedTextField</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the formatter to use if the value of the JFormattedTextField is&#xA;     * null.&#xA;     *&#xA;     * @param atf JFormattedTextField.AbstractFormatter to use when&#xA;     * the value of the JFormattedTextField is null.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNullFormatter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>JFormattedTextField</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the formatter to use if the value is null.&#xA;     *&#xA;     * @return JFormattedTextField.AbstractFormatter to use when the value is&#xA;     *         null&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFormatter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>JFormattedTextField</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="source">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JFormattedTextField.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns either the default formatter, display formatter, editor&#xA;     * formatter or null formatter based on the state of the&#xA;     * JFormattedTextField.&#xA;     *&#xA;     * @param source JFormattedTextField requesting&#xA;     *               JFormattedTextField.AbstractFormatter&#xA;     * @return JFormattedTextField.AbstractFormatter to handle&#xA;     *         formatting duties.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="format">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>JFormattedTextField</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatter.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="value">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../JFormattedTextField.class.xmi#//@classifiers.0/@members.30"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.2/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.14"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/awt/Component.class.xmi#//@classifiers.0/@members.329"/>
              </next>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.12"/>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.10"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@variable"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An implementation of&#xA; * &lt;code>JFormattedTextField.AbstractFormatterFactory&lt;/code>.&#xA; * &lt;code>DefaultFormatterFactory&lt;/code> allows specifying a number of&#xA; * different &lt;code>JFormattedTextField.AbstractFormatter&lt;/code>s that are to&#xA; * be used.&#xA; * The most important one is the default one&#xA; * (&lt;code>setDefaultFormatter&lt;/code>). The default formatter will be used&#xA; * if a more specific formatter could not be found. The following process&#xA; * is used to determine the appropriate formatter to use.&#xA; * &lt;ol>&#xA; *   &lt;li>Is the passed in value null? Use the null formatter.&#xA; *   &lt;li>Does the &lt;code>JFormattedTextField&lt;/code> have focus? Use the edit&#xA; *       formatter.&#xA; *   &lt;li>Otherwise, use the display formatter.&#xA; *   &lt;li>If a non-null &lt;code>AbstractFormatter&lt;/code> has not been found, use&#xA; *       the default formatter.&#xA; * &lt;/ol>&#xA; * &lt;p>&#xA; * The following code shows how to configure a&#xA; * &lt;code>JFormattedTextField&lt;/code> with two&#xA; * &lt;code>JFormattedTextField.AbstractFormatter&lt;/code>s, one for display and&#xA; * one for editing.&#xA; * &lt;pre>&#xA; * JFormattedTextField.AbstractFormatter editFormatter = ...;&#xA; * JFormattedTextField.AbstractFormatter displayFormatter = ...;&#xA; * DefaultFormatterFactory factory = new DefaultFormatterFactory(&#xA; *                 displayFormatter, displayFormatter, editFormatter);&#xA; * JFormattedTextField tf = new JFormattedTextField(factory);&#xA; * &lt;/pre>&#xA; * &lt;p>&#xA; * &lt;strong>Warning:&lt;/strong>&#xA; * Serialized objects of this class will not be compatible with&#xA; * future Swing releases. The current serialization support is&#xA; * appropriate for short term storage or RMI between applications running&#xA; * the same version of Swing.  As of 1.4, support for long term storage&#xA; * of all JavaBeans&lt;sup>&lt;font size=&quot;-2&quot;>TM&lt;/font>&lt;/sup>&#xA; * has been added to the &lt;code>java.beans&lt;/code> package.&#xA; * Please see {@link java.beans.XMLEncoder}.&#xA; *&#xA; * @see javax.swing.JFormattedTextField&#xA; *&#xA; * @version 1.8 12/19/03&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>JFormattedTextField</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../JFormattedTextField$AbstractFormatterFactory.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
