<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DocumentFilter.java">
  <comments>/*&#xA; * @(#)DocumentFilter.java&#x9;1.6 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <namespaces>text</namespaces>
  <classifiers xsi:type="classifiers:Class" name="DocumentFilter">
    <members xsi:type="members:ClassMethod" name="remove">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.3"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Invoked prior to removal of the specified region in the&#xA;     * specified Document. Subclasses that want to conditionally allow&#xA;     * removal should override this and only call supers implementation as&#xA;     * necessary, or call directly into the &lt;code>FilterBypass&lt;/code> as&#xA;     * necessary.&#xA;     *&#xA;     * @param fb FilterBypass that can be used to mutate Document&#xA;     * @param offset the offset from the beginning >= 0&#xA;     * @param length the number of characters to remove >= 0&#xA;     * @exception BadLocationException  some portion of the removal range&#xA;     *   was not a valid part of the document.  The location in the exception&#xA;     *   is the first bad position encountered.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.3/@members.1">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.2"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="insertString">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.3"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="string">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="AttributeSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Invoked prior to insertion of text into the&#xA;     * specified Document. Subclasses that want to conditionally allow&#xA;     * insertion should override this and only call supers implementation as&#xA;     * necessary, or call directly into the FilterBypass.&#xA;     *&#xA;     * @param fb FilterBypass that can be used to mutate Document&#xA;     * @param offset  the offset into the document to insert the content >= 0.&#xA;     *    All positions that track change at or after the given location &#xA;     *    will move.  &#xA;     * @param string the string to insert&#xA;     * @param attr      the attributes to associate with the inserted&#xA;     *   content.  This may be null if there are no attributes.&#xA;     * @exception BadLocationException  the given insert position is not a&#xA;     *   valid position within the document&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.3/@members.2">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.3"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="replace">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.3"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="text">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attrs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="AttributeSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Invoked prior to replacing a region of text in the&#xA;     * specified Document. Subclasses that want to conditionally allow&#xA;     * replace should override this and only call supers implementation as&#xA;     * necessary, or call directly into the FilterBypass.&#xA;     *&#xA;     * @param fb FilterBypass that can be used to mutate Document&#xA;     * @param offset Location in Document&#xA;     * @param length Length of text to delete&#xA;     * @param text Text to insert, null indicates no text to insert&#xA;     * @param attrs AttributeSet indicating attributes of inserted text,&#xA;     *              null is legal.&#xA;     * @exception BadLocationException  the given insert position is not a&#xA;     *   valid position within the document&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.3/@members.3">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.3"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.4"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="FilterBypass">
      <members xsi:type="members:InterfaceMethod" name="getDocument">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Document.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Returns the Document the mutation is occuring on.&#xA;         *&#xA;         * @return Document that remove/insertString will operate on&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      </members>
      <members xsi:type="members:InterfaceMethod" name="remove">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="length">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Removes the specified region of text, bypassing the&#xA;         * DocumentFilter.&#xA;         *&#xA;         * @param offset the offset from the beginning >= 0&#xA;         * @param length the number of characters to remove >= 0&#xA;         * @exception BadLocationException some portion of the removal range&#xA;         *   was not a valid part of the document.  The location in the&#xA;         *   exception is the first bad position encountered.&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      </members>
      <members xsi:type="members:InterfaceMethod" name="insertString">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="string">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="attr">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="AttributeSet.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Inserts the specified text, bypassing the&#xA;         * DocumentFilter.&#xA;         * @param offset  the offset into the document to insert the&#xA;         *   content >= 0. All positions that track change at or after the&#xA;         *   given location will move.  &#xA;         * @param string the string to insert&#xA;         * @param attr the attributes to associate with the inserted&#xA;         *   content.  This may be null if there are no attributes.&#xA;         * @exception BadLocationException  the given insert position is not a&#xA;         *   valid position within the document&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      </members>
      <members xsi:type="members:InterfaceMethod" name="replace">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="length">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="string">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="attrs">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="AttributeSet.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="BadLocationException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Deletes the region of text from &lt;code>offset&lt;/code> to&#xA;         * &lt;code>offset + length&lt;/code>, and replaces it with&#xA;         *  &lt;code>text&lt;/code>.&#xA;         *&#xA;         * @param offset Location in Document&#xA;         * @param length Length of text to delete&#xA;         * @param string Text to insert, null indicates no text to insert&#xA;         * @param attrs AttributeSet indicating attributes of inserted text,&#xA;         *              null is legal.&#xA;         * @exception BadLocationException  the given insert is not a&#xA;         *   valid position within the document&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used as a way to circumvent calling back into the Document to&#xA;     * change it. Document implementations that wish to support&#xA;     * a DocumentFilter must provide an implementation that will&#xA;     * not callback into the DocumentFilter when the following methods&#xA;     * are invoked from the DocumentFilter.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;code>DocumentFilter&lt;/code>, as the name implies, is a filter for the&#xA; * &lt;code>Document&lt;/code> mutation methods. When a &lt;code>Document&lt;/code>&#xA; * containing a &lt;code>DocumentFilter&lt;/code> is modified (either through&#xA; * &lt;code>insert&lt;/code> or &lt;code>remove&lt;/code>), it forwards the appropriate&#xA; * method invocation to the &lt;code>DocumentFilter&lt;/code>. The&#xA; * default implementation allows the modification to&#xA; * occur. Subclasses can filter the modifications by conditionally invoking&#xA; * methods on the superclass, or invoking the necessary methods on&#xA; * the passed in &lt;code>FilterBypass&lt;/code>. Subclasses should NOT call back&#xA; * into the Document for the modification&#xA; * instead call into the superclass or the &lt;code>FilterBypass&lt;/code>.&#xA; * &lt;p>&#xA; * When &lt;code>remove&lt;/code> or &lt;code>insertString&lt;/code> is invoked&#xA; * on the &lt;code>DocumentFilter&lt;/code>, the &lt;code>DocumentFilter&lt;/code>&#xA; * may callback into the&#xA; * &lt;code>FilterBypass&lt;/code> multiple times, or for different regions, but&#xA; * it should not callback into the &lt;code>FilterBypass&lt;/code> after returning&#xA; * from the &lt;code>remove&lt;/code> or &lt;code>insertString&lt;/code> method.&#xA; *&#xA; * @see javax.swing.text.Document&#xA; *&#xA; * @version 1.6 12/19/03&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
