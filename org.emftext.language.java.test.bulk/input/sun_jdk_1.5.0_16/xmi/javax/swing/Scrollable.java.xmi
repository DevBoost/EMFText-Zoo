<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="Scrollable.java">
  <comments>/*&#xA; * @(#)Scrollable.java&#x9;1.12 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/awt/Dimension.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Scrollable">
    <members xsi:type="members:InterfaceMethod" name="getPreferredScrollableViewportSize">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the preferred size of the viewport for a view component.&#xA;     * For example, the preferred size of a &lt;code>JList&lt;/code> component&#xA;     * is the size required to accommodate all of the cells in its list.&#xA;     * However, the value of &lt;code>preferredScrollableViewportSize&lt;/code>&#xA;     * is the size required for &lt;code>JList.getVisibleRowCount&lt;/code> rows.&#xA;     * A component without any properties that would affect the viewport&#xA;     * size should just return &lt;code>getPreferredSize&lt;/code> here.&#xA;     * &#xA;     * @return the preferredSize of a &lt;code>JViewport&lt;/code> whose view&#xA;     *    is this &lt;code>Scrollable&lt;/code>&#xA;     * @see JViewport#getPreferredSize&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../java/awt/Dimension.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getScrollableUnitIncrement">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Components that display logical rows or columns should compute&#xA;     * the scroll increment that will completely expose one new row&#xA;     * or column, depending on the value of orientation.  Ideally, &#xA;     * components should handle a partially exposed row or column by &#xA;     * returning the distance required to completely expose the item.&#xA;     * &lt;p>&#xA;     * Scrolling containers, like JScrollPane, will use this method&#xA;     * each time the user requests a unit scroll.&#xA;     * &#xA;     * @param visibleRect The view area visible within the viewport&#xA;     * @param orientation Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.&#xA;     * @param direction Less than zero to scroll up/left, greater than zero for down/right.&#xA;     * @return The &quot;unit&quot; increment for scrolling in the specified direction.&#xA;     *         This value should always be positive.&#xA;     * @see JScrollBar#setUnitIncrement&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="visibleRect">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orientation">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="direction">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getScrollableBlockIncrement">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Components that display logical rows or columns should compute&#xA;     * the scroll increment that will completely expose one block&#xA;     * of rows or columns, depending on the value of orientation. &#xA;     * &lt;p>&#xA;     * Scrolling containers, like JScrollPane, will use this method&#xA;     * each time the user requests a block scroll.&#xA;     * &#xA;     * @param visibleRect The view area visible within the viewport&#xA;     * @param orientation Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.&#xA;     * @param direction Less than zero to scroll up/left, greater than zero for down/right.&#xA;     * @return The &quot;block&quot; increment for scrolling in the specified direction.&#xA;     *         This value should always be positive.&#xA;     * @see JScrollBar#setBlockIncrement&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="visibleRect">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orientation">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="direction">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getScrollableTracksViewportWidth">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Return true if a viewport should always force the width of this &#xA;     * &lt;code>Scrollable&lt;/code> to match the width of the viewport. &#xA;     * For example a normal &#xA;     * text view that supported line wrapping would return true here, since it&#xA;     * would be undesirable for wrapped lines to disappear beyond the right&#xA;     * edge of the viewport.  Note that returning true for a Scrollable&#xA;     * whose ancestor is a JScrollPane effectively disables horizontal&#xA;     * scrolling.&#xA;     * &lt;p>&#xA;     * Scrolling containers, like JViewport, will use this method each &#xA;     * time they are validated.  &#xA;     * &#xA;     * @return True if a viewport should force the Scrollables width to match its own.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getScrollableTracksViewportHeight">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Return true if a viewport should always force the height of this &#xA;     * Scrollable to match the height of the viewport.  For example a &#xA;     * columnar text view that flowed text in left to right columns &#xA;     * could effectively disable vertical scrolling by returning&#xA;     * true here.&#xA;     * &lt;p>&#xA;     * Scrolling containers, like JViewport, will use this method each &#xA;     * time they are validated.  &#xA;     * &#xA;     * @return True if a viewport should force the Scrollables height to match its own.&#xA;     */</comments>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** &#xA; * An interface that provides information to a scrolling container&#xA; * like JScrollPane.  A complex component that's likely to be used &#xA; * as a viewing a JScrollPane viewport (or other scrolling container) &#xA; * should implement this interface.&#xA; * &#xA; * @see JViewport&#xA; * @see JScrollPane&#xA; * @see JScrollBar&#xA; * @version 1.12 12/19/03&#xA; * @author Hans Muller&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
