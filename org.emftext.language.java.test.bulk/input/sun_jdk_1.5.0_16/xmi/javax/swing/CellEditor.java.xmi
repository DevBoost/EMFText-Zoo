<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="CellEditor.java">
  <comments>/*&#xA; * @(#)CellEditor.java&#x9;1.24 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/util/EventObject.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="CellEditor">
    <members xsi:type="members:InterfaceMethod" name="getCellEditorValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value contained in the editor.&#xA;     * @return the value contained in the editor&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isCellEditable">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="anEvent">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/util/EventObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Asks the editor if it can start editing using &lt;code>anEvent&lt;/code>.&#xA;     * &lt;code>anEvent&lt;/code> is in the invoking component coordinate system.&#xA;     * The editor can not assume the Component returned by&#xA;     * &lt;code>getCellEditorComponent&lt;/code> is installed.  This method&#xA;     * is intended for the use of client to avoid the cost of setting up&#xA;     * and installing the editor component if editing is not possible.&#xA;     * If editing can be started this method returns true.&#xA;     * &#xA;     * @param&#x9;anEvent&#x9;&#x9;the event the editor should use to consider&#xA;     *&#x9;&#x9;&#x9;&#x9;whether to begin editing or not&#xA;     * @return&#x9;true if editing can be started&#xA;     * @see #shouldSelectCell&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="shouldSelectCell">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="anEvent">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/util/EventObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns true if the editing cell should be selected, false otherwise.&#xA;     * Typically, the return value is true, because is most cases the editing&#xA;     * cell should be selected.  However, it is useful to return false to&#xA;     * keep the selection from changing for some types of edits.&#xA;     * eg. A table that contains a column of check boxes, the user might&#xA;     * want to be able to change those checkboxes without altering the&#xA;     * selection.  (See Netscape Communicator for just such an example) &#xA;     * Of course, it is up to the client of the editor to use the return&#xA;     * value, but it doesn't need to if it doesn't want to.&#xA;     *&#xA;     * @param&#x9;anEvent&#x9;&#x9;the event the editor should use to start&#xA;     *&#x9;&#x9;&#x9;&#x9;editing&#xA;     * @return&#x9;true if the editor would like the editing cell to be selected;&#xA;     *    otherwise returns false&#xA;     * @see #isCellEditable&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="stopCellEditing">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tells the editor to stop editing and accept any partially edited&#xA;     * value as the value of the editor.  The editor returns false if&#xA;     * editing was not stopped; this is useful for editors that validate&#xA;     * and can not accept invalid entries.&#xA;     *&#xA;     * @return&#x9;true if editing was stopped; false otherwise&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="cancelCellEditing">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tells the editor to cancel editing and not accept any partially&#xA;     * edited value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addCellEditorListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/CellEditorListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a listener to the list that's notified when the editor &#xA;     * stops, or cancels editing.&#xA;     *&#xA;     * @param&#x9;l&#x9;&#x9;the CellEditorListener&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeCellEditorListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/CellEditorListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes a listener from the list that's notified&#xA;     *&#xA;     * @param&#x9;l&#x9;&#x9;the CellEditorListener&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This interface defines the methods any general editor should be able&#xA; * to implement. &lt;p>&#xA; *&#xA; * Having this interface enables complex components (the client of the&#xA; * editor) such as &lt;code>JList&lt;/code>, &lt;code>JTree&lt;/code>, and&#xA; * &lt;code>JTable&lt;/code> to allow any generic editor to&#xA; * edit values in a table cell, or tree cell, etc.  Without this generic&#xA; * editor interface, &lt;code>JTable&lt;/code> would have to know about specific editors,&#xA; * such as &lt;code>JTextField&lt;/code>, &lt;code>JCheckBox&lt;/code>, &lt;code>JComboBox&lt;/code>,&#xA; * etc.  In addition, without this interface, clients of editors such as&#xA; * &lt;code>JTable&lt;/code> would not be able&#xA; * to work with any editors developed in the future by the user&#xA; * or a 3rd party ISV. &lt;p>&#xA; *&#xA; * To use this interface, a developer creating a new editor can have the&#xA; * new component implement the interface.  Or the developer can&#xA; * choose a wrapper based approach and provide a companion object which&#xA; * implements the &lt;code>CellEditor&lt;/code> interface (See&#xA; * &lt;code>JCellEditor&lt;/code> for example).  The wrapper approach&#xA; * is particularly useful if the user want to use a 3rd party ISV &#xA; * editor with &lt;code>JTable&lt;/code>, but the ISV didn't implement the&#xA; * &lt;code>CellEditor&lt;/code> interface.  The user can simply create an object &#xA; * that contains an instance of the 3rd party editor object and &quot;translate&quot;&#xA; * the &lt;code>CellEditor&lt;/code> API into the 3rd party editor's API.&#xA; *&#xA; * @see javax.swing.event.CellEditorListener&#xA; *&#xA; * @version 1.24 12/19/03&#xA; * @author Alan Chung&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
