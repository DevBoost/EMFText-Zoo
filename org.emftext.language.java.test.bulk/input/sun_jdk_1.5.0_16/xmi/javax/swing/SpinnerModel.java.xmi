<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="SpinnerModel.java">
  <comments>/*&#xA; * @(#)SpinnerModel.java&#x9;1.6 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="SpinnerModel">
    <members xsi:type="members:InterfaceMethod" name="getValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * The &lt;i>current element&lt;/i> of the sequence.  This element is usually&#xA;     * displayed by the &lt;code>editor&lt;/code> part of a &lt;code>JSpinner&lt;/code>.&#xA;     * &#xA;     * @return the current spinner value.&#xA;     * @see #setValue&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setValue">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Changes current value of the model, typically this value is displayed &#xA;     * by the &lt;code>editor&lt;/code> part of a  &lt;code>JSpinner&lt;/code>.  &#xA;     * If the &lt;code>SpinnerModel&lt;/code> implementation doesn't support &#xA;     * the specified value then an &lt;code>IllegalArgumentException&lt;/code> &#xA;     * is thrown.  For example a &lt;code>SpinnerModel&lt;/code> for numbers might &#xA;     * only support values that are integer multiples of ten. In&#xA;     * that case, &lt;code>model.setValue(new Number(11))&lt;/code>&#xA;     * would throw an exception.&#xA;     * &#xA;     * @throws IllegalArgumentException if &lt;code>value&lt;/code> isn't allowed&#xA;     * @see #getValue&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNextValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the object in the sequence that comes after the object returned &#xA;     * by &lt;code>getValue()&lt;/code>. If the end of the sequence has been reached &#xA;     * then return null.  Calling this method does not effect &lt;code>value&lt;/code>.&#xA;     * &#xA;     * @return the next legal value or null if one doesn't exist&#xA;     * @see #getValue&#xA;     * @see #getPreviousValue&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPreviousValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the object in the sequence that comes before the object returned &#xA;     * by &lt;code>getValue()&lt;/code>.  If the end of the sequence has been reached then &#xA;     * return null. Calling this method does not effect &lt;code>value&lt;/code>.&#xA;     * &#xA;     * @return the previous legal value or null if one doesn't exist&#xA;     * @see #getValue&#xA;     * @see #getNextValue&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addChangeListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Adds a &lt;code>ChangeListener&lt;/code> to the model's listener list.  The &#xA;     * &lt;code>ChangeListeners&lt;/code> must be notified when models &lt;code>value&lt;/code> &#xA;     * changes.&#xA;     *&#xA;     * @param l the ChangeListener to add&#xA;     * @see #removeChangeListener&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeChangeListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Removes a &lt;code>ChangeListener&lt;/code> from the model's listener list.&#xA;     *&#xA;     * @param l the ChangeListener to remove&#xA;     * @see #addChangeListener&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A model for a potentially unbounded sequence of object values.  This model&#xA; * is similar to &lt;code>ListModel&lt;/code> however there are some important differences:&#xA; * &lt;ul>&#xA; * &lt;li> The number of sequence elements isn't neccessarily bounded.&#xA; * &lt;li> The model doesn't support indexed random access to sequence elements.&#xA; *      Only three sequence values are accessible at a time: current, next and&#xA; *      previous.&#xA; * &lt;li> The current sequence element, can be set.&#xA; * &lt;/ul>&#xA; * &lt;p>&#xA; * A &lt;code>SpinnerModel&lt;/code> has three properties, only the first is read/write.&#xA; * &lt;dl>&#xA; *   &lt;dt>&lt;code>value&lt;/code>&#xA; *   &lt;dd>The current element of the sequence.  &#xA; * &#xA; *   &lt;dt>&lt;code>nextValue&lt;/code>&#xA; *   &lt;dd>The following element or null if &lt;code>value&lt;/code> is the &#xA; *     last element of the sequence.&#xA; * &#xA; *   &lt;dt>&lt;code>previousValue&lt;/code>&#xA; *   &lt;dd>The preceeding element or null if &lt;code>value&lt;/code> is the &#xA; *     first element of the sequence.&#xA; * &lt;/dl>&#xA; * When the the &lt;code>value&lt;/code> property changes, &#xA; * &lt;code>ChangeListeners&lt;/code> are notified.  &lt;code>SpinnerModel&lt;/code> may&#xA; * choose to notify the &lt;code>ChangeListeners&lt;/code> under other circumstances.&#xA; * &#xA; * @see JSpinner&#xA; * @see AbstractSpinnerModel&#xA; * @see SpinnerListModel&#xA; * @see SpinnerNumberModel&#xA; * @see SpinnerDateModel&#xA; * &#xA; * @version 1.6 12/19/03&#xA; * @author Hans Muller&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
