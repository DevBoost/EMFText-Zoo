<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ComponentUI.java">
  <comments>/*&#xA; * @(#)ComponentUI.java&#x9;1.24 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <namespaces>plaf</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <classifier xsi:type="classifiers:Class" href="../JComponent.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SwingUtilities.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>accessibility</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../accessibility/Accessible.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/awt/Container.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/awt/Dimension.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/awt/Graphics.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/awt/Insets.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ComponentUI">
    <members xsi:type="members:Constructor" name="ComponentUI">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sole constructor. (For invocation by subclass constructors,&#xA;     * typically implicit.)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="installUI">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Configures the specified component appropriate for the look and feel.&#xA;     * This method is invoked when the &lt;code>ComponentUI&lt;/code> instance is being installed&#xA;     * as the UI delegate on the specified component.  This method should&#xA;     * completely configure the component for the look and feel,&#xA;     * including the following:&#xA;     * &lt;ol>&#xA;     * &lt;li>Install any default property values for color, fonts, borders,&#xA;     *     icons, opacity, etc. on the component.  Whenever possible, &#xA;     *     property values initialized by the client program should &lt;i>not&lt;/i> &#xA;     *     be overridden.&#xA;     * &lt;li>Install a &lt;code>LayoutManager&lt;/code> on the component if necessary.&#xA;     * &lt;li>Create/add any required sub-components to the component.&#xA;     * &lt;li>Create/install event listeners on the component.&#xA;     * &lt;li>Create/install a &lt;code>PropertyChangeListener&lt;/code> on the component in order&#xA;     *     to detect and respond to component property changes appropriately.&#xA;     * &lt;li>Install keyboard UI (mnemonics, traversal, etc.) on the component.&#xA;     * &lt;li>Initialize any appropriate instance data.&#xA;     * &lt;/ol>&#xA;     * @param c the component where this UI delegate is being installed&#xA;     *&#xA;     * @see #uninstallUI&#xA;     * @see javax.swing.JComponent#setUI&#xA;     * @see javax.swing.JComponent#updateUI&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="uninstallUI">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reverses configuration which was done on the specified component during&#xA;     * &lt;code>installUI&lt;/code>.  This method is invoked when this &#xA;     * &lt;code>UIComponent&lt;/code> instance is being removed as the UI delegate &#xA;     * for the specified component.  This method should undo the&#xA;     * configuration performed in &lt;code>installUI&lt;/code>, being careful to &#xA;     * leave the &lt;code>JComponent&lt;/code> instance in a clean state (no &#xA;     * extraneous listeners, look-and-feel-specific property objects, etc.).&#xA;     * This should include the following:&#xA;     * &lt;ol>&#xA;     * &lt;li>Remove any UI-set borders from the component.&#xA;     * &lt;li>Remove any UI-set layout managers on the component.&#xA;     * &lt;li>Remove any UI-added sub-components from the component.&#xA;     * &lt;li>Remove any UI-added event/property listeners from the component.&#xA;     * &lt;li>Remove any UI-installed keyboard UI from the component.&#xA;     * &lt;li>Nullify any allocated instance data objects to allow for GC.&#xA;     * &lt;/ol>&#xA;     * @param c the component from which this UI delegate is being removed;&#xA;     *          this argument is often ignored,&#xA;     *          but might be used if the UI object is stateless&#xA;     *          and shared by multiple components&#xA;     *&#xA;     * @see #installUI&#xA;     * @see javax.swing.JComponent#updateUI&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="paint">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="g">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/awt/Graphics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Paints the specified component appropriate for the look and feel.&#xA;     * This method is invoked from the &lt;code>ComponentUI.update&lt;/code> method when &#xA;     * the specified component is being painted.  Subclasses should override &#xA;     * this method and use the specified &lt;code>Graphics&lt;/code> object to &#xA;     * render the content of the component.&#xA;     *&#xA;     * @param g the &lt;code>Graphics&lt;/code> context in which to paint&#xA;     * @param c the component being painted;&#xA;     *          this argument is often ignored,&#xA;     *          but might be used if the UI object is stateless&#xA;     *          and shared by multiple components&#xA;     *&#xA;     * @see #update&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="update">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="g">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/awt/Graphics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Notifies this UI delegate that it's time to paint the specified&#xA;     * component.  This method is invoked by &lt;code>JComponent&lt;/code> &#xA;     * when the specified component is being painted. &#xA;     * By default this method will fill the specified component with&#xA;     * its background color (if its &lt;code>opaque&lt;/code> property is&#xA;     * &lt;code>true&lt;/code>) and then immediately call &lt;code>paint&lt;/code>.&#xA;     * In general this method need not be overridden by subclasses;&#xA;     * all look-and-feel rendering code should reside in the &lt;code>paint&lt;/code>&#xA;     * method.&#xA;     *&#xA;     * @param g the &lt;code>Graphics&lt;/code> context in which to paint&#xA;     * @param c the component being painted;&#xA;     *          this argument is often ignored,&#xA;     *          but might be used if the UI object is stateless&#xA;     *          and shared by multiple components&#xA;     * &#xA;     * @see #paint&#xA;     * @see javax.swing.JComponent#paintComponent&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/awt/Graphics.class.xmi#//@classifiers.0/@members.5"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/awt/Component.class.xmi#//@classifiers.0/@members.135"/>
                  </next>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/awt/Graphics.class.xmi#//@classifiers.0/@members.19"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../JComponent.class.xmi#//@classifiers.0/@members.201"/>
                  </next>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../JComponent.class.xmi#//@classifiers.0/@members.202"/>
                  </next>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../JComponent.class.xmi#//@classifiers.0/@members.203"/>
          </next>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.3">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPreferredSize">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/awt/Dimension.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the specified component's preferred size appropriate for&#xA;     * the look and feel.  If &lt;code>null&lt;/code> is returned, the preferred&#xA;     * size will be calculated by the component's layout manager instead &#xA;     * (this is the preferred approach for any component with a specific&#xA;     * layout manager installed).  The default implementation of this &#xA;     * method returns &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @param c the component whose preferred size is being queried;&#xA;     *          this argument is often ignored,&#xA;     *          but might be used if the UI object is stateless&#xA;     *          and shared by multiple components&#xA;     *&#xA;     * @see javax.swing.JComponent#getPreferredSize&#xA;     * @see java.awt.LayoutManager#preferredLayoutSize&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMinimumSize">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/awt/Dimension.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the specified component's minimum size appropriate for&#xA;     * the look and feel.  If &lt;code>null&lt;/code> is returned, the minimum&#xA;     * size will be calculated by the component's layout manager instead &#xA;     * (this is the preferred approach for any component with a specific&#xA;     * layout manager installed).  The default implementation of this &#xA;     * method invokes &lt;code>getPreferredSize&lt;/code> and returns that value.&#xA;     *&#xA;     * @param c the component whose minimum size is being queried;&#xA;     *          this argument is often ignored,&#xA;     *          but might be used if the UI object is stateless&#xA;     *          and shared by multiple components&#xA;     *&#xA;     * @return a &lt;code>Dimension&lt;/code> object or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @see javax.swing.JComponent#getMinimumSize&#xA;     * @see java.awt.LayoutManager#minimumLayoutSize&#xA;     * @see #getPreferredSize&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaximumSize">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/awt/Dimension.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the specified component's maximum size appropriate for&#xA;     * the look and feel.  If &lt;code>null&lt;/code> is returned, the maximum&#xA;     * size will be calculated by the component's layout manager instead &#xA;     * (this is the preferred approach for any component with a specific&#xA;     * layout manager installed).  The default implementation of this &#xA;     * method invokes &lt;code>getPreferredSize&lt;/code> and returns that value.&#xA;     *&#xA;     * @param c the component whose maximum size is being queried;&#xA;     *          this argument is often ignored,&#xA;     *          but might be used if the UI object is stateless&#xA;     *          and shared by multiple components&#xA;     * @return a &lt;code>Dimension&lt;/code> object or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @see javax.swing.JComponent#getMaximumSize&#xA;     * @see java.awt.LayoutManager2#maximumLayoutSize&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="contains">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> if the specified &lt;i>x,y&lt;/i> location is&#xA;     * contained within the look and feel's defined shape of the specified &#xA;     * component. &lt;code>x&lt;/code> and &lt;code>y&lt;/code> are defined to be relative&#xA;     * to the coordinate system of the specified component.  Although&#xA;     * a component's &lt;code>bounds&lt;/code> is constrained to a rectangle,&#xA;     * this method provides the means for defining a non-rectangular&#xA;     * shape within those bounds for the purpose of hit detection.&#xA;     *&#xA;     * @param c the component where the &lt;i>x,y&lt;/i> location is being queried;&#xA;     *          this argument is often ignored,&#xA;     *          but might be used if the UI object is stateless&#xA;     *          and shared by multiple components&#xA;     * @param x the &lt;i>x&lt;/i> coordinate of the point&#xA;     * @param y the &lt;i>y&lt;/i> coordinate of the point&#xA;     *&#xA;     * @see javax.swing.JComponent#contains&#xA;     * @see java.awt.Component#contains&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/awt/Component.class.xmi#//@classifiers.0/@members.227"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.2"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createUI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an instance of the UI delegate for the specified component.&#xA;     * Each subclass must provide its own static &lt;code>createUI&lt;/code>&#xA;     * method that returns an instance of that UI delegate subclass.&#xA;     * If the UI delegate subclass is stateless, it may return an instance&#xA;     * that is shared by multiple components.  If the UI delegate is&#xA;     * stateful, then it should return a new instance per component.&#xA;     * The default implementation of this method throws an error, as it&#xA;     * should never be invoked.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Error.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="ComponentUI.createUI not implemented."/>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAccessibleChildrenCount">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of accessible children in the object.  If all&#xA;     * of the children of this object implement &lt;code>Accessible&lt;/code>,&#xA;     * this&#xA;     * method should return the number of children of this object.&#xA;     * UIs might wish to override this if they present areas on the&#xA;     * screen that can be viewed as components, but actual components&#xA;     * are not used for presenting those areas.&#xA;     *&#xA;     * Note: As of v1.3, it is recommended that developers call&#xA;     * &lt;code>Component.AccessibleAWTComponent.getAccessibleChildrenCount()&lt;/code> instead&#xA;     * of this method.&#xA;     *&#xA;     * @see #getAccessibleChild&#xA;     * @return the number of accessible children in the object&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../SwingUtilities.class.xmi#//@classifiers.0/@members.39"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          </next>
          <target xsi:type="classifiers:Class" href="../SwingUtilities.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAccessibleChild">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../accessibility/Accessible.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../JComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;code>i&lt;/code>th &lt;code>Accessible&lt;/code> child of the object.&#xA;     * UIs might need to override this if they present areas on the&#xA;     * screen that can be viewed as components, but actual components&#xA;     * are not used for presenting those areas.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * Note: As of v1.3, it is recommended that developers call&#xA;     * &lt;code>Component.AccessibleAWTComponent.getAccessibleChild()&lt;/code> instead of&#xA;     * this method.&#xA;     *&#xA;     * @see #getAccessibleChildrenCount&#xA;     * @param i zero-based index of child&#xA;     * @return the &lt;code>i&lt;/code>th &lt;code>Accessible&lt;/code> child of the object&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../SwingUtilities.class.xmi#//@classifiers.0/@members.40"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="../SwingUtilities.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The base class for all UI delegate objects in the Swing pluggable&#xA; * look and feel architecture.  The UI delegate object for a Swing&#xA; * component is responsible for implementing the aspects of the&#xA; * component that depend on the look and feel.&#xA; * The &lt;code>JComponent&lt;/code> class &#xA; * invokes methods from this class in order to delegate operations&#xA; * (painting, layout calculations, etc.) that may vary depending on the&#xA; * look and feel installed.  &lt;b>Client programs should not invoke methods&#xA; * on this class directly.&lt;/b>&#xA; * &#xA; * @see javax.swing.JComponent&#xA; * @see javax.swing.UIManager &#xA; * &#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
