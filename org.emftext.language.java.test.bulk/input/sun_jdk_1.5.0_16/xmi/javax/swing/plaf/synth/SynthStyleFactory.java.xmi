<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="SynthStyleFactory.java">
  <comments>/*&#xA; * @(#)SynthStyleFactory.java&#x9;1.8 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <namespaces>plaf</namespaces>
  <namespaces>synth</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>plaf</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="SynthStyleFactory">
    <members xsi:type="members:Constructor" name="SynthStyleFactory">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a &lt;code>SynthStyleFactory&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStyle">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SynthStyle.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../JComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Region.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the style for the specified Component.&#xA;     *&#xA;     * @param c Component asking for&#xA;     * @param id Region identifier&#xA;     * @return SynthStyle for region.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Factory used for obtaining &lt;code>SynthStyle&lt;/code>s.  Each of the&#xA; * Synth &lt;code>ComponentUI&lt;/code>s will call into the current&#xA; * &lt;code>SynthStyleFactory&lt;/code> to obtain a &lt;code>SynthStyle&lt;/code>&#xA; * for each of the distinct regions they have.&#xA; * &lt;p>&#xA; * The following example creates a custom &lt;code>SynthStyleFactory&lt;/code>&#xA; * that returns a different style based on the &lt;code>Region&lt;/code>:&#xA; * &lt;pre>&#xA; * class MyStyleFactory extends SynthStyleFactory {&#xA; *     public SynthStyle getStyle(JComponent c, Region id) {&#xA; *         if (id == Region.BUTTON) {&#xA; *             return buttonStyle;&#xA; *         }&#xA; *         else if (id == Region.TREE) {&#xA; *             return treeStyle;&#xA; *         }&#xA; *         return defaultStyle;&#xA; *     }&#xA; * }&#xA; * SynthLookAndFeel laf = new SynthLookAndFeel();&#xA; * UIManager.setLookAndFeel(laf);&#xA; * SynthLookAndFeel.setStyleFactory(new MyStyleFactory());&#xA; * &lt;/pre>&#xA; *&#xA; * @see SynthStyleFactory&#xA; * @see SynthStyle&#xA; *&#xA; * @version 1.8, 12/19/03&#xA; * @since 1.5&#xA; * @author Scott Violet&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
