<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:modifiers="http://www.emftext.org/java/modifiers" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/modifiers ../../../java.ecore#/11" name="UIResource.java">
  <comments>/*&#xA; * @(#)UIResource.java&#x9;1.10 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <namespaces>plaf</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="UIResource">
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** &#xA; * This interface is used to mark objects created by ComponentUI delegates.&#xA; * The &lt;code>ComponentUI.installUI()&lt;/code> and &#xA; * &lt;code>ComponentUI.uninstallUI()&lt;/code> methods can use this interface&#xA; * to decide if a properties value has been overridden.  For example, the&#xA; * JList cellRenderer property is initialized by BasicListUI.installUI(),&#xA; * only if it's initial value is null:&#xA; * &lt;pre>&#xA; * if (list.getCellRenderer() == null) {&#xA; *     list.setCellRenderer((ListCellRenderer)(UIManager.get(&quot;List.cellRenderer&quot;)));&#xA; * }&#xA; * &lt;/pre>&#xA; * At uninstallUI() time we reset the property to null if its value&#xA; * is an instance of UIResource:&#xA; * &lt;pre>&#xA; * if (list.getCellRenderer() instanceof UIResource) {&#xA; *     list.setCellRenderer(null);&#xA; * }&#xA; *&lt;/pre>&#xA; * This pattern applies to all properties except the java.awt.Component&#xA; * properties font, foreground, and background.  If one of these&#xA; * properties isn't initialized, or is explicitly set to null, &#xA; * its container provides the value.  For this reason the &#xA; * &lt;code>&quot;== null&quot;&lt;/code> is unreliable when installUI() is called&#xA; * to dynamically change a components look and feel.  So at installUI() &#xA; * time we check to see if the current value is a UIResource:&#xA; *&lt;pre>&#xA; * if (!(list.getFont() instanceof UIResource)) {&#xA; *     list.setFont(UIManager.getFont(&quot;List.font&quot;));&#xA; * }&#xA; * &lt;/pre>&#xA; *&#xA; * @see ComponentUI&#xA; * @version 1.10 12/19/03&#xA; * @author Hans Muller&#xA; * &#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
