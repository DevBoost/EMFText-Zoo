<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/types ../../java.ecore#/16" name="Action.java">
  <comments>/*&#xA; * @(#)Action.java&#x9;1.30 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>beans</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Action">
    <members xsi:type="members:Field" name="DEFAULT">
      <initialValue xsi:type="references:StringReference" value="Default"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Useful constants that can be used as the storage-retrieval key &#xA;     * when setting or getting one of this object's properties (text&#xA;     * or icon).&#xA;     */</comments>
        <comments>/**&#xA;     * Not currently used.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NAME">
      <initialValue xsi:type="references:StringReference" value="Name"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * The key used for storing the &lt;code>String&lt;/code> name&#xA;     * for the action, used for a menu or button.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHORT_DESCRIPTION">
      <initialValue xsi:type="references:StringReference" value="ShortDescription"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The key used for storing a short &lt;code>String&lt;/code>&#xA;     * description for the action, used for tooltip text.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="LONG_DESCRIPTION">
      <initialValue xsi:type="references:StringReference" value="LongDescription"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The key used for storing a longer &lt;code>String&lt;/code>&#xA;     * description for the action, could be used for context-sensitive help.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SMALL_ICON">
      <initialValue xsi:type="references:StringReference" value="SmallIcon"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The key used for storing a small &lt;code>Icon&lt;/code>, such&#xA;     * as &lt;code>ImageIcon&lt;/code>, for the action, used for toolbar buttons.  &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ACTION_COMMAND_KEY">
      <initialValue xsi:type="references:StringReference" value="ActionCommandKey"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The key used to determine the command &lt;code>String&lt;/code> for the&#xA;     * &lt;code>ActionEvent&lt;/code> that will be created when an&#xA;     * &lt;code>Action&lt;/code> is going to be notified as the result of&#xA;     * residing in a &lt;code>Keymap&lt;/code> associated with a&#xA;     * &lt;code>JComponent&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ACCELERATOR_KEY">
      <initialValue xsi:type="references:StringReference" value="AcceleratorKey"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The key used for storing a &lt;code>KeyStroke&lt;/code> to be used as the&#xA;     * accelerator for the action.&#xA;     *&#xA;     * @since 1.3&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MNEMONIC_KEY">
      <initialValue xsi:type="references:StringReference" value="MnemonicKey"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The key used for storing a &lt;code>KeyEvent&lt;/code> to be used as&#xA;     * the mnemonic for the action.&#xA;     *&#xA;     * @since 1.3&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets one of this object's properties&#xA;     * using the associated key.&#xA;     * @see #putValue&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="putValue">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets one of this object's properties&#xA;     * using the associated key. If the value has&#xA;     * changed, a &lt;code>PropertyChangeEvent&lt;/code> is sent&#xA;     * to listeners.&#xA;     *&#xA;     * @param key    a &lt;code>String&lt;/code> containing the key&#xA;     * @param value  an &lt;code>Object&lt;/code> value&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setEnabled">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the enabled state of the &lt;code>Action&lt;/code>.  When enabled,&#xA;     * any component associated with this object is active and&#xA;     * able to fire this object's &lt;code>actionPerformed&lt;/code> method.&#xA;     * If the value has changed, a &lt;code>PropertyChangeEvent&lt;/code> is sent&#xA;     * to listeners.&#xA;     *&#xA;     * @param  b true to enable this &lt;code>Action&lt;/code>, false to disable it&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isEnabled">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the enabled state of the &lt;code>Action&lt;/code>. When enabled,&#xA;     * any component associated with this object is active and&#xA;     * able to fire this object's &lt;code>actionPerformed&lt;/code> method.&#xA;     *&#xA;     * @return true if this &lt;code>Action&lt;/code> is enabled&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addPropertyChangeListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/beans/PropertyChangeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a &lt;code>PropertyChange&lt;/code> listener. Containers and attached&#xA;     * components use these methods to register interest in this &#xA;     * &lt;code>Action&lt;/code> object. When its enabled state or other property&#xA;     * changes, the registered listeners are informed of the change.&#xA;     *&#xA;     * @param listener  a &lt;code>PropertyChangeListener&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removePropertyChangeListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/beans/PropertyChangeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes a &lt;code>PropertyChange&lt;/code> listener.&#xA;     *&#xA;     * @param listener  a &lt;code>PropertyChangeListener&lt;/code> object&#xA;     * @see #addPropertyChangeListener&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>Action&lt;/code> interface provides a useful extension to the&#xA; * &lt;code>ActionListener&lt;/code>&#xA; * interface in cases where the same functionality may be accessed by&#xA; * several controls.&#xA; * &lt;p>&#xA; * In addition to the &lt;code>actionPerformed&lt;/code> method defined by the &#xA; * &lt;code>ActionListener&lt;/code> interface, this interface allows the&#xA; * application to define, in a single place:&#xA; * &lt;ul>&#xA; * &lt;li>One or more text strings that describe the function. These strings&#xA; *     can be used, for example, to display the flyover text for a button&#xA; *     or to set the text in a menu item.&#xA; * &lt;li>One or more icons that depict the function. These icons can be used&#xA; *     for the images in a menu control, or for composite entries in a more&#xA; *     sophisticated user interface.&#xA; * &lt;li>The enabled/disabled state of the functionality. Instead of having&#xA; *     to separately disable the menu item and the toolbar button, the&#xA; *     application can disable the function that implements this interface.&#xA; *     All components which are registered as listeners for the state change&#xA; *     then know to disable event generation for that item and to modify the &#xA; *     display accordingly.&#xA; * &lt;/ul>&#xA; * Certain containers, including menus and tool bars, know how to add an&#xA; * &lt;code>Action&lt;/code> object. When an &lt;code>Action&lt;/code> object is added&#xA; * to such a container, the container:&#xA; * &lt;ol type=&quot;a&quot;>&#xA; * &lt;li>Creates a component that is appropriate for that container &#xA; *     (a tool bar creates a button component, for example).&#xA; * &lt;li>Gets the appropriate property(s) from the &lt;code>Action&lt;/code> object to &#xA; *     customize the component (for example, the icon image and flyover text).&#xA; * &lt;li>Checks the initial state of the &lt;code>Action&lt;/code> object to determine &#xA; *     if it is enabled or disabled, and renders the component in the &#xA; *     appropriate fashion.&#xA; * &lt;li>Registers a listener with the &lt;code>Action&lt;/code> object so that is &#xA; *     notified of state changes. When the &lt;code>Action&lt;/code> object changes&#xA; *     from enabled to disabled,&#xA; *     or back, the container makes the appropriate revisions to the&#xA; *     event-generation mechanisms and renders the component accordingly.&#xA; * &lt;/ol>&#xA; * For example, both a menu item and a toolbar button could access a&#xA; * &lt;code>Cut&lt;/code> action object. The text associated with the object is &#xA; * specified as &quot;Cut&quot;, and an image depicting a pair of scissors is specified &#xA; * as its icon. The &lt;code>Cut&lt;/code> action-object can then be added to a&#xA; * menu and to a tool bar. Each container does the appropriate things with the&#xA; * object, and invokes its &lt;code>actionPerformed&lt;/code> method when the&#xA; * component associated with it is activated. The application can then disable &#xA; * or enable the application object without worrying about what user-interface&#xA; * components are connected to it.&#xA; * &lt;p>&#xA; * This interface can be added to an existing class or used to create an&#xA; * adapter (typically, by subclassing &lt;code>AbstractAction&lt;/code>).&#xA; * The &lt;code>Action&lt;/code> object&#xA; * can then be added to multiple &lt;code>Action&lt;/code>-aware containers&#xA; * and connected to &lt;code>Action&lt;/code>-capable&#xA; * components. The GUI controls can then be activated or&#xA; * deactivated all at once by invoking the &lt;code>Action&lt;/code> object's&#xA; * &lt;code>setEnabled&lt;/code> method.&#xA; * &lt;p>&#xA; * Note that &lt;code>Action&lt;/code> implementations tend to be more expensive&#xA; * in terms of storage than a typical &lt;code>ActionListener&lt;/code>,&#xA; * which does not offer the benefits of centralized control of&#xA; * functionality and broadcast of property changes.  For this reason,&#xA; * you should take care to only use &lt;code>Action&lt;/code>s where their benefits&#xA; * are desired, and use simple &lt;code>ActionListener&lt;/code>s elsewhere.&#xA; *&#xA; * @version 1.30 12/19/03&#xA; * @author Georges Saab&#xA; * @see AbstractAction&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../java/awt/event/ActionListener.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
