<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="SpinnerDateModel.java">
  <comments>/*&#xA; * @(#)SpinnerDateModel.java&#x9;1.11 04/05/12&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../java/io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="SpinnerDateModel">
    <members xsi:type="members:Field" name="start">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <additionalFields name="end"/>
    </members>
    <members xsi:type="members:Field" name="value">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="calendarField">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:ClassMethod" name="calendarFieldOK">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="calendarField">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Switch">
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.4"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.6"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.7"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.8"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.9"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.10"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.11"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.12"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.13"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.14"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
          </statements>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.15"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:DefaultSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
        </cases>
        <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
      </statements>
    </members>
    <members xsi:type="members:Constructor" name="SpinnerDateModel">
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="value is null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="invalid calendarField"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.3">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.3"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="(start &lt;= value &lt;= end) is false"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../java/lang/Comparable.class.xmi#//@classifiers.0/@members.0"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
                        </next>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:LessThanOrEqual"/>
                    </expression>
                  </children>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../java/lang/Comparable.class.xmi#//@classifiers.0/@members.0"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
                        </next>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                    </expression>
                  </children>
                </expression>
              </children>
            </expression>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.84"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.3"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.93"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
            </next>
          </next>
          <self xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/util/Date.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="end">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="calendarField">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a &lt;code>SpinnerDateModel&lt;/code> that represents a sequence of dates&#xA;     * between &lt;code>start&lt;/code> and &lt;code>end&lt;/code>.  The &#xA;     * &lt;code>nextValue&lt;/code> and &lt;code>previousValue&lt;/code> methods &#xA;     * compute elements of the sequence by advancing or reversing&#xA;     * the current date &lt;code>value&lt;/code> by the &#xA;     * &lt;code>calendarField&lt;/code> time unit.  For a precise description&#xA;     * of what it means to increment or decrement a &lt;code>Calendar&lt;/code>&#xA;     * &lt;code>field&lt;/code>, see the &lt;code>add&lt;/code> method in &#xA;     * &lt;code>java.util.Calendar&lt;/code>.&#xA;     * &lt;p>&#xA;     * The &lt;code>start&lt;/code> and &lt;code>end&lt;/code> parameters can be&#xA;     * &lt;code>null&lt;/code> to indicate that the range doesn't have an&#xA;     * upper or lower bound.  If &lt;code>value&lt;/code> or&#xA;     * &lt;code>calendarField&lt;/code> is &lt;code>null&lt;/code>, or if both &#xA;     * &lt;code>start&lt;/code> and &lt;code>end&lt;/code> are specified and &#xA;     * &lt;code>mininum &amp;gt; maximum&lt;/code> then an&#xA;     * &lt;code>IllegalArgumentException&lt;/code> is thrown.&#xA;     * Similarly if &lt;code>(minimum &amp;lt;= value &amp;lt;= maximum)&lt;/code> is false,&#xA;     * an IllegalArgumentException is thrown.&#xA;     * &#xA;     * @param value the current (non &lt;code>null&lt;/code>) value of the model&#xA;     * @param start the first date in the sequence or &lt;code>null&lt;/code>&#xA;     * @param end the last date in the sequence or &lt;code>null&lt;/code>&#xA;     * @param calendarField one of &#xA;     *   &lt;ul>&#xA;     *    &lt;li>&lt;code>Calendar.ERA&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.YEAR&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.MONTH&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.WEEK_OF_YEAR&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.WEEK_OF_MONTH&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.DAY_OF_MONTH&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.DAY_OF_YEAR&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.DAY_OF_WEEK&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.DAY_OF_WEEK_IN_MONTH&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.AM_PM&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.HOUR&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.HOUR_OF_DAY&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.MINUTE&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.SECOND&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.MILLISECOND&lt;/code>&#xA;     *   &lt;/ul>&#xA;     * &#xA;     * @throws IllegalArgumentException if &lt;code>value&lt;/code> or&#xA;     *    &lt;code>calendarField&lt;/code> are &lt;code>null&lt;/code>,&#xA;     *    if &lt;code>calendarField&lt;/code> isn't valid,&#xA;     *    or if the following expression is &#xA;     *    false: &lt;code>(start &amp;lt;= value &amp;lt;= end)&lt;/code>.&#xA;     * &#xA;     * @see Calendar#add&#xA;     * @see #setValue&#xA;     * @see #setStart&#xA;     * @see #setEnd&#xA;     * @see #setCalendarField&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="SpinnerDateModel">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../java/util/Date.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </arguments>
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.6"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </arguments>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a &lt;code>SpinnerDateModel&lt;/code> whose initial&#xA;     * &lt;code>value&lt;/code> is the current date, &lt;code>calendarField&lt;/code>&#xA;     * is equal to &lt;code>Calendar.DAY_OF_MONTH&lt;/code>, and for which &#xA;     * there are no &lt;code>start&lt;/code>/&lt;code>end&lt;/code> limits.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="setStart">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Changes the lower limit for Dates in this sequence. &#xA;     * If &lt;code>start&lt;/code> is &lt;code>null&lt;/code>,&#xA;     * then there is no lower limit.  No bounds checking is done here: &#xA;     * the new start value may invalidate the&#xA;     * &lt;code>(start &amp;lt;= value &amp;lt;= end)&lt;/code>&#xA;     * invariant enforced by the constructors.  This is to simplify updating&#xA;     * the model.  Naturally one should ensure that the invariant is true&#xA;     * before calling the &lt;code>nextValue&lt;/code>, &lt;code>previousValue&lt;/code>,&#xA;     * or &lt;code>setValue&lt;/code> methods.&#xA;     * &lt;p>&#xA;     * Typically this property is a &lt;code>Date&lt;/code> however it's possible to use &#xA;     * a &lt;code>Comparable&lt;/code> with a &lt;code>compareTo&lt;/code> method for Dates.  &#xA;     * For example &lt;code>start&lt;/code> might be an instance of a class like this:&#xA;     * &lt;pre>&#xA;     * MyStartDate implements Comparable { &#xA;     *     long t = 12345;&#xA;     *     public int compareTo(Date d) {&#xA;     *            return (t &lt; d.getTime() ? -1 : (t == d.getTime() ? 0 : 1));&#xA;     *     }&#xA;     *     public int compareTo(Object o) {&#xA;     *            return compareTo((Date)o);&#xA;     *     }&#xA;     * }&#xA;     * &lt;/pre>&#xA;     * Note that the above example will throw a &lt;code>ClassCastException&lt;/code>&#xA;     * if the &lt;code>Object&lt;/code> passed to &lt;code>compareTo(Object)&lt;/code>&#xA;     * is not a &lt;code>Date&lt;/code>.&#xA;     * &lt;p>&#xA;     * This method fires a &lt;code>ChangeEvent&lt;/code> if the&#xA;     * &lt;code>start&lt;/code> has changed.&#xA;     * &#xA;     * @param start defines the first date in the sequence&#xA;     * @see #getStart&#xA;     * @see #setEnd&#xA;     * @see #addChangeListener&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AbstractSpinnerModel.class.xmi#//@classifiers.0/@members.6"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </child>
          <expressionIf xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <self xsi:type="literals:This"/>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </expressionIf>
          <expressionElse xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../java/lang/Object.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
            </child>
          </expressionElse>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStart">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the first &lt;code>Date&lt;/code> in the sequence.&#xA;     * &#xA;     * @return the value of the &lt;code>start&lt;/code> property&#xA;     * @see #setStart&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setEnd">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="end">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Changes the upper limit for &lt;code>Date&lt;/code>s in this sequence. &#xA;     * If &lt;code>start&lt;/code> is &lt;code>null&lt;/code>, then there is no upper&#xA;     * limit.  No bounds checking is done here: the new &#xA;     * start value may invalidate the &lt;code>(start &amp;lt;= value &amp;lt;= end)&lt;/code>&#xA;     * invariant enforced by the constructors.  This is to simplify updating&#xA;     * the model.  Naturally, one should ensure that the invariant is true&#xA;     * before calling the &lt;code>nextValue&lt;/code>, &lt;code>previousValue&lt;/code>, &#xA;     * or &lt;code>setValue&lt;/code> methods.&#xA;     * &lt;p>&#xA;     * Typically this property is a &lt;code>Date&lt;/code> however it's possible to use &#xA;     * &lt;code>Comparable&lt;/code> with a &lt;code>compareTo&lt;/code> method for &#xA;     * &lt;code>Date&lt;/code>s.  See &lt;code>setStart&lt;/code> for an example.&#xA;     * &lt;p>&#xA;     * This method fires a &lt;code>ChangeEvent&lt;/code> if the &lt;code>end&lt;/code>&#xA;     * has changed.&#xA;     * &#xA;     * @param end defines the last date in the sequence&#xA;     * @see #getEnd&#xA;     * @see #setStart&#xA;     * @see #addChangeListener&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AbstractSpinnerModel.class.xmi#//@classifiers.0/@members.6"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </child>
          <expressionIf xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
                <self xsi:type="literals:This"/>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </expressionIf>
          <expressionElse xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../java/lang/Object.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
            </child>
          </expressionElse>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEnd">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the last &lt;code>Date&lt;/code> in the sequence.&#xA;     * &#xA;     * @return the value of the &lt;code>end&lt;/code> property&#xA;     * @see #setEnd&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setCalendarField">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="calendarField">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Changes the size of the date value change computed&#xA;     * by the &lt;code>nextValue&lt;/code> and &lt;code>previousValue&lt;/code> methods.&#xA;     * The &lt;code>calendarField&lt;/code> parameter must be one of the &#xA;     * &lt;code>Calendar&lt;/code> field constants like &lt;code>Calendar.MONTH&lt;/code> &#xA;     * or &lt;code>Calendar.MINUTE&lt;/code>.&#xA;     * The &lt;code>nextValue&lt;/code> and &lt;code>previousValue&lt;/code> methods&#xA;     * simply move the specified &lt;code>Calendar&lt;/code> field forward or backward &#xA;     * by one unit with the &lt;code>Calendar.add&lt;/code> method.&#xA;     * You should use this method with care as some UIs may set the&#xA;     * calendarField before commiting the edit to spin the field under&#xA;     * the cursor. If you only want one field to spin you can subclass&#xA;     * and ignore the setCalendarField calls.&#xA;     * &#xA;     * @param calendarField one of &#xA;     *  &lt;ul>&#xA;     *    &lt;li>&lt;code>Calendar.ERA&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.YEAR&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.MONTH&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.WEEK_OF_YEAR&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.WEEK_OF_MONTH&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.DAY_OF_MONTH&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.DAY_OF_YEAR&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.DAY_OF_WEEK&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.DAY_OF_WEEK_IN_MONTH&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.AM_PM&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.HOUR&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.HOUR_OF_DAY&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.MINUTE&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.SECOND&lt;/code>&#xA;     *    &lt;li>&lt;code>Calendar.MILLISECOND&lt;/code>&#xA;     *  &lt;/ul>&#xA;     * &lt;p>&#xA;     * This method fires a &lt;code>ChangeEvent&lt;/code> if the&#xA;     * &lt;code>calendarField&lt;/code> has changed.&#xA;     * &#xA;     * @see #getCalendarField&#xA;     * @see #getNextValue&#xA;     * @see #getPreviousValue&#xA;     * @see Calendar#add&#xA;     * @see #addChangeListener&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="invalid calendarField"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.3">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AbstractSpinnerModel.class.xmi#//@classifiers.0/@members.6"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          <children xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCalendarField">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;code>Calendar&lt;/code> field that is added to or subtracted from&#xA;     * by the &lt;code>nextValue&lt;/code> and &lt;code>previousValue&lt;/code> methods.&#xA;     * &#xA;     * @return the value of the &lt;code>calendarField&lt;/code> property&#xA;     * @see #setCalendarField&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNextValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the next &lt;code>Date&lt;/code> in the sequence, or &lt;code>null&lt;/code> if &#xA;     * the next date is after &lt;code>end&lt;/code>.&#xA;     * &#xA;     * @return the next &lt;code>Date&lt;/code> in the sequence, or &lt;code>null&lt;/code> if &#xA;     *     the next date is after &lt;code>end&lt;/code>.&#xA;     * &#xA;     * @see SpinnerModel#getNextValue&#xA;     * @see #getPreviousValue&#xA;     * @see #setCalendarField&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="cal">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.84"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.93"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.92"/>
              </next>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.122"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="next">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/util/Date.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.92"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
                  <children xsi:type="literals:NullLiteral"/>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../java/lang/Comparable.class.xmi#//@classifiers.0/@members.0"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.3/@variable"/>
                    </next>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                </expression>
              </children>
            </expression>
          </child>
          <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.3/@variable"/>
          <expressionElse xsi:type="literals:NullLiteral"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPreviousValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the previous &lt;code>Date&lt;/code> in the sequence, or &lt;code>null&lt;/code>&#xA;     * if the previous date is before &lt;code>start&lt;/code>.&#xA;     * &#xA;     * @return the previous &lt;code>Date&lt;/code> in the sequence, or&#xA;     *     &lt;code>null&lt;/code> if the previous date&#xA;     *     is before &lt;code>start&lt;/code>&#xA;     * &#xA;     * @see SpinnerModel#getPreviousValue&#xA;     * @see #getNextValue&#xA;     * @see #setCalendarField&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="cal">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.84"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.93"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.92"/>
              </next>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.122"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <arguments xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="prev">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/util/Date.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.92"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                  <children xsi:type="literals:NullLiteral"/>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../java/lang/Comparable.class.xmi#//@classifiers.0/@members.0"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.3/@variable"/>
                    </next>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThanOrEqual"/>
                </expression>
              </children>
            </expression>
          </child>
          <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.3/@variable"/>
          <expressionElse xsi:type="literals:NullLiteral"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/util/Date.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the current element in this sequence of &lt;code>Date&lt;/code>s.&#xA;     * This method is equivalent to &lt;code>(Date)getValue&lt;/code>.&#xA;     *&#xA;     * @return the &lt;code>value&lt;/code> property&#xA;     * @see #setValue&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.92"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the current element in this sequence of &lt;code>Date&lt;/code>s.&#xA;     * &#xA;     * @return the &lt;code>value&lt;/code> property&#xA;     * @see #setValue&#xA;     * @see #getDate&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.92"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setValue">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the current &lt;code>Date&lt;/code> for this sequence.  &#xA;     * If &lt;code>value&lt;/code> is &lt;code>null&lt;/code>,&#xA;     * an &lt;code>IllegalArgumentException&lt;/code> is thrown.  No bounds &#xA;     * checking is done here: &#xA;     * the new value may invalidate the &lt;code>(start &amp;lt= value &amp;lt end)&lt;/code>&#xA;     * invariant enforced by the constructors.  Naturally, one should ensure &#xA;     * that the &lt;code>(start &amp;lt;= value &amp;lt;= maximum)&lt;/code> invariant is true&#xA;     * before calling the &lt;code>nextValue&lt;/code>, &lt;code>previousValue&lt;/code>,&#xA;     * or &lt;code>setValue&lt;/code> methods.  &#xA;     * &lt;p>&#xA;     * This method fires a &lt;code>ChangeEvent&lt;/code> if the&#xA;     * &lt;code>value&lt;/code> has changed.&#xA;     * &#xA;     * @param value the current (non &lt;code>null&lt;/code>)&#xA;     *    &lt;code>Date&lt;/code> for this sequence&#xA;     * @throws IllegalArgumentException if value is &lt;code>null&lt;/code>&#xA;     *    or not a &lt;code>Date&lt;/code>&#xA;     * @see #getDate&#xA;     * @see #getValue&#xA;     * @see #addChangeListener&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="null value"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../java/util/Date.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
              </expression>
            </child>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.93"/>
                  <arguments xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../java/util/Date.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
                  </arguments>
                </next>
              </next>
              <self xsi:type="literals:This"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AbstractSpinnerModel.class.xmi#//@classifiers.0/@members.6"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/lang/Object.class.xmi#//@classifiers.0/@members.4"/>
              <arguments xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../java/util/Calendar.class.xmi#//@classifiers.0/@members.92"/>
                  </next>
                </next>
                <self xsi:type="literals:This"/>
              </arguments>
            </next>
          </child>
        </condition>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A &lt;code>SpinnerModel&lt;/code> for sequences of &lt;code>Date&lt;/code>s. &#xA; * The upper and lower bounds of the sequence are defined by properties called &#xA; * &lt;code>start&lt;/code> and &lt;code>end&lt;/code> and the size&#xA; * of the increase or decrease computed by the &lt;code>nextValue&lt;/code>&#xA; * and &lt;code>previousValue&lt;/code> methods is defined by a property&#xA; * called &lt;code>calendarField&lt;/code>.  The &lt;code>start&lt;/code> &#xA; * and &lt;code>end&lt;/code> properties can be &lt;code>null&lt;/code> to&#xA; * indicate that the sequence has no lower or upper limit.  &#xA; * &lt;p>&#xA; * The value of the &lt;code>calendarField&lt;/code> property must be one of the&#xA; * &lt;code>java.util.Calendar&lt;/code> constants that specify a field&#xA; * within a &lt;code>Calendar&lt;/code>.  The &lt;code>getNextValue&lt;/code> &#xA; * and &lt;code>getPreviousValue&lt;/code> &#xA; * methods change the date forward or backwards by this amount.  &#xA; * For example, if &lt;code>calendarField&lt;/code> is &lt;code>Calendar.DAY_OF_WEEK&lt;/code>,&#xA; * then &lt;code>nextValue&lt;/code> produces a &lt;code>Date&lt;/code> that's 24&#xA; * hours after the current &lt;code>value&lt;/code>, and &lt;code>previousValue&lt;/code>&#xA; * produces a &lt;code>Date&lt;/code> that's 24 hours earlier.&#xA; * &lt;p>&#xA; * The legal values for &lt;code>calendarField&lt;/code> are:&#xA; * &lt;ul>&#xA; *   &lt;li>&lt;code>Calendar.ERA&lt;/code>&#xA; *   &lt;li>&lt;code>Calendar.YEAR&lt;/code>&#xA; *   &lt;li>&lt;code>Calendar.MONTH&lt;/code>&#xA; *   &lt;li>&lt;code>Calendar.WEEK_OF_YEAR&lt;/code>&#xA; *   &lt;li>&lt;code>Calendar.WEEK_OF_MONTH&lt;/code>&#xA; *   &lt;li>&lt;code>Calendar.DAY_OF_MONTH&lt;/code>&#xA; *   &lt;li>&lt;code>Calendar.DAY_OF_YEAR&lt;/code>&#xA; *   &lt;li>&lt;code>Calendar.DAY_OF_WEEK&lt;/code>&#xA; *   &lt;li>&lt;code>Calendar.DAY_OF_WEEK_IN_MONTH&lt;/code>&#xA; *   &lt;li>&lt;code>Calendar.AM_PM&lt;/code>&#xA; *   &lt;li>&lt;code>Calendar.HOUR&lt;/code>&#xA; *   &lt;li>&lt;code>Calendar.HOUR_OF_DAY&lt;/code>&#xA; *   &lt;li>&lt;code>Calendar.MINUTE&lt;/code>&#xA; *   &lt;li>&lt;code>Calendar.SECOND&lt;/code>&#xA; *   &lt;li>&lt;code>Calendar.MILLISECOND&lt;/code>&#xA; * &lt;/ul>&#xA; * However some UIs may set the calendarField before commiting the edit&#xA; * to spin the field under the cursor. If you only want one field to&#xA; * spin you can subclass and ignore the setCalendarField calls.&#xA; * &lt;p>&#xA; * This model inherits a &lt;code>ChangeListener&lt;/code>.  The&#xA; * &lt;code>ChangeListeners&lt;/code> are notified whenever the models&#xA; * &lt;code>value&lt;/code>, &lt;code>calendarField&lt;/code>, &#xA; * &lt;code>start&lt;/code>, or &lt;code>end&lt;/code> properties changes.&#xA; * &#xA; * @see JSpinner&#xA; * @see SpinnerModel&#xA; * @see AbstractSpinnerModel&#xA; * @see SpinnerListModel&#xA; * @see SpinnerNumberModel&#xA; * @see Calendar#add&#xA; *&#xA; * @version 1.11 05/12/04&#xA; * @author Hans Muller&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../java/io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="AbstractSpinnerModel.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
