<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="ButtonModel.java">
  <comments>/*&#xA; * @(#)ButtonModel.java&#x9;1.26 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ButtonModel">
    <members xsi:type="members:InterfaceMethod" name="isArmed">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Indicates partial commitment towards pressing the&#xA;     * button. &#xA;     *&#xA;     * @return true if the button is armed, and ready to be pressed&#xA;     * @see #setArmed&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isSelected">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Indicates if the button has been selected. Only needed for&#xA;     * certain types of buttons - such as radio buttons and check boxes.&#xA;     *&#xA;     * @return true if the button is selected&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isEnabled">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Indicates if the button can be selected or pressed by&#xA;     * an input device (such as a mouse pointer). (Check boxes&#xA;     * are selected, regular buttons are &quot;pressed&quot;.)&#xA;     *&#xA;     * @return true if the button is enabled, and therefore&#xA;     *         selectable (or pressable)&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isPressed">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Indicates if button has been pressed.&#xA;     *&#xA;     * @return true if the button has been pressed&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isRollover">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Indicates that the mouse is over the button.&#xA;     *&#xA;     * @return true if the mouse is over the button&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setArmed">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Marks the button as &quot;armed&quot;. If the mouse button is&#xA;     * released while it is over this item, the button's action event&#xA;     * fires. If the mouse button is released elsewhere, the&#xA;     * event does not fire and the button is disarmed.&#xA;     * &#xA;     * @param b true to arm the button so it can be selected&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSelected">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Selects or deselects the button.&#xA;     *&#xA;     * @param b true selects the button,&#xA;     *          false deselects the button.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setEnabled">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Enables or disables the button.&#xA;     * &#xA;     * @param b true to enable the button&#xA;     * @see #isEnabled&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setPressed">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the button to pressed or unpressed.&#xA;     * &#xA;     * @param b true to set the button to &quot;pressed&quot;&#xA;     * @see #isPressed&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setRollover">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets or clears the button's rollover state&#xA;     * &#xA;     * @param b true to turn on rollover&#xA;     * @see #isRollover&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setMnemonic">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the keyboard mnemonic (shortcut key or&#xA;     * accelerator key) for this button.&#xA;     *&#xA;     * @param key an int specifying the accelerator key&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMnemonic">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the keyboard mnemonic for this model&#xA;     *&#xA;     * @return an int specifying the accelerator key&#xA;     * @see #setMnemonic&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setActionCommand">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the actionCommand string that gets sent as part of the&#xA;     * event when the button is pressed.&#xA;     *&#xA;     * @param s the String that identifies the generated event&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getActionCommand">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the action command for this button.&#xA;     *&#xA;     * @return the String that identifies the generated event&#xA;     * @see #setActionCommand&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setGroup">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="group">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ButtonGroup.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Identifies the group this button belongs to --&#xA;     * needed for radio buttons, which are mutually&#xA;     * exclusive within their group.&#xA;     *&#xA;     * @param group the ButtonGroup this button belongs to&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addActionListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Adds an ActionListener to the button.&#xA;     *&#xA;     * @param l the listener to add&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/awt/event/ActionListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeActionListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Removes an ActionListener from the button.&#xA;     *&#xA;     * @param l the listener to remove&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/awt/event/ActionListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addItemListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Adds an ItemListener to the button.&#xA;     *&#xA;     * @param l the listener to add&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/awt/event/ItemListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeItemListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Removes an ItemListener from the button.&#xA;     *&#xA;     * @param l the listener to remove&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/awt/event/ItemListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addChangeListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Adds a ChangeListener to the button.&#xA;     *&#xA;     * @param l the listener to add&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeChangeListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Removes a ChangeListener from the button.&#xA;     *&#xA;     * @param l the listener to remove&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * State Model for buttons.&#xA; * This model is used for check boxes and radio buttons, which are&#xA; * special kinds of buttons, as well as for normal buttons.&#xA; * For check boxes and radio buttons, pressing the mouse selects&#xA; * the button. For normal buttons, pressing the mouse &quot;arms&quot; the&#xA; * button. Releasing the mouse over the button then initiates a&#xA; * &lt;i>button&lt;/i> press, firing its action event. Releasing the &#xA; * mouse elsewhere disarms the button.&#xA; * &lt;p>&#xA; * In use, a UI will invoke {@link #setSelected} when a mouse&#xA; * click occurs over a check box or radio button. It will invoke&#xA; * {@link #setArmed} when the mouse is pressed over a regular&#xA; * button and invoke {@link #setPressed} when the mouse is released.&#xA; * If the mouse travels outside the button in the meantime, &#xA; * &lt;code>setArmed(false)&lt;/code> will tell the button not to fire&#xA; * when it sees &lt;code>setPressed&lt;/code>. (If the mouse travels &#xA; * back in, the button will be rearmed.)&#xA; * &lt;blockquote>&#xA; * &lt;b>Note: &lt;/b>&lt;br>&#xA; * A button is triggered when it is both &quot;armed&quot; and &quot;pressed&quot;.&#xA; * &lt;/blockquote>&#xA; *&#xA; * @version 1.26 12/19/03&#xA; * @author Jeff Dinkins&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../java/awt/ItemSelectable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
