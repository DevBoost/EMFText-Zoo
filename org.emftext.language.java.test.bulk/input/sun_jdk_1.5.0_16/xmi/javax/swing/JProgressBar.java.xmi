<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16 http://www.emftext.org/java/variables ../../java.ecore#/17" name="JProgressBar.java">
  <comments>/*&#xA; * @(#)JProgressBar.java&#x9;1.93 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/awt/Graphics.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>text</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/text/Format.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>text</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/text/NumberFormat.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../java/io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/io/ObjectOutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/io/ObjectInputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>accessibility</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>plaf</namespaces>
    <classifier xsi:type="classifiers:Class" href="plaf/ProgressBarUI.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="JProgressBar">
    <comments>// AccessibleJProgressBar</comments>
    <members xsi:type="members:Field" name="uiClassID">
      <initialValue xsi:type="references:StringReference" value="ProgressBarUI"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * @see #getUIClassID&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="orientation">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Whether the progress bar is horizontal or vertical.&#xA;     * The default is &lt;code>HORIZONTAL&lt;/code>.&#xA;     *&#xA;     * @see #setOrientation&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="paintBorder">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Whether to display a border around the progress bar.&#xA;     * The default is &lt;code>true&lt;/code>.&#xA;     *&#xA;     * @see #setBorderPainted&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="model">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="BoundedRangeModel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * The object that holds the data for the progress bar.&#xA;     *&#xA;     * @see #setModel&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="progressString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * An optional string that can be displayed on the progress bar.&#xA;     * The default is &lt;code>null&lt;/code>. Setting this to a non-&lt;code>null&lt;/code>&#xA;     * value does not imply that the string will be displayed.&#xA;     *&#xA;     * @see #setString&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="paintString">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Whether to textually display a string on the progress bar.&#xA;     * The default is &lt;code>false&lt;/code>.&#xA;     * Setting this to &lt;code>true&lt;/code> causes a textual&#xA;     * display of the progress to be rendered on the progress bar. If&#xA;     * the &lt;code>progressString&lt;/code> is &lt;code>null&lt;/code>,&#xA;     * the percentage of completion is displayed on the progress bar.&#xA;     * Otherwise, the &lt;code>progressString&lt;/code> is&#xA;     * rendered on the progress bar.&#xA;     *&#xA;     * @see #setStringPainted&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="defaultMinimum">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * The default minimum for a progress bar is 0.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="defaultMaximum">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * The default maximum for a progress bar is 100.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="defaultOrientation">
      <initialValue xsi:type="references:IdentifierReference">
        <target xsi:type="members:Field" href="SwingConstants.class.xmi#//@classifiers.0/@members.13"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * The default orientation for a progress bar is &lt;code>HORIZONTAL&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="changeEvent">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="event/ChangeEvent.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Only one &lt;code>ChangeEvent&lt;/code> is needed per instance since the&#xA;     * event's only interesting property is the immutable source, which&#xA;     * is the progress bar.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="changeListener">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Listens for change events sent by the progress bar's model,&#xA;     * redispatching them&#xA;     * to change-event listeners registered upon&#xA;     * this progress bar.&#xA;     *&#xA;     * @see #createChangeListener&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="format">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/text/Format.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Format used when displaying percent complete.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="indeterminate">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Whether the progress bar is indeterminate (&lt;code>true&lt;/code>) or &#xA;     * normal (&lt;code>false&lt;/code>); the default is &lt;code>false&lt;/code>.&#xA;     *&#xA;     * @see #setIndeterminate&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="JProgressBar">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a horizontal progress bar&#xA;     * that displays a border but no progress string.&#xA;     * The initial and minimum values are 0,&#xA;     * and the maximum is 100.&#xA;     *&#xA;     * @see #setOrientation&#xA;     * @see #setBorderPainted&#xA;     * @see #setStringPainted&#xA;     * @see #setString&#xA;     * @see #setIndeterminate&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="JProgressBar">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orient">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a progress bar with the specified orientation,&#xA;     * which can be &#xA;     * either &lt;code>JProgressBar.VERTICAL&lt;/code> or &#xA;     * &lt;code>JProgressBar.HORIZONTAL&lt;/code>.&#xA;     * By default, a border is painted but a progress string is not.&#xA;     * The initial and minimum values are 0,&#xA;     * and the maximum is 100.&#xA;     *&#xA;     * @param orient  the desired orientation of the progress bar&#xA;     *&#xA;     * @see #setOrientation&#xA;     * @see #setBorderPainted&#xA;     * @see #setStringPainted&#xA;     * @see #setString&#xA;     * @see #setIndeterminate&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="JProgressBar">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="min">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="max">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a horizontal progress bar&#xA;     * with the specified minimum and maximum.&#xA;     * Sets the initial value of the progress bar to the specified minimum.&#xA;     * By default, a border is painted but a progress string is not.&#xA;     * The &lt;code>BoundedRangeModel&lt;/code> that holds the progress bar's data&#xA;     * handles any issues that may arise from improperly setting the &#xA;     * minimum, initial, and maximum values on the progress bar.&#xA;     *&#xA;     * @param min  the minimum value of the progress bar&#xA;     * @param max  the maximum value of the progress bar&#xA;     *&#xA;     * @see BoundedRangeModel&#xA;     * @see #setOrientation&#xA;     * @see #setBorderPainted&#xA;     * @see #setStringPainted&#xA;     * @see #setString&#xA;     * @see #setIndeterminate&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="JProgressBar">
      <comments>// see setIndeterminate</comments>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
          <comments>// Creating the model this way is a bit simplistic, but</comments>
          <comments>//  I believe that it is the the most common usage of this</comments>
          <comments>//  component - it's what people will expect.</comments>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="DefaultBoundedRangeModel.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.2"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.19">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
          <comments>// documented with set/getOrientation()</comments>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.21">
          <comments>// documented with is/setBorderPainted()</comments>
          <arguments xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.23">
          <comments>// see setStringPainted</comments>
          <arguments xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <comments>// see getString</comments>
          <arguments xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orient">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="min">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="max">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a progress bar using the specified orientation,&#xA;     * minimum, and maximum.&#xA;     * By default, a border is painted but a progress string is not.&#xA;     * Sets the initial value of the progress bar to the specified minimum.&#xA;     * The &lt;code>BoundedRangeModel&lt;/code> that holds the progress bar's data&#xA;     * handles any issues that may arise from improperly setting the &#xA;     * minimum, initial, and maximum values on the progress bar.&#xA;     *&#xA;     * @param orient  the desired orientation of the progress bar&#xA;     * @param min  the minimum value of the progress bar&#xA;     * @param max  the maximum value of the progress bar&#xA;     *&#xA;     * @see BoundedRangeModel&#xA;     * @see #setOrientation&#xA;     * @see #setBorderPainted&#xA;     * @see #setStringPainted&#xA;     * @see #setString&#xA;     * @see #setIndeterminate&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="JProgressBar">
      <comments>// see setIndeterminate</comments>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.19">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
          <comments>// see setOrientation()</comments>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.21">
          <comments>// see setBorderPainted()</comments>
          <arguments xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.23">
          <comments>// see setStringPainted</comments>
          <arguments xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <comments>// see getString</comments>
          <arguments xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newModel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="BoundedRangeModel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a horizontal progress bar &#xA;     * that uses the specified model&#xA;     * to hold the progress bar's data.&#xA;     * By default, a border is painted but a progress string is not.&#xA;     *&#xA;     * @param newModel  the data model for the progress bar&#xA;     *&#xA;     * @see #setOrientation&#xA;     * @see #setBorderPainted&#xA;     * @see #setStringPainted&#xA;     * @see #setString&#xA;     * @see #setIndeterminate&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getOrientation">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>JProgressBar.VERTICAL&lt;/code> or &#xA;     * &lt;code>JProgressBar.HORIZONTAL&lt;/code>, depending on the orientation&#xA;     * of the progress bar. The default orientation is &#xA;     * &lt;code>HORIZONTAL&lt;/code>.&#xA;     *&#xA;     * @return &lt;code>HORIZONTAL&lt;/code> or &lt;code>VERTICAL&lt;/code>&#xA;     * @see #setOrientation&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setOrientation">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newOrientation">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the progress bar's orientation to &lt;code>newOrientation&lt;/code>, &#xA;     * which must be &lt;code>JProgressBar.VERTICAL&lt;/code> or &#xA;     * &lt;code>JProgressBar.HORIZONTAL&lt;/code>. The default orientation &#xA;     * is &lt;code>HORIZONTAL&lt;/code>.&#xA;     *&#xA;     * @param  newOrientation  &lt;code>HORIZONTAL&lt;/code> or &lt;code>VERTICAL&lt;/code>&#xA;     * @exception      IllegalArgumentException    if &lt;code>newOrientation&lt;/code>&#xA;     *                                              is an illegal value&#xA;     * @see #getOrientation&#xA;     *&#xA;     * @beaninfo&#xA;     *    preferred: true&#xA;     *        bound: true&#xA;     *    attribute: visualUpdate true&#xA;     *  description: Set the progress bar's orientation.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Switch">
            <cases xsi:type="statements:NormalSwitchCase">
              <condition xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="SwingConstants.class.xmi#//@classifiers.0/@members.14"/>
              </condition>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="oldOrientation">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="JComponent.class.xmi#//@classifiers.0/@members.210"/>
                  <arguments xsi:type="references:StringReference" value="orientation"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@statement/@statements.0/@cases.1/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.51"/>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.2"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../accessibility/AccessibleContext.class.xmi#//@classifiers.0"/>
                        </arguments>
                        <arguments xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:ConditionalExpression">
                            <child xsi:type="expressions:NestedExpression">
                              <expression xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:Equal"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@statement/@statements.0/@cases.1/@statements.0/@variable"/>
                                <children xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="SwingConstants.class.xmi#//@classifiers.0/@members.14"/>
                                </children>
                              </expression>
                            </child>
                            <expressionIf xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="../accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.21"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="../accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                            </expressionIf>
                            <expressionElse xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="../accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.22"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="../accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                            </expressionElse>
                          </expression>
                        </arguments>
                        <arguments xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:ConditionalExpression">
                            <child xsi:type="expressions:NestedExpression">
                              <expression xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:Equal"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                                <children xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="SwingConstants.class.xmi#//@classifiers.0/@members.14"/>
                                </children>
                              </expression>
                            </child>
                            <expressionIf xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="../accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.21"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="../accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                            </expressionIf>
                            <expressionElse xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="../accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.22"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="../accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                            </expressionElse>
                          </expression>
                        </arguments>
                      </next>
                      <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.72"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.72"/>
                  </children>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="SwingConstants.class.xmi#//@classifiers.0/@members.13"/>
              </condition>
            </cases>
            <cases xsi:type="statements:DefaultSwitchCase">
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
                    <children xsi:type="references:StringReference" value=" is not a legal orientation"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </throwable>
              </statements>
            </cases>
            <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="JComponent.class.xmi#//@classifiers.0/@members.226"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isStringPainted">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of the &lt;code>stringPainted&lt;/code> property.&#xA;     *&#xA;     * @return the value of the &lt;code>stringPainted&lt;/code> property&#xA;     * @see    #setStringPainted&#xA;     * @see    #setString&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setStringPainted">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the value of the &lt;code>stringPainted&lt;/code> property,&#xA;     * which determines whether the progress bar&#xA;     * should render a progress string.&#xA;     * The default is &lt;code>false&lt;/code>:&#xA;     * no string is painted.&#xA;     * Some look and feels might not support progress strings&#xA;     * or might support them only when the progress bar is in determinate mode.&#xA;     *&#xA;     * @param   b       &lt;code>true&lt;/code> if the progress bar should render a string&#xA;     * @see     #isStringPainted&#xA;     * @see     #setString&#xA;     * @beaninfo&#xA;     *        bound: true&#xA;     *    attribute: visualUpdate true&#xA;     *  description: Whether the progress bar should render a string.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldValue">
          <typeReference xsi:type="types:Boolean">
            <comments>//PENDING: specify that string not painted when in indeterminate mode?</comments>
            <comments>//         or just leave that to the L&amp;F?</comments>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="JComponent.class.xmi#//@classifiers.0/@members.209"/>
          <arguments xsi:type="references:StringReference" value="stringPainted"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="JComponent.class.xmi#//@classifiers.0/@members.226"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/awt/Component.class.xmi#//@classifiers.0/@members.203"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the current value of the progress string.&#xA;     * If you are providing a custom progress string &#xA;     * by overriding this method,&#xA;     * make sure your implementation calls &lt;code>setString&lt;/code> before&#xA;     * calling &lt;code>super.getString&lt;/code>.&#xA;     *&#xA;     * @return the value of the percent string&#xA;     * @see    #setString&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../java/text/NumberFormat.class.xmi#//@classifiers.0/@members.40"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../java/text/NumberFormat.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../java/text/Format.class.xmi#//@classifiers.0/@members.2"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../java/lang/Double.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.24"/>
                </arguments>
              </next>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setString">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the value of the progress string. By default,&#xA;     * this string is &lt;code>null&lt;/code>.&#xA;     * If you have provided a custom progress string and want to revert to &#xA;     * the built-in behavior, set the string back to &lt;code>null&lt;/code>.&#xA;     * If you are providing a custom progress string &#xA;     * by overriding this method,&#xA;     * make sure that you call &lt;code>setString&lt;/code> before&#xA;     * calling &lt;code>getString&lt;/code>.&#xA;     * The progress string is painted only if&#xA;     * the &lt;code>isStringPainted&lt;/code> method returns &lt;code>true&lt;/code>.&#xA;     *&#xA;     * @param  s       the value of the percent string&#xA;     * @see    #getString&#xA;     * @see    #setStringPainted&#xA;     * @see    #isStringPainted&#xA;     * @beaninfo&#xA;     *        bound: true&#xA;     *    attribute: visualUpdate true&#xA;     *  description: Specifies the progress string to paint&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldValue">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../../java/awt/Component.class.xmi#//@classifiers.0/@members.347"/>
          <arguments xsi:type="references:StringReference" value="string"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.0/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/awt/Component.class.xmi#//@classifiers.0/@members.203"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.0/@variable"/>
              </next>
            </child>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPercentComplete">
      <typeReference xsi:type="types:Double"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the percent complete for the progress bar.&#xA;     * Note that this number is between 0.0 and 1.0.&#xA;     *&#xA;     * @return the percent complete for this progress bar&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="span">
          <typeReference xsi:type="types:Long"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.2"/>
              </next>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </children>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="currentValue">
          <typeReference xsi:type="types:Double"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.4"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="pc">
          <typeReference xsi:type="types:Double"/>
          <initialValue xsi:type="expressions:MultiplicativeExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.1/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </expression>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable"/>
            <multiplicativeOperators xsi:type="operators:Division"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.2/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isBorderPainted">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;code>borderPainted&lt;/code> property.&#xA;     *&#xA;     * @return the value of the &lt;code>borderPainted&lt;/code> property&#xA;     * @see    #setBorderPainted&#xA;     * @beaninfo&#xA;     *  description: Does the progress bar paint its border&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setBorderPainted">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the &lt;code>borderPainted&lt;/code> property, which is&#xA;     * &lt;code>true&lt;/code> if the progress bar should paint its border.&#xA;     * The default value for this property is &lt;code>true&lt;/code>.&#xA;     * Some look and feels might not implement painted borders;&#xA;     * they will ignore this property.&#xA;     *&#xA;     * @param   b       &lt;code>true&lt;/code> if the progress bar&#xA;     *                  should paint its border;&#xA;     *                  otherwise, &lt;code>false&lt;/code>&#xA;     * @see     #isBorderPainted&#xA;     * @beaninfo&#xA;     *        bound: true&#xA;     *    attribute: visualUpdate true&#xA;     *  description: Whether the progress bar should paint its border.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldValue">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="JComponent.class.xmi#//@classifiers.0/@members.209"/>
          <arguments xsi:type="references:StringReference" value="borderPainted"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/awt/Component.class.xmi#//@classifiers.0/@members.203"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="paintBorder">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="g">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Graphics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Paints the progress bar's border if the &lt;code>borderPainted&lt;/code>&#xA;     * property is &lt;code>true&lt;/code>.&#xA;     * &#xA;     * @param g  the &lt;code>Graphics&lt;/code> context within which to paint the border&#xA;     * @see #paint&#xA;     * @see #setBorder&#xA;     * @see #isBorderPainted&#xA;     * @see #setBorderPainted&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="JComponent.class.xmi#//@classifiers.0/@members.89"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
              </next>
              <self xsi:type="literals:Super"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.25"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getUI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="plaf/ProgressBarUI.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the look-and-feel object that renders this component.&#xA;     *&#xA;     * @return the &lt;code>ProgressBarUI&lt;/code> object that renders this component&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="plaf/ProgressBarUI.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.18"/>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setUI">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ui">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="plaf/ProgressBarUI.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the look-and-feel object that renders this component.&#xA;     *&#xA;     * @param ui  a &lt;code>ProgressBarUI&lt;/code> object&#xA;     * @see UIDefaults#getUI&#xA;     * @beaninfo&#xA;     *        bound: true&#xA;     *       hidden: true&#xA;     *    attribute: visualUpdate true&#xA;     *  description: The UI object that implements the Component's LookAndFeel. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="JComponent.class.xmi#//@classifiers.0/@members.84"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="updateUI">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Resets the UI property to a value from the current look and feel.&#xA;     *&#xA;     * @see JComponent#updateUI&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
          <arguments xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="plaf/ProgressBarUI.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="UIManager.class.xmi#//@classifiers.0/@members.47"/>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="UIManager.class.xmi#//@classifiers.0"/>
            </child>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getUIClassID">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of the look-and-feel class that renders this component.&#xA;     *&#xA;     * @return the string &quot;ProgressBarUI&quot;&#xA;     * @see JComponent#getUIClassID&#xA;     * @see UIDefaults#getUI&#xA;     * @beaninfo&#xA;     *        expert: true&#xA;     *   description: A string that specifies the name of the look-and-feel class.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="ModelListener">
      <members xsi:type="members:ClassMethod" name="stateChanged">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="e">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="event/ChangeEvent.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37"/>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* We pass each Change event to the listeners with the&#xA;     * the progress bar as the event source.&#xA;     * &lt;p>&#xA;     * &lt;strong>Warning:&lt;/strong>&#xA;     * Serialized objects of this class will not be compatible with&#xA;     * future Swing releases. The current serialization support is&#xA;     * appropriate for short term storage or RMI between applications running&#xA;     * the same version of Swing.  As of 1.4, support for long term storage&#xA;     * of all JavaBeans&lt;sup>&lt;font size=&quot;-2&quot;>TM&lt;/font>&lt;/sup>&#xA;     * has been added to the &lt;code>java.beans&lt;/code> package.&#xA;     * Please see {@link java.beans.XMLEncoder}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../java/io/Serializable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
    </members>
    <members xsi:type="members:ClassMethod" name="createChangeListener">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Subclasses that want to handle change events &#xA;     * from the model differently&#xA;     * can override this to return &#xA;     * an instance of a custom &lt;code>ChangeListener&lt;/code> implementation.&#xA;     *&#xA;     * @see #changeListener&#xA;     * @see javax.swing.event.ChangeListener&#xA;     * @see javax.swing.BoundedRangeModel&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.32"/>
          </typeReference>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addChangeListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds the specified &lt;code>ChangeListener&lt;/code> to the progress bar.&#xA;     *&#xA;     * @param l the &lt;code>ChangeListener&lt;/code> to add&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="event/EventListenerList.class.xmi#//@classifiers.0/@members.8"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:ReflectiveClassReference"/>
              <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0"/>
          </next>
          <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.19"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="removeChangeListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes a &lt;code>ChangeListener&lt;/code> from the progress bar.&#xA;     *&#xA;     * @param l the &lt;code>ChangeListener&lt;/code> to remove&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="event/EventListenerList.class.xmi#//@classifiers.0/@members.9"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:ReflectiveClassReference"/>
              <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
          </next>
          <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.19"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getChangeListeners">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of all the &lt;code>ChangeListener&lt;/code>s added&#xA;     * to this progress bar with &lt;code>addChangeListener&lt;/code>.&#xA;     *&#xA;     * @return all of the &lt;code>ChangeListener&lt;/code>s added or an empty&#xA;     *         array if no listeners have been added&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <child xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="event/EventListenerList.class.xmi#//@classifiers.0/@members.4"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:ReflectiveClassReference"/>
                <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.19"/>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="fireStateChanged">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Notifies all listeners that have registered interest in&#xA;     * &lt;code>ChangeEvent&lt;/code>s.&#xA;     * The event instance &#xA;     * is created if necessary.&#xA;     *&#xA;     * @see EventListenerList&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="listeners">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// Guaranteed to return a non-null array</comments>
              <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="event/EventListenerList.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.19"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// Process the listeners last to first, notifying</comments>
        <comments>// those that are interested in this event</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <comments>// Lazily create the event:</comments>
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="event/ChangeEvent.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:SelfReference">
                        <self xsi:type="literals:This"/>
                      </arguments>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="event/ChangeListener.class.xmi#//@classifiers.0/@members.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@variable">
                      <arraySelectors>
                        <position xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.1/@init"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </position>
                      </arraySelectors>
                    </child>
                  </expression>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.1/@init"/>
                </arraySelectors>
              </children>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:ReflectiveClassReference"/>
                <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.1/@init"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.1/@init"/>
          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getModel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="BoundedRangeModel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the data model used by this progress bar.&#xA;     *&#xA;     * @return the &lt;code>BoundedRangeModel&lt;/code> currently in use&#xA;     * @see    BoundedRangeModel&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setModel">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newModel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="BoundedRangeModel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the data model used by the &lt;code>JProgressBar&lt;/code>.&#xA;     *&#xA;     * @param  newModel the &lt;code>BoundedRangeModel&lt;/code> to use&#xA;     *&#xA;     * @beaninfo&#xA;     *    expert: true&#xA;     * description: The data model used by the JProgressBar.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldModel">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// PENDING(???) setting the same model to multiple bars is broken; listeners</comments>
              <target xsi:type="classifiers:Interface" href="BoundedRangeModel.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.12"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:NullLiteral"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.33"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.11"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.51"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.3"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../accessibility/AccessibleContext.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ConditionalExpression">
                        <child xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@variable"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </child>
                        <expressionIf xsi:type="literals:NullLiteral"/>
                        <expressionElse xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.4"/>
                            </next>
                          </arguments>
                        </expressionElse>
                      </expression>
                    </arguments>
                    <arguments xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ConditionalExpression">
                        <child xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </child>
                        <expressionIf xsi:type="literals:NullLiteral"/>
                        <expressionElse xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.4"/>
                            </next>
                          </arguments>
                        </expressionElse>
                      </expression>
                    </arguments>
                  </next>
                  <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.72"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.72"/>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.9"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/awt/Component.class.xmi#//@classifiers.0/@members.203"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@variable"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getValue">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* All of the model methods are implemented by delegation. */</comments>
        <comments>/**&#xA;     * Returns the progress bar's current value,&#xA;     * which is stored in the progress bar's &lt;code>BoundedRangeModel&lt;/code>.&#xA;     * The value is always between the &#xA;     * minimum and maximum values, inclusive. By default, the &#xA;     * value is initialized to be equal to the minimum value.&#xA;     *&#xA;     * @return  the current value of the progress bar&#xA;     * @see     #setValue&#xA;     * @see     BoundedRangeModel#getValue&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.4"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMinimum">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the progress bar's minimum value,&#xA;     * which is stored in the progress bar's &lt;code>BoundedRangeModel&lt;/code>.&#xA;     * By default, the minimum value is &lt;code>0&lt;/code>.&#xA;     *&#xA;     * @return  the progress bar's minimum value&#xA;     * @see     #setMinimum&#xA;     * @see     BoundedRangeModel#getMinimum&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.0"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaximum">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the progress bar's maximum value,&#xA;     * which is stored in the progress bar's &lt;code>BoundedRangeModel&lt;/code>.&#xA;     * By default, the maximum value is &lt;code>100&lt;/code>.&#xA;     *&#xA;     * @return  the progress bar's maximum value&#xA;     * @see     #setMaximum&#xA;     * @see     BoundedRangeModel#getMaximum&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.2"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setValue">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="n">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the progress bar's current value &#xA;     * (stored in the progress bar's data model) to &lt;code>n&lt;/code>.&#xA;     * The data model (a &lt;code>BoundedRangeModel&lt;/code> instance)&#xA;     * handles any mathematical&#xA;     * issues arising from assigning faulty values.&#xA;     * &lt;p>&#xA;     * If the new value is different from the previous value,&#xA;     * all change listeners are notified.&#xA;     *&#xA;     * @param   n       the new value&#xA;     * @see     #getValue&#xA;     * @see     BoundedRangeModel#setValue&#xA;     * @beaninfo&#xA;     *    preferred: true&#xA;     *  description: The progress bar's current value.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="brm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="BoundedRangeModel.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldValue">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.4"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.5"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.51"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../accessibility/AccessibleContext.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
                </arguments>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.4"/>
                    </next>
                  </arguments>
                </arguments>
              </next>
              <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.72"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.72"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setMinimum">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="n">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the progress bar's minimum value &#xA;     * (stored in the progress bar's data model) to &lt;code>n&lt;/code>.&#xA;     * The data model (a &lt;code>BoundedRangeModel&lt;/code> instance)&#xA;     * handles any mathematical&#xA;     * issues arising from assigning faulty values.&#xA;     * &lt;p>&#xA;     * If the minimum value is different from the previous minimum,&#xA;     * all change listeners are notified.&#xA;     *&#xA;     * @param  n       the new minimum&#xA;     * @see    #getMinimum&#xA;     * @see    #addChangeListener&#xA;     * @see    BoundedRangeModel#setMinimum&#xA;     * @beaninfo&#xA;     *  preferred: true&#xA;     * description: The progress bar's minimum value.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setMaximum">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="n">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the progress bar's maximum value&#xA;     * (stored in the progress bar's data model) to &lt;code>n&lt;/code>.&#xA;     * The underlying &lt;code>BoundedRangeModel&lt;/code> handles any mathematical&#xA;     * issues arising from assigning faulty values.&#xA;     * &lt;p>&#xA;     * If the maximum value is different from the previous maximum,&#xA;     * all change listeners are notified.&#xA;     *&#xA;     * @param  n       the new maximum&#xA;     * @see    #getMaximum&#xA;     * @see    #addChangeListener&#xA;     * @see    BoundedRangeModel#setMaximum&#xA;     * @beaninfo&#xA;     *    preferred: true&#xA;     *  description: The progress bar's maximum value.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.3"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.0"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setIndeterminate">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newValue">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the &lt;code>indeterminate&lt;/code> property of the progress bar,&#xA;     * which determines whether the progress bar is in determinate&#xA;     * or indeterminate mode.&#xA;     * An indeterminate progress bar continuously displays animation&#xA;     * indicating that an operation of unknown length is occurring.&#xA;     * By default, this property is &lt;code>false&lt;/code>.&#xA;     * Some look and feels might not support indeterminate progress bars;&#xA;     * they will ignore this property.&#xA;     * &#xA;     * &lt;p>&#xA;     *&#xA;     * See &#xA;     * &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/progress.html&quot; target=&quot;_top&quot;>How to Monitor Progress&lt;/a>&#xA;     * for examples of using indeterminate progress bars.&#xA;     *&#xA;     * @param newValue&#x9;&lt;code>true&lt;/code> if the progress bar&#xA;     * &#x9;&#x9;&#x9;should change to indeterminate mode;&#xA;     * &#x9;&#x9;&#x9;&lt;code>false&lt;/code> if it should revert to normal.&#xA;     *&#xA;     * @see #isIndeterminate&#xA;     * @see javax.swing.plaf.basic.BasicProgressBarUI&#xA;     * &#xA;     * @since 1.4&#xA;     *&#xA;     * @beaninfo&#xA;     *        bound: true&#xA;     *    attribute: visualUpdate true&#xA;     *  description: Set whether the progress bar is indeterminate (true)&#xA;     * &#x9;&#x9;     or normal (false).&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldValue">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="JComponent.class.xmi#//@classifiers.0/@members.209"/>
          <arguments xsi:type="references:StringReference" value="indeterminate"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isIndeterminate">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of the &lt;code>indeterminate&lt;/code> property.&#xA;     *&#xA;     * @return the value of the &lt;code>indeterminate&lt;/code> property&#xA;     * @see    #setIndeterminate&#xA;     *&#xA;     * @since 1.4&#xA;     *&#xA;     * @beaninfo  &#xA;     *  description: Is the progress bar indeterminate (true)&#xA;     *               or normal (false)?&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/io/ObjectOutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &#xA;     * See readObject() and writeObject() in JComponent for more &#xA;     * information about serialization in Swing.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.17"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="count">
              <typeReference xsi:type="types:Byte"/>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="JComponent.class.xmi#//@classifiers.0/@members.242"/>
                  <arguments xsi:type="references:SelfReference">
                    <self xsi:type="literals:This"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="JComponent.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="JComponent.class.xmi#//@classifiers.0/@members.241"/>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
                <arguments xsi:type="expressions:PrefixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@statement/@statements.0/@variable"/>
                  <operator xsi:type="operators:MinusMinus"/>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="JComponent.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="plaf/ComponentUI.class.xmi#//@classifiers.0/@members.1"/>
                    <arguments xsi:type="references:SelfReference">
                      <self xsi:type="literals:This"/>
                    </arguments>
                  </next>
                  <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.18"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.18"/>
                </children>
                <children xsi:type="literals:NullLiteral"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          </next>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="paramString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns a string representation of this &lt;code>JProgressBar&lt;/code>.&#xA;     * This method is intended to be used only for debugging purposes. The &#xA;     * content and format of the returned string may vary between&#xA;     * implementations. The returned string may be empty but may not &#xA;     * be &lt;code>null&lt;/code>.&#xA;     * &#xA;     * @return  a string representation of this &lt;code>JProgressBar&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="orientationString">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <children xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="SwingConstants.class.xmi#//@classifiers.0/@members.13"/>
                </children>
              </child>
              <expressionIf xsi:type="references:StringReference" value="HORIZONTAL"/>
              <expressionElse xsi:type="references:StringReference" value="VERTICAL"/>
            </expression>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="paintBorderString">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <expressionIf xsi:type="references:StringReference" value="true"/>
              <expressionElse xsi:type="references:StringReference" value="false"/>
            </expression>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="progressStringString">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                <children xsi:type="literals:NullLiteral"/>
              </child>
              <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
              <expressionElse xsi:type="references:StringReference" value=""/>
            </expression>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="paintStringString">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
              <expressionIf xsi:type="references:StringReference" value="true"/>
              <expressionElse xsi:type="references:StringReference" value="false"/>
            </expression>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="indeterminateString">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
              <expressionIf xsi:type="references:StringReference" value="true"/>
              <expressionElse xsi:type="references:StringReference" value="false"/>
            </expression>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="JComponent.class.xmi#//@classifiers.0/@members.249"/>
            </next>
            <self xsi:type="literals:Super"/>
          </children>
          <children xsi:type="references:StringReference" value=",orientation="/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
          <children xsi:type="references:StringReference" value=",paintBorder="/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.1/@variable"/>
          <children xsi:type="references:StringReference" value=",paintString="/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.3/@variable"/>
          <children xsi:type="references:StringReference" value=",progressString="/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.2/@variable"/>
          <children xsi:type="references:StringReference" value=",indeterminateString="/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.4/@variable"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAccessibleContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../accessibility/AccessibleContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/////////////////</comments>
        <comments>// Accessibility support</comments>
        <comments>////////////////</comments>
        <comments>/**&#xA;     * Gets the &lt;code>AccessibleContext&lt;/code> associated with this &#xA;     * &lt;code>JProgressBar&lt;/code>. For progress bars, the&#xA;     * &lt;code>AccessibleContext&lt;/code> takes the form of an &#xA;     * &lt;code>AccessibleJProgressBar&lt;/code>. &#xA;     * A new &lt;code>AccessibleJProgressBar&lt;/code> instance is created if necessary.&#xA;     *&#xA;     * @return an &lt;code>AccessibleJProgressBar&lt;/code> that serves as the &#xA;     *         &lt;code>AccessibleContext&lt;/code> of this &lt;code>JProgressBar&lt;/code>&#xA;     * @beaninfo&#xA;     *       expert: true&#xA;     *  description: The AccessibleContext associated with this ProgressBar.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.72"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.51"/>
                </typeReference>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.72"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="JComponent.class.xmi#//@classifiers.0/@members.72"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="AccessibleJProgressBar">
      <members xsi:type="members:ClassMethod" name="getAccessibleStateSet">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../accessibility/AccessibleStateSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the state set of this object.&#xA;         *&#xA;         * @return an instance of AccessibleState containing the current state &#xA;         * of the object&#xA;         * @see AccessibleState&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="states">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../accessibility/AccessibleStateSet.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="JComponent$AccessibleJComponent.class.xmi#//@classifiers.0/@members.10"/>
              </next>
              <self xsi:type="literals:Super"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@members.0/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../accessibility/AccessibleStateSet.class.xmi#//@classifiers.0/@members.3"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.7"/>
            </next>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@members.0/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../accessibility/AccessibleStateSet.class.xmi#//@classifiers.0/@members.3"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.21"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.18"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="SwingConstants.class.xmi#//@classifiers.0/@members.14"/>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@members.0/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../accessibility/AccessibleStateSet.class.xmi#//@classifiers.0/@members.3"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.22"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </expression>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@members.0/@statements.0/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleRole">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../accessibility/AccessibleRole.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the role of this object.&#xA;         *&#xA;         * @return an instance of AccessibleRole describing the role of the &#xA;         * object&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../accessibility/AccessibleRole.class.xmi#//@classifiers.0/@members.31"/>
            </next>
            <target xsi:type="classifiers:Class" href="../accessibility/AccessibleRole.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../accessibility/AccessibleValue.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the &lt;code>AccessibleValue&lt;/code> associated with this object.  In the&#xA;         * implementation of the Java Accessibility API for this class, &#xA;&#x9; * returns this object, which is responsible for implementing the&#xA;         * &lt;code>AccessibleValue&lt;/code> interface on behalf of itself.&#xA;&#x9; * &#xA;&#x9; * @return this object&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getCurrentAccessibleValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Number.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the accessible value of this object.&#xA;         *&#xA;         * @return the current value of this object&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.40"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setCurrentAccessibleValue">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/Number.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Sets the value of this object as a &lt;code>Number&lt;/code>.&#xA;         *&#xA;         * @return &lt;code>true&lt;/code> if the value was set&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <comments>// TIGER- 4422535 </comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@members.4/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@members.4/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../java/lang/Number.class.xmi#//@classifiers.0/@members.2"/>
              </next>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getMinimumAccessibleValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Number.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the minimum accessible value of this object.&#xA;         *&#xA;         * @return the minimum value of this object&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getMaximumAccessibleValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Number.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the maximum accessible value of this object.&#xA;         *&#xA;         * @return the maximum value of this object&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <comments>// TIGER - 4422362</comments>
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="BoundedRangeModel.class.xmi#//@classifiers.0/@members.8"/>
                </next>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * This class implements accessibility support for the &#xA;     * &lt;code>JProgressBar&lt;/code> class.  It provides an implementation of the &#xA;     * Java Accessibility API appropriate to progress bar user-interface &#xA;     * elements.&#xA;     * &lt;p>&#xA;     * &lt;strong>Warning:&lt;/strong>&#xA;     * Serialized objects of this class will not be compatible with&#xA;     * future Swing releases. The current serialization support is&#xA;     * appropriate for short term storage or RMI between applications running&#xA;     * the same version of Swing.  As of 1.4, support for long term storage&#xA;     * of all JavaBeans&lt;sup>&lt;font size=&quot;-2&quot;>TM&lt;/font>&lt;/sup>&#xA;     * has been added to the &lt;code>java.beans&lt;/code> package.&#xA;     * Please see {@link java.beans.XMLEncoder}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../accessibility/AccessibleValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="JComponent$AccessibleJComponent.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A component that, by default, displays an integer value within a bounded &#xA; * interval. A progress bar typically communicates the progress of some &#xA; * work by displaying its percentage of completion and possibly a textual&#xA; * display of this percentage.&#xA; *&#xA; * &lt;p>&#xA; *&#xA; * To indicate that a task of unknown length is executing,&#xA; * you can put a progress bar into indeterminate mode.&#xA; * While the bar is in indeterminate mode,&#xA; * it animates constantly to show that work is occurring.&#xA; * As soon as you can determine the task's length and amount of progress,&#xA; * you should update the progress bar's value&#xA; * and switch it back to determinate mode.&#xA; * &#xA; * &lt;p>&#xA; *&#xA; * Here is an example of creating a progress bar,&#xA; * where &lt;code>task&lt;/code> is an object &#xA; * that returns information about the progress of some work:&#xA; * &#xA; *&lt;pre>&#xA; *progressBar = new JProgressBar(0, task.getLengthOfTask());&#xA; *progressBar.setValue(0);&#xA; *progressBar.setStringPainted(true);&#xA; *&lt;/pre>&#xA; *&#xA; * Here is an example of updating the value of the progress bar:&#xA; *&#xA; *&lt;pre>&#xA; *progressBar.setValue(task.getCurrent());&#xA; *&lt;/pre>&#xA; *&#xA; * Here is an example of putting a progress bar into&#xA; * indeterminate mode,&#xA; * and then switching back to determinate mode&#xA; * once the length of the task is known:&#xA; *&#xA; *&lt;pre>&#xA; *progressBar = new JProgressBar();&#xA; *&lt;em>...//when the task of (initially) unknown length begins:&lt;/em>&#xA; *progressBar.setIndeterminate(true);&#xA; *&lt;em>...//do some work; get length of task...&lt;/em>&#xA; *progressBar.setMaximum(newLength);&#xA; *progressBar.setValue(newValue);&#xA; *progressBar.setIndeterminate(false);&#xA; *&lt;/pre>&#xA; *&#xA; * &lt;p>&#xA; * &#xA; * For complete examples and further documentation see&#xA; * &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/progress.html&quot; target=&quot;_top&quot;>How to Monitor Progress&lt;/a>,&#xA; * a section in &lt;em>The Java Tutorial.&lt;/em>&#xA; *&#xA; * &lt;p>&#xA; * &lt;strong>Warning:&lt;/strong>&#xA; * Serialized objects of this class will not be compatible with&#xA; * future Swing releases. The current serialization support is&#xA; * appropriate for short term storage or RMI between applications running&#xA; * the same version of Swing.  As of 1.4, support for long term storage&#xA; * of all JavaBeans&lt;sup>&lt;font size=&quot;-2&quot;>TM&lt;/font>&lt;/sup>&#xA; * has been added to the &lt;code>java.beans&lt;/code> package.&#xA; * Please see {@link java.beans.XMLEncoder}.&#xA; *&#xA; * @see javax.swing.plaf.basic.BasicProgressBarUI&#xA; *&#xA; * @beaninfo&#xA; *      attribute: isContainer false&#xA; *    description: A component that displays an integer value.&#xA; *&#xA; * @version 1.93 12/19/03&#xA; * @author Michael C. Albers&#xA; * @author Kathy Walrath&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="SwingConstants.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../accessibility/Accessible.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="JComponent.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
