<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="ListCellRenderer.java">
  <comments>/*&#xA; * @(#)ListCellRenderer.java&#x9;1.17 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/awt/Component.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ListCellRenderer">
    <members xsi:type="members:InterfaceMethod" name="getListCellRendererComponent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return a component that has been configured to display the specified&#xA;     * value. That component's &lt;code>paint&lt;/code> method is then called to&#xA;     * &quot;render&quot; the cell.  If it is necessary to compute the dimensions&#xA;     * of a list because the list cells do not have a fixed size, this method&#xA;     * is called to generate a component on which &lt;code>getPreferredSize&lt;/code>&#xA;     * can be invoked.&#xA;     *&#xA;     * @param list The JList we're painting.&#xA;     * @param value The value returned by list.getModel().getElementAt(index).&#xA;     * @param index The cells index.&#xA;     * @param isSelected True if the specified cell was selected.&#xA;     * @param cellHasFocus True if the specified cell has the focus.&#xA;     * @return A component whose paint() method will render the specified value.&#xA;     *&#xA;     * @see JList&#xA;     * @see ListSelectionModel&#xA;     * @see ListModel&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../java/awt/Component.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="list">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="JList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="isSelected">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cellHasFocus">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Identifies components that can be used as &quot;rubber stamps&quot; to paint&#xA; * the cells in a JList.  For example, to use a JLabel as a&#xA; * ListCellRenderer, you would write something like this:&#xA; * &lt;pre>&#xA; * class MyCellRenderer extends JLabel implements ListCellRenderer {&#xA; *     public MyCellRenderer() {&#xA; *         setOpaque(true);&#xA; *     }&#xA; *     public Component getListCellRendererComponent(&#xA; *         JList list,&#xA; *         Object value,&#xA; *         int index,&#xA; *         boolean isSelected,&#xA; *         boolean cellHasFocus)&#xA; *     {&#xA; *         setText(value.toString());&#xA; *         setBackground(isSelected ? Color.red : Color.white);&#xA; *         setForeground(isSelected ? Color.white : Color.black);&#xA; *         return this;&#xA; *     }&#xA; * }&#xA; * &lt;/pre>&#xA; *&#xA; * @see JList&#xA; * @see DefaultListCellRenderer&#xA; *&#xA; * @version 1.17 12/19/03&#xA; * @author Hans Muller&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
