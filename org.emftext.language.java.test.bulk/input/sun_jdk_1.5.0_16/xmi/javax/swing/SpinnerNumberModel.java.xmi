<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="SpinnerNumberModel.java">
  <comments>/*&#xA; * @(#)SpinnerNumberModel.java&#x9;1.12 04/05/12&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../java/io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="SpinnerNumberModel">
    <members xsi:type="members:Field" name="stepSize">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Number.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <additionalFields name="value"/>
    </members>
    <members xsi:type="members:Field" name="minimum">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <additionalFields name="maximum"/>
    </members>
    <members xsi:type="members:Constructor" name="SpinnerNumberModel">
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="value and stepSize must be non-null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.3"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="(minimum &lt;= value &lt;= maximum) is false"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../java/lang/Comparable.class.xmi#//@classifiers.0/@members.0"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
                        </next>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:LessThanOrEqual"/>
                    </expression>
                  </children>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.2"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.2">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../java/lang/Comparable.class.xmi#//@classifiers.0/@members.0"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
                        </next>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                    </expression>
                  </children>
                </expression>
              </children>
            </expression>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@additionalFields.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.3"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Number.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minimum">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maximum">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stepSize">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Number.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a &lt;code>SpinnerModel&lt;/code> that represents&#xA;     * a closed sequence of &#xA;     * numbers from &lt;code>minimum&lt;/code> to &lt;code>maximum&lt;/code>.  The&#xA;     * &lt;code>nextValue&lt;/code> and &lt;code>previousValue&lt;/code> methods &#xA;     * compute elements of the sequence by adding or subtracting &#xA;     * &lt;code>stepSize&lt;/code> respectively.  All of the parameters&#xA;     * must be mutually &lt;code>Comparable&lt;/code>, &lt;code>value&lt;/code>&#xA;     * and &lt;code>stepSize&lt;/code> must be instances of &lt;code>Integer&lt;/code>&#xA;     * &lt;code>Long&lt;/code>, &lt;code>Float&lt;/code>, or &lt;code>Double&lt;/code>.&#xA;     * &lt;p>&#xA;     * The &lt;code>minimum&lt;/code> and &lt;code>maximum&lt;/code> parameters&#xA;     * can be &lt;code>null&lt;/code> to indicate that the range doesn't&#xA;     * have an upper or lower bound.  &#xA;     * If &lt;code>value&lt;/code> or &lt;code>stepSize&lt;/code> is &lt;code>null&lt;/code>,&#xA;     * or if both &lt;code>minimum&lt;/code> and &lt;code>maximum&lt;/code>&#xA;     * are specified and &lt;code>mininum &amp;gt; maximum&lt;/code> then an&#xA;     * &lt;code>IllegalArgumentException&lt;/code> is thrown.&#xA;     * Similarly if &lt;code>(minimum &amp;lt;= value &amp;lt;= maximum&lt;/code>) is false,&#xA;     * an &lt;code>IllegalArgumentException&lt;/code> is thrown.&#xA;     * &#xA;     * @param value the current (non &lt;code>null&lt;/code>) value of the model&#xA;     * @param minimum the first number in the sequence or &lt;code>null&lt;/code>&#xA;     * @param maximum the last number in the sequence or &lt;code>null&lt;/code>&#xA;     * @param stepSize the difference between elements of the sequence&#xA;     * &#xA;     * @throws IllegalArgumentException if stepSize or value is&#xA;     *     &lt;code>null&lt;/code> or if the following expression is false:&#xA;     *     &lt;code>minimum &amp;lt;= value &amp;lt;= maximum&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="SpinnerNumberModel">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
          </arguments>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.1"/>
          </arguments>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.2"/>
          </arguments>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.3"/>
          </arguments>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minimum">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maximum">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stepSize">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a &lt;code>SpinnerNumberModel&lt;/code> with the specified&#xA;     * &lt;code>value&lt;/code>, &lt;code>minimum&lt;/code>/&lt;code>maximum&lt;/code> bounds,&#xA;     * and &lt;code>stepSize&lt;/code>.&#xA;     * &#xA;     * @param value the current value of the model&#xA;     * @param minimum the first number in the sequence&#xA;     * @param maximum the last number in the sequence&#xA;     * @param stepSize the difference between elements of the sequence&#xA;     * @throws IllegalArgumentException if the following expression is false:&#xA;     *     &lt;code>minimum &amp;lt;= value &amp;lt;= maximum&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="SpinnerNumberModel">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../java/lang/Double.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
          </arguments>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../java/lang/Double.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
          </arguments>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../java/lang/Double.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
          </arguments>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../java/lang/Double.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.3"/>
          </arguments>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minimum">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maximum">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stepSize">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a &lt;code>SpinnerNumberModel&lt;/code> with the specified&#xA;     * &lt;code>value&lt;/code>, &lt;code>minimum&lt;/code>/&lt;code>maximum&lt;/code> bounds, &#xA;     * and &lt;code>stepSize&lt;/code>.&#xA;     * &#xA;     * @param value the current value of the model&#xA;     * @param minimum the first number in the sequence&#xA;     * @param maximum the last number in the sequence&#xA;     * @param stepSize the difference between elements of the sequence&#xA;     * @throws IllegalArgumentException   if the following expression is false:&#xA;     *     &lt;code>minimum &amp;lt;= value &amp;lt;= maximum&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="SpinnerNumberModel">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </arguments>
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </arguments>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a &lt;code>SpinnerNumberModel&lt;/code> with no&#xA;     * &lt;code>minimum&lt;/code> or &lt;code>maximum&lt;/code> value, &#xA;     * &lt;code>stepSize&lt;/code> equal to one, and an initial value of zero.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="setMinimum">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minimum">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Changes the lower bound for numbers in this sequence. &#xA;     * If &lt;code>minimum&lt;/code> is &lt;code>null&lt;/code>,&#xA;     * then there is no lower bound.  No bounds checking is done here;&#xA;     * the new &lt;code>minimum&lt;/code> value may invalidate the&#xA;     * &lt;code>(minimum &amp;lt;= value &amp;lt= maximum)&lt;/code>&#xA;     * invariant enforced by the constructors.  This is to simplify updating&#xA;     * the model, naturally one should ensure that the invariant is true&#xA;     * before calling the &lt;code>getNextValue&lt;/code>,&#xA;     * &lt;code>getPreviousValue&lt;/code>, or &lt;code>setValue&lt;/code> methods.&#xA;     * &lt;p>&#xA;     * Typically this property is a &lt;code>Number&lt;/code> of the same type&#xA;     * as the &lt;code>value&lt;/code> however it's possible to use any&#xA;     * &lt;code>Comparable&lt;/code> with a &lt;code>compareTo&lt;/code>&#xA;     * method for a &lt;code>Number&lt;/code> with the same type as the value. &#xA;     * For example if value was a &lt;code>Long&lt;/code>,&#xA;     * &lt;code>minimum&lt;/code> might be a Date subclass defined like this:&#xA;     * &lt;pre>&#xA;     * MyDate extends Date {  // Date already implements Comparable&#xA;     *     public int compareTo(Long o) {&#xA;     *         long t = getTime();&#xA;     *         return (t &lt; o.longValue() ? -1 : (t == o.longValue() ? 0 : 1));&#xA;     *     }&#xA;     * }&#xA;     * &lt;/pre>&#xA;     * &lt;p>&#xA;     * This method fires a &lt;code>ChangeEvent&lt;/code>&#xA;     * if the &lt;code>minimum&lt;/code> has changed.&#xA;     * &#xA;     * @param minimum a &lt;code>Comparable&lt;/code> that has a&#xA;     *     &lt;code>compareTo&lt;/code> method for &lt;code>Number&lt;/code>s with &#xA;     *     the same type as &lt;code>value&lt;/code>&#xA;     * @see #getMinimum&#xA;     * @see #setMaximum&#xA;     * @see SpinnerModel#addChangeListener&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AbstractSpinnerModel.class.xmi#//@classifiers.0/@members.6"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </child>
          <expressionIf xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <self xsi:type="literals:This"/>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </expressionIf>
          <expressionElse xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../java/lang/Object.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
            </child>
          </expressionElse>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMinimum">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the first number in this sequence.&#xA;     * &#xA;     * @return the value of the &lt;code>minimum&lt;/code> property&#xA;     * @see #setMinimum&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setMaximum">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maximum">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Changes the upper bound for numbers in this sequence. &#xA;     * If &lt;code>maximum&lt;/code> is &lt;code>null&lt;/code>, then there&#xA;     * is no upper bound.  No bounds checking is done here; the new &#xA;     * &lt;code>maximum&lt;/code> value may invalidate the&#xA;     * &lt;code>(minimum &lt;= value &lt; maximum)&lt;/code>&#xA;     * invariant enforced by the constructors.  This is to simplify updating&#xA;     * the model, naturally one should ensure that the invariant is true&#xA;     * before calling the &lt;code>next&lt;/code>, &lt;code>previous&lt;/code>,&#xA;     * or &lt;code>setValue&lt;/code> methods.  &#xA;     * &lt;p>&#xA;     * Typically this property is a &lt;code>Number&lt;/code> of the same type&#xA;     * as the &lt;code>value&lt;/code> however it's possible to use any&#xA;     * &lt;code>Comparable&lt;/code> with a &lt;code>compareTo&lt;/code>&#xA;     * method for a &lt;code>Number&lt;/code> with the same type as the value. &#xA;     * See &lt;a href=&quot;#setMinimum(java.lang.Comparable)&quot;>&#xA;     * &lt;code>setMinimum&lt;/code>&lt;/a> for an example.&#xA;     * &lt;p>&#xA;     * This method fires a &lt;code>ChangeEvent&lt;/code> if the&#xA;     * &lt;code>maximum&lt;/code> has changed.&#xA;     * &#xA;     * @param maximum a &lt;code>Comparable&lt;/code> that has a&#xA;     *     &lt;code>compareTo&lt;/code> method for &lt;code>Number&lt;/code>s with &#xA;     *     the same type as &lt;code>value&lt;/code>&#xA;     * @see #getMaximum&#xA;     * @see #setMinimum&#xA;     * @see SpinnerModel#addChangeListener&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@additionalFields.0"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AbstractSpinnerModel.class.xmi#//@classifiers.0/@members.6"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </child>
          <expressionIf xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@additionalFields.0"/>
                <self xsi:type="literals:This"/>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </expressionIf>
          <expressionElse xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../java/lang/Object.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@additionalFields.0"/>
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
            </child>
          </expressionElse>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaximum">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the last number in the sequence.&#xA;     * &#xA;     * @return the value of the &lt;code>maximum&lt;/code> property&#xA;     * @see #setMaximum&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@additionalFields.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setStepSize">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stepSize">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Number.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Changes the size of the value change computed by the&#xA;     * &lt;code>getNextValue&lt;/code> and &lt;code>getPreviousValue&lt;/code>&#xA;     * methods.  An &lt;code>IllegalArgumentException&lt;/code>&#xA;     * is thrown if &lt;code>stepSize&lt;/code> is &lt;code>null&lt;/code>.&#xA;     * &lt;p>&#xA;     * This method fires a &lt;code>ChangeEvent&lt;/code> if the&#xA;     * &lt;code>stepSize&lt;/code> has changed.&#xA;     * &#xA;     * @param stepSize the size of the value change computed by the &#xA;     *     &lt;code>getNextValue&lt;/code> and &lt;code>getPreviousValue&lt;/code> methods&#xA;     * @see #getNextValue&#xA;     * @see #getPreviousValue&#xA;     * @see #getStepSize&#xA;     * @see SpinnerModel#addChangeListener&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="null stepSize"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AbstractSpinnerModel.class.xmi#//@classifiers.0/@members.6"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/lang/Object.class.xmi#//@classifiers.0/@members.4"/>
              <arguments xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <self xsi:type="literals:This"/>
              </arguments>
            </next>
          </child>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStepSize">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Number.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the size of the value change computed by the&#xA;     * &lt;code>getNextValue&lt;/code> &#xA;     * and &lt;code>getPreviousValue&lt;/code> methods.  &#xA;     * &#xA;     * @return the value of the &lt;code>stepSize&lt;/code> property&#xA;     * @see #setStepSize&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="incrValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Number.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dir">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="newValue">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/Number.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="v">
              <typeReference xsi:type="types:Double"/>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../java/lang/Number.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:MultiplicativeExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../java/lang/Number.class.xmi#//@classifiers.0/@members.5"/>
                      </next>
                    </children>
                    <children xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:Double"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
                    </children>
                    <multiplicativeOperators xsi:type="operators:Multiplication"/>
                  </expression>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../java/lang/Double.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@statement/@statements.0/@variable"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/Double.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../java/lang/Float.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@statement/@statements.0/@variable"/>
                  </value>
                </expression>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/Float.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/Double.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
            </expression>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="v">
              <typeReference xsi:type="types:Long"/>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../java/lang/Number.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:MultiplicativeExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../java/lang/Number.class.xmi#//@classifiers.0/@members.3"/>
                      </next>
                    </children>
                    <children xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:Long"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
                    </children>
                    <multiplicativeOperators xsi:type="operators:Multiplication"/>
                  </expression>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../java/lang/Long.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@elseStatement/@statements.0/@variable"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/Long.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:Int"/>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@elseStatement/@statements.0/@variable"/>
                      </arguments>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../java/lang/Short.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:Short"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@elseStatement/@statements.0/@variable"/>
                        </arguments>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../java/lang/Short.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../java/lang/Byte.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:Byte"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@elseStatement/@statements.0/@variable"/>
                        </arguments>
                      </value>
                    </expression>
                  </statements>
                </elseStatement>
              </elseStatement>
            </elseStatement>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@additionalFields.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@additionalFields.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../java/lang/Comparable.class.xmi#//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../java/lang/Comparable.class.xmi#//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </expression>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNextValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the next number in the sequence.&#xA;     * &#xA;     * @return &lt;code>value + stepSize&lt;/code> or &lt;code>null&lt;/code> if the sum &#xA;     *     exceeds &lt;code>maximum&lt;/code>.&#xA;     * &#xA;     * @see SpinnerModel#getNextValue&#xA;     * @see #getPreviousValue&#xA;     * @see #setStepSize&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
          <arguments xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Addition"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPreviousValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the previous number in the sequence.&#xA;     * &#xA;     * @return &lt;code>value - stepSize&lt;/code>, or&#xA;     *     &lt;code>null&lt;/code> if the sum is less &#xA;     *     than &lt;code>minimum&lt;/code>.&#xA;     * &#xA;     * @see SpinnerModel#getPreviousValue&#xA;     * @see #getNextValue&#xA;     * @see #setStepSize&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
          <arguments xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNumber">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Number.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of the current element of the sequence.&#xA;     * &#xA;     * @return the value property&#xA;     * @see #setValue&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of the current element of the sequence.&#xA;     * &#xA;     * @return the value property&#xA;     * @see #setValue&#xA;     * @see #getNumber&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setValue">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the current value for this sequence.  If &lt;code>value&lt;/code> is&#xA;     * &lt;code>null&lt;/code>, or not a &lt;code>Number&lt;/code>, an&#xA;     * &lt;code>IllegalArgumentException&lt;/code> is thrown.  No &#xA;     * bounds checking is done here; the new value may invalidate the &#xA;     * &lt;code>(minimum &amp;lt;= value &amp;lt;= maximum)&lt;/code>&#xA;     * invariant enforced by the constructors.   It's also possible to set &#xA;     * the value to be something that wouldn't naturally occur in the sequence,&#xA;     * i.e. a value that's not modulo the &lt;code>stepSize&lt;/code>. &#xA;     * This is to simplify updating the model, and to accommodate&#xA;     * spinners that don't want to restrict values that have been&#xA;     * directly entered by the user. Naturally, one should ensure that the &#xA;     * &lt;code>(minimum &amp;lt;= value &amp;lt;= maximum)&lt;/code> invariant is true&#xA;     * before calling the &lt;code>next&lt;/code>, &lt;code>previous&lt;/code>, or&#xA;     * &lt;code>setValue&lt;/code> methods.  &#xA;     * &lt;p>&#xA;     * This method fires a &lt;code>ChangeEvent&lt;/code> if the value has changed.&#xA;     * &#xA;     * @param value the current (non &lt;code>null&lt;/code>) &lt;code>Number&lt;/code>&#xA;     *         for this sequence&#xA;     * @throws IllegalArgumentException if &lt;code>value&lt;/code> is&#xA;     *         &lt;code>null&lt;/code> or not a &lt;code>Number&lt;/code>&#xA;     * @see #getNumber&#xA;     * @see #getValue&#xA;     * @see SpinnerModel#addChangeListener&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="illegal value"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../java/lang/Number.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
              </expression>
            </child>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../java/lang/Number.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AbstractSpinnerModel.class.xmi#//@classifiers.0/@members.6"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/lang/Object.class.xmi#//@classifiers.0/@members.4"/>
              <arguments xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@additionalFields.0"/>
                <self xsi:type="literals:This"/>
              </arguments>
            </next>
          </child>
        </condition>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** &#xA; * A &lt;code>SpinnerModel&lt;/code> for sequences of numbers. &#xA; * The upper and lower bounds of the sequence are defined&#xA; * by properties called &lt;code>minimum&lt;/code> and&#xA; * &lt;code>maximum&lt;/code>. The size of the increase or decrease&#xA; * computed by the &lt;code>nextValue&lt;/code> and&#xA; * &lt;code>previousValue&lt;/code> methods is defined by a property called&#xA; * &lt;code>stepSize&lt;/code>.  The &lt;code>minimum&lt;/code> and &#xA; * &lt;code>maximum&lt;/code> properties can be &lt;code>null&lt;/code>&#xA; * to indicate that the sequence has no lower or upper limit.&#xA; * All of the properties in this class are defined in terms of two&#xA; * generic types: &lt;code>Number&lt;/code> and &#xA; * &lt;code>Comparable&lt;/code>, so that all Java numeric types&#xA; * may be accommodated.  Internally, there's only support for&#xA; * values whose type is one of the primitive &lt;code>Number&lt;/code> types:&#xA; * &lt;code>Double&lt;/code>, &lt;code>Float&lt;/code>, &lt;code>Long&lt;/code>,&#xA; * &lt;code>Integer&lt;/code>, &lt;code>Short&lt;/code>, or &lt;code>Byte&lt;/code>.  &#xA; * &lt;p> &#xA; * To create a &lt;code>SpinnerNumberModel&lt;/code> for the integer &#xA; * range zero to one hundred, with&#xA; * fifty as the initial value, one could write: &#xA; * &lt;pre> &#xA; * Integer value = new Integer(50); &#xA; * Integer min = new Integer(0);&#xA; * Integer max = new Integer(100); &#xA; * Integer step = new Integer(1); &#xA; * SpinnerNumberModel model = new SpinnerNumberModel(value, min, max, step); &#xA; * int fifty = model.getNumber().intValue(); &#xA; * &lt;/pre> &#xA; * &lt;p> &#xA; * Spinners for integers and doubles are common, so special constructors &#xA; * for these cases are provided.  For example to create the model in &#xA; * the previous example, one could also write: &#xA; * &lt;pre> &#xA; * SpinnerNumberModel model = new SpinnerNumberModel(50, 0, 100, 1); &#xA; * &lt;/pre>&#xA; * &lt;p>&#xA; * This model inherits a &lt;code>ChangeListener&lt;/code>. &#xA; * The &lt;code>ChangeListeners&lt;/code> are notified&#xA; * whenever the model's &lt;code>value&lt;/code>, &lt;code>stepSize&lt;/code>, &#xA; * &lt;code>minimum&lt;/code>, or &lt;code>maximum&lt;/code> properties changes.&#xA; * &#xA; * @see JSpinner&#xA; * @see SpinnerModel&#xA; * @see AbstractSpinnerModel&#xA; * @see SpinnerListModel&#xA; * @see SpinnerDateModel&#xA; * &#xA; * @version 1.12 05/12/04&#xA; * @author Hans Muller&#xA; * @since 1.4 &#xA;*/</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../java/io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="AbstractSpinnerModel.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
