<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="InternalFrameFocusTraversalPolicy.java">
  <comments>/*&#xA; * @(#)InternalFrameFocusTraversalPolicy.java&#x9;1.4 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/awt/Component.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/awt/FocusTraversalPolicy.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="InternalFrameFocusTraversalPolicy">
    <members xsi:type="members:ClassMethod" name="getInitialComponent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/awt/Component.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="frame">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="JInternalFrame.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Component that should receive the focus when a&#xA;     * JInternalFrame is selected for the first time. Once the JInternalFrame&#xA;     * has been selected by a call to &lt;code>setSelected(true)&lt;/code>, the&#xA;     * initial Component will not be used again. Instead, if the JInternalFrame&#xA;     * loses and subsequently regains selection, or is made invisible or&#xA;     * undisplayable and subsequently made visible and displayable, the&#xA;     * JInternalFrame's most recently focused Component will become the focus&#xA;     * owner. The default implementation of this method returns the&#xA;     * JInternalFrame's default Component to focus.&#xA;     *&#xA;     * @param frame the JInternalFrame whose initial Component is to be&#xA;     *        returned&#xA;     * @return the Component that should receive the focus when frame is&#xA;     *         selected for the first time, or null if no suitable Component&#xA;     *         can be found&#xA;     * @see JInternalFrame#getMostRecentFocusOwner&#xA;     * @throws IllegalArgumentException if window is null&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../../java/awt/FocusTraversalPolicy.class.xmi#//@classifiers.0/@members.5"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A FocusTraversalPolicy which can optionally provide an algorithm for&#xA; * determining a JInternalFrame's initial Component. The initial Component is&#xA; * the first to receive focus when the JInternalFrame is first selected. By&#xA; * default, this is the same as the JInternalFrame's default Component to&#xA; * focus.&#xA; *&#xA; * @author David Mendenhall&#xA; * @version 1.4, 12/19/03&#xA; *&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../../java/awt/FocusTraversalPolicy.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
