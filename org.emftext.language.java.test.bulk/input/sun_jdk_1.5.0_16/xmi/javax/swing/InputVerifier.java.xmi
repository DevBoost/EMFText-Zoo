<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="InputVerifier.java">
  <comments>/*&#xA; * @(#)InputVerifier.java&#x9;1.9 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="InputVerifier">
    <members xsi:type="members:InterfaceMethod" name="verify">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="input">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="JComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Checks whether the JComponent's input is valid. This method should&#xA;   * have no side effects. It returns a boolean indicating the status&#xA;   * of the argument's input.&#xA;   *&#xA;   * @param input the JComponent to verify&#xA;   * @return &lt;code>true&lt;/code> when valid, &lt;code>false&lt;/code> when invalid&#xA;   * @see JComponent#setInputVerifier&#xA;   * @see JComponent#getInputVerifier&#xA;   *&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="shouldYieldFocus">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="input">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="JComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Calls &lt;code>verify(input)&lt;/code> to ensure that the input is valid.&#xA;   * This method can have side effects. In particular, this method&#xA;   * is called when the user attempts to advance focus out of the&#xA;   * argument component into another Swing component in this window.&#xA;   * If this method returns &lt;code>true&lt;/code>, then the focus is transfered&#xA;   * normally; if it returns &lt;code>false&lt;/code>, then the focus remains in&#xA;   * the argument component.&#xA;   *&#xA;   * @param input the JComponent to verify&#xA;   * @return &lt;code>true&lt;/code> when valid, &lt;code>false&lt;/code> when invalid&#xA;   * @see JComponent#setInputVerifier&#xA;   * @see JComponent#getInputVerifier&#xA;   *&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.0">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The purpose of this class is to help clients support smooth focus&#xA; * navigation through GUIs with text fields. Such GUIs often need&#xA; * to ensure that the text entered by the user is valid (for example,&#xA; * that it's in&#xA; * the proper format) before allowing the user to navigate out of&#xA; * the text field. To do this, clients create a subclass of&#xA; * &lt;code>InputVerifier&lt;/code> and, using &lt;code>JComponent&lt;/code>'s&#xA; * &lt;code>setInputVerifier&lt;/code> method,&#xA; * attach an instance of their subclass to the &lt;code>JComponent&lt;/code> whose input they&#xA; * want to validate. Before focus is transfered to another Swing component&#xA; * that requests it, the input verifier's &lt;code>shouldYieldFocus&lt;/code> method is&#xA; * called.  Focus is transfered only if that method returns &lt;code>true&lt;/code>.&#xA; * &lt;p>&#xA; * The following example has two text fields, with the first one expecting&#xA; * the string &quot;pass&quot; to be entered by the user. If that string is entered in&#xA; * the first text field, then the user can advance to the second text field&#xA; * either by clicking in it or by pressing TAB. However, if another string&#xA; * is entered in the first text field, then the user will be unable to &#xA; * transfer focus to the second text field.&#xA; * &lt;p>&#xA; * &lt;pre>&#xA; * import java.awt.*;&#xA; * import java.util.*;&#xA; * import java.awt.event.*;&#xA; * import javax.swing.*;&#xA; * &#xA; * // This program demonstrates the use of the Swing InputVerifier class.&#xA; * // It creates two text fields; the first of the text fields expects the&#xA; * // string &quot;pass&quot; as input, and will allow focus to advance out of it&#xA; * // only after that string is typed in by the user.&#xA; *&#xA; * public class VerifierTest extends JFrame {&#xA; *     public VerifierTest() {&#xA; *         JTextField tf1 = new JTextField (&quot;Type \&quot;pass\&quot; here&quot;);&#xA; * &#x9;   getContentPane().add (tf1, BorderLayout.NORTH);&#xA; * &#x9;   tf1.setInputVerifier(new PassVerifier());&#xA; * &#xA; * &#x9;   JTextField tf2 = new JTextField (&quot;TextField2&quot;);&#xA; * &#x9;   getContentPane().add (tf2, BorderLayout.SOUTH);&#xA; * &#xA; * &#x9;   WindowListener l = new WindowAdapter() {&#xA; * &#x9;       public void windowClosing(WindowEvent e) { &#xA; * &#x9;           System.exit(0); &#xA; * &#x9;       }&#xA; * &#x9;   };&#xA; * &#x9;   addWindowListener(l);&#xA; *     }&#xA; * &#xA; *     class PassVerifier extends InputVerifier {&#xA; *         public boolean verify(JComponent input) {&#xA; * &#x9;       JTextField tf = (JTextField) input;&#xA; * &#x9;       return &quot;pass&quot;.equals(tf.getText());&#xA; *         }&#xA; *     }&#xA; * &#xA; *     public static void main(String[] args) {&#xA; *         Frame f = new VerifierTest();&#xA; * &#x9;   f.pack();&#xA; * &#x9;   f.setVisible(true);&#xA; *     }&#xA; * }&#xA; * &lt;/pre>&#xA; *&#xA; *  @since 1.3&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
