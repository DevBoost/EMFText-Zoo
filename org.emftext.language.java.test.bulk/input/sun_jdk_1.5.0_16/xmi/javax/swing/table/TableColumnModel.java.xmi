<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="TableColumnModel.java">
  <comments>/*&#xA; * @(#)TableColumnModel.java&#x9;1.25 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <namespaces>table</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>event</namespaces>
    <classifier xsi:type="classifiers:Class" href="../event/ChangeEvent.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="TableColumnModel">
    <members xsi:type="members:InterfaceMethod" name="addColumn">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="aColumn">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TableColumn.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Modifying the model</comments>
        <comments>//</comments>
        <comments>/**&#xA;     *  Appends &lt;code>aColumn&lt;/code> to the end of the&#xA;     *  &lt;code>tableColumns&lt;/code> array.&#xA;     *  This method posts a &lt;code>columnAdded&lt;/code>&#xA;     *  event to its listeners.&#xA;     *&#xA;     * @param   aColumn         the &lt;code>TableColumn&lt;/code> to be added&#xA;     * @see     #removeColumn&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeColumn">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TableColumn.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Deletes the &lt;code>TableColumn&lt;/code> &lt;code>column&lt;/code> from the &#xA;     *  &lt;code>tableColumns&lt;/code> array.  This method will do nothing if &#xA;     *  &lt;code>column&lt;/code> is not in the table's column list.&#xA;     *  This method posts a &lt;code>columnRemoved&lt;/code>&#xA;     *  event to its listeners.&#xA;     *&#xA;     * @param   column          the &lt;code>TableColumn&lt;/code> to be removed&#xA;     * @see     #addColumn&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="moveColumn">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Moves the column and its header at &lt;code>columnIndex&lt;/code> to&#xA;     * &lt;code>newIndex&lt;/code>.  The old column at &lt;code>columnIndex&lt;/code>&#xA;     * will now be found at &lt;code>newIndex&lt;/code>.  The column that used&#xA;     * to be at &lt;code>newIndex&lt;/code> is shifted left or right&#xA;     * to make room.  This will not move any columns if&#xA;     * &lt;code>columnIndex&lt;/code> equals &lt;code>newIndex&lt;/code>.  This method &#xA;     * posts a &lt;code>columnMoved&lt;/code> event to its listeners.&#xA;     *&#xA;     * @param   columnIndex                     the index of column to be moved&#xA;     * @param   newIndex                        index of the column's new location&#xA;     * @exception IllegalArgumentException      if &lt;code>columnIndex&lt;/code> or &#xA;     *                                          &lt;code>newIndex&lt;/code>&#xA;     *                                          are not in the valid range&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setColumnMargin">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newMargin">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the &lt;code>TableColumn&lt;/code>'s column margin to&#xA;     * &lt;code>newMargin&lt;/code>.  This method posts&#xA;     * a &lt;code>columnMarginChanged&lt;/code> event to its listeners.&#xA;     *&#xA;     * @param   newMargin       the width, in pixels, of the new column margins&#xA;     * @see     #getColumnMargin&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getColumnCount">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Querying the model</comments>
        <comments>//</comments>
        <comments>/** &#xA;     * Returns the number of columns in the model.&#xA;     * @return the number of columns in the model&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getColumns">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="TableColumn.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns an &lt;code>Enumeration&lt;/code> of all the columns in the model.&#xA;     * @return an &lt;code>Enumeration&lt;/code> of all the columns in the model&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getColumnIndex">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIdentifier">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the index of the first column in the table&#xA;     * whose identifier is equal to &lt;code>identifier&lt;/code>,&#xA;     * when compared using &lt;code>equals&lt;/code>.&#xA;     *&#xA;     * @param           columnIdentifier        the identifier object&#xA;     * @return          the index of the first table column&#xA;     *                  whose identifier is equal to &lt;code>identifier&lt;/code>&#xA;     * @exception IllegalArgumentException      if &lt;code>identifier&lt;/code>&#xA;     *&#x9;&#x9;&#x9;&#x9;is &lt;code>null&lt;/code>, or no&#xA;     *&#x9;&#x9;&#x9;&#x9;&lt;code>TableColumn&lt;/code> has this&#xA;     *&#x9;&#x9;&#x9;&#x9;&lt;code>identifier&lt;/code>&#xA;     * @see             #getColumn&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getColumn">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TableColumn.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;code>TableColumn&lt;/code> object for the column at&#xA;     * &lt;code>columnIndex&lt;/code>.&#xA;     *&#xA;     * @param   columnIndex     the index of the desired column &#xA;     * @return  the &lt;code>TableColumn&lt;/code> object for&#xA;     *&#x9;&#x9;&#x9;&#x9;the column at &lt;code>columnIndex&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getColumnMargin">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the width between the cells in each column. &#xA;     * @return the margin, in pixels, between the cells&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getColumnIndexAtX">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xPosition">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the index of the column that lies on the &#xA;     * horizontal point, &lt;code>xPosition&lt;/code>;&#xA;     * or -1 if it lies outside the any of the column's bounds.&#xA;     *&#xA;     * In keeping with Swing's separable model architecture, a&#xA;     * TableColumnModel does not know how the table columns actually appear on&#xA;     * screen.  The visual presentation of the columns is the responsibility&#xA;     * of the view/controller object using this model (typically JTable).  The&#xA;     * view/controller need not display the columns sequentially from left to&#xA;     * right.  For example, columns could be displayed from right to left to&#xA;     * accomodate a locale preference or some columns might be hidden at the&#xA;     * request of the user.  Because the model does not know how the columns&#xA;     * are laid out on screen, the given &lt;code>xPosition&lt;/code> should not be&#xA;     * considered to be a coordinate in 2D graphics space.  Instead, it should&#xA;     * be considered to be a width from the start of the first column in the&#xA;     * model.  If the column index for a given X coordinate in 2D space is&#xA;     * required, &lt;code>JTable.columnAtPoint&lt;/code> can be used instead.&#xA;     *&#xA;     * @return  the index of the column; or -1 if no column is found&#xA;     * @see javax.swing.JTable#columnAtPoint&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTotalColumnWidth">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the total width of all the columns. &#xA;     * @return the total computed width of all columns&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setColumnSelectionAllowed">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flag">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Selection</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Sets whether the columns in this model may be selected.&#xA;     * @param flag   true if columns may be selected; otherwise false&#xA;     * @see #getColumnSelectionAllowed&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getColumnSelectionAllowed">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns true if columns may be selected.&#xA;     * @return true if columns may be selected&#xA;     * @see #setColumnSelectionAllowed&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSelectedColumns">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of indicies of all selected columns.&#xA;     * @return an array of integers containing the indicies of all&#xA;     *&#x9;&#x9;selected columns; or an empty array if nothing is selected&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSelectedColumnCount">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of selected columns.&#xA;     *&#xA;     * @return the number of selected columns; or 0 if no columns are selected&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSelectionModel">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newModel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../ListSelectionModel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the selection model.&#xA;     *&#xA;     * @param newModel  a &lt;code>ListSelectionModel&lt;/code> object&#xA;     * @see #getSelectionModel&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSelectionModel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../ListSelectionModel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the current selection model.&#xA;     *&#xA;     * @return a &lt;code>ListSelectionModel&lt;/code> object &#xA;     * @see #setSelectionModel&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addColumnModelListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../event/TableColumnModelListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Listener</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Adds a listener for table column model events.&#xA;     *&#xA;     * @param x  a &lt;code>TableColumnModelListener&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeColumnModelListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../event/TableColumnModelListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes a listener for table column model events.&#xA;     *&#xA;     * @param x  a &lt;code>TableColumnModelListener&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Defines the requirements for a table column model object suitable for&#xA; * use with &lt;code>JTable&lt;/code>.&#xA; *&#xA; * @version 1.25 05/05/04&#xA; * @author Alan Chung&#xA; * @author Philip Milne&#xA; * @see DefaultTableColumnModel&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
