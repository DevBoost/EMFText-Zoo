<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="BoundedRangeModel.java">
  <comments>/*&#xA; * @(#)BoundedRangeModel.java&#x9;1.28 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="BoundedRangeModel">
    <members xsi:type="members:InterfaceMethod" name="getMinimum">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the minimum acceptable value.&#xA;     *&#xA;     * @return the value of the minimum property&#xA;     * @see #setMinimum&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setMinimum">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Sets the model's minimum to &lt;I>newMinimum&lt;/I>.   The &#xA;     * other three properties may be changed as well, to ensure &#xA;     * that:&#xA;     * &lt;pre>&#xA;     * minimum &lt;= value &lt;= value+extent &lt;= maximum&#xA;     * &lt;/pre>&#xA;     * &lt;p>&#xA;     * Notifies any listeners if the model changes.&#xA;     *&#xA;     * @param newMinimum the model's new minimum&#xA;     * @see #getMinimum&#xA;     * @see #addChangeListener&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newMinimum">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMaximum">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the model's maximum.  Note that the upper&#xA;     * limit on the model's value is (maximum - extent).&#xA;     *&#xA;     * @return the value of the maximum property.&#xA;     * @see #setMaximum&#xA;     * @see #setExtent&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setMaximum">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Sets the model's maximum to &lt;I>newMaximum&lt;/I>. The other &#xA;     * three properties may be changed as well, to ensure that&#xA;     * &lt;pre>&#xA;     * minimum &lt;= value &lt;= value+extent &lt;= maximum&#xA;     * &lt;/pre>&#xA;     * &lt;p>&#xA;     * Notifies any listeners if the model changes.&#xA;     *&#xA;     * @param newMaximum the model's new maximum&#xA;     * @see #getMaximum&#xA;     * @see #addChangeListener&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newMaximum">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValue">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the model's current value.  Note that the upper&#xA;     * limit on the model's value is &lt;code>maximum - extent&lt;/code> &#xA;     * and the lower limit is &lt;code>minimum&lt;/code>.&#xA;     *&#xA;     * @return  the model's value&#xA;     * @see     #setValue&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setValue">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Sets the model's current value to &lt;code>newValue&lt;/code> if &lt;code>newValue&lt;/code>&#xA;     * satisfies the model's constraints. Those constraints are:&#xA;     * &lt;pre>&#xA;     * minimum &lt;= value &lt;= value+extent &lt;= maximum&#xA;     * &lt;/pre>&#xA;     * Otherwise, if &lt;code>newValue&lt;/code> is less than &lt;code>minimum&lt;/code> &#xA;     * it's set to &lt;code>minimum&lt;/code>, if its greater than &#xA;     * &lt;code>maximum&lt;/code> then it's set to &lt;code>maximum&lt;/code>, and &#xA;     * if it's greater than &lt;code>value+extent&lt;/code> then it's set to &#xA;     * &lt;code>value+extent&lt;/code>.&#xA;     * &lt;p>&#xA;     * When a BoundedRange model is used with a scrollbar the value&#xA;     * specifies the origin of the scrollbar knob (aka the &quot;thumb&quot; or&#xA;     * &quot;elevator&quot;).  The value usually represents the origin of the &#xA;     * visible part of the object being scrolled.&#xA;     * &lt;p>&#xA;     * Notifies any listeners if the model changes.&#xA;     *&#xA;     * @param newValue the model's new value&#xA;     * @see #getValue&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newValue">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setValueIsAdjusting">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * This attribute indicates that any upcoming changes to the value&#xA;     * of the model should be considered a single event. This attribute&#xA;     * will be set to true at the start of a series of changes to the value,&#xA;     * and will be set to false when the value has finished changing.  Normally&#xA;     * this allows a listener to only take action when the final value change in&#xA;     * committed, instead of having to do updates for all intermediate values.&#xA;     * &lt;p>&#xA;     * Sliders and scrollbars use this property when a drag is underway.&#xA;     * &#xA;     * @param b true if the upcoming changes to the value property are part of a series&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValueIsAdjusting">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Returns true if the current changes to the value property are part &#xA;     * of a series of changes.&#xA;     * &#xA;     * @return the valueIsAdjustingProperty.  &#xA;     * @see #setValueIsAdjusting&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getExtent">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the model's extent, the length of the inner range that&#xA;     * begins at the model's value.  &#xA;     *&#xA;     * @return  the value of the model's extent property&#xA;     * @see     #setExtent&#xA;     * @see     #setValue&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setExtent">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Sets the model's extent.  The &lt;I>newExtent&lt;/I> is forced to &#xA;     * be greater than or equal to zero and less than or equal to&#xA;     * maximum - value.   &#xA;     * &lt;p>&#xA;     * When a BoundedRange model is used with a scrollbar the extent&#xA;     * defines the length of the scrollbar knob (aka the &quot;thumb&quot; or&#xA;     * &quot;elevator&quot;).  The extent usually represents how much of the &#xA;     * object being scrolled is visible. When used with a slider,&#xA;     * the extent determines how much the value can &quot;jump&quot;, for&#xA;     * example when the user presses PgUp or PgDn.&#xA;     * &lt;p>&#xA;     * Notifies any listeners if the model changes.&#xA;     *&#xA;     * @param  newExtent the model's new extent&#xA;     * @see #getExtent&#xA;     * @see #setValue&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newExtent">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setRangeProperties">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * This method sets all of the model's data with a single method call.&#xA;     * The method results in a single change event being generated. This is&#xA;     * convenient when you need to adjust all the model data simultaneously and&#xA;     * do not want individual change events to occur.&#xA;     *&#xA;     * @param value  an int giving the current value &#xA;     * @param extent an int giving the amount by which the value can &quot;jump&quot;&#xA;     * @param min    an int giving the minimum value&#xA;     * @param max    an int giving the maximum value&#xA;     * @param adjusting a boolean, true if a series of changes are in&#xA;     *                    progress&#xA;     * &#xA;     * @see #setValue&#xA;     * @see #setExtent&#xA;     * @see #setMinimum&#xA;     * @see #setMaximum&#xA;     * @see #setValueIsAdjusting&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="extent">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="min">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="max">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="adjusting">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addChangeListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Adds a ChangeListener to the model's listener list.&#xA;     *&#xA;     * @param x the ChangeListener to add&#xA;     * @see #removeChangeListener&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeChangeListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Removes a ChangeListener from the model's listener list.&#xA;     *&#xA;     * @param x the ChangeListener to remove&#xA;     * @see #addChangeListener&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/ChangeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Defines the data model used by components like &lt;code>Slider&lt;/code>s&#xA; * and &lt;code>ProgressBar&lt;/code>s.&#xA; * Defines four interrelated integer properties: minimum, maximum, extent&#xA; * and value.  These four integers define two nested ranges like this:&#xA; * &lt;pre>&#xA; * minimum &lt;= value &lt;= value+extent &lt;= maximum&#xA; * &lt;/pre>&#xA; * The outer range is &lt;code>minimum,maximum&lt;/code> and the inner&#xA; * range is &lt;code>value,value+extent&lt;/code>.  The inner range&#xA; * must lie within the outer one, i.e. &lt;code>value&lt;/code> must be &#xA; * less than or equal to &lt;code>maximum&lt;/code> and &lt;code>value+extent&lt;/code>&#xA; * must greater than or equal to &lt;code>minimum&lt;/code>, and &lt;code>maximum&lt;/code>&#xA; * must be greater than or equal to &lt;code>minimum&lt;/code>.&#xA; * There are a few features of this model that one might find a little &#xA; * surprising.  These quirks exist for the convenience of the&#xA; * Swing BoundedRangeModel clients, such as &lt;code>Slider&lt;/code> and&#xA; * &lt;code>ScrollBar&lt;/code>.&#xA; * &lt;ul>&#xA; * &lt;li> &#xA; *   The minimum and maximum set methods &quot;correct&quot; the other &#xA; *   three properties to accommodate their new value argument.  For &#xA; *   example setting the model's minimum may change its maximum, value,&#xA; *   and extent properties (in that order), to maintain the constraints&#xA; *   specified above.  &#xA; * &#xA; * &lt;li>&#xA; *   The value and extent set methods &quot;correct&quot; their argument to &#xA; *   fit within the limits defined by the other three properties.  &#xA; *   For example if &lt;code>value == maximum&lt;/code>, &lt;code>setExtent(10)&lt;/code>&#xA; *   would change the extent (back) to zero.&#xA; * &#xA; * &lt;li> &#xA; *   The four BoundedRangeModel values are defined as Java Beans properties&#xA; *   however Swing ChangeEvents are used to notify clients of changes rather&#xA; *   than PropertyChangeEvents. This was done to keep the overhead of monitoring&#xA; *   a BoundedRangeModel low. Changes are often reported at MouseDragged rates. &#xA; * &lt;/ul>&#xA; *&#xA; * &lt;p>&#xA; * &#xA; * For an example of specifying custom bounded range models used by sliders,&#xA; * see &lt;a&#xA; href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/overview/anatomy.html&quot;>The Anatomy of a Swing-Based Program&lt;/a>&#xA; * in &lt;em>The Java Tutorial.&lt;/em>&#xA; * &#xA; * @version 1.28 12/19/03&#xA; * @author Hans Muller&#xA; * @see DefaultBoundedRangeModel&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
