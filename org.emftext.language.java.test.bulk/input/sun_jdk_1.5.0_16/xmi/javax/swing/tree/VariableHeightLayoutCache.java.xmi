<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../java.ecore#/17" name="VariableHeightLayoutCache.java">
  <comments>/*&#xA; * @(#)VariableHeightLayoutCache.java&#x9;1.21 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <namespaces>tree</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>event</namespaces>
    <classifier xsi:type="classifiers:Class" href="../event/TreeModelEvent.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/awt/Dimension.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/NoSuchElementException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Stack.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="VariableHeightLayoutCache">
    <comments>// VariableHeightLayoutCache.VisibleTreeStateNodeEnumeration</comments>
    <members xsi:type="members:Field" name="visibleNodes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The array of nodes that are currently visible, in the order they&#xA;     * are displayed.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="updateNodeSizes">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * This is set to true if one of the entries has an invalid size.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="root">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.44"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The root node of the internal cache of nodes that have been shown.&#xA;     * If the treeModel is vending a network rather than a true tree,&#xA;     * there may be one cached node for each path to a modeled node.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="boundsBuffer">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Used in getting sizes for nodes to avoid creating a new Rectangle&#xA;     * every time a size is needed.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="treePathMapping">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Maps from &lt;code>TreePath&lt;/code> to a &lt;code>TreeStateNode&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="tempStacks">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/util/Stack.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * A stack of stacks.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="VariableHeightLayoutCache">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/util/Stack.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </value>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:ClassMethod" name="setModel">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newModel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="TreeModel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the &lt;code>TreeModel&lt;/code> that will provide the data.&#xA;     *&#xA;     * @param newModel the &lt;code>TreeModel&lt;/code> that is to provide the data&#xA;     * @beaninfo&#xA;     *        bound: true&#xA;     *  description: The TreeModel that will provide the data.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.8"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
          <arguments xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setRootVisible">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="rootVisible">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines whether or not the root node from&#xA;     * the &lt;code>TreeModel&lt;/code> is visible.&#xA;     *&#xA;     * @param rootVisible true if the root node of the tree is to be displayed&#xA;     * @see #rootVisible&#xA;     * @beaninfo&#xA;     *        bound: true&#xA;     *  description: Whether or not the root node&#xA;     *               from the TreeModel is visible.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.36">
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.27"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.26"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="TreeSelectionModel.class.xmi#//@classifiers.0/@members.9"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.31"/>
                        </arguments>
                      </next>
                      <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.2"/>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.2"/>
                    </children>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </condition>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="TreeSelectionModel.class.xmi#//@classifiers.0/@members.23"/>
                </next>
                <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.2"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.2"/>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.33">
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </next>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.11"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.10"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setRowHeight">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="rowHeight">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the height of each cell.  If the specified value&#xA;     * is less than or equal to zero the current cell renderer is&#xA;     * queried for each row's height.&#xA;     *&#xA;     * @param rowHeight the height of each cell, in pixels&#xA;     * @beaninfo&#xA;     *        bound: true&#xA;     *  description: The height of each cell.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
              </next>
              <self xsi:type="literals:Super"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.23"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
              <self xsi:type="literals:This"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
          <children xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.13"/>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setNodeDimensions">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nd">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AbstractLayoutCache$NodeDimensions.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the renderer that is responsible for drawing nodes in the tree.&#xA;     * @param nd the renderer&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.6"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.23"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setExpandedState">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="isExpanded">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Marks the path &lt;code>path&lt;/code> expanded state to&#xA;     * &lt;code>isExpanded&lt;/code>.&#xA;     * @param path the &lt;code>TreePath&lt;/code> of interest&#xA;     * @param isExpanded true if the path should be expanded, otherwise false&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.40">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                <arguments xsi:type="literals:BooleanLiteral" value="true"/>
              </expression>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="node">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.44"/>
                  </typeReference>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                    <arguments xsi:type="literals:BooleanLiteral"/>
                    <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.27"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.29"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getExpandedState">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns true if the path is expanded, and visible.&#xA;     * @return true if the path is expanded and visible, otherwise false&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.44"/>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="literals:BooleanLiteral"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </child>
          <expressionIf xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.23"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
              </children>
            </expression>
          </expressionIf>
          <expressionElse xsi:type="literals:BooleanLiteral"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="placeIn">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Returns the &lt;code>Rectangle&lt;/code> enclosing the label portion&#xA;      * into which the item identified by &lt;code>path&lt;/code> will be drawn.&#xA;      *&#xA;      * @param path  the path to be drawn&#xA;      * @param placeIn the bounds of the enclosing rectangle&#xA;      * @return the bounds of the enclosing rectangle or &lt;code>null&lt;/code>&#xA;      *    if the node could not be ascertained&#xA;      */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.44"/>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="literals:BooleanLiteral"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
                <arguments xsi:type="literals:BooleanLiteral"/>
              </expression>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.13">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
              </next>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPathForRow">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="row">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Returns the path for &lt;code>row&lt;/code>.  If &lt;code>row&lt;/code>&#xA;      * is not visible, &lt;code>null&lt;/code> is returned.&#xA;      *&#xA;      * @param row the location of interest&#xA;      * @return the path for &lt;code>row&lt;/code>, or &lt;code>null&lt;/code>&#xA;      * if &lt;code>row&lt;/code> is not visible&#xA;      */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.31"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getRowForPath">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Returns the row where the last item identified in path is visible.&#xA;      * Will return -1 if any of the elements in path are not&#xA;      * currently visible.&#xA;      * &#xA;      * @param path the &lt;code>TreePath&lt;/code> of interest&#xA;      * @return the row where the last item in path is visible&#xA;      */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="visNode">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.44"/>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="literals:BooleanLiteral"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.1/@variable">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.1/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getRowCount">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of visible rows.&#xA;     * @return the number of visible rows&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="invalidatePathBounds">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Instructs the &lt;code>LayoutCache&lt;/code> that the bounds for&#xA;     * &lt;code>path&lt;/code> are invalid, and need to be updated.&#xA;     *&#xA;     * @param path the &lt;code>TreePath&lt;/code> which is now invalid&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.44"/>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="literals:BooleanLiteral"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@variable">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.37"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
                </arguments>
              </expression>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@variable">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.23"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPreferredHeight">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the preferred height.&#xA;     * @return the preferred height&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="rowCount">
          <typeReference xsi:type="types:Int">
            <comments>// Get the height</comments>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="node">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.44"/>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@statement/@statements.0/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.15"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@statement/@statements.0/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
              </children>
              <additiveOperators xsi:type="operators:Addition"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPreferredWidth">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bounds">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the preferred width and height for the region in&#xA;     * &lt;code>visibleRegion&lt;/code>.&#xA;     *&#xA;     * @param bounds  the region being queried&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
            <arguments xsi:type="literals:BooleanLiteral"/>
          </expression>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.42"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPathClosestTo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Returns the path to the node that is closest to x,y.  If&#xA;      * there is nothing currently visible this will return &lt;code>null&lt;/code>,&#xA;      * otherwise it will always return a valid path. &#xA;      * If you need to test if the&#xA;      * returned object is exactly at x, y you should get the bounds for&#xA;      * the returned path and test x, y against that.&#xA;      *&#xA;      * @param x  the x-coordinate &#xA;      * @param y  the y-coordinate &#xA;      * @return the path to the node that is closest to x, y&#xA;      */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
            <arguments xsi:type="literals:BooleanLiteral"/>
          </expression>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="row">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.31"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getVisiblePathsFrom">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an &lt;code>Enumerator&lt;/code> that increments over the visible paths&#xA;     * starting at the passed in location. The ordering of the enumeration&#xA;     * is based on how the paths are displayed.&#xA;     *&#xA;     * @param path the location in the &lt;code>TreePath&lt;/code> to start&#xA;     * @return an &lt;code>Enumerator&lt;/code> that increments over the visible&#xA;     *     paths&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.44"/>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="literals:BooleanLiteral"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.45"/>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getVisibleChildCount">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of visible children for &lt;code>path&lt;/code>.&#xA;     * @return the number of visible children for &lt;code>path&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.44"/>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="literals:BooleanLiteral"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </child>
          <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.25"/>
          </expressionIf>
          <expressionElse xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="invalidateSizes">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Informs the &lt;code>TreeState&lt;/code> that it needs to recalculate&#xA;     * all the sizes it is referencing.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.38"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
              <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.36"/>
            </child>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isExpanded">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Returns true if the value identified by &lt;code>path&lt;/code> is&#xA;      * currently expanded.&#xA;      * @return true if the value identified by &lt;code>path&lt;/code> is&#xA;      *    currently expanded&#xA;      */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="lastNode">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.44"/>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
                <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                <arguments xsi:type="literals:BooleanLiteral"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
                </children>
              </expression>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="treeNodesChanged">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../event/TreeModelEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// TreeModelListener methods</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Invoked after a node (or a set of siblings) has changed in some&#xA;     * way. The node(s) have not changed locations in the tree or&#xA;     * altered their children arrays, but other attributes have&#xA;     * changed and may affect presentation. Example: the name of a&#xA;     * file has changed, but it is in the same location in the file&#xA;     * system.&#xA;     *&#xA;     * &lt;p>&lt;code>e.path&lt;/code> returns the path the parent of the&#xA;     * changed node(s).&#xA;     *&#xA;     * &lt;p>&lt;code>e.childIndices&lt;/code> returns the index(es) of the&#xA;     * changed node(s).&#xA;     *&#xA;     * @param e the &lt;code>TreeModelEvent&lt;/code> of interest&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="changedIndexs">
              <typeReference xsi:type="types:Int"/>
              <arrayDimensionsAfter/>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="changedNode">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.44"/>
              </typeReference>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../event/TreeModelEvent.class.xmi#//@classifiers.0/@members.10"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../event/TreeModelEvent.class.xmi#//@classifiers.0/@members.7"/>
                  </next>
                </arguments>
                <arguments xsi:type="literals:BooleanLiteral"/>
                <arguments xsi:type="literals:BooleanLiteral"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="changedValue">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.1/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.30"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.1/@variable">
                  <comments>/* Update the size of the changed node, as well as all the&#xA;&#x9;&#x9;   child indexs that are passed in. */</comments>
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.35"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="counter">
                      <typeReference xsi:type="types:Int"/>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="changedChildNode">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@members.44"/>
                      </typeReference>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ForLoop">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.4/@statement/@statements.2/@statement/@statements.1/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences target="//@classifiers.0/@members.44"/>
                            </typeReference>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.1/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.12"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.0/@variable">
                                  <arraySelectors>
                                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@variable"/>
                                  </arraySelectors>
                                </arguments>
                              </next>
                            </child>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.4/@statement/@statements.2/@statement/@statements.1/@variable">
                          <comments>/* Reset the user object. */</comments>
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.10">
                            <arguments xsi:type="references:IdentifierReference">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.1"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.4/@statement/@statements.0/@variable"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.0/@variable">
                                  <arraySelectors>
                                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@variable"/>
                                  </arraySelectors>
                                </arguments>
                              </next>
                              <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.1"/>
                            </arguments>
                          </next>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.4/@statement/@statements.2/@statement/@statements.1/@variable">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.35"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.0/@variable">
                        <next xsi:type="references:IdentifierReference"/>
                      </children>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </condition>
                    <init xsi:type="expressions:ExpressionList">
                      <expressions xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </expressions>
                    </init>
                    <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </updates>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.1/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.20"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.1/@variable">
                        <comments>// Null indicies for root indicates it changed.</comments>
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.35"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.1/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                  </condition>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="aRow">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.1/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:SelfReference">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.4/@statement/@statements.3/@statement/@statements.0/@variable"/>
                        </next>
                        <self xsi:type="literals:This"/>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.4/@statement/@statements.3/@statement/@statements.0/@variable"/>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </children>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.36"/>
                  </child>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:SelfReference">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
                  <self xsi:type="literals:This"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@statement/@statements.1/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="treeNodesInserted">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../event/TreeModelEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Invoked after nodes have been inserted into the tree.&#xA;     *&#xA;     * &lt;p>&lt;code>e.path&lt;/code> returns the parent of the new nodes.&#xA;     * &lt;p>&lt;code>e.childIndices&lt;/code> returns the indices of the new nodes in&#xA;     * ascending order.&#xA;     *&#xA;     * @param e the &lt;code>TreeModelEvent&lt;/code> of interest&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="changedIndexs">
              <typeReference xsi:type="types:Int"/>
              <arrayDimensionsAfter/>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="changedParentNode">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.44"/>
              </typeReference>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../event/TreeModelEvent.class.xmi#//@classifiers.0/@members.10"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../event/TreeModelEvent.class.xmi#//@classifiers.0/@members.7"/>
                  </next>
                </arguments>
                <arguments xsi:type="literals:BooleanLiteral"/>
                <arguments xsi:type="literals:BooleanLiteral"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>/* Only need to update the children if the node has been&#xA;&#x9;       expanded once. */</comments>
            <comments>// PENDING(scott): make sure childIndexs is sorted!</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="makeVisible">
                      <typeReference xsi:type="types:Boolean"/>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="counter">
                      <typeReference xsi:type="types:Int"/>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="changedParent">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="newNode">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@members.44"/>
                      </typeReference>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="oldChildCount">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.13"/>
                        </next>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.2/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.30"/>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ConditionalOrExpression">
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:ConditionalAndExpression">
                              <children xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:Equal"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                              </children>
                              <children xsi:type="expressions:UnaryExpression">
                                <operators xsi:type="operators:Negate"/>
                                <child xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.3"/>
                                </child>
                              </children>
                            </expression>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:ConditionalAndExpression">
                              <children xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:NotEqual"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable">
                                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
                                </children>
                                <children xsi:type="expressions:UnaryExpression">
                                  <operators xsi:type="operators:Subtraction"/>
                                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                </children>
                              </children>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable">
                                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
                              </children>
                            </expression>
                          </children>
                        </expression>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ForLoop">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.3/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:SelfReference">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.0/@variable">
                                <arraySelectors>
                                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.1/@variable"/>
                                </arraySelectors>
                              </arguments>
                            </next>
                            <self xsi:type="literals:This"/>
                          </value>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.1/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.0/@variable">
                        <next xsi:type="references:IdentifierReference"/>
                      </children>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </condition>
                    <init xsi:type="expressions:ExpressionList">
                      <expressions xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.1/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </expressions>
                    </init>
                    <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.1/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </updates>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable">
                          <comments>// Update the size of the parent.</comments>
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.35"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.4/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="TreeSelectionModel.class.xmi#//@classifiers.0/@members.23"/>
                        </next>
                        <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.2"/>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.2"/>
                      </children>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <comments>/* Update the y origins from the index of the parent&#xA;&#x9;&#x9;       to the end of the visible rows. */</comments>
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:SelfReference">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                            </next>
                            <self xsi:type="literals:This"/>
                          </expression>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                        </condition>
                        <elseStatement xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:SelfReference">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable">
                                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
                              </arguments>
                            </next>
                            <self xsi:type="literals:This"/>
                          </expression>
                        </elseStatement>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:SelfReference">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
                          <self xsi:type="literals:This"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Negate"/>
                        <child xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.36"/>
                        </child>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ConditionalOrExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.0/@variable"/>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:ConditionalAndExpression">
                              <children xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:Equal"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.4/@variable"/>
                                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                              </children>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable">
                                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.23"/>
                              </children>
                            </expression>
                          </children>
                        </expression>
                      </children>
                    </condition>
                    <elseStatement xsi:type="statements:Condition">
                      <statement xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:SelfReference">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
                          <self xsi:type="literals:This"/>
                        </expression>
                      </statement>
                      <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.0/@variable"/>
                    </elseStatement>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.20"/>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.35"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
                          </arguments>
                        </expression>
                      </statement>
                      <condition xsi:type="expressions:ConditionalAndExpression">
                        <children xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Negate"/>
                          <child xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.36"/>
                          </child>
                        </children>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.23"/>
                        </children>
                      </condition>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.2"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.30"/>
                          </arguments>
                        </next>
                        <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.1"/>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.0/@variable">
                        <next xsi:type="references:IdentifierReference"/>
                      </children>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </condition>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.1/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference"/>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="treeNodesRemoved">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../event/TreeModelEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Invoked after nodes have been removed from the tree.  Note that&#xA;     * if a subtree is removed from the tree, this method may only be&#xA;     * invoked once for the root of the removed subtree, not once for&#xA;     * each individual set of siblings removed.&#xA;     *&#xA;     * &lt;p>&lt;code>e.path&lt;/code> returns the former parent of the deleted nodes.&#xA;     *&#xA;     * &lt;p>&lt;code>e.childIndices&lt;/code> returns the indices the nodes had&#xA;     * before they were deleted in ascending order.&#xA;     *&#xA;     * @param e the &lt;code>TreeModelEvent&lt;/code> of interest&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="changedIndexs">
              <typeReference xsi:type="types:Int"/>
              <arrayDimensionsAfter/>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="changedParentNode">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.44"/>
              </typeReference>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../event/TreeModelEvent.class.xmi#//@classifiers.0/@members.10"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../event/TreeModelEvent.class.xmi#//@classifiers.0/@members.7"/>
                  </next>
                </arguments>
                <arguments xsi:type="literals:BooleanLiteral"/>
                <arguments xsi:type="literals:BooleanLiteral"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// PENDING(scott): make sure that changedIndexs are sorted in</comments>
            <comments>// ascending order.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="makeInvisible">
                      <typeReference xsi:type="types:Boolean"/>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="counter">
                      <typeReference xsi:type="types:Int"/>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="removedRow">
                      <typeReference xsi:type="types:Int"/>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="removedNode">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@members.44"/>
                      </typeReference>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ConditionalOrExpression">
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:ConditionalAndExpression">
                              <children xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:Equal"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                              </children>
                              <children xsi:type="expressions:UnaryExpression">
                                <operators xsi:type="operators:Negate"/>
                                <child xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.3"/>
                                </child>
                              </children>
                            </expression>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:ConditionalAndExpression">
                              <children xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:NotEqual"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
                                </children>
                                <children xsi:type="expressions:UnaryExpression">
                                  <operators xsi:type="operators:Subtraction"/>
                                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                </children>
                              </children>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
                              </children>
                            </expression>
                          </children>
                        </expression>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ForLoop">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.3/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences target="//@classifiers.0/@members.44"/>
                            </typeReference>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.12"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.0/@variable">
                                  <arraySelectors>
                                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.1/@variable"/>
                                  </arraySelectors>
                                </arguments>
                              </next>
                            </child>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.3/@variable">
                              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.43">
                                <arguments xsi:type="literals:BooleanLiteral"/>
                              </next>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.3/@variable">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <comments>/* Let the selection model now. */</comments>
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.2/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.3/@variable">
                                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Condition">
                            <statement xsi:type="statements:Block">
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.26"/>
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.2/@variable"/>
                                  </next>
                                </expression>
                              </statements>
                            </statement>
                            <condition xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:NotEqual"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.2/@variable"/>
                              <children xsi:type="expressions:UnaryExpression">
                                <operators xsi:type="operators:Subtraction"/>
                                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                              </children>
                            </condition>
                          </statements>
                        </statement>
                        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.9">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.0/@variable">
                              <arraySelectors>
                                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.1/@variable"/>
                              </arraySelectors>
                            </arguments>
                          </next>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.1/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                    </condition>
                    <init xsi:type="expressions:ExpressionList">
                      <expressions xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.1/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.0/@variable">
                            <next xsi:type="references:IdentifierReference"/>
                          </children>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </value>
                      </expressions>
                    </init>
                    <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.1/@variable"/>
                      <operator xsi:type="operators:MinusMinus"/>
                    </updates>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                          <comments>// Update the size of the parent.</comments>
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.35"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                              <comments>// Node has become a leaf, collapse it.</comments>
                              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.43">
                                <arguments xsi:type="literals:BooleanLiteral"/>
                              </next>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:ConditionalAndExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
                          </children>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.12"/>
                          </children>
                        </condition>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.13"/>
                        </next>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="TreeSelectionModel.class.xmi#//@classifiers.0/@members.23"/>
                        </next>
                        <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.2"/>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.2"/>
                      </children>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <comments>/* Update the y origins from the index of the parent&#xA;&#x9;&#x9;       to the end of the visible rows. */</comments>
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:Condition">
                            <comments>/* It is possible for first row to have been&#xA;&#x9;&#x9;&#x9;       removed if the root isn't visible, in which&#xA;&#x9;&#x9;&#x9;       case ylocations will be off! */</comments>
                            <statement xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.33">
                                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                </next>
                                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                              </expression>
                            </statement>
                            <condition xsi:type="expressions:RelationExpression">
                              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                              <relationOperators xsi:type="operators:GreaterThan"/>
                            </condition>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                        </condition>
                        <elseStatement xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
                            </arguments>
                          </expression>
                        </elseStatement>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:SelfReference">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
                          <self xsi:type="literals:This"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Negate"/>
                        <child xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.36"/>
                        </child>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ConditionalOrExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.0/@variable"/>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:ConditionalAndExpression">
                              <children xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:Equal"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.13"/>
                                  </next>
                                </children>
                                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                              </children>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.23"/>
                              </children>
                            </expression>
                          </children>
                        </expression>
                      </children>
                    </condition>
                    <elseStatement xsi:type="statements:Condition">
                      <statement xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:SelfReference">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
                          <self xsi:type="literals:This"/>
                        </expression>
                      </statement>
                      <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.4/@statement/@statements.0/@statement/@statements.0/@variable"/>
                    </elseStatement>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.20"/>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.35"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:SelfReference">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
                            </arguments>
                          </next>
                          <self xsi:type="literals:This"/>
                        </expression>
                      </statement>
                      <condition xsi:type="expressions:ConditionalAndExpression">
                        <children xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Negate"/>
                          <child xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.36"/>
                          </child>
                        </children>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.23"/>
                        </children>
                      </condition>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.2"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.30"/>
                        </arguments>
                      </next>
                      <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.1"/>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </condition>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.1/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference"/>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="treeStructureChanged">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../event/TreeModelEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Invoked after the tree has drastically changed structure from a&#xA;     * given node down.  If the path returned by &lt;code>e.getPath&lt;/code>&#xA;     * is of length one and the first element does not identify the&#xA;     * current root node the first element should become the new root&#xA;     * of the tree.&#xA;     *&#xA;     * &lt;p>&lt;code>e.path&lt;/code> holds the path to the node.&#xA;     * &lt;p>&lt;code>e.childIndices&lt;/code> returns &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @param e the &lt;code>TreeModelEvent&lt;/code> of interest&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="changedPath">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../event/TreeModelEvent.class.xmi#//@classifiers.0/@members.7"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="changedNode">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.44"/>
              </typeReference>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.0/@variable"/>
                <arguments xsi:type="literals:BooleanLiteral"/>
                <arguments xsi:type="literals:BooleanLiteral"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// Check if root has changed, either to a null root, or</comments>
            <comments>// to an entirely new root.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
                  <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.1/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.1/@variable"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalOrExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ConditionalAndExpression">
                          <children xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:NullLiteral"/>
                          </children>
                          <children xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:NotEqual"/>
                            <children xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.1"/>
                            </children>
                            <children xsi:type="literals:NullLiteral"/>
                          </children>
                          <children xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.0"/>
                              </next>
                              <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.1"/>
                            </children>
                            <children xsi:type="literals:NullLiteral"/>
                          </children>
                        </expression>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ConditionalAndExpression">
                          <children xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:NotEqual"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:NullLiteral"/>
                          </children>
                          <children xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.0/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="TreePath.class.xmi#//@classifiers.0/@members.9"/>
                              </next>
                            </children>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          </children>
                        </expression>
                      </children>
                    </expression>
                  </children>
                </expression>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="nodeIndex">
                    <typeReference xsi:type="types:Int"/>
                    <additionalLocalVariables name="oldRow"/>
                  </variable>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="newNode">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@members.44"/>
                    </typeReference>
                    <additionalLocalVariables name="parent"/>
                  </variable>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="wasExpanded">
                    <typeReference xsi:type="types:Boolean"/>
                    <additionalLocalVariables name="wasVisible"/>
                  </variable>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="newIndex">
                    <typeReference xsi:type="types:Int"/>
                  </variable>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.2/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.1/@variable">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.2/@variable/@additionalLocalVariables.0"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.1/@variable">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
                        </children>
                        <children xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Subtraction"/>
                          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        </children>
                      </expression>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.1/@variable/@additionalLocalVariables.0">
                      <comments>/* Remove the current node and recreate a new one. */</comments>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@members.44"/>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.1/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.11"/>
                        </next>
                      </child>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.1/@variable/@additionalLocalVariables.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.14"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.1/@variable"/>
                      </next>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.1/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.43">
                          <arguments xsi:type="literals:BooleanLiteral"/>
                        </next>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.2/@variable/@additionalLocalVariables.0"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.2/@variable"/>
                  </condition>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.29"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.1/@variable"/>
                      </next>
                    </expression>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.2/@variable/@additionalLocalVariables.0"/>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.20"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.1/@variable/@additionalLocalVariables.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.0/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.1/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@members.44"/>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.1/@variable/@additionalLocalVariables.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.12"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.0/@variable"/>
                        </next>
                      </child>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.1/@variable">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.42">
                        <arguments xsi:type="literals:BooleanLiteral"/>
                      </next>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.2/@variable/@additionalLocalVariables.0"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.2/@variable"/>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.3/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.1/@variable">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.3/@variable"/>
                        </expression>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.3/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </condition>
                      <elseStatement xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                          <arguments xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.3/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <additiveOperators xsi:type="operators:Subtraction"/>
                          </arguments>
                        </expression>
                      </elseStatement>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:SelfReference">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
                        <self xsi:type="literals:This"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.36"/>
                      </child>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.2/@variable/@additionalLocalVariables.0"/>
                  </condition>
                  <elseStatement xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:SelfReference">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
                        <self xsi:type="literals:This"/>
                      </expression>
                    </statement>
                    <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.3/@elseStatement/@statement/@statements.2/@variable/@additionalLocalVariables.0"/>
                  </elseStatement>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@statement/@statements.1/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="visibleNodesChanged">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>//</comments>
        <comments>// Local methods</comments>
        <comments>//</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="addMapping">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.44"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Adds a mapping for node.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.31"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="removeMapping">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.44"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Removes the mapping for a previously added node.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.28"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.31"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMapping">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.44"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns the node previously added for &lt;code>path&lt;/code>. This may&#xA;     * return null, if you to create a node use getNodeForPath.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.44"/>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.25"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="row">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="placeIn">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Retursn the bounds for row, &lt;code>row&lt;/code> by reference in&#xA;     * &lt;code>placeIn&lt;/code>. If &lt;code>placeIn&lt;/code> is null a new&#xA;     * Rectangle will be created and returned.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
            <arguments xsi:type="literals:BooleanLiteral"/>
          </expression>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.13">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.1"/>
              </next>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="rebuild">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clearSelection">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Completely rebuild the tree, all expanded state, and node caches are&#xA;     * removed. All nodes are collapsed, except the root.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="rootObject">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.30"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.0/@variable"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.6"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.0/@variable"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.36">
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.30"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.28"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                </next>
              </expression>
            </statement>
            <condition xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.11"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.28"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
              </child>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="cursor">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.11"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:WhileLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.28"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.2/@statement/@statements.6/@elseStatement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:InterfaceMethod" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.1"/>
                          </next>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.2/@statement/@statements.6/@elseStatement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </expression>
                </statement>
                <condition xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.36"/>
                  </child>
                </condition>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.1"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                  <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.1"/>
                </value>
              </expression>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.30"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="TreeSelectionModel.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.2"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0"/>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.2"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
          <self xsi:type="literals:This"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createNodeAt">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.44"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parent">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.44"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="childIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;      * Creates a new node to represent the node at &lt;I>childIndex&lt;/I> in&#xA;      * &lt;I>parent&lt;/I>s children.  This should be called if the node doesn't&#xA;      * already exist and &lt;I>parent&lt;/I> has been expanded at least once.&#xA;      * The newly created node will be made visible if &lt;I>parent&lt;/I> is&#xA;      * currently expanded.  This does not update the position of any&#xA;      * cells, nor update the selection if it needs to be.  If succesful&#xA;      * in creating the new TreeStateNode, it is returned, otherwise&#xA;      * null is returned.&#xA;      */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="isParentRoot">
          <typeReference xsi:type="types:Boolean"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="newValue">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="newChildNode">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.44"/>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.1/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.30"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.1"/>
            </next>
            <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.1"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.2/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.1/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.8"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.2/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.1"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.2/@variable">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.36">
            <arguments xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            </expression>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="newRow">
              <typeReference xsi:type="types:Int"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>/* Find the new row to insert this newly visible node at. */</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.8/@statement/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </expression>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@variable"/>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.11"/>
                    </child>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.8/@statement/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </value>
                  </expression>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.1"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.8/@statement/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.22">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
                      </next>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.1"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.13"/>
                  </next>
                </children>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="previousNode">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@members.44"/>
                    </typeReference>
                  </variable>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.8/@statement/@statements.1/@elseStatement/@elseStatement/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@members.44"/>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.12"/>
                          <arguments xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.1"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <additiveOperators xsi:type="operators:Subtraction"/>
                          </arguments>
                        </next>
                      </child>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.8/@statement/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.8/@statement/@statements.1/@elseStatement/@elseStatement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.22">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
                        </next>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </value>
                  </expression>
                </statements>
              </elseStatement>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.27"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.2/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.8/@statement/@statements.0/@variable"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.2/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
                </children>
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </children>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@variable"/>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.2/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNodeForPath">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.44"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="onlyIfVisible">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="shouldCreate">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;      * Returns the TreeStateNode identified by path.  This mirrors&#xA;      * the behavior of getNodeForPath, but tries to take advantage of&#xA;      * path if it is an instance of AbstractTreePath.&#xA;      */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <comments>// If we get here it means they share a different root!</comments>
          <comments>// We could throw an exception...</comments>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="node">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.44"/>
              </typeReference>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.32">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Return">
                  <returnValue xsi:type="literals:NullLiteral"/>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.1"/>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.23"/>
                    </child>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="paths">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// Check all the parent paths, until a match is found.</comments>
                  <target xsi:type="classifiers:Class" href="../../../java/util/Stack.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../java/util/Stack.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../java/util/Stack.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/util/Stack.class.xmi#//@classifiers.0/@members.3"/>
                      </next>
                    </child>
                  </value>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.3/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/util/Stack.class.xmi#//@classifiers.0/@members.2"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="TreePath.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
            <statements xsi:type="statements:WhileLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.32">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:WhileLoop">
                      <comments>// Found a match, create entries for all paths in</comments>
                      <comments>// paths.</comments>
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:AssignmentExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
                            <assignmentOperator xsi:type="operators:Assignment"/>
                            <value xsi:type="expressions:CastExpression">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences>
                                  <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
                                </classifierReferences>
                              </typeReference>
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.3/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../../java/util/Stack.class.xmi#//@classifiers.0/@members.3"/>
                                </next>
                              </child>
                            </value>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.39">
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.2"/>
                            </next>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:LocalVariableStatement">
                          <variable name="childIndex">
                            <typeReference xsi:type="types:Int"/>
                            <initialValue xsi:type="references:IdentifierReference">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.5"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.19"/>
                                  </next>
                                </arguments>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="TreePath.class.xmi#//@classifiers.0/@members.8"/>
                                  </next>
                                </arguments>
                              </next>
                              <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.1"/>
                            </initialValue>
                          </variable>
                        </statements>
                        <statements xsi:type="statements:Condition">
                          <statement xsi:type="statements:Block">
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="expressions:AssignmentExpression">
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable"/>
                                <assignmentOperator xsi:type="operators:Assignment"/>
                                <value xsi:type="literals:NullLiteral"/>
                              </expression>
                            </statements>
                          </statement>
                          <condition xsi:type="expressions:ConditionalOrExpression">
                            <children xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:Equal"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.5/@statements.3/@statement/@statements.1/@statement/@statements.0/@statement/@statements.2/@variable"/>
                              <children xsi:type="expressions:UnaryExpression">
                                <operators xsi:type="operators:Subtraction"/>
                                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                              </children>
                            </children>
                            <children xsi:type="expressions:RelationExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.5/@statements.3/@statement/@statements.1/@statement/@statements.0/@statement/@statements.2/@variable"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.13"/>
                                </next>
                              </children>
                              <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                            </children>
                            <children xsi:type="expressions:NestedExpression">
                              <expression xsi:type="expressions:ConditionalAndExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.1"/>
                                <children xsi:type="expressions:UnaryExpression">
                                  <operators xsi:type="operators:Negate"/>
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable">
                                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.23"/>
                                  </child>
                                </children>
                              </expression>
                            </children>
                          </condition>
                          <elseStatement xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences target="//@classifiers.0/@members.44"/>
                                </typeReference>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.12"/>
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.5/@statements.3/@statement/@statements.1/@statement/@statements.0/@statement/@statements.2/@variable"/>
                                  </next>
                                </child>
                              </value>
                            </expression>
                          </elseStatement>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:ConditionalAndExpression">
                        <children xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </children>
                        <children xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.3/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                            </next>
                          </children>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          <relationOperators xsi:type="operators:GreaterThan"/>
                        </children>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable"/>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.3/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/util/Stack.class.xmi#//@classifiers.0/@members.2"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="TreePath.class.xmi#//@classifiers.0/@members.15"/>
                      </next>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <finallyBlock>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.3/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.30"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Stack.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.3/@variable"/>
                  </next>
                </expression>
              </statements>
            </finallyBlock>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="updateYLocationsFrom">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="location">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;      * Updates the y locations of all of the visible nodes after&#xA;      * location.&#xA;      */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="counter">
              <typeReference xsi:type="types:Int"/>
              <additionalLocalVariables name="maxCounter"/>
              <additionalLocalVariables name="newYOrigin"/>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="aNode">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.44"/>
              </typeReference>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.0/@variable/@additionalLocalVariables.1"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.15"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@members.44"/>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.0/@variable"/>
                      </next>
                    </child>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.33">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.0/@variable/@additionalLocalVariables.1"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.0/@variable/@additionalLocalVariables.1"/>
                  <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.1/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.0/@variable/@additionalLocalVariables.0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="expressions:ExpressionList">
              <expressions xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </value>
              </expressions>
              <expressions xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.0/@variable/@additionalLocalVariables.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </value>
              </expressions>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.0/@variable"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="updateNodeSizes">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="updateAll">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;      * Resets the y origin of all the visible nodes as well as messaging&#xA;      * all the visible nodes to updatePreferredSize().  You should not&#xA;      * normally have to call this.  Expanding and contracting the nodes&#xA;      * automaticly adjusts the locations.&#xA;      * updateAll determines if updatePreferredSize() is call on all nodes&#xA;      * or just those that don't have a valid size.&#xA;      */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="aY">
          <typeReference xsi:type="types:Int"/>
          <additionalLocalVariables name="counter"/>
          <additionalLocalVariables name="maxCounter"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.44"/>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.44"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable/@additionalLocalVariables.0"/>
                  </next>
                </child>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.1/@variable">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.33">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.1/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.36">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable/@additionalLocalVariables.0"/>
                </next>
              </expression>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.1/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.18"/>
                </child>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.1/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable/@additionalLocalVariables.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable/@additionalLocalVariables.1"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="expressions:ExpressionList">
          <expressions xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable/@additionalLocalVariables.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </value>
          </expressions>
          <expressions xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable/@additionalLocalVariables.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </value>
          </expressions>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable/@additionalLocalVariables.0"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getRowContainingYLocation">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="location">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;      * Returns the index of the row containing location.  If there&#xA;      * are no rows, -1 is returned.  If location is beyond the last&#xA;      * row index, the last row index is returned.&#xA;      */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Math.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Math.class.xmi#//@classifiers.0/@members.37"/>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </arguments>
                    <arguments xsi:type="expressions:MultiplicativeExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
                      <children xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.13"/>
                      </children>
                      <multiplicativeOperators xsi:type="operators:Division"/>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Math.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Math.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.36"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="max">
          <typeReference xsi:type="types:Int"/>
          <additionalLocalVariables name="maxY"/>
          <additionalLocalVariables name="mid"/>
          <additionalLocalVariables name="min"/>
          <additionalLocalVariables name="minY"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.44"/>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
            </expression>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.2"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.1"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="expressions:MultiplicativeExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.2"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                  <multiplicativeOperators xsi:type="operators:Division"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.2"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.44"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.1"/>
                  </next>
                </child>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.3"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.2/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.15"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.3"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.2/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.1"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.3"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.2"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.1"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.0"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </condition>
              <elseStatement xsi:type="statements:Break"/>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.2"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.1"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.2"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.1"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </value>
              </expression>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.1"/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
              <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.2"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@variable/@additionalLocalVariables.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ensurePathIsExpanded">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="aPath">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="expandLast">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Ensures that all the path components in path are expanded, accept&#xA;     * for the last component which will only be expanded if expandLast&#xA;     * is true.&#xA;     * Returns true if succesful in finding the path.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <comments>// Make sure the last entry isn't a leaf.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="TreePath.class.xmi#//@classifiers.0/@members.15"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.3"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="TreePath.class.xmi#//@classifiers.0/@members.8"/>
                  </next>
                </arguments>
              </next>
              <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.1"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="lastNode">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.44"/>
                  </typeReference>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
                    <arguments xsi:type="literals:BooleanLiteral"/>
                    <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.27"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.28"/>
                      </expression>
                    </statement>
                    <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.44"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="row">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns the AbstractTreeUI.VisibleNode displayed at the given row&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.44"/>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaxNodeWidth">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;      * Returns the maximum node width.&#xA;      */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="maxWidth">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nodeWidth">
          <typeReference xsi:type="types:Int"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="counter">
          <typeReference xsi:type="types:Int"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.44"/>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
                </next>
                <self xsi:type="literals:This"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.3/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.17"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.3/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.14"/>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.1/@variable"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.1/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
        <init xsi:type="expressions:ExpressionList">
          <expressions xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </value>
          </expressions>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
          <operator xsi:type="operators:MinusMinus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createNodeForValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.44"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;      * Responsible for creating a TreeStateNode that will be used&#xA;      * to track display information about value.&#xA;      */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.44"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="TreeStateNode">
      <members xsi:type="members:Field" name="preferredWidth">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/** Preferred size needed to draw the user object. */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="preferredHeight">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      </members>
      <members xsi:type="members:Field" name="xOrigin">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/** X location that the user object will be drawn at. */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="yOrigin">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/** Y location that the user object will be drawn at. */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="expanded">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/** Is this node currently expanded? */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="hasBeenExpanded">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/** Has this node been expanded at least once? */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/** Path of this node. */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Constructor" name="TreeStateNode">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.7/@parameters.0"/>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
      </members>
      <members xsi:type="members:ClassMethod" name="setParent">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="parent">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="MutableTreeNode.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>//</comments>
          <comments>// Overriden DefaultMutableTreeNode methods</comments>
          <comments>//</comments>
          <comments>/**&#xA;&#x9; * Messaged when this node is added somewhere, resets the path&#xA;&#x9; * and adds a mapping from path to this node.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.10"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.8/@parameters.0"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.6"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.31">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="TreePath.class.xmi#//@classifiers.0/@members.14"/>
                      <arguments xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.19"/>
                      </arguments>
                    </next>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@members.44"/>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.8/@parameters.0"/>
                  </expression>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.8/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="remove">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="childIndex">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Messaged when this node is removed from its parent, this messages&#xA;&#x9; * &lt;code>removedFromMapping&lt;/code> to remove all the children.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="node">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.44"/>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.44"/>
              </typeReference>
              <child xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.9/@parameters.0"/>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.9/@statements.0/@variable">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.44"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.9"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.9/@parameters.0"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setUserObject">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="o">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Messaged to set the user object. This resets the path.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.18"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.10/@parameters.0"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="parent">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.44"/>
                </typeReference>
                <initialValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.44"/>
                  </typeReference>
                  <child xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.11"/>
                  </child>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.32">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.10/@statements.1/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.31"/>
                  </arguments>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.10/@statements.1/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
              <elseStatement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.32">
                  <arguments xsi:type="literals:NullLiteral"/>
                </expression>
              </elseStatement>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.6"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="children">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the children of the receiver.&#xA;&#x9; * If the receiver is not currently expanded, this will return an&#xA;&#x9; * empty enumeration.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0"/>
              </returnValue>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
              <self xsi:type="literals:This"/>
            </child>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.15"/>
                </next>
                <self xsi:type="literals:Super"/>
              </returnValue>
            </statements>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isLeaf">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns true if the receiver is a leaf.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.3"/>
              <arguments xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.30"/>
                <self xsi:type="literals:This"/>
              </arguments>
            </next>
            <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.9"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getNodeBounds">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="placeIn">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>//</comments>
          <comments>// VariableHeightLayoutCache</comments>
          <comments>//</comments>
          <comments>/**&#xA;&#x9; * Returns the location and size of this node.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.13/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.14"/>
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.15"/>
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.17"/>
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.13/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.13/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.14"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.13/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.15"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.13/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.17"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.13/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
              </expression>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.13/@parameters.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getXOrigin">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * @return x location to draw node at.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.36">
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.18"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.2"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getYOrigin">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the y origin the user object will be drawn at.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="aRow">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Return">
                <returnValue xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </returnValue>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.15/@statements.0/@statement/@statements.0/@variable"/>
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.13"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.15/@statements.0/@statement/@statements.0/@variable"/>
                <multiplicativeOperators xsi:type="operators:Multiplication"/>
              </returnValue>
            </statements>
          </statement>
          <condition xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.36"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.3"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getPreferredHeight">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the preferred height of the receiver.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.13"/>
            </returnValue>
          </statement>
          <condition xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.36"/>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.36">
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.18"/>
            </condition>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.1"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getPreferredWidth">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the preferred width of the receiver.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.36">
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.18"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="hasValidSize">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns true if this node has a valid size.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.1"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expression>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getRow">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the row of the receiver.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.18"/>
              <arguments xsi:type="references:SelfReference">
                <self xsi:type="literals:This"/>
              </arguments>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="hasBeenExpanded">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns true if this node has been expanded at least once.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.5"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isExpanded">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns true if the receiver has been expanded.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.4"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getLastVisibleNode">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.44"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the last visible node that is a child of this&#xA;&#x9; * instance.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="node">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.44"/>
            </typeReference>
            <initialValue xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.22/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.44"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.22/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.44"/>
                  </next>
                </child>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.22/@statements.0/@variable">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
            </children>
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.22/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.13"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.22/@statements.0/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isVisible">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns true if the receiver is currently visible.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="parent">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.44"/>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.44"/>
              </typeReference>
              <child xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.11"/>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.23/@statements.1/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.23/@statements.1/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.23/@statements.1/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.23"/>
              </children>
            </expression>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getModelChildCount">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the number of children this will have. If the children&#xA;&#x9; * have not yet been loaded, this messages the model.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.13"/>
              </next>
              <self xsi:type="literals:Super"/>
            </returnValue>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.5"/>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.2"/>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.30"/>
            </next>
            <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.9"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getVisibleChildCount">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the number of visible children, that is the number of&#xA;&#x9; * children that are expanded, or leafs.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="childCount">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="maxCounter">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.13"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.25/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.25/@statements.1/@statement/@statements.0/@variable"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ForLoop">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.25/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                  <value xsi:type="expressions:NestedExpression">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.25"/>
                    <expression xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@members.44"/>
                      </typeReference>
                      <child xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.12"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.25/@statements.1/@statement/@statements.2/@init"/>
                      </child>
                    </expression>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.25/@statements.1/@statement/@statements.2/@init"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.25/@statements.1/@statement/@statements.0/@variable"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <init xsi:type="variables:LocalVariable" name="counter">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </init>
              <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.25/@statements.1/@statement/@statements.2/@init"/>
                <operator xsi:type="operators:PlusPlus"/>
              </updates>
            </statements>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.25/@statements.0/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="toggleExpanded">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Toggles the receiver between expanded and collapsed.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.29"/>
            </statements>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.28"/>
            </statements>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="makeVisible">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Makes the receiver visible, but invoking&#xA;&#x9; * &lt;code>expandParentAndReceiver&lt;/code> on the superclass.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="parent">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.44"/>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.44"/>
              </typeReference>
              <child xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.11"/>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.27/@statements.0/@variable">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.41"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.27/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="expand">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Expands the receiver.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.42">
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="collapse">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Collapses the receiver.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.43">
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the value the receiver is representing. This is a cover&#xA;&#x9; * for getUserObject.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.19"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getTreePath">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns a TreePath instance for this node.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.6"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="resetChildrenPaths">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="parentPath">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>//</comments>
          <comments>// Local methods</comments>
          <comments>//</comments>
          <comments>/**&#xA;&#x9; * Recreates the receivers path, and all its childrens paths.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.6"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.19"/>
                </arguments>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.32/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <elseStatement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.6"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.32/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="TreePath.class.xmi#//@classifiers.0/@members.14"/>
                  <arguments xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.19"/>
                  </arguments>
                </next>
              </value>
            </expression>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.32">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.6"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.44"/>
                </typeReference>
                <child xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.12"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.32/@statements.3/@init"/>
                </child>
              </expression>
            </expression>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.32/@statements.3/@init"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="counter">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.13"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </initialValue>
          </init>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.32/@statements.3/@init"/>
            <operator xsi:type="operators:MinusMinus"/>
          </updates>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setYOrigin">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="newYOrigin">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Sets y origin the user object will be drawn at to&#xA;&#x9; * &lt;I>newYOrigin&lt;/I>.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.3"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.33/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="shiftYOriginBy">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Shifts the y origin by &lt;code>offset&lt;/code>.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.3"/>
            <assignmentOperator xsi:type="operators:AssignmentPlus"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.34/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="updatePreferredSize">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Updates the receivers preferredSize by invoking&#xA;&#x9; * &lt;code>updatePreferredSize&lt;/code> with an argument of -1.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.36">
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="updatePreferredSize">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="index">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Updates the preferred size by asking the current renderer&#xA;&#x9; * for the Dimension needed to draw the user object this&#xA;&#x9; * instance represents.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="bounds">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.35"/>
              <arguments xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.19"/>
                </next>
                <self xsi:type="literals:This"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.36/@parameters.0"/>
              <arguments xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.29"/>
              </arguments>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.2"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.1"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:BooleanLiteral" value="true"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.36/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.2"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.1"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.36/@statements.0/@variable">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.2"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.36/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.36/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.1"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.13"/>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.36"/>
                </condition>
                <elseStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.1"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.36/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0/@members.3"/>
                      </next>
                    </value>
                  </expression>
                </elseStatement>
              </statements>
            </elseStatement>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="markSizeInvalid">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Marks the receivers size as invalid. Next time the size, location&#xA;&#x9; * is asked for it will be obtained.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="deepMarkSizeInvalid">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Marks the receivers size, and all its descendants sizes, as invalid.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.37"/>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.38"/>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.44"/>
                </typeReference>
                <child xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.12"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.38/@statements.1/@init"/>
                </child>
              </expression>
            </expression>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.38/@statements.1/@init"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="counter">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.13"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </initialValue>
          </init>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.38/@statements.1/@init"/>
            <operator xsi:type="operators:MinusMinus"/>
          </updates>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getLoadedChildren">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="createIfNeeded">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Returns the children of the receiver. If the children haven't&#xA;&#x9; * been loaded from the model and&#xA;&#x9; * &lt;code>createIfNeeded&lt;/code> is true, the children are first&#xA;&#x9; * loaded.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.15"/>
              </next>
              <self xsi:type="literals:Super"/>
            </returnValue>
          </statement>
          <condition xsi:type="expressions:ConditionalOrExpression">
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@parameters.0"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.5"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="newNode">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.44"/>
            </typeReference>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="realNode">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.30"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="treeModel">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="TreeModel.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.9"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="count">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.3/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.2"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.2/@variable"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.5"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:BooleanLiteral" value="true"/>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="childRow">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ForLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.1/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.3/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.1"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.2/@variable"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.7/@statement/@statements.0/@init"/>
                        </next>
                      </arguments>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:SelfReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.23"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.1/@variable"/>
                    </next>
                    <self xsi:type="literals:This"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.1/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.36">
                      <arguments xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </arguments>
                    </next>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.7/@statement/@statements.0/@init"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.4/@variable"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <init xsi:type="variables:LocalVariable" name="i">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </init>
              <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.7/@statement/@statements.0/@init"/>
                <operator xsi:type="operators:PlusPlus"/>
              </updates>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.6/@variable"/>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.6/@variable"/>
                <operator xsi:type="operators:PlusPlus"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ForLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.1/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.3/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.1"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.2/@variable"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.7/@elseStatement/@statements.1/@init"/>
                        </next>
                      </arguments>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:SelfReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.23"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.1/@variable"/>
                    </next>
                    <self xsi:type="literals:This"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.1/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.36">
                      <arguments xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.6/@variable"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </arguments>
                    </next>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.7/@elseStatement/@statements.1/@init"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.4/@variable"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <init xsi:type="variables:LocalVariable" name="i">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </init>
              <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.39/@statements.7/@elseStatement/@statements.1/@init"/>
                <operator xsi:type="operators:PlusPlus"/>
              </updates>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.15"/>
            </next>
            <self xsi:type="literals:Super"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="didAdjustTree">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Messaged from expand and collapse. This is meant for subclassers&#xA;&#x9; * that may wish to do something interesting with this.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="expandParentAndReceiver">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Invokes &lt;code>expandParentAndReceiver&lt;/code> on the parent,&#xA;&#x9; * and expands the receiver.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="parent">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.44"/>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.44"/>
              </typeReference>
              <child xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.11"/>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.41/@statements.0/@variable">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.41"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.41/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.28"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="expand">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="adjustTree">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Expands this node in the tree.  This will load the children&#xA;&#x9; * from the treeModel if this node has not previously been&#xA;&#x9; * expanded.  If &lt;I>adjustTree&lt;/I> is true the tree and selection&#xA;&#x9; * are updated accordingly.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="isFixed">
                <typeReference xsi:type="types:Boolean"/>
                <initialValue xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.36"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="startHeight">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="originalRow">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.4"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:BooleanLiteral" value="true"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.36">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.2/@variable"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="newNode">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@members.44"/>
                    </typeReference>
                  </variable>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="realNode">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.30"/>
                  </variable>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="treeModel">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="TreeModel.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.9"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="count">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.2"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.1/@variable"/>
                      </next>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.5"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:BooleanLiteral" value="true"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ForLoop">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:AssignmentExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.0/@variable"/>
                            <assignmentOperator xsi:type="operators:Assignment"/>
                            <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.2/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.1"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.1/@variable"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.5/@statement/@statements.0/@init"/>
                                </next>
                              </arguments>
                            </value>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:SelfReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.23"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.0/@variable"/>
                            </next>
                            <self xsi:type="literals:This"/>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.36">
                              <arguments xsi:type="expressions:UnaryExpression">
                                <operators xsi:type="operators:Subtraction"/>
                                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                              </arguments>
                            </next>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.5/@statement/@statements.0/@init"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.3/@variable"/>
                        <relationOperators xsi:type="operators:LessThan"/>
                      </condition>
                      <init xsi:type="variables:LocalVariable" name="i">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </init>
                      <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.5/@statement/@statements.0/@init"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </updates>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.2/@variable"/>
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Subtraction"/>
                      <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </children>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="offset">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.2/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:ForLoop">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:AssignmentExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.0/@variable"/>
                            <assignmentOperator xsi:type="operators:Assignment"/>
                            <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.2/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:InterfaceMethod" href="TreeModel.class.xmi#//@classifiers.0/@members.1"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.1/@variable"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.5/@elseStatement/@statements.1/@init"/>
                                </next>
                              </arguments>
                            </value>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:SelfReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.23"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.0/@variable"/>
                            </next>
                            <self xsi:type="literals:This"/>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.36">
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.5/@elseStatement/@statements.0/@variable"/>
                            </next>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.5/@elseStatement/@statements.1/@init"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.3/@variable"/>
                        <relationOperators xsi:type="operators:LessThan"/>
                      </condition>
                      <init xsi:type="variables:LocalVariable" name="i">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </init>
                      <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.5/@statement/@statements.5/@elseStatement/@statements.1/@init"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </updates>
                    </statements>
                  </elseStatement>
                </statements>
              </statement>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.5"/>
              </condition>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="i">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.2/@variable"/>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="cursor">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.37"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.7/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="newYOrigin">
                <typeReference xsi:type="types:Int">
                  <comments>// don't add me, I'm already in</comments>
                </typeReference>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.9/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.0/@variable"/>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.9/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </expression>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:SelfReference">
                      <self xsi:type="literals:This"/>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                  </children>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.11"/>
                    </child>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.9/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.15"/>
                      <children xsi:type="references:SelfReference">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
                        <self xsi:type="literals:This"/>
                      </children>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </value>
                  </expression>
                </elseStatement>
              </elseStatement>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="aNode">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.44"/>
                </typeReference>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:WhileLoop">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.11/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.44"/>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.7/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:InterfaceMethod" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.1"/>
                            </next>
                          </child>
                        </value>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.11/@variable">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.36">
                            <arguments xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.6/@variable"/>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                              <additiveOperators xsi:type="operators:Addition"/>
                            </arguments>
                          </next>
                        </expression>
                      </statement>
                      <condition xsi:type="expressions:ConditionalAndExpression">
                        <children xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Negate"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                        </children>
                        <children xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Negate"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.11/@variable">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.18"/>
                          </child>
                        </children>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.11/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.33">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.9/@variable"/>
                        </next>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.9/@variable"/>
                        <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                        <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.11/@variable">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
                        </value>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.27"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.11/@variable"/>
                          <arguments xsi:type="expressions:PrefixUnaryModificationExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.6/@variable"/>
                            <operator xsi:type="operators:PlusPlus"/>
                          </arguments>
                        </next>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.7/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </condition>
                </statements>
              </statement>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.0/@variable"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:WhileLoop">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.11/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.44"/>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.7/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:InterfaceMethod" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.1"/>
                            </next>
                          </child>
                        </value>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.27"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.11/@variable"/>
                          <arguments xsi:type="expressions:PrefixUnaryModificationExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.6/@variable"/>
                            <operator xsi:type="operators:PlusPlus"/>
                          </arguments>
                        </next>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.7/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </condition>
                </statements>
              </elseStatement>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Condition">
                  <comments>// Adjust the Y origin of any nodes following this row.</comments>
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="counter">
                        <typeReference xsi:type="types:Int"/>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="heightDiff">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.9/@variable"/>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.15"/>
                              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
                              <additiveOperators xsi:type="operators:Addition"/>
                            </expression>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.1/@variable"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </expression>
                          </children>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:ForLoop">
                      <statement xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:NestedExpression">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.34">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.13/@statement/@statements.0/@statement/@statements.1/@variable"/>
                          </next>
                          <expression xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences target="//@classifiers.0/@members.44"/>
                            </typeReference>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.13/@statement/@statements.0/@statement/@statements.0/@variable"/>
                              </next>
                            </child>
                          </expression>
                        </expression>
                      </statement>
                      <condition xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.13/@statement/@statements.0/@statement/@statements.0/@variable"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.6/@variable"/>
                        <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                      </condition>
                      <init xsi:type="expressions:ExpressionList">
                        <expressions xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.13/@statement/@statements.0/@statement/@statements.0/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                              </next>
                            </children>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <additiveOperators xsi:type="operators:Subtraction"/>
                          </value>
                        </expressions>
                      </init>
                      <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.13/@statement/@statements.0/@statement/@statements.0/@variable"/>
                        <operator xsi:type="operators:MinusMinus"/>
                      </updates>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.0/@variable"/>
                    </children>
                    <children xsi:type="expressions:RelationExpression">
                      <children xsi:type="expressions:PrefixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.6/@variable"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </children>
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </children>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.40"/>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@parameters.0"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ConditionalOrExpression">
                    <children xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.2/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.6/@variable"/>
                    </children>
                    <children xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.42/@statements.0/@statement/@statements.1/@variable"/>
                    </children>
                  </expression>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <comments>// Update the rows in the selection</comments>
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="TreeSelectionModel.class.xmi#//@classifiers.0/@members.23"/>
                    </next>
                    <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.2"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.2"/>
                </children>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
            </children>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.12"/>
            </children>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="collapse">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="adjustTree">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Collapses this node in the tree.  If &lt;I>adjustTree&lt;/I> is&#xA;&#x9; * true the tree and selection are updated accordingly.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="cursor">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.37"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="rowsDeleted">
                <typeReference xsi:type="types:Int">
                  <comments>// don't remove me, I'm still visible</comments>
                </typeReference>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="isFixed">
                <typeReference xsi:type="types:Boolean"/>
                <initialValue xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.36"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="lastYEnd">
                <typeReference xsi:type="types:Int"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.4/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.3/@variable"/>
              <elseStatement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.4/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.15"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </value>
                </expression>
              </elseStatement>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="startHeight">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="startYEnd">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.4/@variable"/>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="myRow">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.19"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:WhileLoop">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="node">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@members.44"/>
                        </typeReference>
                        <initialValue xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.44"/>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:InterfaceMethod" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.1"/>
                            </next>
                          </child>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.2/@variable"/>
                            <operator xsi:type="operators:PlusPlus"/>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:AssignmentExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.4/@variable">
                              <comments>//visibleNodes.removeElement(node);</comments>
                            </child>
                            <assignmentOperator xsi:type="operators:Assignment"/>
                            <value xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.9/@statement/@statements.0/@statement/@statements.0/@variable">
                                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.15"/>
                              </children>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.9/@statement/@statements.0/@statement/@statements.0/@variable">
                                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
                              </children>
                              <additiveOperators xsi:type="operators:Addition"/>
                            </value>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.9/@statement/@statements.0/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.23"/>
                      </condition>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </condition>
                </statements>
              </statement>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.3/@variable"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:WhileLoop">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="node">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@members.44"/>
                        </typeReference>
                        <initialValue xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.44"/>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:InterfaceMethod" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.1"/>
                            </next>
                          </child>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <comments>//visibleNodes.removeElement(node);</comments>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.2/@variable"/>
                            <operator xsi:type="operators:PlusPlus"/>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.9/@elseStatement/@statements.0/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.23"/>
                      </condition>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </condition>
                </statements>
              </elseStatement>
            </statements>
            <statements xsi:type="statements:ForLoop">
              <comments>// Clean up the visible nodes.</comments>
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.26"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.10/@init"/>
                    </next>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.10/@init"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.8/@variable"/>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </condition>
              <init xsi:type="variables:LocalVariable" name="counter">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.2/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.8/@variable"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </initialValue>
              </init>
              <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.10/@init"/>
                <operator xsi:type="operators:MinusMinus"/>
              </updates>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.4"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:BooleanLiteral"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.37"/>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.8/@variable"/>
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </children>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.36">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.8/@variable"/>
                  </expression>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@parameters.0"/>
              </elseStatement>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.7/@variable">
                      <comments>// Adjust the Y origin of any rows following this one.</comments>
                    </child>
                    <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                    <value xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.6/@variable"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </expression>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="counter">
                        <typeReference xsi:type="types:Int"/>
                        <additionalLocalVariables name="maxCounter"/>
                        <additionalLocalVariables name="shiftAmount"/>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.13/@statement/@statements.1/@statement/@statements.0/@variable/@additionalLocalVariables.1"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.7/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.4/@variable"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </value>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ForLoop">
                      <statement xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:NestedExpression">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.34">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.13/@statement/@statements.1/@statement/@statements.0/@variable/@additionalLocalVariables.1"/>
                          </next>
                          <expression xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences target="//@classifiers.0/@members.44"/>
                            </typeReference>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.13/@statement/@statements.1/@statement/@statements.0/@variable"/>
                              </next>
                            </child>
                          </expression>
                        </expression>
                      </statement>
                      <condition xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.13/@statement/@statements.1/@statement/@statements.0/@variable"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.13/@statement/@statements.1/@statement/@statements.0/@variable/@additionalLocalVariables.0"/>
                        <relationOperators xsi:type="operators:LessThan"/>
                      </condition>
                      <init xsi:type="expressions:ExpressionList">
                        <expressions xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.13/@statement/@statements.1/@statement/@statements.0/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.8/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                          </value>
                        </expressions>
                        <expressions xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.13/@statement/@statements.1/@statement/@statements.0/@variable/@additionalLocalVariables.0"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                            </next>
                          </value>
                        </expressions>
                      </init>
                      <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.13/@statement/@statements.1/@statement/@statements.0/@variable"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </updates>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.3/@variable"/>
                    </children>
                    <children xsi:type="expressions:RelationExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.8/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </expression>
                      </children>
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </children>
                    <children xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.7/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.4/@variable"/>
                    </children>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.40"/>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.8/@variable"/>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </children>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@parameters.0"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ConditionalOrExpression">
                    <children xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.2/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </children>
                    <children xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.6/@variable"/>
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.16"/>
                    </children>
                  </expression>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="TreeSelectionModel.class.xmi#//@classifiers.0/@members.23"/>
                    </next>
                    <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.2"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="AbstractLayoutCache.class.xmi#//@classifiers.0/@members.2"/>
                  </children>
                  <children xsi:type="literals:NullLiteral"/>
                </children>
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.2/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:GreaterThan"/>
                </children>
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.43/@statements.0/@statement/@statements.8/@variable"/>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </children>
                </children>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="removeFromMapping">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Removes the receiver, and all its children, from the mapping&#xA;&#x9; * table.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
              </expression>
            </statements>
            <statements xsi:type="statements:ForLoop">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.44"/>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@members.44"/>
                    </typeReference>
                    <child xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.12"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.44/@statements.0/@statement/@statements.1/@init"/>
                    </child>
                  </expression>
                </expression>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.44/@statements.0/@statement/@statements.1/@init"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </condition>
              <init xsi:type="variables:LocalVariable" name="counter">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.13"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </initialValue>
              </init>
              <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.44/@statements.0/@statement/@statements.1/@init"/>
                <operator xsi:type="operators:MinusMinus"/>
              </updates>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@members.6"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * TreeStateNode is used to keep track of each of&#xA;     * the nodes that have been expanded. This will also cache the preferred&#xA;     * size of the value it represents.&#xA;     */</comments>
      </annotationsAndModifiers>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="VisibleTreeStateNodeEnumeration">
      <members xsi:type="members:Field" name="parent">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.44"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/** Parent thats children are being enumerated. */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="nextIndex">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/** Index of next child. An index of -1 signifies parent should be&#xA;&#x9; * visibled next. */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="childCount">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/** Number of children in parent. */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Constructor" name="VisibleTreeStateNodeEnumeration">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3/@parameters.0"/>
            <arguments xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arguments>
            <callTarget xsi:type="literals:This"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.44"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      </members>
      <members xsi:type="members:Constructor" name="VisibleTreeStateNodeEnumeration">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.13"/>
                </next>
              </next>
              <self xsi:type="literals:This"/>
            </value>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="parent">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.44"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="startIndex">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      </members>
      <members xsi:type="members:ClassMethod" name="hasMoreElements">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * @return true if more visible nodes.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="nextElement">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * @return next visible TreePath.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/util/NoSuchElementException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="No more visible paths"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.45/@members.5"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="retObject">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.6/@statements.1/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.31"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="node">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.44"/>
                </typeReference>
                <initialValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.44"/>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.12"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
                    </next>
                  </child>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.6/@statements.1/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.6/@statements.2/@elseStatement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.31"/>
                </value>
              </expression>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45/@members.7"/>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.6/@statements.1/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="updateNextObject">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Determines the next object by invoking &lt;code>updateNextIndex&lt;/code>&#xA;&#x9; * and if not succesful &lt;code>findNextValidParent&lt;/code>.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45/@members.8"/>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.45/@members.9"/>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="findNextValidParent">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Finds the next valid parent, this should be called when nextIndex&#xA;&#x9; * is beyond the number of children of the current parent.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0">
                  <comments>// mark as invalid!</comments>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          </condition>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="newParent">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.44"/>
                </typeReference>
                <initialValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.44"/>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.11"/>
                    </next>
                  </child>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.8/@statements.1/@statement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.14"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
                      </next>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.13"/>
                      </next>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Return">
                    <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
                  </statement>
                  <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.45/@members.9"/>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
              <elseStatement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:NullLiteral"/>
                </expression>
              </elseStatement>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="updateNextIndex">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Updates &lt;code>nextIndex&lt;/code> returning false if it is beyond&#xA;&#x9; * the number of children of parent.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <comments>// nextIndex == -1 identifies receiver, make sure is expanded</comments>
          <comments>// before descend.</comments>
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </children>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
              </child>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// Check that it can have kids</comments>
          <comments>// Make sure next index not beyond child count.</comments>
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:PrefixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
                <operator xsi:type="operators:PlusPlus"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
              <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
            </condition>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="child">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.44"/>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.44"/>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.12"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
                </next>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.9/@statements.2/@variable"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.9/@statements.2/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="DefaultMutableTreeNode.class.xmi#//@classifiers.0/@members.13"/>
                  </next>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.9/@statements.2/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.9/@statements.2/@variable">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.44/@members.21"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// End of VariableHeightLayoutCache.TreeStateNode</comments>
        <comments>/**&#xA;     * An enumerator to iterate through visible nodes.&#xA;     */</comments>
      </annotationsAndModifiers>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * NOTE: This will become more open in a future release.&#xA; * &lt;p>&#xA; * &lt;strong>Warning:&lt;/strong>&#xA; * Serialized objects of this class will not be compatible with&#xA; * future Swing releases. The current serialization support is&#xA; * appropriate for short term storage or RMI between applications running&#xA; * the same version of Swing.  As of 1.4, support for long term storage&#xA; * of all JavaBeans&lt;sup>&lt;font size=&quot;-2&quot;>TM&lt;/font>&lt;/sup>&#xA; * has been added to the &lt;code>java.beans&lt;/code> package.&#xA; * Please see {@link java.beans.XMLEncoder}.&#xA; *&#xA; * @version 1.21 05/05/04&#xA; * @author Rob Davis&#xA; * @author Ray Ryan&#xA; * @author Scott Violet&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="AbstractLayoutCache.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
