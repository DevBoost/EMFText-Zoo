<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="TreeModel.java">
  <comments>/*&#xA; * @(#)TreeModel.java&#x9;1.23 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <namespaces>tree</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="TreeModel">
    <members xsi:type="members:InterfaceMethod" name="getRoot">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the root of the tree.  Returns &lt;code>null&lt;/code>&#xA;     * only if the tree has no nodes.&#xA;     *&#xA;     * @return  the root of the tree&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getChild">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parent">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the child of &lt;code>parent&lt;/code> at index &lt;code>index&lt;/code>&#xA;     * in the parent's&#xA;     * child array.  &lt;code>parent&lt;/code> must be a node previously obtained&#xA;     * from this data source. This should not return &lt;code>null&lt;/code>&#xA;     * if &lt;code>index&lt;/code>&#xA;     * is a valid index for &lt;code>parent&lt;/code> (that is &lt;code>index >= 0 &amp;&amp;&#xA;     * index &lt; getChildCount(parent&lt;/code>)).&#xA;     *&#xA;     * @param   parent  a node in the tree, obtained from this data source&#xA;     * @return  the child of &lt;code>parent&lt;/code> at index &lt;code>index&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getChildCount">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parent">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of children of &lt;code>parent&lt;/code>.&#xA;     * Returns 0 if the node&#xA;     * is a leaf or if it has no children.  &lt;code>parent&lt;/code> must be a node&#xA;     * previously obtained from this data source.&#xA;     *&#xA;     * @param   parent  a node in the tree, obtained from this data source&#xA;     * @return  the number of children of the node &lt;code>parent&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isLeaf">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> if &lt;code>node&lt;/code> is a leaf.&#xA;     * It is possible for this method to return &lt;code>false&lt;/code>&#xA;     * even if &lt;code>node&lt;/code> has no children.&#xA;     * A directory in a filesystem, for example,&#xA;     * may contain no files; the node representing&#xA;     * the directory is not a leaf, but it also has no children.&#xA;     *&#xA;     * @param   node  a node in the tree, obtained from this data source&#xA;     * @return  true if &lt;code>node&lt;/code> is a leaf&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="valueForPathChanged">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TreePath.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Messaged when the user has altered the value for the item identified&#xA;      * by &lt;code>path&lt;/code> to &lt;code>newValue&lt;/code>. &#xA;      * If &lt;code>newValue&lt;/code> signifies a truly new value&#xA;      * the model should post a &lt;code>treeNodesChanged&lt;/code> event.&#xA;      *&#xA;      * @param path path to the node that the user has altered&#xA;      * @param newValue the new value from the TreeCellEditor&#xA;      */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getIndexOfChild">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parent">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="child">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the index of child in parent.  If either &lt;code>parent&lt;/code>&#xA;     * or &lt;code>child&lt;/code> is &lt;code>null&lt;/code>, returns -1.&#xA;     * If either &lt;code>parent&lt;/code> or &lt;code>child&lt;/code> don't&#xA;     * belong to this tree model, returns -1.&#xA;     *&#xA;     * @param parent a note in the tree, obtained from this data source&#xA;     * @param child the node we are interested in&#xA;     * @return the index of the child in the parent, or -1 if either&#xA;     *    &lt;code>child&lt;/code> or &lt;code>parent&lt;/code> are &lt;code>null&lt;/code>&#xA;     *    or don't belong to this tree model&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addTreeModelListener">
      <typeReference xsi:type="types:Void">
        <comments>//</comments>
        <comments>//  Change Events</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Adds a listener for the &lt;code>TreeModelEvent&lt;/code>&#xA;     * posted after the tree changes.&#xA;     *&#xA;     * @param   l       the listener to add&#xA;     * @see     #removeTreeModelListener&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../event/TreeModelListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeTreeModelListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Removes a listener previously added with&#xA;     * &lt;code>addTreeModelListener&lt;/code>.&#xA;     *&#xA;     * @see     #addTreeModelListener&#xA;     * @param   l       the listener to remove&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../event/TreeModelListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The interface that defines a suitable data model for a &lt;code>JTree&lt;/code>. &#xA; * For further information on tree models,&#xA; * including an example of a custom implementation,&#xA; * see &lt;a&#xA; href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html&quot;>How to Use Trees&lt;/a>&#xA; * in &lt;em>The Java Tutorial.&lt;/em>&#xA; * &lt;p>&#xA; * &lt;code>JTree&lt;/code> and its related classes make extensive use of&#xA; * &lt;code>TreePath&lt;/code>s for indentifying nodes in the &lt;code>TreeModel&lt;/code>.&#xA; * If a &lt;code>TreeModel&lt;/code> returns the same object, as compared by&#xA; * &lt;code>equals&lt;/code>, at two different indices under the same parent&#xA; * than the resulting &lt;code>TreePath&lt;/code> objects will be considered equal&#xA; * as well. Some implementations may assume that if two&#xA; * &lt;code>TreePath&lt;/code>s are equal, they identify the same node. If this&#xA; * condition is not met, painting problems and other oddities may result.&#xA; * In other words, if &lt;code>getChild&lt;/code> for a given parent returns&#xA; * the same Object (as determined by &lt;code>equals&lt;/code>) problems may&#xA; * result, and it is recommended you avoid doing this.&#xA; * &#xA; * @see TreePath&#xA; * &#xA; * @version 1.23 12/19/03&#xA; * @author Rob Davis&#xA; * @author Ray Ryan&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
