<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="ListSelectionModel.java">
  <comments>/*&#xA; * @(#)ListSelectionModel.java&#x9;1.21 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ListSelectionModel">
    <members xsi:type="members:Field" name="SINGLE_SELECTION">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * A value for the selectionMode property: select one list index&#xA;     * at a time.&#xA;     * &#xA;     * @see #setSelectionMode&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="SINGLE_INTERVAL_SELECTION">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * A value for the selectionMode property: select one contiguous&#xA;     * range of indices at a time.&#xA;     * &#xA;     * @see #setSelectionMode&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="MULTIPLE_INTERVAL_SELECTION">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * A value for the selectionMode property: select one or more &#xA;     * contiguous ranges of indices at a time.&#xA;     * &#xA;     * @see #setSelectionMode&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSelectionInterval">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Change the selection to be between index0 and index1 inclusive.&#xA;     * If this represents a change to the current selection, then&#xA;     * notify each ListSelectionListener. Note that index0 doesn't have&#xA;     * to be less than or equal to index1.  &#xA;     * &#xA;     * @param index0 one end of the interval.&#xA;     * @param index1 other end of the interval&#xA;     * @see #addListSelectionListener&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index0">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index1">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addSelectionInterval">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Change the selection to be the set union of the current selection&#xA;     * and the indices between index0 and index1 inclusive.  If this represents &#xA;     * a change to the current selection, then notify each &#xA;     * ListSelectionListener. Note that index0 doesn't have to be less&#xA;     * than or equal to index1.  &#xA;     * &#xA;     * @param index0 one end of the interval.&#xA;     * @param index1 other end of the interval&#xA;     * @see #addListSelectionListener&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index0">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index1">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeSelectionInterval">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Change the selection to be the set difference of the current selection&#xA;     * and the indices between index0 and index1 inclusive.  If this represents &#xA;     * a change to the current selection, then notify each &#xA;     * ListSelectionListener.  Note that index0 doesn't have to be less&#xA;     * than or equal to index1.  &#xA;     * &#xA;     * @param index0 one end of the interval.&#xA;     * @param index1 other end of the interval&#xA;     * @see #addListSelectionListener&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index0">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index1">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMinSelectionIndex">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the first selected index or -1 if the selection is empty.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMaxSelectionIndex">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the last selected index or -1 if the selection is empty.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isSelectedIndex">
      <typeReference xsi:type="types:Boolean">
        <comments>/** &#xA;     * Returns true if the specified index is selected.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAnchorSelectionIndex">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Return the first index argument from the most recent call to &#xA;     * setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().&#xA;     * The most recent index0 is considered the &quot;anchor&quot; and the most recent&#xA;     * index1 is considered the &quot;lead&quot;.  Some interfaces display these&#xA;     * indices specially, e.g. Windows95 displays the lead index with a &#xA;     * dotted yellow outline.&#xA;     * &#xA;     * @see #getLeadSelectionIndex&#xA;     * @see #setSelectionInterval&#xA;     * @see #addSelectionInterval&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAnchorSelectionIndex">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Set the anchor selection index. &#xA;     * &#xA;     * @see #getAnchorSelectionIndex&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLeadSelectionIndex">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Return the second index argument from the most recent call to &#xA;     * setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().&#xA;     * &#xA;     * @see #getAnchorSelectionIndex&#xA;     * @see #setSelectionInterval&#xA;     * @see #addSelectionInterval&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setLeadSelectionIndex">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Set the lead selection index. &#xA;     * &#xA;     * @see #getLeadSelectionIndex&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="clearSelection">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Change the selection to the empty set.  If this represents&#xA;     * a change to the current selection then notify each ListSelectionListener.&#xA;     * &#xA;     * @see #addListSelectionListener&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isSelectionEmpty">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Returns true if no indices are selected.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insertIndexInterval">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Insert length indices beginning before/after index.  This is typically &#xA;     * called to sync the selection model with a corresponding change&#xA;     * in the data model.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="before">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeIndexInterval">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Remove the indices in the interval index0,index1 (inclusive) from&#xA;     * the selection model.  This is typically called to sync the selection&#xA;     * model width a corresponding change in the data model.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index0">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index1">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setValueIsAdjusting">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * This property is true if upcoming changes to the value&#xA;     * of the model should be considered a single event. For example&#xA;     * if the model is being updated in response to a user drag,&#xA;     * the value of the valueIsAdjusting property will be set to true&#xA;     * when the drag is initiated and be set to false when&#xA;     * the drag is finished.  This property allows listeners to &#xA;     * to update only when a change has been finalized, rather&#xA;     * than always handling all of the intermediate values.&#xA;     * &#xA;     * @param valueIsAdjusting The new value of the property.&#xA;     * @see #getValueIsAdjusting&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="valueIsAdjusting">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValueIsAdjusting">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Returns true if the value is undergoing a series of changes.&#xA;     * @return true if the value is currently adjusting&#xA;     * @see #setValueIsAdjusting&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSelectionMode">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Set the selection mode. The following selectionMode values are allowed:&#xA;     * &lt;ul>&#xA;     * &lt;li> &lt;code>SINGLE_SELECTION&lt;/code> &#xA;     *   Only one list index can be selected at a time.  In this&#xA;     *   mode the setSelectionInterval and addSelectionInterval &#xA;     *   methods are equivalent, and only the second index&#xA;     *   argument (the &quot;lead index&quot;) is used.&#xA;     * &lt;li> &lt;code>SINGLE_INTERVAL_SELECTION&lt;/code>&#xA;     *   One contiguous index interval can be selected at a time.&#xA;     *   In this mode setSelectionInterval and addSelectionInterval &#xA;     *   are equivalent.&#xA;     * &lt;li> &lt;code>MULTIPLE_INTERVAL_SELECTION&lt;/code>&#xA;     *   In this mode, there's no restriction on what can be selected.&#xA;     * &lt;/ul>&#xA;     * &#xA;     * @see #getSelectionMode&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="selectionMode">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSelectionMode">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the current selection mode.&#xA;     * @return The value of the selectionMode property.&#xA;     * @see #setSelectionMode&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addListSelectionListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Add a listener to the list that's notified each time a change&#xA;     * to the selection occurs.&#xA;     * &#xA;     * @param x the ListSelectionListener&#xA;     * @see #removeListSelectionListener&#xA;     * @see #setSelectionInterval&#xA;     * @see #addSelectionInterval&#xA;     * @see #removeSelectionInterval&#xA;     * @see #clearSelection&#xA;     * @see #insertIndexInterval&#xA;     * @see #removeIndexInterval&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/ListSelectionListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeListSelectionListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Remove a listener from the list that's notified each time a &#xA;     * change to the selection occurs.&#xA;     * &#xA;     * @param x the ListSelectionListener&#xA;     * @see #addListSelectionListener&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/ListSelectionListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This interface represents the current state of the &#xA; * selection for any of the components that display a &#xA; * list of values with stable indices.  The selection is &#xA; * modeled as a set of intervals, each interval represents&#xA; * a contiguous range of selected list elements.&#xA; * The methods for modifying the set of selected intervals&#xA; * all take a pair of indices, index0 and index1, that represent&#xA; * a closed interval, i.e. the interval includes both index0 and&#xA; * index1.&#xA; * &#xA; * @version 1.21 12/19/03&#xA; * @author Hans Muller&#xA; * @author Philip Milne&#xA; * @see DefaultListSelectionModel&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
