<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="BorderFactory.java">
  <comments>/*&#xA; * @(#)BorderFactory.java&#x9;1.30 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/awt/Font.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <classifier xsi:type="classifiers:Class" href="JComponent.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>border</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="BorderFactory">
    <members xsi:type="members:Constructor" name="BorderFactory">
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Don't let anyone instantiate this class */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="createLineBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="color">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//// LineBorder ///////////////////////////////////////////////////////////////</comments>
        <comments>/**&#xA;     * Creates a line border withe the specified color.&#xA;     *&#xA;     * @param color  a &lt;code>Color&lt;/code> to use for the line&#xA;     * @return the &lt;code>Border&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/LineBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createLineBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="color">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="thickness">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a line border with the specified color&#xA;     * and width. The width applies to all four sides of the&#xA;     * border. To specify widths individually for the top,&#xA;     * bottom, left, and right, use &#xA;     * {@link #createMatteBorder(int,int,int,int,Color)}.&#xA;     *&#xA;     * @param color  a &lt;code>Color&lt;/code> to use for the line&#xA;     * @param thickness  an integer specifying the width in pixels&#xA;     * @return the &lt;code>Border&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/LineBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="sharedRaisedBevel">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="border/BevelBorder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="border/BevelBorder.class.xmi#//@classifiers.0/@members.0"/>
          </next>
          <target xsi:type="classifiers:Class" href="border/BevelBorder.class.xmi#//@classifiers.0"/>
        </arguments>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>//    public static Border createLineBorder(Color color, int thickness, </comments>
        <comments>//&#x9;&#x9;&#x9;&#x9;&#x9;boolean drawRounded)  {</comments>
        <comments>//        return new JLineBorder(color, thickness, drawRounded);</comments>
        <comments>//    }</comments>
        <comments>//// BevelBorder /////////////////////////////////////////////////////////////</comments>
        <comments>///////////////////////////////////////////////////////////////////////////////</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="sharedLoweredBevel">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="border/BevelBorder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="border/BevelBorder.class.xmi#//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="border/BevelBorder.class.xmi#//@classifiers.0"/>
        </arguments>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="createRaisedBevelBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a border with a raised beveled edge, using&#xA;     * brighter shades of the component's current background color&#xA;     * for highlighting, and darker shading for shadows.&#xA;     * (In a raised border, highlights are on top and shadows&#xA;     *  are underneath.)&#xA;     *&#xA;     * @return the &lt;code>Border&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="border/BevelBorder.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="border/BevelBorder.class.xmi#//@classifiers.0"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createLoweredBevelBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a border with a lowered beveled edge, using&#xA;     * brighter shades of the component's current background color&#xA;     * for highlighting, and darker shading for shadows.&#xA;     * (In a lowered border, shadows are on top and highlights&#xA;     *  are underneath.)&#xA;     *&#xA;     * @return the &lt;code>Border&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="border/BevelBorder.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="border/BevelBorder.class.xmi#//@classifiers.0"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createBevelBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a beveled border of the specified type, using&#xA;     * brighter shades of the component's current background color&#xA;     * for highlighting, and darker shading for shadows.&#xA;     * (In a lowered border, shadows are on top and highlights&#xA;     *  are underneath.)&#xA;     *&#xA;     * @param type  an integer specifying either&#xA;     *&#x9;&#x9;&#x9;&lt;code>BevelBorder.LOWERED&lt;/code> or&#xA;     *              &#x9;&lt;code>BevelBorder.RAISED&lt;/code>&#xA;     * @return the &lt;code>Border&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createBevelBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="highlight">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="shadow">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a beveled border of the specified type, using&#xA;     * the specified highlighting and shadowing. The outer &#xA;     * edge of the highlighted area uses a brighter shade of&#xA;     * the highlight color. The inner edge of the shadow area&#xA;     * uses a brighter shade of the shadow color.&#xA;     * &#xA;     * @param type  an integer specifying either &#xA;     *&#x9;&#x9;&#x9;&lt;code>BevelBorder.LOWERED&lt;/code> or&#xA;     *              &#x9;&lt;code>BevelBorder.RAISED&lt;/code>&#xA;     * @param highlight  a &lt;code>Color&lt;/code> object for highlights&#xA;     * @param shadow     a &lt;code>Color&lt;/code> object for shadows&#xA;     * @return the &lt;code>Border&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/BevelBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.2"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createBevelBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="highlightOuter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="highlightInner">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="shadowOuter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="shadowInner">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a beveled border of the specified type, using&#xA;     * the specified colors for the inner and outer highlight&#xA;     * and shadow areas. &#xA;     * &lt;p>&#xA;     * Note: The shadow inner and outer colors are&#xA;     * switched for a lowered bevel border.&#xA;     * &#xA;     * @param type  an integer specifying either &#xA;     *&#x9;&#x9;&lt;code>BevelBorder.LOWERED&lt;/code> or&#xA;     *          &lt;code>BevelBorder.RAISED&lt;/code>&#xA;     * @param highlightOuter  a &lt;code>Color&lt;/code> object for the&#xA;     *&#x9;&#x9;&#x9;outer edge of the highlight area&#xA;     * @param highlightInner  a &lt;code>Color&lt;/code> object for the&#xA;     *&#x9;&#x9;&#x9;inner edge of the highlight area&#xA;     * @param shadowOuter     a &lt;code>Color&lt;/code> object for the&#xA;     *&#x9;&#x9;&#x9;outer edge of the shadow area&#xA;     * @param shadowInner     a &lt;code>Color&lt;/code> object for the&#xA;     *&#x9;&#x9;&#x9;inner edge of the shadow area&#xA;     * @return the &lt;code>Border&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/BevelBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.4"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createSharedBevel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="border/BevelBorder.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="border/BevelBorder.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="border/BevelBorder.class.xmi#//@classifiers.0/@members.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="border/BevelBorder.class.xmi#//@classifiers.0"/>
            </children>
          </condition>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:Field" name="sharedEtchedBorder">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="border/EtchedBorder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>//// EtchedBorder ///////////////////////////////////////////////////////////</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="sharedRaisedEtchedBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="createEtchedBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a border with an &quot;etched&quot; look using&#xA;     * the component's current background color for &#xA;     * highlighting and shading.&#xA;     *&#xA;     * @return the &lt;code>Border&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createEtchedBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="highlight">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="shadow">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a border with an &quot;etched&quot; look using&#xA;     * the specified highlighting and shading colors.&#xA;     *&#xA;     * @param highlight  a &lt;code>Color&lt;/code> object for the border highlights&#xA;     * @param shadow     a &lt;code>Color&lt;/code> object for the border shadows&#xA;     * @return the &lt;code>Border&lt;/code> object &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/EtchedBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createEtchedBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a border with an &quot;etched&quot; look using&#xA;     * the component's current background color for &#xA;     * highlighting and shading.&#xA;     *&#xA;     * @param type  &#x9;one of &lt;code>EtchedBorder.RAISED&lt;/code>, or&#xA;     *&#x9;&#x9;&#x9;&lt;code>EtchedBorder.LOWERED&lt;/code>&#xA;     * @return the &lt;code>Border&lt;/code> object&#xA;     * @exception IllegalArgumentException if type is not either&#xA;     *&#x9;&#x9;&#x9;&lt;code>EtchedBorder.RAISED&lt;/code> or &#xA;     *&#x9;&#x9;&#x9;&lt;code>EtchedBorder.LOWERED&lt;/code>&#xA;     * @since 1.3&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Switch">
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="border/EtchedBorder.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="border/EtchedBorder.class.xmi#//@classifiers.0/@members.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="border/EtchedBorder.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
          </statements>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="border/EtchedBorder.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="border/EtchedBorder.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
          </statements>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="border/EtchedBorder.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="border/EtchedBorder.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:DefaultSwitchCase">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="type must be one of EtchedBorder.RAISED or EtchedBorder.LOWERED"/>
            </throwable>
          </statements>
        </cases>
        <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createEtchedBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="highlight">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="shadow">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a border with an &quot;etched&quot; look using&#xA;     * the specified highlighting and shading colors.&#xA;     *&#xA;     * @param type    &#x9;one of &lt;code>EtchedBorder.RAISED&lt;/code>, or&#xA;     *&#x9;&#x9;&#x9;&lt;code>EtchedBorder.LOWERED&lt;/code>&#xA;     * @param highlight  a &lt;code>Color&lt;/code> object for the border highlights&#xA;     * @param shadow     a &lt;code>Color&lt;/code> object for the border shadows&#xA;     * @return the &lt;code>Border&lt;/code> object &#xA;     * @since 1.3&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/EtchedBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.2"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createTitledBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="border/TitledBorder.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="title">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//// TitledBorder ////////////////////////////////////////////////////////////</comments>
        <comments>/**&#xA;     * Creates a new title border specifying the text of the title, using&#xA;     * the default border (etched), using the default text position&#xA;     * (sitting on the top&#xA;     * line) and default justification (leading) and using the default&#xA;     * font and text color determined by the current look and feel.&#xA;     *&#xA;     * @param title      a &lt;code>String&lt;/code> containing the text of the title&#xA;     * @return the &lt;code>TitledBorder&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/TitledBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createTitledBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="border/TitledBorder.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="border">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new title border with an empty title specifying the&#xA;     * border object, using the default text position (sitting on the top&#xA;     * line) and default justification (leading) and using the default&#xA;     * font, and text color.&#xA;     *&#xA;     * @param border     the &lt;code>Border&lt;/code> object to add the title to, if&#xA;     *                   null the &lt;code>Border&lt;/code> is determined by the&#xA;     *                   current look and feel.&#xA;     * @return the &lt;code>TitledBorder&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/TitledBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createTitledBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="border/TitledBorder.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="border">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="title">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a title to an existing border, specifying the text of&#xA;     * the title, using the default positioning (sitting on the top&#xA;     * line) and default justification (leading) and using the default&#xA;     * font and text color determined by the current look and feel.&#xA;     *&#xA;     * @param border     the &lt;code>Border&lt;/code> object to add the title to&#xA;     * @param title      a &lt;code>String&lt;/code> containing the text of the title&#xA;     * @return the &lt;code>TitledBorder&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/TitledBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createTitledBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="border/TitledBorder.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="border">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="title">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="titleJustification">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="titlePosition">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a title to an existing border, specifying the text of&#xA;     * the title along with its positioning, using the default&#xA;     * font and text color determined by the current look and feel.&#xA;     *&#xA;     * @param border      the &lt;code>Border&lt;/code> object to add the title to&#xA;     * @param title       a &lt;code>String&lt;/code> containing the text of the title&#xA;     * @param titleJustification  an integer specifying the justification &#xA;     *        of the title -- one of the following:&#xA;     *&lt;ul>&#xA;     *&lt;li>&lt;code>TitledBorder.LEFT&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.CENTER&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.RIGHT&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.LEADING&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.TRAILING&lt;code>&#xA;     *&lt;li>&lt;code>TitledBorder.DEFAULT_JUSTIFICATION&lt;/code> (leading)&#xA;     *&lt;/ul>&#xA;     * @param titlePosition       an integer specifying the vertical position of&#xA;     *        the text in relation to the border -- one of the following:&#xA;     *&lt;ul>&#xA;     *&lt;li>&lt;code> TitledBorder.ABOVE_TOP&lt;/code>&#xA;     *&lt;li>TitledBorder.TOP&lt;/code> (sitting on the top line)&#xA;     *&lt;li>&lt;code>TitledBorder.BELOW_TOP&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.ABOVE_BOTTOM&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.BOTTOM&lt;/code> (sitting on the bottom line)&#xA;     *&lt;li>&lt;code>TitledBorder.BELOW_BOTTOM&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.DEFAULT_POSITION&lt;/code> (top)&#xA;     *&lt;/ul>&#xA;     * @return the &lt;code>TitledBorder&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/TitledBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.3"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createTitledBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="border/TitledBorder.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="border">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="title">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="titleJustification">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="titlePosition">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="titleFont">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Font.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a title to an existing border, specifying the text of&#xA;     * the title along with its positioning and font, using the&#xA;     * default text color determined by the current look and feel.&#xA;     *&#xA;     * @param border      the &lt;code>Border&lt;/code> object to add the title to&#xA;     * @param title       a &lt;code>String&lt;/code> containing the text of the title&#xA;     * @param titleJustification  an integer specifying the justification&#xA;     *        of the title -- one of the following:&#xA;     *&lt;ul>&#xA;     *&lt;li>&lt;code>TitledBorder.LEFT&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.CENTER&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.RIGHT&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.LEADING&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.TRAILING&lt;code>&#xA;     *&lt;li>&lt;code>TitledBorder.DEFAULT_JUSTIFICATION&lt;/code> (leading)&#xA;     *&lt;/ul>&#xA;     * @param titlePosition       an integer specifying the vertical position of&#xA;     *        the text in relation to the border -- one of the following:&#xA;     *&lt;ul>&#xA;     *&lt;li>&lt;code> TitledBorder.ABOVE_TOP&lt;/code>&#xA;     *&lt;li>TitledBorder.TOP&lt;/code> (sitting on the top line)&#xA;     *&lt;li>&lt;code>TitledBorder.BELOW_TOP&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.ABOVE_BOTTOM&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.BOTTOM&lt;/code> (sitting on the bottom line)&#xA;     *&lt;li>&lt;code>TitledBorder.BELOW_BOTTOM&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.DEFAULT_POSITION&lt;/code> (top)&#xA;     *&lt;/ul>&#xA;     * @param titleFont           a Font object specifying the title font&#xA;     * @return the TitledBorder object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/TitledBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.4"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createTitledBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="border/TitledBorder.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="border">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="title">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="titleJustification">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="titlePosition">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="titleFont">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Font.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="titleColor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a title to an existing border, specifying the text of&#xA;     * the title along with its positioning, font, and color.&#xA;     *&#xA;     * @param border      the &lt;code>Border&lt;/code> object to add the title to&#xA;     * @param title       a &lt;code>String&lt;/code> containing the text of the title&#xA;     * @param titleJustification  an integer specifying the justification&#xA;     *        of the title -- one of the following:&#xA;     *&lt;ul>&#xA;     *&lt;li>&lt;code>TitledBorder.LEFT&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.CENTER&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.RIGHT&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.LEADING&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.TRAILING&lt;code>&#xA;     *&lt;li>&lt;code>TitledBorder.DEFAULT_JUSTIFICATION&lt;/code> (leading)&#xA;     *&lt;/ul>&#xA;     * @param titlePosition       an integer specifying the vertical position of&#xA;     *        the text in relation to the border -- one of the following:&#xA;     *&lt;ul>&#xA;     *&lt;li>&lt;code> TitledBorder.ABOVE_TOP&lt;/code>&#xA;     *&lt;li>TitledBorder.TOP&lt;/code> (sitting on the top line)&#xA;     *&lt;li>&lt;code>TitledBorder.BELOW_TOP&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.ABOVE_BOTTOM&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.BOTTOM&lt;/code> (sitting on the bottom line)&#xA;     *&lt;li>&lt;code>TitledBorder.BELOW_BOTTOM&lt;/code>&#xA;     *&lt;li>&lt;code>TitledBorder.DEFAULT_POSITION&lt;/code> (top)&#xA;     *&lt;/ul>&#xA;     * @param titleFont   a &lt;code>Font&lt;/code> object specifying the title font&#xA;     * @param titleColor  a &lt;code>Color&lt;/code> object specifying the title color&#xA;     * @return the &lt;code>TitledBorder&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/TitledBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.4"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.5"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="emptyBorder">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="border/EmptyBorder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>//// EmptyBorder ///////////////////////////////////////////////////////////&#x9;</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="createEmptyBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an empty border that takes up no space. (The width&#xA;     * of the top, bottom, left, and right sides are all zero.)&#xA;     *&#xA;     * @return the &lt;code>Border&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createEmptyBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="top">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="left">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bottom">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="right">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an empty border that takes up space but which does&#xA;     * no drawing, specifying the width of the top, left, bottom, and&#xA;     * right sides.&#xA;     *&#xA;     * @param top     an integer specifying the width of the top,&#xA;     *&#x9;&#x9;&#x9;in pixels&#xA;     * @param left    an integer specifying the width of the left side,&#xA;     *&#x9;&#x9;&#x9;in pixels&#xA;     * @param bottom  an integer specifying the width of the bottom,&#xA;     *&#x9;&#x9;&#x9;in pixels&#xA;     * @param right   an integer specifying the width of the right side,&#xA;     *&#x9;&#x9;&#x9;in pixels&#xA;     * @return the &lt;code>Border&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/EmptyBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.3"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createCompoundBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="border/CompoundBorder.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//// CompoundBorder ////////////////////////////////////////////////////////</comments>
        <comments>/**&#xA;     * Creates a compound border with a &lt;code>null&lt;/code> inside edge and a&#xA;     * &lt;code>null&lt;/code> outside edge.&#xA;     *&#xA;     * @return the &lt;code>CompoundBorder&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/CompoundBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createCompoundBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="border/CompoundBorder.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="outsideBorder">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="insideBorder">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="border/Border.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a compound border specifying the border objects to use&#xA;     * for the outside and inside edges.&#xA;     *&#xA;     * @param outsideBorder  a &lt;code>Border&lt;/code> object for the outer&#xA;     *&#x9;&#x9;&#x9;&#x9;edge of the compound border&#xA;     * @param insideBorder   a &lt;code>Border&lt;/code> object for the inner&#xA;     *&#x9;&#x9;&#x9;&#x9;edge of the compound border&#xA;     * @return the &lt;code>CompoundBorder&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/CompoundBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createMatteBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="border/MatteBorder.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="top">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="left">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bottom">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="right">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="color">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//// MatteBorder ////////////////////////////////////////////////////////</comments>
        <comments>/**&#xA;     * Creates a matte-look border using a solid color. (The difference between&#xA;     * this border and a line border is that you can specify the individual&#xA;     * border dimensions.)&#xA;     *&#xA;     * @param top     an integer specifying the width of the top,&#xA;     *&#x9;&#x9;&#x9;&#x9;in pixels&#xA;     * @param left    an integer specifying the width of the left side,&#xA;     *&#x9;&#x9;&#x9;&#x9;in pixels&#xA;     * @param bottom  an integer specifying the width of the right side,&#xA;     *&#x9;&#x9;&#x9;&#x9;in pixels&#xA;     * @param right   an integer specifying the width of the bottom,&#xA;     *&#x9;&#x9;&#x9;&#x9;in pixels&#xA;     * @param color   a &lt;code>Color&lt;/code> to use for the border&#xA;     * @return the &lt;code>MatteBorder&lt;/code> object &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/MatteBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.4"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createMatteBorder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="border/MatteBorder.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="top">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="left">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bottom">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="right">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tileIcon">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Icon.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a matte-look border that consists of multiple tiles of a &#xA;     * specified icon. Multiple copies of the icon are placed side-by-side&#xA;     * to fill up the border area.&#xA;     * &lt;p>&#xA;     * Note:&lt;br> &#xA;     * If the icon doesn't load, the border area is painted gray.&#xA;     *&#xA;     * @param top     an integer specifying the width of the top,&#xA;     *&#x9;&#x9;&#x9;&#x9;in pixels&#xA;     * @param left    an integer specifying the width of the left side,&#xA;     *&#x9;&#x9;&#x9;&#x9;in pixels&#xA;     * @param bottom  an integer specifying the width of the right side,&#xA;     *&#x9;&#x9;&#x9;&#x9;in pixels&#xA;     * @param right   an integer specifying the width of the bottom,&#xA;     *&#x9;&#x9;&#x9;&#x9;in pixels&#xA;     * @param tileIcon  the &lt;code>Icon&lt;/code> object used for the border tiles&#xA;     * @return the &lt;code>MatteBorder&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="border/MatteBorder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.4"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Factory class for vending standard &lt;code>Border&lt;/code> objects.  Wherever&#xA; * possible, this factory will hand out references to shared&#xA; * &lt;code>Border&lt;/code> instances.&#xA; * For further information and examples see&#xA; * &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/border.html&quot;>How&#xA; to Use Borders&lt;/a>,&#xA; * a section in &lt;em>The Java Tutorial&lt;/em>.&#xA; *&#xA; * @version 1.30 12/19/03&#xA; * @author David Kloba&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
