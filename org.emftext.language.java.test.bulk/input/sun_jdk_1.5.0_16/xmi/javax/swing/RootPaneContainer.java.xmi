<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="RootPaneContainer.java">
  <comments>/*&#xA; * @(#)RootPaneContainer.java&#x9;1.15 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/awt/Component.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/awt/Container.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="RootPaneContainer">
    <members xsi:type="members:InterfaceMethod" name="getRootPane">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return this component's single JRootPane child.  A conventional&#xA;     * implementation of this interface will have all of the other &#xA;     * methods indirect through this one.  The rootPane has two&#xA;     * children: the glassPane and the layeredPane.&#xA;     *&#xA;     * @return this components single JRootPane child.  &#xA;     * @see JRootPane&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="JRootPane.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setContentPane">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * The &quot;contentPane&quot; is the primary container for application &#xA;     * specific components.  Applications should add children to &#xA;     * the contentPane, set its layout manager, and so on.  &#xA;     * &lt;p>&#xA;     * The contentPane my not be null.&#xA;     * &lt;p>&#xA;     * Generally implemented with &#xA;     * &lt;code>getRootPane().setContentPane(contentPane);&lt;/code>&#xA;     * &#xA;     * @exception java.awt.IllegalComponentStateException (a runtime&#xA;     *            exception) if the content pane parameter is null&#xA;     * @param contentPane the Container to use for the contents of this&#xA;     *        JRootPane&#xA;     * @see JRootPane#getContentPane&#xA;     * @see #getContentPane&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="contentPane">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Container.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getContentPane">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the contentPane.&#xA;     *&#xA;     * @return the value of the contentPane property.&#xA;     * @see #setContentPane&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../java/awt/Container.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setLayeredPane">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A Container that manages the contentPane and in some cases a menu bar. &#xA;     * The layeredPane can be used by descendants that want to add a child&#xA;     * to the RootPaneContainer that isn't layout managed.  For example&#xA;     * an internal dialog or a drag and drop effect component.&#xA;     * &lt;p>&#xA;     * The layeredPane may not be null.&#xA;     * &lt;p>&#xA;     * Generally implemented with&lt;pre> &#xA;     *    getRootPane().setLayeredPane(layeredPane);&lt;/pre>&#xA;     * &#xA;     * @exception java.awt.IllegalComponentStateException (a runtime&#xA;     *            exception) if the layered pane parameter is null&#xA;     * @see #getLayeredPane&#xA;     * @see JRootPane#getLayeredPane&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="layeredPane">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="JLayeredPane.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLayeredPane">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the layeredPane.&#xA;     *&#xA;     * @return the value of the layeredPane property.&#xA;     * @see #setLayeredPane&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="JLayeredPane.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setGlassPane">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * The glassPane is always the first child of the rootPane&#xA;     * and the rootPanes layout manager ensures that it's always&#xA;     * as big as the rootPane.  By default it's transparent and&#xA;     * not visible.  It can be used to temporarily grab all keyboard &#xA;     * and mouse input by adding listeners and then making it visible.&#xA;     * by default it's not visible.&#xA;     * &lt;p>&#xA;     * The glassPane may not be null.&#xA;     * &lt;p>&#xA;     * Generally implemented with &#xA;     * &lt;code>getRootPane().setGlassPane(glassPane);&lt;/code>&#xA;     * &#xA;     * @see #getGlassPane&#xA;     * @see JRootPane#setGlassPane&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="glassPane">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Component.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getGlassPane">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the glassPane.&#xA;     *&#xA;     * @return the value of the glassPane property.&#xA;     * @see #setGlassPane&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../java/awt/Component.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This interface is implemented by components that have a single&#xA; * JRootPane child: JDialog, JFrame, JWindow, JApplet, JInternalFrame.&#xA; * The methods in  this interface are just &lt;i>covers&lt;/i> for the JRootPane &#xA; * properties, e.g. &lt;code>getContentPane()&lt;/code> is generally implemented &#xA; * like this:&lt;pre>&#xA; *     public Container getContentPane() {&#xA; *         return getRootPane().getContentPane();&#xA; *     }&#xA; * &lt;/pre>&#xA; * This interface serves as a &lt;i>marker&lt;/i> for Swing GUI builders&#xA; * that need to treat components like JFrame, that contain a&#xA; * single JRootPane, specially.  For example in a GUI builder, &#xA; * dropping a component on a RootPaneContainer would be interpreted &#xA; * as &lt;code>frame.getContentPane().add(child)&lt;/code>.&#xA; * &lt;p>&#xA; * For conveniance&#xA; * &lt;code>JFrame&lt;/code>, &lt;code>JDialog&lt;/code>, &lt;code>JWindow&lt;/code>,&#xA; * &lt;code>JApplet&lt;/code> and &lt;code>JInternalFrame&lt;/code>, by default,&#xA; * forward, by default, all calls to the &lt;code>add&lt;/code>,&#xA; * &lt;code>remove&lt;/code> and &lt;code>setLayout&lt;/code> methods, to the&#xA; * &lt;code>contentPane&lt;/code>. This means you can call:&#xA; * &lt;pre>&#xA; * rootPaneContainer.add(component);&#xA; * &lt;/pre>&#xA; * instead of:&#xA; * &lt;pre>&#xA; * rootPaneContainer.getContentPane().add(component);&#xA; * &lt;/pre>&#xA; * &lt;p>&#xA; * The behavior of the &lt;code>add&lt;/code> and&#xA; * &lt;code>setLayout&lt;/code> methods for&#xA; * &lt;code>JFrame&lt;/code>, &lt;code>JDialog&lt;/code>, &lt;code>JWindow&lt;/code>,&#xA; * &lt;code>JApplet&lt;/code> and &lt;code>JInternalFrame&lt;/code> is controlled by&#xA; * the &lt;code>rootPaneCheckingEnabled&lt;/code> property. If this property is&#xA; * true (the default), then calls to these methods are&#xA;  * forwarded to the &lt;code>contentPane&lt;/code>; if false, these&#xA;  * methods operate directly on the &lt;code>RootPaneContainer&lt;/code>. This&#xA;  * property is only intended for subclasses, and is therefore protected.&#xA; * &#xA; * @see JRootPane&#xA; * @see JFrame&#xA; * @see JDialog&#xA; * @see JWindow&#xA; * @see JApplet&#xA; * @see JInternalFrame&#xA; *&#xA; * @version 1.15 12/19/03&#xA; * @author Hans Muller&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
