<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Border.java">
  <comments>/*&#xA; * @(#)Border.java&#x9;1.19 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>swing</namespaces>
  <namespaces>border</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/awt/Graphics.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/awt/Insets.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/awt/Component.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Border">
    <members xsi:type="members:InterfaceMethod" name="paintBorder">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Paints the border for the specified component with the specified &#xA;     * position and size.&#xA;     * @param c the component for which this border is being painted&#xA;     * @param g the paint graphics&#xA;     * @param x the x position of the painted border&#xA;     * @param y the y position of the painted border&#xA;     * @param width the width of the painted border&#xA;     * @param height the height of the painted border&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/awt/Component.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="g">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/awt/Graphics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="width">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="height">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBorderInsets">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the insets of the border.  &#xA;     * @param c the component for which this border insets value applies&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/awt/Insets.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/awt/Component.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isBorderOpaque">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Returns whether or not the border is opaque.  If the border&#xA;     * is opaque, it is responsible for filling in it's own&#xA;     * background when painting.&#xA;     */</comments>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Interface describing an object capable of rendering a border&#xA; * around the edges of a swing component.&#xA; * For examples of using borders see&#xA; * &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/border.html&quot;>How to Use Borders&lt;/a>,&#xA; * a section in &lt;em>The Java Tutorial.&lt;/em>&#xA; * &lt;p>&#xA; * In the Swing component set, borders supercede Insets as the&#xA; * mechanism for creating a (decorated or plain) area around the &#xA; * edge of a component.&#xA; * &lt;p>&#xA; * Usage Notes:&#xA; * &lt;ul>&#xA; * &lt;li>Use EmptyBorder to create a plain border (this mechanism&#xA; *     replaces its predecessor, &lt;code>setInsets&lt;/code>).&#xA; * &lt;li>Use CompoundBorder to nest multiple border objects, creating&#xA; *     a single, combined border.&#xA; * &lt;li>Border instances are designed to be shared. Rather than creating&#xA; *     a new border object using one of border classes, use the&#xA; *     BorderFactory methods, which produces a shared instance of the&#xA; *     common border types.&#xA; * &lt;li>Additional border styles include BevelBorder, SoftBevelBorder,&#xA; *     EtchedBorder, LineBorder, TitledBorder, and MatteBorder.&#xA; * &lt;li>To create a new border class, subclass AbstractBorder.   &#xA; * &lt;/ul>&#xA; * &#xA; * @version 1.19 12/19/03&#xA; * @author David Kloba&#xA; * @author Amy Fowler&#xA; * @see javax.swing.BorderFactory&#xA; * @see EmptyBorder&#xA; * @see CompoundBorder&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
