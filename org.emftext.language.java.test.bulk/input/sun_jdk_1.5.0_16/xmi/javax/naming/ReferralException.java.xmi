<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="ReferralException.java">
  <comments>/*&#xA; * @(#)ReferralException.java&#x9;1.11 04/07/16&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ReferralException">
    <members xsi:type="members:Constructor" name="ReferralException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="explanation">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructs a new instance of ReferralException using the&#xA;     * explanation supplied. All other fields are set to null.&#xA;     *&#xA;     * @param&#x9;explanation&#x9;Additional detail about this exception. Can be null.&#xA;     * @see java.lang.Throwable#getMessage&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="ReferralException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;      * Constructs a new instance of ReferralException.&#xA;      * All fields are set to null.&#xA;      */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getReferralInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves information (such as URLs) related to this referral.&#xA;     * The program may examine or display this information&#xA;     * to the user to determine whether to continue with the referral,&#xA;     * or to determine additional information needs to be supplied in order&#xA;     * to continue with the referral.&#xA;     *&#xA;     * @return Non-null referral information related to this referral.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getReferralContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Context.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the context at which to continue the method.&#xA;     * Regardless of whether a referral is encountered directly during a &#xA;     * context operation, or indirectly, for example, during a search&#xA;     * enumeration, the referral exception should provide a context&#xA;     * at which to continue the operation. The referral context is&#xA;     * created using the environment properties of the context&#xA;     * that threw the ReferralException.&#xA;     *&#xA;     *&lt;p>&#xA;     * To continue the operation, the client program should re-invoke&#xA;     * the method using the same arguments as the original invocation.&#xA;     * &#xA;     * @return The non-null context at which to continue the method.&#xA;     * @exception NamingException If a naming exception was encountered.&#xA;     * Call either &lt;tt>retryReferral()&lt;/tt> or &lt;tt>skipReferral()&lt;/tt>&#xA;     * to continue processing referrals.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getReferralContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Context.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="env">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the context at which to continue the method using &#xA;     * environment properties.&#xA;     * Regardless of whether a referral is encountered directly during a &#xA;     * context operation, or indirectly, for example, during a search&#xA;     * enumeration, the referral exception should provide a context&#xA;     * at which to continue the operation.&#xA;     *&lt;p>&#xA;     * The referral context is created using &lt;tt>env&lt;/tt> as its environment&#xA;     * properties.&#xA;     * This method should be used instead of the no-arg overloaded form&#xA;     * when the caller needs to use different environment properties for&#xA;     * the referral context. It might need to do this, for example, when&#xA;     * it needs to supply different authentication information to the referred&#xA;     * server in order to create the referral context.&#xA;     *&lt;p>&#xA;     * To continue the operation, the client program should re-invoke&#xA;     * the method using the same arguments as the original invocation.&#xA;     * &#xA;     * @param env The possibly null environment to use when retrieving the &#xA;     * &#x9;&#x9;referral context. If null, no environment properties will be used.&#xA;     *&#xA;     * @return The non-null context at which to continue the method.&#xA;     * @exception NamingException If a naming exception was encountered.&#xA;     * Call either &lt;tt>retryReferral()&lt;/tt> or &lt;tt>skipReferral()&lt;/tt>&#xA;     * to continue processing referrals.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="skipReferral">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Discards the referral about to be processed.&#xA;     * A call to this method should be followed by a call to&#xA;     * &lt;code>getReferralContext&lt;/code> to allow the processing of&#xA;     * other referrals to continue.&#xA;     * The following code fragment shows a typical usage pattern.&#xA;     * &lt;p>&lt;blockquote>&lt;pre>&#xA;     *&#x9;} catch (ReferralException e) {&#xA;     *&#x9;    if (!shallIFollow(e.getReferralInfo())) {&#xA;     *&#x9;&#x9;if (!e.skipReferral()) {&#xA;     *&#x9;&#x9;    return;&#xA;     *&#x9;&#x9;}&#xA;     *&#x9;    }&#xA;     *&#x9;    ctx = e.getReferralContext();&#xA;     *&#x9;}&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * @return true If more referral processing is pending; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="retryReferral">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retries the referral currently being processed.&#xA;     * A call to this method should be followed by a call to&#xA;     * &lt;code>getReferralContext&lt;/code> to allow the current&#xA;     * referral to be retried.&#xA;     * The following code fragment shows a typical usage pattern.&#xA;     * &lt;p>&lt;blockquote>&lt;pre>&#xA;     *&#x9;} catch (ReferralException e) {&#xA;     *&#x9;    while (true) {&#xA;     *&#x9;&#x9;try {&#xA;     *&#x9;&#x9;    ctx = e.getReferralContext(env);&#xA;     *&#x9;&#x9;    break;&#xA;     *&#x9;&#x9;} catch (NamingException ne) {&#xA;     *&#x9;&#x9;    if (! shallIRetry()) {&#xA;     *&#x9;&#x9;&#x9;return;&#xA;     *&#x9;&#x9;    }&#xA;     *&#x9;&#x9;    // modify environment properties (env), if necessary&#xA;     *&#x9;&#x9;    e.retryReferral();&#xA;     *&#x9;&#x9;}&#xA;     *&#x9;    }&#xA;     *&#x9;}&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="2881363844695698876"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Use serialVersionUID from JNDI 1.1.1 for interoperability&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This abstract class is used to represent a referral exception,&#xA; * which is generated in response to a &lt;em>referral&lt;/em>&#xA; * such as that returned by LDAP v3 servers.&#xA; * &lt;p>&#xA; * A service provider provides&#xA; * a subclass of &lt;tt>ReferralException&lt;/tt> by providing implementations&#xA; * for &lt;tt>getReferralInfo()&lt;/tt> and &lt;tt>getReferralContext()&lt;/tt> (and appropriate&#xA; * constructors and/or corresponding &quot;set&quot; methods).&#xA; * &lt;p>&#xA; * The following code sample shows how &lt;tt>ReferralException&lt;/tt> can be used.&#xA; * &lt;p>&lt;blockquote>&lt;pre>&#xA; *&#x9;while (true) {&#xA; *&#x9;    try {&#xA; *&#x9;&#x9;bindings = ctx.listBindings(name);&#xA; *&#x9;&#x9;while (bindings.hasMore()) {&#xA; *&#x9;&#x9;    b = bindings.next();&#xA; *&#x9;&#x9;    ...&#xA; *&#x9;&#x9;}&#xA; *&#x9;&#x9;break;&#xA; *&#x9;    } catch (ReferralException e) {&#xA; *&#x9;&#x9;ctx = e.getReferralContext();&#xA; *&#x9;    }&#xA; *&#x9;}&#xA; * &lt;/pre>&lt;/blockquote>&lt;/p>&#xA; *&lt;p>&#xA; * &lt;tt>ReferralException&lt;/tt> is an abstract class. Concrete implementations&#xA; * determine its synchronization and serialization properties.&#xA; *&lt;p>&#xA; * An environment parameter passed to the &lt;tt>getReferralContext()&lt;/tt>&#xA; * method is owned by the caller.&#xA; * The service provider will not modify the object or keep a reference to it,&#xA; * but may keep a reference to a clone of it.&#xA; * &#xA; * @author Rosanna Lee&#xA; * @author Scott Seligman&#xA; * @version 1.11 04/07/16&#xA; *&#xA; * @since 1.3&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="NamingException.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
