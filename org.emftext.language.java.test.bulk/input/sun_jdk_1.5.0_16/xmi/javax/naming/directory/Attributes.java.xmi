<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Attributes.java">
  <comments>/*&#xA; * @(#)Attributes.java&#x9;1.10 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <namespaces>directory</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../NamingEnumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Attributes">
    <comments>/**&#xA;     * Use serialVersionUID from JNDI 1.1.1 for interoperability&#xA;     */</comments>
    <comments>// static final long serialVersionUID = -7247874645443605347L;</comments>
    <members xsi:type="members:InterfaceMethod" name="isCaseIgnored">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;      * Determines whether the attribute set ignores the case of&#xA;      * attribute identifiers when retrieving or adding attributes.&#xA;      * @return true if case is ignored; false otherwise.&#xA;      */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="size">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;      * Retrieves the number of attributes in the attribute set.&#xA;      *&#xA;      * @return The nonnegative number of attributes in this attribute set.&#xA;      */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;      * Retrieves the attribute with the given attribute id from the&#xA;      * attribute set.&#xA;      *&#xA;      * @param attrID The non-null id of the attribute to retrieve.&#xA;      * &#x9;  If this attribute set ignores the character&#xA;      *&#x9;&#x9;  case of its attribute ids, the case of attrID&#xA;      *&#x9;&#x9;  is ignored.&#xA;      * @return The attribute identified by attrID; null if not found.&#xA;      * @see #put&#xA;      * @see #remove&#xA;      */</comments>
          <target xsi:type="classifiers:Interface" href="Attribute.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attrID">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAll">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;      * Retrieves an enumeration of the attributes in the attribute set.&#xA;      * The effects of updates to this attribute set on this enumeration&#xA;      * are undefined.&#xA;      *&#xA;      * @return A non-null enumeration of the attributes in this attribute set.&#xA;      *&#x9;&#x9;Each element of the enumeration is of class &lt;tt>Attribute&lt;/tt>.&#xA;      * &#x9;If attribute set has zero attributes, an empty enumeration &#xA;      * &#x9;is returned.&#xA;      */</comments>
          <typeArguments xsi:type="generics:ExtendsTypeArgument">
            <extendTypes xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="Attribute.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </extendTypes>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../NamingEnumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getIDs">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;      * Retrieves an enumeration of the ids of the attributes in the&#xA;      * attribute set.&#xA;      * The effects of updates to this attribute set on this enumeration&#xA;      * are undefined.&#xA;      *&#xA;      * @return A non-null enumeration of the attributes' ids in&#xA;      * &#x9;this attribute set. Each element of the enumeration is&#xA;      *&#x9;&#x9;of class String.&#xA;      * &#x9;If attribute set has zero attributes, an empty enumeration &#xA;      * &#x9;is returned.&#xA;      */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../NamingEnumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="put">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;      * Adds a new attribute to the attribute set.&#xA;      *&#xA;      * @param attrID &#x9;non-null The id of the attribute to add.&#xA;      * &#x9;  If the attribute set ignores the character&#xA;      *&#x9;&#x9;  case of its attribute ids, the case of attrID&#xA;      *&#x9;&#x9;  is ignored.&#xA;      * @param val&#x9;The possibly null value of the attribute to add.&#xA;      *&#x9;&#x9;&#x9;If null, the attribute does not have any values.&#xA;      * @return The Attribute with attrID that was previous in this attribute set;&#xA;      * &#x9;null if no such attribute existed.&#xA;      * @see #remove&#xA;      */</comments>
          <target xsi:type="classifiers:Interface" href="Attribute.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attrID">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="val">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="put">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;      * Adds a new attribute to the attribute set.&#xA;      *&#xA;      * @param attr &#x9;The non-null attribute to add.&#xA;      * &#x9;&#x9;If the attribute set ignores the character&#xA;      *&#x9;&#x9;  &#x9;case of its attribute ids, the case of&#xA;      * &#x9;&#x9;attr's identifier is ignored.&#xA;      * @return The Attribute with the same ID as attr that was previous &#xA;      * &#x9;in this attribute set;&#xA;      * &#x9;null if no such attribute existed.&#xA;      * @see #remove&#xA;      */</comments>
          <target xsi:type="classifiers:Interface" href="Attribute.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Attribute.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="remove">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;      * Removes the attribute with the attribute id 'attrID' from&#xA;      * the attribute set. If the attribute does not exist, ignore.&#xA;      *&#xA;      * @param attrID &#x9;The non-null id of the attribute to remove.&#xA;      * &#x9;&#x9;If the attribute set ignores the character&#xA;      *&#x9;&#x9;  &#x9;case of its attribute ids, the case of &#xA;      *               &#x9;attrID is ignored.&#xA;      * @return The Attribute with the same ID as attrID that was previous &#xA;      * &#x9;in the attribute set;&#xA;      * &#x9;null if no such attribute existed.&#xA;      */</comments>
          <target xsi:type="classifiers:Interface" href="Attribute.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attrID">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="clone">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;      * Makes a copy of the attribute set.&#xA;      * The new set contains the same attributes as the original set:&#xA;      * the attributes are not themselves cloned.&#xA;      * Changes to the copy will not affect the original and vice versa.&#xA;      *&#xA;      * @return A non-null copy of this attribute set.&#xA;      */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA;  * This interface represents a collection of attributes.&#xA;  *&lt;p>&#xA;  * In a directory, named objects can have associated with them&#xA;  * attributes.  The Attributes interface represents a collection of attributes.&#xA;  * For example, you can request from the directory the attributes&#xA;  * associated with an object.  Those attributes are returned in&#xA;  * an object that implements the Attributes interface.&#xA;  *&lt;p>&#xA;  * Attributes in an object that implements the  Attributes interface are &#xA;  * unordered. The object can have zero or more attributes.&#xA;  * Attributes is either case-sensitive or case-insensitive (case-ignore).&#xA;  * This property is determined at the time the Attributes object is&#xA;  * created. (see BasicAttributes constructor for example).&#xA;  * In a case-insensitive Attributes, the case of its attribute identifiers&#xA;  * is ignored when searching for an attribute, or adding attributes.&#xA;  * In a case-sensitive Attributes, the case is significant.&#xA;  *&lt;p>&#xA;  * Note that updates to Attributes (such as adding or removing an attribute)&#xA;  * do not affect the corresponding representation in the directory.  &#xA;  * Updates to the directory can only be effected&#xA;  * using operations in the DirContext interface.&#xA;  *&#xA;  * @author Rosanna Lee&#xA;  * @author Scott Seligman&#xA;  * @version 1.10 04/05/05&#xA;  *&#xA;  * @see DirContext#getAttributes&#xA;  * @see DirContext#modifyAttributes&#xA;  * @see DirContext#bind&#xA;  * @see DirContext#rebind&#xA;  * @see DirContext#createSubcontext&#xA;  * @see DirContext#search&#xA;  * @see BasicAttributes&#xA;  * @since 1.3&#xA;  */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../java/lang/Cloneable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
