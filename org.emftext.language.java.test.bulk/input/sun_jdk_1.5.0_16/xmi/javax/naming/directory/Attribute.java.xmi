<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Attribute.java">
  <comments>/*&#xA; * @(#)Attribute.java&#x9;1.12 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <namespaces>directory</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/NoSuchElementException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../NamingEnumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Class" href="../OperationNotSupportedException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Attribute">
    <members xsi:type="members:InterfaceMethod" name="getAll">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;      * Retrieves an enumeration of the attribute's values.&#xA;      * The behaviour of this enumeration is unspecified&#xA;      * if the attribute's values are added, changed,&#xA;      * or removed while the enumeration is in progress.&#xA;      * If the attribute values are ordered, the enumeration's items&#xA;      * will be ordered.&#xA;      *&#xA;      * @return A non-null enumeration of the attribute's values.&#xA;      * Each element of the enumeration is a possibly null Object. The object's&#xA;      * class is the class of the attribute value. The element is null&#xA;      * if the attribute's value is null.&#xA;      * If the attribute has zero values, an empty enumeration &#xA;      * is returned.&#xA;      * @exception NamingException&#xA;      *&#x9;&#x9;If a naming exception was encountered while retrieving&#xA;      *&#x9;&#x9;the values.&#xA;      * @see #isOrdered&#xA;      */</comments>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Interface" href="../NamingEnumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;      * Retrieves one of this attribute's values.&#xA;      * If the attribute has more than one value and is unordered, any one of&#xA;      * the values is returned.&#xA;      * If the attribute has more than one value and is ordered, the&#xA;      * first value is returned.&#xA;      *&#xA;      * @return A possibly null object representing one of &#xA;      *        the attribute's value. It is null if the attribute's value&#xA;      *&#x9;       is null.&#xA;      * @exception NamingException&#xA;      *&#x9;&#x9;If a naming exception was encountered while retrieving&#xA;      *&#x9;&#x9;the value.&#xA;      * @exception java.util.NoSuchElementException&#xA;      *&#x9;&#x9;If this attribute has no values.&#xA;      */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="size">
      <typeReference xsi:type="types:Int">
        <comments>/** &#xA;      * Retrieves the number of values in this attribute.&#xA;      *&#xA;      * @return The nonnegative number of values in this attribute.&#xA;      */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getID">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;      * Retrieves the id of this attribute.&#xA;      *&#xA;      * @return The id of this attribute. It cannot be null.&#xA;      */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="contains">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;      * Determines whether a value is in the attribute.&#xA;      * Equality is determined by the implementation, which may use&#xA;      * &lt;tt>Object.equals()&lt;/tt> or schema information to determine equality.&#xA;      *&#xA;      * @param attrVal The possibly null value to check. If null, check&#xA;      *  whether the attribute has an attribute value whose value is null.&#xA;      * @return true if attrVal is one of this attribute's values; false otherwise.&#xA;      * @see java.lang.Object#equals&#xA;      * @see BasicAttribute#equals&#xA;      */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attrVal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;      * Adds a new value to the attribute. &#xA;      * If the attribute values are unordered and&#xA;      * &lt;tt>attrVal&lt;/tt> is already in the attribute, this method does nothing.&#xA;      * If the attribute values are ordered, &lt;tt>attrVal&lt;/tt> is added to the end of&#xA;      * the list of attribute values.&#xA;      *&lt;p>&#xA;      * Equality is determined by the implementation, which may use&#xA;      * &lt;tt>Object.equals()&lt;/tt> or schema information to determine equality.&#xA;      *&#xA;      * @param attrVal The new possibly null value to add. If null, null&#xA;      *  is added as an attribute value.&#xA;      * @return true if a value was added; false otherwise.&#xA;      */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attrVal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="remove">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;      * Removes a specified value from the attribute.&#xA;      * If &lt;tt>attrval&lt;/tt> is not in the attribute, this method does nothing.&#xA;      * If the attribute values are ordered, the first occurrence of &#xA;      * &lt;tt>attrVal&lt;/tt> is removed and attribute values at indices greater &#xA;      * than the removed&#xA;      * value are shifted up towards the head of the list (and their indices&#xA;      * decremented by one).&#xA;      *&lt;p>&#xA;      * Equality is determined by the implementation, which may use&#xA;      * &lt;tt>Object.equals()&lt;/tt> or schema information to determine equality.&#xA;      *&#xA;      * @param attrval The possibly null value to remove from this attribute.&#xA;      * If null, remove the attribute value that is null.&#xA;      * @return true if the value was removed; false otherwise.&#xA;      */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attrval">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="clear">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;      * Removes all values from this attribute.&#xA;      */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributeSyntaxDefinition">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;      * Retrieves the syntax definition associated with the attribute.&#xA;      * An attribute's syntax definition specifies the format&#xA;      * of the attribute's value(s). Note that this is different from &#xA;      * the attribute value's representation as a Java object. Syntax &#xA;      * definition refers to the directory's notion of &lt;em>syntax&lt;/em>.&#xA;      *&lt;p>&#xA;      * For example, even though a value might be&#xA;      * a Java String object, its directory syntax might be &quot;Printable String&quot;&#xA;      * or &quot;Telephone Number&quot;. Or a value might be a byte array, and its&#xA;      * directory syntax is &quot;JPEG&quot; or &quot;Certificate&quot;.&#xA;      * For example, if this attribute's syntax is &quot;JPEG&quot;,&#xA;      * this method would return the syntax definition for &quot;JPEG&quot;.&#xA;      * &lt;p>&#xA;      * The information that you can retrieve from a syntax definition&#xA;      * is directory-dependent.&#xA;      *&lt;p>&#xA;      * If an implementation does not support schemas, it should throw&#xA;      * OperationNotSupportedException. If an implementation does support&#xA;      * schemas, it should define this method to return the appropriate&#xA;      * information.&#xA;      * @return The attribute's syntax definition. Null if the implementation&#xA;      *&#x9;   supports schemas but this particular attribute does not have&#xA;      *    any schema information.&#xA;      * @exception OperationNotSupportedException If getting the schema&#xA;      * &#x9;is not supported.&#xA;      * @exception NamingException If a naming exception occurs while getting&#xA;      *&#x9;&#x9;the schema.&#xA;      */</comments>
          <target xsi:type="classifiers:Interface" href="DirContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributeDefinition">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;      * Retrieves the attribute's schema definition.&#xA;      * An attribute's schema definition contains information&#xA;      * such as whether the attribute is multivalued or single-valued,&#xA;      * the matching rules to use when comparing the attribute's values.&#xA;      *&#xA;      * The information that you can retrieve from an attribute definition&#xA;      * is directory-dependent.&#xA;      *&#xA;      *&lt;p>&#xA;      * If an implementation does not support schemas, it should throw&#xA;      * OperationNotSupportedException. If an implementation does support&#xA;      * schemas, it should define this method to return the appropriate&#xA;      * information.&#xA;      * @return This attribute's schema definition. Null if the implementation&#xA;      *&#x9;    supports schemas but this particular attribute does not have&#xA;      *&#x9;    any schema information.&#xA;      * @exception OperationNotSupportedException If getting the schema&#xA;      * &#x9;is not supported.&#xA;      * @exception NamingException If a naming exception occurs while getting&#xA;      *&#x9;&#x9;the schema.&#xA;      */</comments>
          <target xsi:type="classifiers:Interface" href="DirContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="clone">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;      * Makes a copy of the attribute. &#xA;      * The copy contains the same attribute values as the original attribute:&#xA;      * the attribute values are not themselves cloned.&#xA;      * Changes to the copy will not affect the original and vice versa.&#xA;      *&#xA;      * @return A non-null copy of the attribute.&#xA;      */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isOrdered">
      <typeReference xsi:type="types:Boolean">
        <comments>//----------- Methods to support ordered multivalued attributes</comments>
        <comments>/**&#xA;      * Determines whether this attribute's values are ordered.&#xA;      * If an attribute's values are ordered, duplicate values are allowed.&#xA;      * If an attribute's values are unordered, they are presented&#xA;      * in any order and there are no duplicate values.&#xA;      * @return true if this attribute's values are ordered; false otherwise.&#xA;      * @see #get(int)&#xA;      * @see #remove(int)&#xA;      * @see #add(int, java.lang.Object)&#xA;      * @see #set(int, java.lang.Object)&#xA;      */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the attribute value from the ordered list of attribute values.&#xA;     * This method returns the value at the &lt;tt>ix&lt;/tt> index of the list of&#xA;     * attribute values.&#xA;     * If the attribute values are unordered,&#xA;     * this method returns the value that happens to be at that index.&#xA;     * @param ix The index of the value in the ordered list of attribute values.&#xA;     * 0 &lt;= &lt;tt>ix&lt;/tt> &lt; &lt;tt>size()&lt;/tt>.&#xA;     * @return The possibly null attribute value at index &lt;tt>ix&lt;/tt>; &#xA;     *   null if the attribute value is null.&#xA;     * @exception NamingException If a naming exception was encountered while&#xA;     * retrieving the value.&#xA;     * @exception IndexOutOfBoundsException If &lt;tt>ix&lt;/tt> is outside the specified range.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ix">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="remove">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Removes an attribute value from the ordered list of attribute values.&#xA;     * This method removes the value at the &lt;tt>ix&lt;/tt> index of the list of&#xA;     * attribute values. &#xA;     * If the attribute values are unordered,&#xA;     * this method removes the value that happens to be at that index.&#xA;     * Values located at indices greater than &lt;tt>ix&lt;/tt> are shifted up towards&#xA;     * the front of the list (and their indices decremented by one).&#xA;     *&#xA;     * @param ix The index of the value to remove.&#xA;     * 0 &lt;= &lt;tt>ix&lt;/tt> &lt; &lt;tt>size()&lt;/tt>.&#xA;     * @return The possibly null attribute value at index &lt;tt>ix&lt;/tt> that was removed; &#xA;     *   null if the attribute value is null.&#xA;     * @exception IndexOutOfBoundsException If &lt;tt>ix&lt;/tt> is outside the specified range.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ix">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Adds an attribute value to the ordered list of attribute values.&#xA;     * This method adds &lt;tt>attrVal&lt;/tt> to the list of attribute values at&#xA;     * index &lt;tt>ix&lt;/tt>.&#xA;     * Values located at indices at or greater than &lt;tt>ix&lt;/tt> are &#xA;     * shifted down towards the end of the list (and their indices incremented &#xA;     * by one).&#xA;     * If the attribute values are unordered and already have &lt;tt>attrVal&lt;/tt>,&#xA;     * &lt;tt>IllegalStateException&lt;/tt> is thrown.&#xA;     *&#xA;     * @param ix The index in the ordered list of attribute values to add the new value.&#xA;     * 0 &lt;= &lt;tt>ix&lt;/tt> &lt;= &lt;tt>size()&lt;/tt>.&#xA;     * @param attrVal The possibly null attribute value to add; if null, null is&#xA;     * the value added.&#xA;     * @exception IndexOutOfBoundsException If &lt;tt>ix&lt;/tt> is outside the specified range.&#xA;     * @exception IllegalStateException If the attribute values are unordered and&#xA;     * &lt;tt>attrVal&lt;/tt> is one of those values.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ix">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attrVal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="set">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Sets an attribute value in the ordered list of attribute values.&#xA;     * This method sets the value at the &lt;tt>ix&lt;/tt> index of the list of&#xA;     * attribute values to be &lt;tt>attrVal&lt;/tt>. The old value is removed.&#xA;     * If the attribute values are unordered,&#xA;     * this method sets the value that happens to be at that index&#xA;     * to &lt;tt>attrVal&lt;/tt>, unless &lt;tt>attrVal&lt;/tt> is already one of the values.&#xA;     * In that case, &lt;tt>IllegalStateException&lt;/tt> is thrown.&#xA;     *&#xA;     * @param ix The index of the value in the ordered list of attribute values.&#xA;     * 0 &lt;= &lt;tt>ix&lt;/tt> &lt; &lt;tt>size()&lt;/tt>.&#xA;     * @param attrVal The possibly null attribute value to use. &#xA;     * If null, 'null' replaces the old value.&#xA;     * @return The possibly null attribute value at index ix that was replaced. &#xA;     *   Null if the attribute value was null.&#xA;     * @exception IndexOutOfBoundsException If &lt;tt>ix&lt;/tt> is outside the specified range.&#xA;     * @exception IllegalStateException If &lt;tt>attrVal&lt;/tt> already exists and the&#xA;     *    attribute values are unordered.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ix">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attrVal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="8707690322213556804"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * Use serialVersionUID from JNDI 1.1.1 for interoperability.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA;  * This interface represents an attribute associated with a named object.&#xA;  *&lt;p>&#xA;  * In a directory, named objects can have associated with them&#xA;  * attributes.  The &lt;tt>Attribute&lt;/tt> interface represents an attribute associated&#xA;  * with a named object.  An attribute contains 0 or more, possibly null, values.&#xA;  * The attribute values can be ordered or unordered (see &lt;tt>isOrdered()&lt;/tt>).&#xA;  * If the values are unordered, no duplicates are allowed.&#xA;  * If the values are ordered, duplicates are allowed.&#xA;  *&lt;p>&#xA;  * The content and representation of an attribute and its values is defined by&#xA;  * the attribute's &lt;em>schema&lt;/em>. The schema contains information&#xA;  * about the attribute's syntax and other properties about the attribute.&#xA;  * See &lt;tt>getAttributeDefinition()&lt;/tt> and&#xA;  * &lt;tt>getAttributeSyntaxDefinition()&lt;/tt>&#xA;  * for details regarding how to get schema information about an attribute&#xA;  * if the underlying directory service supports schemas.&#xA;  *&lt;p>&#xA;  * Equality of two attributes is determined by the implementation class.&#xA;  * A simple implementation can use &lt;tt>Object.equals()&lt;/tt> to determine equality &#xA;  * of attribute values, while a more sophisticated implementation might&#xA;  * make use of schema information to determine equality.&#xA;  * Similarly, one implementation might provide a static storage&#xA;  * structure which simply returns the values passed to its&#xA;  * constructor, while another implementation might define &lt;tt>get()&lt;/tt> and &#xA;  * &lt;tt>getAll()&lt;/tt>.&#xA;  * to get the values dynamically from the directory.&#xA;  *&lt;p>&#xA;  * Note that updates to &lt;tt>Attribute&lt;/tt> (such as adding or removing a&#xA;  * value) do not affect the corresponding representation of the attribute&#xA;  * in the directory.  Updates to the directory can only be effected&#xA;  * using operations in the &lt;tt>DirContext&lt;/tt> interface.&#xA;  *&#xA;  * @author Rosanna Lee&#xA;  * @author Scott Seligman&#xA;  * @version 1.12 04/05/05&#xA;  *&#xA;  * @see BasicAttribute&#xA;  * @since 1.3&#xA;  */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../java/lang/Cloneable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
