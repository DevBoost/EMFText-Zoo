<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="NameClassPair.java">
  <comments>/*&#xA; * @(#)NameClassPair.java&#x9;1.10 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <classifiers xsi:type="classifiers:Class" name="NameClassPair">
    <members xsi:type="members:Field" name="name">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Contains the name of this NameClassPair.&#xA;     * It is initialized by the constructor and can be updated using&#xA;     * &lt;tt>setName()&lt;/tt>.&#xA;     * @serial&#xA;     * @see #getName&#xA;     * @see #setName&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="className">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     *Contains the class name contained in this NameClassPair.&#xA;     * It is initialized by the constructor and can be updated using&#xA;     * &lt;tt>setClassName()&lt;/tt>.&#xA;     * @serial&#xA;     * @see #getClassName&#xA;     * @see #setClassName&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fullName">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Contains the full name of this NameClassPair within its&#xA;     * own namespace.&#xA;     * It is initialized using &lt;tt>setNameInNamespace()&lt;/tt>&#xA;     * @serial&#xA;     * @see #getNameInNamespace&#xA;     * @see #setNameInNamespace&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="isRel">
      <initialValue xsi:type="literals:BooleanLiteral" value="true"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Records whether the name of this &lt;tt>NameClassPair&lt;/tt>&#xA;     * is relative to the target context.&#xA;     * It is initialized by the constructor and can be updated using&#xA;     * &lt;tt>setRelative()&lt;/tt>.&#xA;     * @serial&#xA;     * @see #isRelative&#xA;     * @see #setRelative&#xA;     * @see #getName&#xA;     * @see #setName&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="NameClassPair">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="className">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs an instance of a NameClassPair given its&#xA;     * name and class name.&#xA;     *&#xA;     * @param&#x9;name&#x9;The non-null name of the object. It is relative&#xA;     *&#x9;&#x9;&#x9;to the &lt;em>target context&lt;/em> (which is&#xA;     * named by the first parameter of the &lt;code>list()&lt;/code> method)&#xA;     * @param&#x9;className&#x9;The possibly null class name of the object&#xA;     *&#x9;&#x9;bound to name. It is null if the object bound is null.&#xA;     * @see #getClassName&#xA;     * @see #setClassName&#xA;     * @see #getName&#xA;     * @see #setName&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="NameClassPair">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.2"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="className">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="isRelative">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs an instance of a NameClassPair given its&#xA;     * name, class name, and whether it is relative to the listing context.&#xA;     *&#xA;     * @param&#x9;name&#x9;The non-null name of the object.&#xA;     * @param&#x9;className&#x9;The possibly null class name of the object&#xA;     * &#x9;bound to name.  It is null if the object bound is null.&#xA;     * @param isRelative true if &lt;code>name&lt;/code> is a name relative&#xA;     *&#x9;&#x9;to the target context (which is named by the first parameter&#xA;     *&#x9;&#x9;of the &lt;code>list()&lt;/code> method); false if &lt;code>name&lt;/code>&#xA;     *&#x9;&#x9;is a URL string.&#xA;     * @see #getClassName&#xA;     * @see #setClassName&#xA;     * @see #getName&#xA;     * @see #setName&#xA;     * @see #isRelative&#xA;     * @see #setRelative&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getClassName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the class name of the object bound to the name of this binding.&#xA;     * If a reference or some other indirect information is bound,&#xA;     * retrieves the class name of the eventual object that&#xA;     * will be returned by &lt;tt>Binding.getObject()&lt;/tt>.&#xA;     *&#xA;     * @return&#x9;The possibly null class name of object bound.&#xA;     * &#x9;&#x9;It is null if the object bound is null.&#xA;     * @see Binding#getObject&#xA;     * @see Binding#getClassName&#xA;     * @see #setClassName&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the name of this binding.&#xA;     * If &lt;tt>isRelative()&lt;/tt> is true, this name is relative to the&#xA;     * target context (which is named by the first parameter of the&#xA;     * &lt;tt>list()&lt;/tt>).&#xA;     * If &lt;tt>isRelative()&lt;/tt> is false, this name is a URL string.&#xA;     *&#xA;     * @return&#x9;The non-null name of this binding.&#xA;     * @see #isRelative&#xA;     * @see #setName&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setName">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the name of this binding.&#xA;     *&#xA;     * @param&#x9;name the non-null string to use as the name.&#xA;     * @see #getName&#xA;     * @see #setRelative&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setClassName">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the class name of this binding.&#xA;     *&#xA;     * @param&#x9;name the possibly null string to use as the class name.&#xA;     * If null, &lt;tt>Binding.getClassName()&lt;/tt> will return&#xA;     * the actual class name of the object in the binding.&#xA;     * The class name will be null if the object bound is null.&#xA;     * @see #getClassName&#xA;     * @see Binding#getClassName&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isRelative">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines whether the name of this binding is&#xA;     * relative to the target context (which is named by&#xA;     * the first parameter of the &lt;code>list()&lt;/code> method).&#xA;     *&#xA;     * @return true if the name of this binding is relative to the&#xA;     *&#x9;&#x9;target context;&#xA;     *&#x9;&#x9;false if the name of this binding is a URL string.&#xA;     * @see #setRelative&#xA;     * @see #getName&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setRelative">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="r">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets whether the name of this binding is relative to the target&#xA;     * context (which is named by the first parameter of the &lt;code>list()&lt;/code>&#xA;     * method).&#xA;     *&#xA;     * @param r If true, the name of binding is relative to the target context;&#xA;     *&#x9;&#x9;if false, the name of binding is a URL string.&#xA;     * @see #isRelative&#xA;     * @see #setName&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNameInNamespace">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the full name of this binding.&#xA;     * The full name is the absolute name of this binding within&#xA;     * its own namespace. See {@link Context#getNameInNamespace()}.&#xA;     * &lt;p>&#xA;     *&#xA;     * In naming systems for which the notion of full name does not&#xA;     * apply to this binding an &lt;tt>UnsupportedOperationException&lt;/tt>&#xA;     * is thrown.&#xA;     * This exception is also thrown when a service provider written before&#xA;     * the introduction of the method is in use.&#xA;     * &lt;p>&#xA;     * The string returned by this method is not a JNDI composite name and&#xA;     * should not be passed directly to context methods.&#xA;     *&#xA;     * @return The full name of this binding.&#xA;     * @throws UnsupportedOperationException if the notion of full name&#xA;     * &#x9;       does not apply to this binding in the naming system.&#xA;     * @since 1.5&#xA;     * @see #setNameInNamespace&#xA;     * @see #getName&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setNameInNamespace">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fullName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the full name of this binding.&#xA;     * This method must be called to set the full name whenever a&#xA;     * &lt;tt>NameClassPair&lt;/tt> is created and a full name is&#xA;     * applicable to this binding.&#xA;     * &lt;p>&#xA;     * Setting the full name to null, or not setting it at all, will&#xA;     * cause &lt;tt>getNameInNamespace()&lt;/tt> to throw an exception.&#xA;     *&#xA;     * @param fullName The full name to use.&#xA;     * @since 1.5&#xA;     * @see #getNameInNamespace&#xA;     * @see #setName&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Generates the string representation of this name/class pair.&#xA;     * The string representation consists of the name and class name separated&#xA;     * by a colon (':').&#xA;     * The contents of this string is useful&#xA;     * for debugging and is not meant to be interpreted programmatically.&#xA;     *&#xA;     * @return The string representation of this name/class pair.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.10"/>
              <expressionIf xsi:type="references:StringReference" value=""/>
              <expressionElse xsi:type="references:StringReference" value="(not relative)"/>
            </expression>
          </children>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          <children xsi:type="references:StringReference" value=": "/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="5620776610160863339"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Use serialVersionUID from JNDI 1.1.1 for interoperability&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class represents the object name and class name pair of a binding&#xA; * found in a context.&#xA; *&lt;p>&#xA; * A context consists of name-to-object bindings.&#xA; * The NameClassPair class represents the name and the&#xA; * class of the bound object. It consists&#xA; * of a name and a string representing the&#xA; * package-qualified class name.&#xA; *&lt;p>&#xA; * Use subclassing for naming systems that generate contents of&#xA; * a name/class pair dynamically.&#xA; *&lt;p>&#xA; * A NameClassPair instance is not synchronized against concurrent&#xA; * access by multiple threads. Threads that need to access a NameClassPair&#xA; * concurrently should synchronize amongst themselves and provide&#xA; * the necessary locking.&#xA; *&#xA; * @author Rosanna Lee&#xA; * @author Scott Seligman&#xA; * @version 1.10 03/12/19&#xA; *&#xA; * @see Context#list&#xA; * @since 1.3&#xA; */</comments>
      <comments>/*&#xA;  * &lt;p>&#xA;  * The serialized form of a NameClassPair object consists of the name (a&#xA;  * String), class name (a String), and isRelative flag (a boolean).&#xA;  */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../java/io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
