<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/types ../../java.ecore#/16" name="NamingEnumeration.java">
  <comments>/*&#xA; * @(#)NamingEnumeration.java&#x9;1.8 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="NamingEnumeration">
    <typeParameters name="T"/>
    <members xsi:type="members:InterfaceMethod" name="next">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Retrieves the next element in the enumeration.&#xA;      * This method allows naming exceptions encountered while&#xA;      * retrieving the next element to be caught and handled&#xA;      * by the application. &#xA;      * &lt;p> &#xA;      * Note that &lt;tt>next()&lt;/tt> can also throw the runtime exception &#xA;      * NoSuchElementException to indicate that the caller is &#xA;      * attempting to enumerate beyond the end of the enumeration.&#xA;      * This is different from a NamingException, which indicates&#xA;      * that there was a problem in obtaining the next element,&#xA;      * for example, due to a referral or server unavailability, etc.&#xA;      *&#xA;      * @return &#x9;The possibly null element in the enumeration.&#xA;      *&#x9;    null is only valid for enumerations that can return&#xA;      *&#x9;    null (e.g. Attribute.getAll() returns an enumeration of&#xA;      *&#x9;    attribute values, and an attribute value can be null).&#xA;      * @exception NamingException If a naming exception is encountered while attempting&#xA;      * &#x9;&#x9;to retrieve the next element. See NamingException&#xA;      *&#x9;&#x9;&#x9;and its subclasses for the possible naming exceptions.&#xA;      * @exception java.util.NoSuchElementException If attempting to get the next element when none is available.&#xA;      * @see java.util.Enumeration#nextElement&#xA;      */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hasMore">
      <typeReference xsi:type="types:Boolean"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Determines whether there are any more elements in the enumeration.&#xA;      * This method allows naming exceptions encountered while&#xA;      * determining whether there are more elements to be caught and handled&#xA;      * by the application.&#xA;      *&#xA;      * @return&#x9;&#x9;true if there is more in the enumeration ; false otherwise.&#xA;      * @exception NamingException &#xA;      * &#x9;&#x9;If a naming exception is encountered while attempting&#xA;      * &#x9;&#x9;to determine whether there is another element&#xA;      *&#x9;&#x9;&#x9;in the enumeration. See NamingException&#xA;      *&#x9;&#x9;&#x9;and its subclasses for the possible naming exceptions.&#xA;      * @see java.util.Enumeration#hasMoreElements&#xA;      */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="close">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Closes this enumeration.&#xA;     *&#xA;     * After this method has been invoked on this enumeration, the&#xA;     * enumeration becomes invalid and subsequent invocation of any of&#xA;     * its methods will yield undefined results.&#xA;     * This method is intended for aborting an enumeration to free up resources.&#xA;     * If an enumeration proceeds to the end--that is, until&#xA;     * &lt;tt>hasMoreElements()&lt;/tt> or &lt;tt>hasMore()&lt;/tt> returns &lt;tt>false&lt;/tt>--&#xA;     * resources will be freed up automatically and there is no need to&#xA;     * explicitly call &lt;tt>close()&lt;/tt>.&#xA;     *&lt;p>&#xA;     * This method indicates to the service provider that it is free&#xA;     * to release resources associated with the enumeration, and can&#xA;     * notify servers to cancel any outstanding requests. The &lt;tt>close()&lt;/tt>&#xA;     * method is a hint to implementations for managing their resources.&#xA;     * Implementations are encouraged to use appropriate algorithms to&#xA;     * manage their resources when client omits the &lt;tt>close()&lt;/tt> calls.&#xA;     *&#xA;     * @exception NamingException If a naming exception is encountered&#xA;     * while closing the enumeration.&#xA;     * @since 1.3&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA;  * This interface is for enumerating lists returned by &#xA;  * methods in the javax.naming and javax.naming.directory packages.&#xA;  * It extends Enumeration to allow as exceptions to be thrown during &#xA;  * the enumeration.&#xA;  *&lt;p>&#xA;  * When a method such as list(), listBindings(), or search() returns&#xA;  * a NamingEnumeration, any exceptions encountered are reserved until&#xA;  * all results have been returned. At the end of the enumeration, the&#xA;  * exception is thrown (by hasMore());&#xA;  * &lt;p> &#xA;  * For example, if the list() is&#xA;  * returning only a partial answer, the corresponding exception would &#xA;  * be PartialResultException. list() would first return a NamingEnumeration.&#xA;  * When the last of the results has been returned by the NamingEnumeration's&#xA;  * next(), invoking hasMore() would result in PartialResultException being thrown.&#xA;  *&lt;p>&#xA;  * In another example, if a search() method was invoked with a specified&#xA;  * size limit of 'n'. If the answer consists of more than 'n' results, &#xA;  * search() would first return a NamingEnumeration.&#xA;  * When the n'th result has been returned by invoking next() on the&#xA;  * NamingEnumeration, a SizeLimitExceedException would then thrown when&#xA;  * hasMore() is invoked.&#xA;  *&lt;p>&#xA;  * Note that if the program uses hasMoreElements() and nextElement() instead&#xA;  * to iterate through the NamingEnumeration, because these methods&#xA;  * cannot throw exceptions, no exception will be thrown. Instead,&#xA;  * in the previous example, after the n'th result has been returned by&#xA;  * nextElement(), invoking hasMoreElements() would return false.&#xA;  *&lt;p>&#xA;  * Note also that NoSuchElementException is thrown if the program invokes&#xA;  * next() or nextElement() when there are no elements left in the enumeration.&#xA;  * The program can always avoid this exception by using hasMore() and &#xA;  * hasMoreElements() to check whether the end of the enumeration has been reached.&#xA;  *&lt;p>&#xA;  * If an exception is thrown during an enumeration,&#xA;  * the enumeration becomes invalid. &#xA;  * Subsequent invocation of any method on that enumeration&#xA;  * will yield undefined results.&#xA;  * &#xA;  * @author Rosanna Lee&#xA;  * @author Scott Seligman&#xA;  * @version 1.8 04/05/05&#xA;  *&#xA;  * @see Context#list&#xA;  * @see Context#listBindings&#xA;  * @see javax.naming.directory.DirContext#search&#xA;  * @see javax.naming.directory.Attributes#getAll&#xA;  * @see javax.naming.directory.Attributes#getIDs&#xA;  * @see javax.naming.directory.Attribute#getAll&#xA;  * @since 1.3&#xA;  */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <typeArguments xsi:type="generics:QualifiedTypeArgument">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </typeArguments>
        <target xsi:type="classifiers:Interface" href="../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
