<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="NameParser.java">
  <comments>/*&#xA; * @(#)NameParser.java&#x9;1.8 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="NameParser">
    <members xsi:type="members:InterfaceMethod" name="parse">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;&#x9;  * Parses a name into its components.&#xA;&#x9;  *&#xA;&#x9;  * @param name The non-null string name to parse.&#xA;&#x9;  * @return A non-null parsed form of the name using the naming convention&#xA;&#x9;  * of this parser.&#xA;          * @exception InvalidNameException If name does not conform to&#xA;          * &#x9;syntax defined for the namespace.&#xA;          * @exception NamingException If a naming exception was encountered.&#xA;&#x9;  */</comments>
          <target xsi:type="classifiers:Interface" href="Name.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA;  * This interface is used for parsing names from a hierarchical&#xA;  * namespace.  The NameParser contains knowledge of the syntactic&#xA;  * information (like left-to-right orientation, name separator, etc.)&#xA;  * needed to parse names.&#xA;  *&#xA;  * The equals() method, when used to compare two NameParsers, returns&#xA;  * true if and only if they serve the same namespace.&#xA;  *&#xA;  * @author Rosanna Lee&#xA;  * @author Scott Seligman&#xA;  * @version 1.8 04/05/05&#xA;  *&#xA;  * @see CompoundName&#xA;  * @see Name&#xA;  * @since 1.3&#xA;  */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
