<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="StartTlsResponse.java">
  <comments>/*&#xA; * @(#)StartTlsResponse.java&#x9;1.21 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <namespaces>ldap</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>net</namespaces>
    <namespaces>ssl</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../net/ssl/SSLSession.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>net</namespaces>
    <namespaces>ssl</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../net/ssl/SSLSocketFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>net</namespaces>
    <namespaces>ssl</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../net/ssl/HostnameVerifier.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="StartTlsResponse">
    <members xsi:type="members:Field" name="OID">
      <initialValue xsi:type="references:StringReference" value="1.3.6.1.4.1.1466.20037"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Constant</comments>
        <comments>/**&#xA;     * The StartTLS extended response's assigned object identifier&#xA;     * is 1.3.6.1.4.1.1466.20037.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="StartTlsResponse">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// Called by subclass</comments>
        <comments>/**&#xA;     * Constructs a StartTLS extended response.&#xA;     * A concrete subclass must have a public no-arg constructor.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getID">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ExtendedResponse methods</comments>
        <comments>/**&#xA;     * Retrieves the StartTLS response's object identifier string.&#xA;     *&#xA;     * @return The object identifier string, &quot;1.3.6.1.4.1.1466.20037&quot;.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEncodedValue">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the StartTLS response's ASN.1 BER encoded value.&#xA;     * Since the response has no defined value, null is always&#xA;     * returned.&#xA;     *&#xA;     * @return The null value.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setEnabledCipherSuites">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="suites">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// StartTls-specific methods</comments>
        <comments>/**&#xA;     * Overrides the default list of cipher suites enabled for use on the&#xA;     * TLS connection. The cipher suites must have already been listed by&#xA;     * &lt;tt>SSLSocketFactory.getSupportedCipherSuites()&lt;/tt> as being supported.&#xA;     * Even if a suite has been enabled, it still might not be used because&#xA;     * the peer does not support it, or because the requisite certificates&#xA;     * (and private keys) are not available.&#xA;     *&#xA;     * @param suites The non-null list of names of all the cipher suites to&#xA;     * enable.&#xA;     * @see #negotiate&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setHostnameVerifier">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="verifier">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../net/ssl/HostnameVerifier.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the hostname verifier used by &lt;tt>negotiate()&lt;/tt>&#xA;     * after the TLS handshake has completed and the default hostname&#xA;     * verification has failed.&#xA;     * &lt;tt>setHostnameVerifier()&lt;/tt> must be called before &#xA;     * &lt;tt>negotiate()&lt;/tt> is invoked for it to have effect.&#xA;     * If called after&#xA;     * &lt;tt>negotiate()&lt;/tt>, this method does not do anything. &#xA;     *&#xA;     * @param verifier The non-null hostname verifier callback.&#xA;     * @see #negotiate&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="negotiate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../net/ssl/SSLSession.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Negotiates a TLS session using the default SSL socket factory.&#xA;     * &lt;p>&#xA;     * This method is equivalent to &lt;tt>negotiate(null)&lt;/tt>.&#xA;     *&#xA;     * @return The negotiated SSL session&#xA;     * @throws IOException If an IO error was encountered while establishing&#xA;     * the TLS session.&#xA;     * @see #setEnabledCipherSuites&#xA;     * @see #setHostnameVerifier&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="negotiate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../net/ssl/SSLSession.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="factory">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../net/ssl/SSLSocketFactory.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Negotiates a TLS session using an SSL socket factory.&#xA;     * &lt;p>&#xA;     * Creates an SSL socket using the supplied SSL socket factory and&#xA;     * attaches it to the existing connection. Performs the TLS handshake&#xA;     * and returns the negotiated session information.&#xA;     * &lt;p>&#xA;     * If cipher suites have been set via &lt;tt>setEnabledCipherSuites&lt;/tt>&#xA;     * then they are enabled before the TLS handshake begins.&#xA;     * &lt;p>&#xA;     * Hostname verification is performed after the TLS handshake completes.&#xA;     * The default hostname verification performs a match of the server's&#xA;     * hostname against the hostname information found in the server's certificate.&#xA;     * If this verification fails and no callback has been set via &#xA;     * &lt;tt>setHostnameVerifier&lt;/tt> then the negotiation fails.&#xA;     * If this verification fails and a callback has been set via&#xA;     * &lt;tt>setHostnameVerifier&lt;/tt>, then the callback is used to determine whether&#xA;     * the negotiation succeeds.&#xA;     * &lt;p>&#xA;     * If an error occurs then the SSL socket is closed and an IOException&#xA;     * is thrown. The underlying connection remains intact.&#xA;     *&#xA;     * @param factory The possibly null SSL socket factory to use.&#xA;     * If null, the default SSL socket factory is used.&#xA;     * @return The negotiated SSL session&#xA;     * @throws IOException If an IO error was encountered while establishing&#xA;     * the TLS session.&#xA;     * @see #setEnabledCipherSuites&#xA;     * @see #setHostnameVerifier&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="close">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Closes the TLS connection gracefully and reverts back to the underlying&#xA;     * connection.&#xA;     *&#xA;     * @throws IOException If an IO error was encountered while closing the&#xA;     * TLS connection&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="8372842182579276418"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class implements the LDAPv3 Extended Response for StartTLS as&#xA; * defined in&#xA; * &lt;a href=&quot;http://www.ietf.org/rfc/rfc2830.txt&quot;>Lightweight Directory&#xA; * Access Protocol (v3): Extension for Transport Layer Security&lt;/a>&#xA; *&#xA; * The object identifier for StartTLS is 1.3.6.1.4.1.1466.20037&#xA; * and no extended response value is defined.&#xA; *&#xA; *&lt;p>&#xA; * The Start TLS extended request and response are used to establish &#xA; * a TLS connection over the existing LDAP connection associated with &#xA; * the JNDI context on which &lt;tt>extendedOperation()&lt;/tt> is invoked.&#xA; * Typically, a JNDI program uses the StartTLS extended request and response&#xA; * classes as follows.&#xA; * &lt;blockquote>&lt;pre>&#xA; * import javax.naming.ldap.*;&#xA; * &#xA; * // Open an LDAP association&#xA; * LdapContext ctx = new InitialLdapContext();&#xA; *&#xA; * // Perform a StartTLS extended operation&#xA; * StartTlsResponse tls =&#xA; *     (StartTlsResponse) ctx.extendedOperation(new StartTlsRequest());&#xA; *&#xA; * // Open a TLS connection (over the existing LDAP association) and get details&#xA; * // of the negotiated TLS session: cipher suite, peer certificate, ...&#xA; * SSLSession session = tls.negotiate();&#xA; *&#xA; * // ... use ctx to perform protected LDAP operations&#xA; *&#xA; * // Close the TLS connection (revert back to the underlying LDAP association)&#xA; * tls.close();&#xA; *&#xA; * // ... use ctx to perform unprotected LDAP operations&#xA; *&#xA; * // Close the LDAP association&#xA; * ctx.close;&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * @since 1.4&#xA; * @see StartTlsRequest&#xA; * @author Vincent Ryan&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="ExtendedResponse.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
