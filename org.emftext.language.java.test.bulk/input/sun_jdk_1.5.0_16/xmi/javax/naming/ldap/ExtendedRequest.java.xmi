<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ExtendedRequest.java">
  <comments>/*&#xA; * @(#)ExtendedRequest.java&#x9;1.9 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <namespaces>ldap</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ExtendedRequest">
    <comments>// static final long serialVersionUID = -7560110759229059814L;</comments>
    <members xsi:type="members:InterfaceMethod" name="getID">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Retrieves the object identifier of the request.&#xA;      *&#xA;      * @return The non-null object identifier string representing the LDAP&#xA;      *&#x9;&#x9;&lt;tt>ExtendedRequest.requestName&lt;/tt> component.&#xA;      */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getEncodedValue">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Retrieves the ASN.1 BER encoded value of the LDAP extended operation&#xA;      * request. Null is returned if the value is absent.&#xA;      *&#xA;      * The result is the raw BER bytes including the tag and length of&#xA;      * the request value. It does not include the request OID.&#xA;      * This method is called by the service provider to get the bits to&#xA;      * put into the extended operation to be sent to the LDAP server.&#xA;      *&#xA;      * @return A possibly null byte array representing the ASN.1 BER encoded&#xA;      *         contents of the LDAP &lt;tt>ExtendedRequest.requestValue&lt;/tt>&#xA;      *         component.&#xA;      * @exception IllegalStateException If the encoded value cannot be retrieved&#xA;      * because the request contains insufficient or invalid data/state.&#xA;      */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createExtendedResponse">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ExtendedResponse.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="berValue">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Creates the response object that corresponds to this request.&#xA;      *&lt;p>&#xA;      * After the service provider has sent the extended operation request&#xA;      * to the LDAP server, it will receive a response from the server.&#xA;      * If the operation failed, the provider will throw a NamingException.&#xA;      * If the operation succeeded, the provider will invoke this method&#xA;      * using the data that it got back in the response.&#xA;      * It is the job of this method to return a class that implements&#xA;      * the ExtendedResponse interface that is appropriate for the&#xA;      * extended operation request.&#xA;      *&lt;p>&#xA;      * For example, a Start TLS extended request class would need to know&#xA;      * how to process a Start TLS extended response. It does this by creating&#xA;      * a class that implements ExtendedResponse.&#xA;      *&#xA;      * @param id&#x9;The possibly null object identifier of the response&#xA;      *&#x9;&#x9;&#x9;control.&#xA;      * @param berValue&#x9;The possibly null ASN.1 BER encoded value of the&#xA;      *&#x9;&#x9;&#x9;response control. &#xA;      * This is the raw BER bytes including the tag and length of&#xA;      * the response value. It does not include the response OID.&#xA;      * @param offset   The starting position in berValue of the bytes to use.&#xA;      * @param length   The number of bytes in berValue to use.&#xA;      *&#xA;      * @return A non-null object.&#xA;      * @exception NamingException if cannot create extended response &#xA;      *     due to an error.&#xA;      * @see ExtendedResponse&#xA;      */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA;  * This interface represents an LDAPv3 extended operation request as defined in&#xA;  * &lt;A HREF=&quot;ftp://ftp.isi.edu/in-notes/rfc2251.txt&quot;>RFC 2251&lt;/A>.&#xA;  * &lt;pre>&#xA;  *     ExtendedRequest ::= [APPLICATION 23] SEQUENCE {&#xA;  *              requestName      [0] LDAPOID,&#xA;  *              requestValue     [1] OCTET STRING OPTIONAL }&#xA;  * &lt;/pre>&#xA;  * It comprises an object identifier string and an optional ASN.1 BER&#xA;  * encoded value.&#xA;  *&lt;p>&#xA;  * The methods in this class are used by the service provider to construct&#xA;  * the bits to send to the LDAP server. Applications typically only deal with&#xA;  * the classes that implement this interface, supplying them with&#xA;  * any information required for a particular extended operation request.&#xA;  * It would then pass such a class as an argument to the&#xA;  * &lt;tt>LdapContext.extendedOperation()&lt;/tt> method for performing the&#xA;  * LDAPv3 extended operation.&#xA;  *&lt;p>&#xA;  * For example, suppose the LDAP server supported a 'get time' extended operation.&#xA;  * It would supply GetTimeRequest and GetTimeResponse classes:&#xA;  *&lt;blockquote>&lt;pre>&#xA;  * public class GetTimeRequest implements ExtendedRequest {&#xA;  *     public GetTimeRequest() {... };&#xA;  *     public ExtendedResponse createExtendedResponse(String id, &#xA;  * &#x9;    byte[] berValue, int offset, int length) &#xA;  *&#x9;    throws NamingException {&#xA;  *         return new GetTimeResponse(id, berValue, offset, length);&#xA;  *     }&#xA;  *     ...&#xA;  * }&#xA;  * public class GetTimeResponse implements ExtendedResponse {&#xA;  *     long time;&#xA;  *     public GetTimeResponse(String id, byte[] berValue, int offset, &#xA;  * &#x9;    int length) throws NamingException {&#xA;  *         time =&#x9;... // decode berValue to get time&#xA;  *     }&#xA;  *     public java.util.Date getDate() { return new java.util.Date(time) };&#xA;  *     public long getTime() { return time };&#xA;  *     ...&#xA;  * }&#xA;  *&lt;/pre>&lt;/blockquote>&#xA;  * A program would use then these classes as follows:&#xA;  *&lt;blockquote>&lt;pre>&#xA;  * GetTimeResponse resp =&#xA;  * &#x9;(GetTimeResponse) ectx.extendedOperation(new GetTimeRequest());&#xA;  * long time = resp.getTime();&#xA;  *&lt;/pre>&lt;/blockquote>&#xA;  * &#xA;  * @author Rosanna Lee&#xA;  * @author Scott Seligman&#xA;  * @author Vincent Ryan&#xA;  * @version 1.9 03/12/19&#xA;  *&#xA;  * @see ExtendedResponse&#xA;  * @see LdapContext#extendedOperation&#xA;  * @since 1.3&#xA;  */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
