<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="LdapReferralException.java">
  <comments>/*&#xA; * @(#)LdapReferralException.java&#x9;1.12 04/07/16&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <namespaces>ldap</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Class" href="../ReferralException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Context.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="LdapReferralException">
    <members xsi:type="members:Constructor" name="LdapReferralException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="explanation">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructs a new instance of LdapReferralException using the&#xA;     * explanation supplied. All other fields are set to null.&#xA;     *&#xA;     * @param&#x9;explanation&#x9;Additional detail about this exception. Can be null.&#xA;     * @see java.lang.Throwable#getMessage&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="LdapReferralException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;      * Constructs a new instance of LdapReferralException.&#xA;      * All fields are set to null.&#xA;      */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getReferralContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Context.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the context at which to continue the method using the&#xA;     * context's environment and no controls.&#xA;     * The referral context is created using the environment properties of&#xA;     * the context that threw the &lt;tt>ReferralException&lt;/tt> and no controls.&#xA;     *&lt;p>&#xA;     * This method is equivalent to&#xA;     *&lt;blockquote>&lt;pre>&#xA;     * getReferralContext(ctx.getEnvironment(), null);&#xA;     *&lt;/pre>&lt;/blockquote>&#xA;     * where &lt;tt>ctx&lt;/tt> is the context that threw the &lt;tt>ReferralException.&lt;/tt>&#xA;     *&lt;p>&#xA;     * It is overridden in this class for documentation purposes only.&#xA;     * See &lt;tt>ReferralException&lt;/tt> for how to use this method.&#xA;     * &#xA;     * @return The non-null context at which to continue the method.&#xA;     * @exception NamingException If a naming exception was encountered.&#xA;     * Call either &lt;tt>retryReferral()&lt;/tt> or &lt;tt>skipReferral()&lt;/tt>&#xA;     * to continue processing referrals.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getReferralContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Context.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="env">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the context at which to continue the method using &#xA;     * environment properties and no controls.&#xA;     * The referral context is created using &lt;tt>env&lt;/tt> as its environment&#xA;     * properties and no controls.&#xA;     *&lt;p>&#xA;     * This method is equivalent to&#xA;     *&lt;blockquote>&lt;pre>&#xA;     * getReferralContext(env, null);&#xA;     *&lt;/pre>&lt;/blockquote>&#xA;     *&lt;p>&#xA;     * It is overridden in this class for documentation purposes only.&#xA;     * See &lt;tt>ReferralException&lt;/tt> for how to use this method.&#xA;     * &#xA;     * @param env The possibly null environment to use when retrieving the &#xA;     * &#x9;&#x9;referral context. If null, no environment properties will be used.&#xA;     *&#xA;     * @return The non-null context at which to continue the method.&#xA;     * @exception NamingException If a naming exception was encountered.&#xA;     * Call either &lt;tt>retryReferral()&lt;/tt> or &lt;tt>skipReferral()&lt;/tt>&#xA;     * to continue processing referrals.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getReferralContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Context.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="env">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="reqCtls">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Control.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the context at which to continue the method using&#xA;     * request controls and environment properties.&#xA;     * Regardless of whether a referral is encountered directly during a &#xA;     * context operation, or indirectly, for example, during a search&#xA;     * enumeration, the referral exception should provide a context&#xA;     * at which to continue the operation.&#xA;     * To continue the operation, the client program should re-invoke&#xA;     * the method using the same arguments as the original invocation.&#xA;     *&lt;p>&#xA;     * &lt;tt>reqCtls&lt;/tt> is used when creating the connection to the referred&#xA;     * server. These controls will be used as the connection request controls for&#xA;     * the context and context instances&#xA;     * derived from the context. &#xA;     * &lt;tt>reqCtls&lt;/tt> will also be the context's request controls for &#xA;     * subsequent context operations. See the &lt;tt>LdapContext&lt;/tt> class&#xA;     * description for details.&#xA;     *&lt;p>&#xA;     * This method should be used instead of the other two overloaded forms&#xA;     * when the caller needs to supply request controls for creating&#xA;     * the referral context. It might need to do this, for example, when&#xA;     * it needs to supply special controls relating to authentication.&#xA;     *&lt;p>&#xA;     * Service provider implementors should read the &quot;Service Provider&quot; section&#xA;     * in the &lt;tt>LdapContext&lt;/tt> class description for implementation details.&#xA;     *&#xA;     * @param reqCtls The possibly null request controls to use for the new context.&#xA;     * If null or the empty array means use no request controls.&#xA;     * @param env The possibly null environment properties to use when&#xA;     * for the new context. If null, the context is initialized with no environment&#xA;     * properties.&#xA;     * @return The non-null context at which to continue the method.&#xA;     * @exception NamingException If a naming exception was encountered.&#xA;     * Call either &lt;tt>retryReferral()&lt;/tt> or &lt;tt>skipReferral()&lt;/tt>&#xA;     * to continue processing referrals.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="1668992791764950804"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This abstract class is used to represent an LDAP referral exception.&#xA; * It extends the base &lt;tt>ReferralException&lt;/tt> by providing a &#xA; * &lt;tt>getReferralContext()&lt;/tt> method that accepts request controls.&#xA; * LdapReferralException is an abstract class. Concrete implementations of it&#xA; * determine its synchronization and serialization properties.&#xA; *&lt;p>&#xA; * A &lt;tt>Control[]&lt;/tt> array passed as a parameter to&#xA; * the &lt;tt>getReferralContext()&lt;/tt> method is owned by the caller.&#xA; * The service provider will not modify the array or keep a reference to it,&#xA; * although it may keep references to the individual &lt;tt>Control&lt;/tt> objects&#xA; * in the array.&#xA; *&#xA; * @author Rosanna Lee&#xA; * @author Scott Seligman&#xA; * @author Vincent Ryan&#xA; * @version 1.12 04/07/16&#xA; * @since 1.3&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../ReferralException.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
