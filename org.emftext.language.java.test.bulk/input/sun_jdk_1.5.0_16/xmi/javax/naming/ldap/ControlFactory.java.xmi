<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ControlFactory.java">
  <comments>/*&#xA; * @(#)ControlFactory.java&#x9;1.12 04/07/16&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <namespaces>ldap</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Context.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>naming</namespaces>
    <namespaces>internal</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../com/sun/naming/internal/FactoryEnumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>naming</namespaces>
    <namespaces>internal</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../com/sun/naming/internal/ResourceManager.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ControlFactory">
    <members xsi:type="members:Constructor" name="ControlFactory">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/*&#xA;     * Creates a new instance of a control factory.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getControlInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Control.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Control.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Creates a control using this control factory.&#xA;      *&lt;p>&#xA;      * The factory is used by the service provider to return controls&#xA;      * that it reads from the LDAP protocol as specialized control classes.&#xA;      * Without this mechanism, the provider would be returning&#xA;      * controls that only contained data in BER encoded format.&#xA;      *&lt;p>&#xA;      * Typically, &lt;tt>ctl&lt;/tt> is a &quot;basic&quot; control containing&#xA;      * BER encoded data. The factory is used to create a specialized&#xA;      * control implementation, usually by decoding the BER encoded data,&#xA;      * that provides methods to access that data in a type-safe and friendly&#xA;      * manner. &#xA;      * &lt;p>&#xA;      * For example, a factory might use the BER encoded data in&#xA;      * basic control and return an instance of a VirtualListReplyControl.&#xA;      *&lt;p>&#xA;      * If this factory cannot create a control using the argument supplied,&#xA;      * it should return null. &#xA;      * A factory should only throw an exception if it is sure that&#xA;      * it is the only intended factory and that no other control factories&#xA;      * should be tried. This might happen, for example, if the BER data&#xA;      * in the control does not match what is expected of a control with&#xA;      * the given OID. Since this method throws &lt;tt>NamingException&lt;/tt>,&#xA;      * any other internally generated exception that should be propagated&#xA;      * must be wrapped inside a &lt;tt>NamingException&lt;/tt>.&#xA;      *&#xA;      * @param ctl A non-null control.&#xA;      *&#xA;      * @return A possibly null Control.&#xA;      * @exception NamingException If &lt;tt>ctl&lt;/tt> contains invalid data that prevents it&#xA;      * from being used to create a control. A factory should only throw &#xA;      * an exception if it knows how to produce the control (identified by the OID)&#xA;      * but is unable to because of, for example invalid BER data. &#xA;      */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getControlInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Control.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Control.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctx">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Context.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="env">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Creates a control using known control factories.&#xA;      * &lt;p>&#xA;      * The following rule is used to create the control:&#xA;      *&lt;ul>&#xA;      * &lt;li> Use the control factories specified in &#xA;      *    the &lt;tt>LdapContext.CONTROL_FACTORIES&lt;/tt> property of the&#xA;      *    environment, and of the provider resource file associated with&#xA;      *    &lt;tt>ctx&lt;/tt>, in that order.&#xA;      *    The value of this property is a colon-separated list of factory&#xA;      *    class names that are tried in order, and the first one that succeeds&#xA;      *    in creating the control is the one used.&#xA;      *    If none of the factories can be loaded,&#xA;      *    return &lt;code>ctl&lt;/code>.&#xA;      *    If an exception is encountered while creating the control, the&#xA;      *    exception is passed up to the caller.&#xA;      *&lt;/ul>&#xA;      * &lt;p>&#xA;      * Note that a control factory&#xA;      * must be public and must have a public constructor that accepts no arguments.&#xA;      * &lt;p>&#xA;      * @param ctl The non-null control object containing the OID and BER data.&#xA;      * @param ctx The possibly null context in which the control is being created.&#xA;      * If null, no such information is available.&#xA;      * @param env The possibly null environment of the context. This is used&#xA;      * to find the value of the &lt;tt>LdapContext.CONTROL_FACTORIES&lt;/tt> property.&#xA;      * @return A control object created using &lt;code>ctl&lt;/code>; or&#xA;      *&#x9;&#x9;&lt;code>ctl&lt;/code> if a control object cannot be created using&#xA;      *&#x9;&#x9;the algorithm described above.&#xA;      * @exception NamingException if a naming exception was encountered&#xA;      * &#x9;while attempting to create the control object.&#xA;      *         If one of the factories accessed throws an&#xA;      *&#x9;&#x9;exception, it is propagated up to the caller.&#xA;      * If an error was encountered while loading&#xA;      *&#x9;and instantiating the factory and object classes, the exception&#xA;      * is wrapped inside a &lt;tt>NamingException&lt;/tt> and then rethrown.&#xA;      */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="factories">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// Get object factories list from environment properties or</comments>
              <comments>// provider resource file.</comments>
              <target xsi:type="classifiers:Class" href="../../../com/sun/naming/internal/FactoryEnumeration.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../com/sun/naming/internal/ResourceManager.class.xmi#//@classifiers.0/@members.12"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="LdapContext.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Interface" href="LdapContext.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.2"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../com/sun/naming/internal/ResourceManager.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="answer">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// Try each factory until one succeeds</comments>
              <target xsi:type="classifiers:Interface" href="Control.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="factory">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../com/sun/naming/internal/FactoryEnumeration.class.xmi#//@classifiers.0/@members.4"/>
                  </next>
                </child>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.3/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.1">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.2/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../com/sun/naming/internal/FactoryEnumeration.class.xmi#//@classifiers.0/@members.5"/>
            </next>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.2/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </child>
          <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.2/@variable"/>
          <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA;  * This abstract class represents a factory for creating LDAPv3 controls.&#xA;  * LDAPv3 controls are defined in &#xA;  * &lt;A HREF=&quot;ftp://ftp.isi.edu/in-notes/rfc2251.txt&quot;>RFC 2251&lt;/A>.&#xA;  *&lt;p>&#xA;  * When a service provider receives a response control, it uses control &#xA;  * factories to return the specific/appropriate control class implementation.&#xA;  * &#xA;  * @author Rosanna Lee&#xA;  * @author Scott Seligman&#xA;  * @author Vincent Ryan&#xA;  * @version 1.12 04/07/16&#xA;  *&#xA;  * @see Control&#xA;  * @since 1.3&#xA;  */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
