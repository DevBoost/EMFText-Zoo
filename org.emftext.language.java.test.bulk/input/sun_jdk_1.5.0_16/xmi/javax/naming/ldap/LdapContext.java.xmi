<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/types ../../../java.ecore#/16" name="LdapContext.java">
  <comments>/*&#xA; * @(#)LdapContext.java&#x9;1.10 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <namespaces>ldap</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <namespaces>directory</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../directory/DirContext.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="LdapContext">
    <members xsi:type="members:InterfaceMethod" name="extendedOperation">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ExtendedResponse.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="request">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ExtendedRequest.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    * Performs an extended operation.&#xA;    *&#xA;    * This method is used to support LDAPv3 extended operations.&#xA;    * @param request The non-null request to be performed.&#xA;    * @return The possibly null response of the operation. null means&#xA;    * the operation did not generate any response.&#xA;    * @throws NamingException If an error occurred while performing the&#xA;    * extended operation.&#xA;    */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="newInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="requestControls">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Control.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new instance of this context initialized using request controls.&#xA;     *&#xA;     * This method is a convenience method for creating a new instance&#xA;     * of this context for the purposes of multithreaded access.&#xA;     * For example, if multiple threads want to use different context&#xA;     * request controls,&#xA;     * each thread may use this method to get its own copy of this context&#xA;     * and set/get context request controls without having to synchronize with other &#xA;     * threads.&#xA;     *&lt;p>&#xA;     * The new context has the same environment properties and connection &#xA;     * request controls as this context. See the class description for details.&#xA;     * Implementations might also allow this context and the new context&#xA;     * to share the same network connection or other resources if doing &#xA;     * so does not impede the independence of either context.&#xA;     *&#xA;     * @param requestControls The possibly null request controls &#xA;     * to use for the new context.&#xA;     * If null, the context is initialized with no request controls.&#xA;     *&#xA;     * @return A non-null &lt;tt>LdapContext&lt;/tt> instance.&#xA;     * @exception NamingException If an error occurred while creating&#xA;     * the new instance.&#xA;     * @see InitialLdapContext&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="reconnect">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="connCtls">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Control.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reconnects to the LDAP server using the supplied controls and &#xA;     * this context's environment.&#xA;     *&lt;p>&#xA;     * This method is a way to explicitly initiate an LDAP &quot;bind&quot; operation.&#xA;     * For example, you can use this method to set request controls for&#xA;     * the LDAP &quot;bind&quot; operation, or to explicitly connect to the server &#xA;     * to get response controls returned by the LDAP &quot;bind&quot; operation.&#xA;     *&lt;p>&#xA;     * This method sets this context's &lt;tt>connCtls&lt;/tt>&#xA;     * to be its new connection request controls. This context's&#xA;     * context request controls are not affected.&#xA;     * After this method has been invoked, any subsequent &#xA;     * implicit reconnections will be done using &lt;tt>connCtls&lt;/tt>.&#xA;     * &lt;tt>connCtls&lt;/tt> are also used as&#xA;     * connection request controls for new context instances derived from this&#xA;     * context.&#xA;     * These connection request controls are not&#xA;     * affected by &lt;tt>setRequestControls()&lt;/tt>.&#xA;     *&lt;p>&#xA;     * Service provider implementors should read the &quot;Service Provider&quot; section&#xA;     * in the class description for implementation details.&#xA;     * @param connCtls The possibly null controls to use. If null, no&#xA;     * controls are used.&#xA;     * @exception NamingException If an error occurred while reconnecting.&#xA;     * @see #getConnectControls&#xA;     * @see #newInstance&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getConnectControls">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Control.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the connection request controls in effect for this context.&#xA;     * The controls are owned by the JNDI implementation and are&#xA;     * immutable. Neither the array nor the controls may be modified by the&#xA;     * caller.&#xA;     *&#xA;     * @return A possibly-null array of controls. null means no connect controls&#xA;     * have been set for this context.&#xA;     * @exception NamingException If an error occurred while getting the request&#xA;     * controls.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setRequestControls">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="requestControls">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Control.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the request controls for methods subsequently &#xA;     * invoked on this context.&#xA;     * The request controls are owned by the JNDI implementation and are&#xA;     * immutable. Neither the array nor the controls may be modified by the&#xA;     * caller.&#xA;     * &lt;p>&#xA;     * This removes any previous request controls and adds&#xA;     * &lt;tt>requestControls&lt;/tt> &#xA;     * for use by subsequent methods invoked on this context.&#xA;     * This method does not affect this context's connection request controls.&#xA;     *&lt;p>&#xA;     * Note that &lt;tt>requestControls&lt;/tt> will be in effect until the next&#xA;     * invocation of &lt;tt>setRequestControls()&lt;/tt>. You need to explicitly&#xA;     * invoke &lt;tt>setRequestControls()&lt;/tt> with &lt;tt>null&lt;/tt> or an empty&#xA;     * array to clear the controls if you don't want them to affect the&#xA;     * context methods any more.&#xA;     * To check what request controls are in effect for this context, use&#xA;     * &lt;tt>getRequestControls()&lt;/tt>.&#xA;     * @param requestControls The possibly null controls to use. If null, no&#xA;     * controls are used.&#xA;     * @exception NamingException If an error occurred while setting the&#xA;     * request controls.&#xA;     * @see #getRequestControls&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRequestControls">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Control.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the request controls in effect for this context.&#xA;     * The request controls are owned by the JNDI implementation and are&#xA;     * immutable. Neither the array nor the controls may be modified by the&#xA;     * caller.&#xA;     *&#xA;     * @return A possibly-null array of controls. null means no request controls&#xA;     * have been set for this context.&#xA;     * @exception NamingException If an error occurred while getting the request&#xA;     * controls.&#xA;     * @see #setRequestControls&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getResponseControls">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Control.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the response controls produced as a result of the last&#xA;     * method invoked on this context.&#xA;     * The response controls are owned by the JNDI implementation and are&#xA;     * immutable. Neither the array nor the controls may be modified by the&#xA;     * caller.&#xA;     *&lt;p>&#xA;     * These response controls might have been generated by a successful or&#xA;     * failed operation.&#xA;     *&lt;p>&#xA;     * When a context method that may return response controls is invoked,&#xA;     * response controls from the previous method invocation are cleared.&#xA;     * &lt;tt>getResponseControls()&lt;/tt> returns all of the response controls&#xA;     * generated by LDAP operations used by the context method in the order&#xA;     * received from the LDAP server.&#xA;     * Invoking &lt;tt>getResponseControls()&lt;/tt> does not&#xA;     * clear the response controls. You can call it many times (and get&#xA;     * back the same controls) until the next context method that may return&#xA;     * controls is invoked.&#xA;     *&lt;p>&#xA;     * @return A possibly null array of controls. If null, the previous&#xA;     * method invoked on this context did not produce any controls.&#xA;     * @exception NamingException If an error occurred while getting the response&#xA;     * controls.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="CONTROL_FACTORIES">
      <initialValue xsi:type="references:StringReference" value="java.naming.factory.control"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * Constant that holds the name of the environment property&#xA;     * for specifying the list of control factories to use. The value&#xA;     * of the property should be a colon-separated list of the fully&#xA;     * qualified class names of factory classes that will create a control&#xA;     * given another control. See&#xA;     * &lt;tt>ControlFactory.getControlInstance()&lt;/tt> for details.&#xA;     * This property may be specified in the environment, an applet&#xA;     * parameter, a system property, or one or more resource files.&#xA;     *&lt;p>&#xA;     * The value of this constant is &quot;java.naming.factory.control&quot;.&#xA;     *&lt;p>&#xA;     * @see ControlFactory&#xA;     * @see javax.naming.Context#addToEnvironment&#xA;     * @see javax.naming.Context#removeFromEnvironment&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This interface represents a context in which you can perform&#xA; * operations with LDAPv3-style controls and perform LDAPv3-style&#xA; * extended operations.&#xA; * &#xA; * For applications that do not require such controls or extended&#xA; * operations, the more generic &lt;tt>javax.naming.directory.DirContext&lt;/tt>&#xA; * should be used instead.&#xA; * &#xA; * &lt;h3>Usage Details About Controls&lt;/h3>&#xA; * &#xA; * This interface provides support for LDAP v3 controls.  &#xA; * At a high level, this support allows a user&#xA; * program to set request controls for LDAP operations that are executed&#xA; * in the course of the user program's invocation of &#xA; * &lt;tt>Context&lt;/tt>/&lt;tt>DirContext&lt;/tt>&#xA; * methods, and read response controls resulting from LDAP operations.&#xA; * At the implementation level, there are some details that developers of&#xA; * both the user program and service providers need to understand in order &#xA; * to correctly use request and response controls.&#xA; * &#xA; * &lt;h3>Request Controls&lt;/h3>&#xA; * &lt;p>&#xA; * There are two types of request controls:&#xA; * &lt;ul>&#xA; * &lt;li>Request controls that affect how a connection is created&#xA; * &lt;li>Request controls that affect context methods&#xA; * &lt;/ul>&#xA; * &#xA; * The former is used whenever a connection needs to be established or&#xA; * re-established with an LDAP server. The latter is used when all other&#xA; * LDAP operations are sent to the LDAP server.  The reason why a&#xA; * distinction between these two types of request controls is necessary&#xA; * is because JNDI is a high-level API that does not deal directly with&#xA; * connections.  It is the job of service providers to do any necessary&#xA; * connection management. Consequently, a single&#xA; * connection may be shared by multiple context instances, and a service provider&#xA; * is free to use its own algorithms to conserve connection and network&#xA; * usage. Thus, when a method is invoked on the context instance, the service&#xA; * provider might need to do some connection management in addition to&#xA; * performing the corresponding LDAP operations. For connection management,&#xA; * it uses the &lt;em>connection request controls&lt;/em>, while for the normal&#xA; * LDAP operations, it uses the &lt;em>context request controls&lt;/em>.&#xA; *&lt;p>Unless explicitly qualified, the term &quot;request controls&quot; refers to&#xA; * context request controls.&#xA; * &#xA; * &lt;h4>Context Request Controls&lt;/h4>&#xA; * There are two ways in which a context instance gets its request controls:&#xA; * &lt;ol>&#xA; * &lt;tt>&#xA; * &lt;li>ldapContext.newInstance(&lt;strong>reqCtls&lt;/strong>)&#xA; * &lt;li>ldapContext.setRequestControls(&lt;strong>reqCtls&lt;/strong>)&#xA; * &lt;/tt>&#xA; * &lt;/ol>&#xA; * where &lt;tt>ldapContext&lt;/tt> is an instance of &lt;tt>LdapContext&lt;/tt>.&#xA; * Specifying &lt;tt>null&lt;/tt> or an empty array for &lt;tt>reqCtls&lt;/tt>&#xA; * means no request controls.&#xA; * &lt;tt>newInstance()&lt;/tt> creates a new instance of a context using&#xA; * &lt;tt>reqCtls&lt;/tt>, while &lt;tt>setRequestControls()&lt;/tt>&#xA; * updates an existing context instance's request controls to &lt;tt>reqCtls&lt;/tt>.&#xA; * &lt;p>&#xA; * Unlike environment properties, request controls of a context instance&#xA; * &lt;em>are not inherited&lt;/em> by context instances that are derived from&#xA; * it.  Derived context instances have &lt;tt>null&lt;/tt> as their context&#xA; * request controls.  You must set the request controls of a derived context&#xA; * instance explicitly using &lt;tt>setRequestControls()&lt;/tt>.&#xA; * &lt;p>&#xA; * A context instance's request controls are retrieved using&#xA; * the method &lt;tt>getRequestControls()&lt;/tt>.&#xA; * &#xA; * &lt;h4>Connection Request Controls&lt;/h4>&#xA; * There are three ways in which connection request controls are set:&#xA; * &lt;ol>&#xA; * &lt;tt>&#xA; * &lt;li>&#xA; * new InitialLdapContext(env, &lt;strong>connCtls&lt;/strong>)&#xA; * &lt;li>refException.getReferralContext(env, &lt;strong>connCtls&lt;/strong>)&#xA; * &lt;li>ldapContext.reconnect(&lt;strong>connCtls&lt;/strong>);&#xA; * &lt;/tt>&#xA; * &lt;/ol>&#xA; * where &lt;tt>refException&lt;/tt> is an instance of&#xA; * &lt;tt>LdapReferralException&lt;/tt>, and &lt;tt>ldapContext&lt;/tt> is an&#xA; * instance of &lt;tt>LdapContext&lt;/tt>.&#xA; * Specifying &lt;tt>null&lt;/tt> or an empty array for &lt;tt>connCtls&lt;/tt>&#xA; * means no connection request controls.&#xA; * &lt;p>&#xA; * Like environment properties, connection request controls of a context&#xA; * &lt;em>are inherited&lt;/em> by contexts that are derived from it.&#xA; * Typically, you initialize the connection request controls using the&#xA; * &lt;tt>InitialLdapContext&lt;/tt> constructor or&#xA; * &lt;tt>LdapReferralContext.getReferralContext()&lt;/tt>. These connection&#xA; * request controls are inherited by contexts that share the same&#xA; * connection--that is, contexts derived from the initial or referral&#xA; * contexts.  &#xA; * &lt;p>&#xA; * Use &lt;tt>reconnect()&lt;/tt> to change the connection request controls of&#xA; * a context.  &#xA; * Invoking &lt;tt>ldapContext.reconnect()&lt;/tt> affects only the&#xA; * connection used by &lt;tt>ldapContext&lt;/tt> and any new contexts instances that are&#xA; * derived form &lt;tt>ldapContext&lt;/tt>. Contexts that previously shared the&#xA; * connection with &lt;tt>ldapContext&lt;/tt> remain unchanged. That is, a context's&#xA; * connection request controls must be explicitly changed and is not&#xA; * affected by changes to another context's connection request&#xA; * controls.&#xA; * &lt;p>&#xA; * A context instance's connection request controls are retrieved using&#xA; * the method &lt;tt>getConnectControls()&lt;/tt>.&#xA; * &#xA; * &lt;h4>Service Provider Requirements&lt;/h4>&#xA; * &#xA; * A service provider supports connection and context request controls&#xA; * in the following ways.  Context request controls must be associated on&#xA; * a per context instance basis while connection request controls must be&#xA; * associated on a per connection instance basis.  The service provider&#xA; * must look for the connection request controls in the environment&#xA; * property &quot;java.naming.ldap.control.connect&quot; and pass this environment&#xA; * property on to context instances that it creates.&#xA; * &#xA; * &lt;h3>Response Controls&lt;/h3>&#xA; * &#xA; * The method &lt;tt>LdapContext.getResponseControls()&lt;/tt> is used to&#xA; * retrieve the response controls generated by LDAP operations executed&#xA; * as the result of invoking a &lt;tt>Context&lt;/tt>/&lt;tt>DirContext&lt;/tt>&#xA; * operation. The result is all of the responses controls generated&#xA; * by the underlying LDAP operations, including any implicit reconnection.&#xA; * To get only the reconnection response controls, &#xA; * use &lt;tt>reconnect()&lt;/tt> followed by &lt;tt>getResponseControls()&lt;/tt>.&#xA; * &#xA; * &lt;h3>Parameters&lt;/h3>&#xA; *&#xA; * A &lt;tt>Control[]&lt;/tt> array&#xA; * passed as a parameter to any method is owned by the caller.&#xA; * The service provider will not modify the array or keep a reference to it,&#xA; * although it may keep references to the individual &lt;tt>Control&lt;/tt> objects&#xA; * in the array.&#xA; * A &lt;tt>Control[]&lt;/tt> array returned by any method is immutable, and may&#xA; * not subsequently be modified by either the caller or the service provider.&#xA; * &#xA; * @author Rosanna Lee&#xA; * @author Scott Seligman&#xA; * @author Vincent Ryan&#xA; * @version 1.10 03/12/19&#xA; *&#xA; * @see InitialLdapContext&#xA; * @see LdapReferralException#getReferralContext(java.util.Hashtable,javax.naming.ldap.Control[])&#xA; * @since 1.3&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../directory/DirContext.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
