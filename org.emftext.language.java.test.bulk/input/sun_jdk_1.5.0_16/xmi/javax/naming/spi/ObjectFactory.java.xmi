<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ObjectFactory.java">
  <comments>/*&#xA; * @(#)ObjectFactory.java&#x9;1.10 04/07/16&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <namespaces>spi</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ObjectFactory">
    <members xsi:type="members:InterfaceMethod" name="getObjectInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Name.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nameCtx">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Context.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="environment">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA; * Creates an object using the location or reference information&#xA; * specified.  &#xA; * &lt;p>&#xA; * Special requirements of this object are supplied&#xA; * using &lt;code>environment&lt;/code>.&#xA; * An example of such an environment property is user identity&#xA; * information. &#xA; *&lt;p>&#xA; * &lt;tt>NamingManager.getObjectInstance()&lt;/tt>&#xA; * successively loads in object factories and invokes this method&#xA; * on them until one produces a non-null answer.  When an exception&#xA; * is thrown by an object factory, the exception is passed on to the caller&#xA; * of &lt;tt>NamingManager.getObjectInstance()&lt;/tt>&#xA; * (and no search is made for other factories&#xA; * that may produce a non-null answer).&#xA; * An object factory should only throw an exception if it is sure that&#xA; * it is the only intended factory and that no other object factories&#xA; * should be tried.&#xA; * If this factory cannot create an object using the arguments supplied,&#xA; * it should return null. &#xA; *&lt;p>&#xA; * A &lt;em>URL context factory&lt;/em> is a special ObjectFactory that&#xA; * creates contexts for resolving URLs or objects whose locations&#xA; * are specified by URLs.  The &lt;tt>getObjectInstance()&lt;/tt> method&#xA; * of a URL context factory will obey the following rules.&#xA; * &lt;ol>&#xA; * &lt;li>If &lt;code>obj&lt;/code> is null, create a context for resolving URLs of the&#xA; * scheme associated with this factory. The resulting context is not tied&#xA; * to a specific URL:  it is able to handle arbitrary URLs with this factory's&#xA; * scheme id.  For example, invoking &lt;tt>getObjectInstance()&lt;/tt> with&#xA; * &lt;code>obj&lt;/code> set to null on an LDAP URL context factory would return a&#xA; * context that can resolve LDAP URLs&#xA; * such as &quot;ldap://ldap.wiz.com/o=wiz,c=us&quot; and&#xA; * &quot;ldap://ldap.umich.edu/o=umich,c=us&quot;.&#xA; * &lt;li>&#xA; * If &lt;code>obj&lt;/code> is a URL string, create an object (typically a context)&#xA; * identified by the URL.  For example, suppose this is an LDAP URL context&#xA; * factory.  If &lt;code>obj&lt;/code> is &quot;ldap://ldap.wiz.com/o=wiz,c=us&quot;,&#xA; * getObjectInstance() would return the context named by the distinguished&#xA; * name &quot;o=wiz, c=us&quot; at the LDAP server ldap.wiz.com.  This context can&#xA; * then be used to resolve LDAP names (such as &quot;cn=George&quot;)&#xA; * relative to that context.&#xA; * &lt;li>&#xA; * If &lt;code>obj&lt;/code> is an array of URL strings, the assumption is that the&#xA; * URLs are equivalent in terms of the context to which they refer.&#xA; * Verification of whether the URLs are, or need to be, equivalent is up&#xA; * to the context factory. The order of the URLs in the array is&#xA; * not significant.&#xA; * The object returned by getObjectInstance() is like that of the single&#xA; * URL case.  It is the object named by the URLs.&#xA; * &lt;li>&#xA; * If &lt;code>obj&lt;/code> is of any other type, the behavior of&#xA; * &lt;tt>getObjectInstance()&lt;/tt> is determined by the context factory&#xA; * implementation.&#xA; * &lt;/ol>&#xA; *&#xA; * &lt;p>&#xA; * The &lt;tt>name&lt;/tt> and &lt;tt>environment&lt;/tt> parameters&#xA; * are owned by the caller.&#xA; * The implementation will not modify these objects or keep references&#xA; * to them, although it may keep references to clones or copies.&#xA; *&#xA; * &lt;p>&#xA; * &lt;b>Name and Context Parameters.&lt;/b> &amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA; * &lt;a name=NAMECTX>&lt;/a>&#xA; *&#xA; * The &lt;code>name&lt;/code> and &lt;code>nameCtx&lt;/code> parameters may&#xA; * optionally be used to specify the name of the object being created.&#xA; * &lt;code>name&lt;/code> is the name of the object, relative to context&#xA; * &lt;code>nameCtx&lt;/code>.&#xA; * If there are several possible contexts from which the object&#xA; * could be named -- as will often be the case -- it is up to&#xA; * the caller to select one.  A good rule of thumb is to select the&#xA; * &quot;deepest&quot; context available.&#xA; * If &lt;code>nameCtx&lt;/code> is null, &lt;code>name&lt;/code> is relative&#xA; * to the default initial context.  If no name is being specified, the&#xA; * &lt;code>name&lt;/code> parameter should be null.&#xA; * If a factory uses &lt;code>nameCtx&lt;/code> it should synchronize its use&#xA; * against concurrent access, since context implementations are not&#xA; * guaranteed to be thread-safe.&#xA; * &lt;p>&#xA; *&#xA; * @param obj The possibly null object containing location or reference &#xA; * &#x9;&#x9;information that can be used in creating an object.&#xA; * @param name The name of this object relative to &lt;code>nameCtx&lt;/code>,&#xA; *&#x9;&#x9;or null if no name is specified.&#xA; * @param nameCtx The context relative to which the &lt;code>name&lt;/code>&#xA; *&#x9;&#x9;parameter is specified, or null if &lt;code>name&lt;/code> is&#xA; *&#x9;&#x9;relative to the default initial context.&#xA; * @param environment The possibly null environment that is used in&#xA; * &#x9;&#x9;creating the object.&#xA; * @return The object created; null if an object cannot be created.&#xA; * @exception Exception if this object factory encountered an exception&#xA; * while attempting to create an object, and no other object factories are&#xA; * to be tried.&#xA; *&#xA; * @see NamingManager#getObjectInstance&#xA; * @see NamingManager#getURLContext&#xA; */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA;  * This interface represents a factory for creating an object.&#xA;  *&lt;p>&#xA;  * The JNDI framework allows for object implementations to&#xA;  * be loaded in dynamically via &lt;em>object factories&lt;/em>.&#xA;  * For example, when looking up a printer bound in the name space,&#xA;  * if the print service binds printer names to References, the printer&#xA;  * Reference could be used to create a printer object, so that&#xA;  * the caller of lookup can directly operate on the printer object&#xA;  * after the lookup.  &#xA;  * &lt;p>An &lt;tt>ObjectFactory&lt;/tt> is responsible&#xA;  * for creating objects of a specific type.  In the above example,&#xA;  * you may have a PrinterObjectFactory for creating Printer objects.&#xA;  *&lt;p>&#xA;  * An object factory must implement the &lt;tt>ObjectFactory&lt;/tt> interface.&#xA;  * In addition, the factory class must be public and must have a &#xA;  * public constructor that accepts no parameters.&#xA;  *&lt;p>&#xA;  * The &lt;tt>getObjectInstance()&lt;/tt> method of an object factory may&#xA;  * be invoked multiple times, possibly using different parameters.&#xA;  * The implementation is thread-safe.&#xA;  *&lt;p>&#xA;  * The mention of URL in the documentation for this class refers to&#xA;  * a URL string as defined by RFC 1738 and its related RFCs. It is&#xA;  * any string that conforms to the syntax described therein, and&#xA;  * may not always have corresponding support in the java.net.URL&#xA;  * class or Web browsers.&#xA;  *&#xA;  * @author Rosanna Lee&#xA;  * @author Scott Seligman&#xA;  * @version 1.10 04/07/16&#xA;  *&#xA;  * @see NamingManager#getObjectInstance&#xA;  * @see NamingManager#getURLContext&#xA;  * @see ObjectFactoryBuilder&#xA;  * @see StateFactory&#xA;  * @since 1.3&#xA;  */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
