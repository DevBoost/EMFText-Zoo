<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="InitialContextFactory.java">
  <comments>/*&#xA; * @(#)InitialContextFactory.java&#x9;1.10 04/07/16&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <namespaces>spi</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="InitialContextFactory">
    <members xsi:type="members:InterfaceMethod" name="getInitialContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Context.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="environment">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;&#x9;  * Creates an Initial Context for beginning name resolution.&#xA;&#x9;  * Special requirements of this context are supplied&#xA;&#x9;  * using &lt;code>environment&lt;/code>.&#xA;&#x9;  *&lt;p>&#xA;&#x9;  * The environment parameter is owned by the caller.&#xA;&#x9;  * The implementation will not modify the object or keep a reference&#xA;&#x9;  * to it, although it may keep a reference to a clone or copy.&#xA;&#x9;  *&#xA;&#x9;  * @param environment The possibly null environment&#xA;          * &#x9;&#x9;specifying information to be used in the creation &#xA;          * &#x9;&#x9;of the initial context.&#xA;&#x9;  * @return A non-null initial context object that implements the Context&#xA;&#x9;  *&#x9;&#x9;interface.&#xA;          * @exception NamingException If cannot create an initial context.&#xA;&#x9;  */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA;  * This interface represents a factory that creates an initial context.&#xA;  *&lt;p>&#xA;  * The JNDI framework allows for different initial context implementations&#xA;  * to be specified at runtime.  The initial context is created using&#xA;  * an &lt;em>initial context factory&lt;/em>.&#xA;  * An initial context factory must implement the InitialContextFactory&#xA;  * interface, which provides a method for creating instances of initial&#xA;  * context that implement the Context interface.  &#xA;  * In addition, the factory class must be public and must have a public &#xA;  * constructor that accepts no arguments.&#xA;  *&#xA;  * @author Rosanna Lee&#xA;  * @author Scott Seligman&#xA;  * @version 1.10 04/07/16&#xA;  *&#xA;  * @see InitialContextFactoryBuilder&#xA;  * @see NamingManager#getInitialContext&#xA;  * @see javax.naming.InitialContext&#xA;  * @see javax.naming.directory.InitialDirContext&#xA;  * @since 1.3&#xA;  */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
