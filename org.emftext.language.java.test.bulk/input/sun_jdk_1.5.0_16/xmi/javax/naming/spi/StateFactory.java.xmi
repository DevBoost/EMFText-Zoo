<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="StateFactory.java">
  <comments>/*&#xA; * @(#)StateFactory.java&#x9;1.10 04/07/16&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <namespaces>spi</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="StateFactory">
    <members xsi:type="members:InterfaceMethod" name="getStateToBind">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Name.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nameCtx">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Context.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="environment">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA; * Retrieves the state of an object for binding.&#xA; *&lt;p>&#xA; * &lt;tt>NamingManager.getStateToBind()&lt;/tt>&#xA; * successively loads in state factories and invokes this method&#xA; * on them until one produces a non-null answer.  &#xA; * &lt;tt>DirectoryManager.getStateToBind()&lt;/tt>&#xA; * successively loads in state factories.  If a factory implements&#xA; * &lt;tt>DirStateFactory&lt;/tt>, then &lt;tt>DirectoryManager&lt;/tt>&#xA; * invokes &lt;tt>DirStateFactory.getStateToBind()&lt;/tt>; otherwise&#xA; * it invokes &lt;tt>StateFactory.getStateToBind()&lt;/tt>.&#xA; *&lt;p> When an exception&#xA; * is thrown by a factory, the exception is passed on to the caller&#xA; * of &lt;tt>NamingManager.getStateToBind()&lt;/tt> and&#xA; * &lt;tt>DirectoryManager.getStateToBind()&lt;/tt>. &#xA; * The search for other factories&#xA; * that may produce a non-null answer is halted. &#xA; * A factory should only throw an exception if it is sure that&#xA; * it is the only intended factory and that no other factories&#xA; * should be tried.&#xA; * If this factory cannot create an object using the arguments supplied,&#xA; * it should return null. &#xA; * &lt;p>&#xA; * The &lt;code>name&lt;/code> and &lt;code>nameCtx&lt;/code> parameters may&#xA; * optionally be used to specify the name of the object being created.&#xA; * See the description of &quot;Name and Context Parameters&quot; in&#xA; * {@link ObjectFactory#getObjectInstance ObjectFactory.getObjectInstance()}&#xA; * for details.&#xA; * If a factory uses &lt;code>nameCtx&lt;/code> it should synchronize its use&#xA; * against concurrent access, since context implementations are not&#xA; * guaranteed to be thread-safe.&#xA; * &lt;p>&#xA; * The &lt;tt>name&lt;/tt> and &lt;tt>environment&lt;/tt> parameters&#xA; * are owned by the caller.&#xA; * The implementation will not modify these objects or keep references&#xA; * to them, although it may keep references to clones or copies.&#xA; *&#xA; * @param obj A non-null object whose state is to be retrieved.&#xA; * @param name The name of this object relative to &lt;code>nameCtx&lt;/code>,&#xA; *&#x9;&#x9;or null if no name is specified.&#xA; * @param nameCtx The context relative to which the &lt;code>name&lt;/code>&#xA; *&#x9;&#x9;parameter is specified, or null if &lt;code>name&lt;/code> is&#xA; *&#x9;&#x9;relative to the default initial context.&#xA; * @param environment The possibly null environment to &#xA; *&#x9;&#x9;be used in the creation of the object's state.&#xA; * @return The object's state for binding;&#xA; *&#x9;&#x9;null if the factory is not returning any changes.&#xA; * @exception NamingException if this factory encountered an exception&#xA; * while attempting to get the object's state, and no other factories are&#xA; * to be tried.&#xA; *&#xA; * @see NamingManager#getStateToBind&#xA; * @see DirectoryManager#getStateToBind&#xA; */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA;  * This interface represents a factory for obtaining the state of an&#xA;  * object for binding.&#xA;  *&lt;p>&#xA;  * The JNDI framework allows for object implementations to&#xA;  * be loaded in dynamically via &lt;em>object factories&lt;/em>.&#xA;  * For example, when looking up a printer bound in the name space,&#xA;  * if the print service binds printer names to &lt;tt>Reference&lt;/tt>s, the printer&#xA;  * &lt;tt>Reference&lt;/tt> could be used to create a printer object, so that&#xA;  * the caller of lookup can directly operate on the printer object&#xA;  * after the lookup.  &#xA;  * &lt;p>An &lt;tt>ObjectFactory&lt;/tt> is responsible&#xA;  * for creating objects of a specific type.  In the above example,&#xA;  * you may have a &lt;tt>PrinterObjectFactory&lt;/tt> for creating &#xA;  * &lt;tt>Printer&lt;/tt> objects.&#xA;  * &lt;p>&#xA;  * For the reverse process, when an object is bound into the namespace,&#xA;  * JNDI provides &lt;em>state factories&lt;/em>.&#xA;  * Continuing with the printer example, suppose the printer object is&#xA;  * updated and rebound:&#xA;  * &lt;blockquote>&lt;pre>&#xA;  * ctx.rebind(&quot;inky&quot;, printer);&#xA;  * &lt;/pre>&lt;/blockquote>&#xA;  * The service provider for &lt;tt>ctx&lt;/tt> uses a state factory&#xA;  * to obtain the state of &lt;tt>printer&lt;/tt> for binding into its namespace.&#xA;  * A state factory for the &lt;tt>Printer&lt;/tt> type object might return&#xA;  * a more compact object for storage in the naming system.&#xA;  *&lt;p>&#xA;  * A state factory must implement the &lt;tt>StateFactory&lt;/tt> interface.&#xA;  * In addition, the factory class must be public and must have a &#xA;  * public constructor that accepts no parameters.&#xA;  *&lt;p>&#xA;  * The &lt;tt>getStateToBind()&lt;/tt> method of a state factory may&#xA;  * be invoked multiple times, possibly using different parameters.&#xA;  * The implementation is thread-safe.&#xA;  *&lt;p>&#xA;  * &lt;tt>StateFactory&lt;/tt> is intended for use with service providers&#xA;  * that implement only the &lt;tt>Context&lt;/tt> interface.&#xA;  * &lt;tt>DirStateFactory&lt;/tt> is intended for use with service providers&#xA;  * that implement the &lt;tt>DirContext&lt;/tt> interface.&#xA;  *&#xA;  * @author Rosanna Lee&#xA;  * @author Scott Seligman&#xA;  * @version 1.10 04/07/16&#xA;  *&#xA;  * @see NamingManager#getStateToBind&#xA;  * @see DirectoryManager#getStateToBind&#xA;  * @see ObjectFactory&#xA;  * @see DirStateFactory&#xA;  * @since 1.3&#xA;  */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
