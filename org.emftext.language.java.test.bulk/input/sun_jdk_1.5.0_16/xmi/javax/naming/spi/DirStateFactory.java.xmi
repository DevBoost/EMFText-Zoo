<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DirStateFactory.java">
  <comments>/*&#xA; * @(#)DirStateFactory.java&#x9;1.11 04/07/16&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <namespaces>spi</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <namespaces>directory</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../directory/Attributes.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="DirStateFactory">
    <members xsi:type="members:InterfaceMethod" name="getStateToBind">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.1"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Name.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nameCtx">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Context.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="environment">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inAttrs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../directory/Attributes.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA; * Retrieves the state of an object for binding given the object and attributes&#xA; * to be transformed.&#xA; *&lt;p>&#xA; * &lt;tt>DirectoryManager.getStateToBind()&lt;/tt>&#xA; * successively loads in state factories. If a factory implements&#xA; * &lt;tt>DirStateFactory&lt;/tt>, &lt;tt>DirectoryManager&lt;/tt> invokes this method;&#xA; * otherwise, it invokes &lt;tt>StateFactory.getStateToBind()&lt;/tt>.&#xA; * It does this until a factory produces a non-null answer.&#xA; *&lt;p>&#xA; * When an exception is thrown by a factory, &#xA; * the exception is passed on to the caller&#xA; * of &lt;tt>DirectoryManager.getStateToBind()&lt;/tt>. The search for other factories&#xA; * that may produce a non-null answer is halted. &#xA; * A factory should only throw an exception if it is sure that&#xA; * it is the only intended factory and that no other factories&#xA; * should be tried.&#xA; * If this factory cannot create an object using the arguments supplied,&#xA; * it should return null. &#xA; * &lt;p>&#xA; * The &lt;code>name&lt;/code> and &lt;code>nameCtx&lt;/code> parameters may&#xA; * optionally be used to specify the name of the object being created.&#xA; * See the description of &quot;Name and Context Parameters&quot; in&#xA; * {@link ObjectFactory#getObjectInstance ObjectFactory.getObjectInstance()}&#xA; * for details.&#xA; * If a factory uses &lt;code>nameCtx&lt;/code> it should synchronize its use&#xA; * against concurrent access, since context implementations are not&#xA; * guaranteed to be thread-safe.&#xA; *&lt;p>&#xA; * The &lt;tt>name&lt;/tt>, &lt;tt>inAttrs&lt;/tt>, and &lt;tt>environment&lt;/tt> parameters&#xA; * are owned by the caller.&#xA; * The implementation will not modify these objects or keep references&#xA; * to them, although it may keep references to clones or copies.&#xA; * The object returned by this method is owned by the caller.&#xA; * The implementation will not subsequently modify it.&#xA; * It will contain either a new &lt;tt>Attributes&lt;/tt> object that is&#xA; * likewise owned by the caller, or a reference to the original&#xA; * &lt;tt>inAttrs&lt;/tt> parameter.&#xA; *&#xA; * @param obj A possibly null object whose state is to be retrieved.&#xA; * @param name The name of this object relative to &lt;code>nameCtx&lt;/code>,&#xA; *&#x9;&#x9;or null if no name is specified.&#xA; * @param nameCtx The context relative to which the &lt;code>name&lt;/code>&#xA; *&#x9;&#x9;parameter is specified, or null if &lt;code>name&lt;/code> is&#xA; *&#x9;&#x9;relative to the default initial context.&#xA; * @param environment The possibly null environment to &#xA; *&#x9;&#x9;be used in the creation of the object's state.&#xA; * @param inAttrs The possibly null attributes to be bound with the object.&#xA; * &#x9;The factory must not modify &lt;tt>inAttrs&lt;/tt>.&#xA; * @return A &lt;tt>Result&lt;/tt> containing the object's state for binding&#xA; * and the corresponding&#xA; * attributes to be bound; null if the object don't use this factory.&#xA; * @exception NamingException If this factory encountered an exception&#xA; * while attempting to get the object's state, and no other factories are&#xA; * to be tried.&#xA; *&#xA; * @see DirectoryManager#getStateToBind&#xA; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="classifiers:Class" name="Result">
      <members xsi:type="members:Field" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;         * The possibly null object to be bound.&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="attrs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../directory/Attributes.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;         * The possibly null attributes to be bound.&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Constructor" name="Result">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.2/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.2/@parameters.1"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="outAttrs">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../directory/Attributes.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;          * Constructs an instance of Result.&#xA;          *&#xA;          * @param obj The possibly null object to be bound.&#xA;          * @param outAttrs The possibly null attributes to be bound.&#xA;          */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="getObject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Retrieves the object to be bound.&#xA;         * @return The possibly null object to be bound.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.0"/>
        </statements>
      </members>
      <members xsi:type="members:EmptyMember"/>
      <members xsi:type="members:ClassMethod" name="getAttributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../directory/Attributes.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Retrieves the attributes to be bound.&#xA;         * @return The possibly null attributes to be bound.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.1"/>
        </statements>
      </members>
      <members xsi:type="members:EmptyMember"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;         * An object/attributes pair for returning the result of &#xA;         * DirStateFactory.getStateToBind().&#xA;         */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA;  * This interface represents a factory for obtaining the state of an&#xA;  * object and corresponding attributes for binding.&#xA;  *&lt;p>&#xA;  * The JNDI framework allows for object implementations to&#xA;  * be loaded in dynamically via &lt;tt>object factories&lt;/tt>.&#xA;  * &lt;p>&#xA;  * A &lt;tt>DirStateFactory&lt;/tt> extends &lt;tt>StateFactory&lt;/tt> &#xA;  * by allowing an &lt;tt>Attributes&lt;/tt> instance&#xA;  * to be supplied to and be returned by the &lt;tt>getStateToBind()&lt;/tt> method.&#xA;  * &lt;tt>DirStateFactory&lt;/tt> implementations are intended to be used by &#xA;  * &lt;tt>DirContext&lt;/tt> service providers.&#xA;  * When a caller binds an object using &lt;tt>DirContext.bind()&lt;/tt>,&#xA;  * he might also specify a set of attributes to be bound with the object.&#xA;  * The object and attributes to be bound are passed to &#xA;  * the &lt;tt>getStateToBind()&lt;/tt> method of a factory. &#xA;  * If the factory processes the object and attributes, it returns&#xA;  * a corresponding pair of object and attributes to be bound.&#xA;  * If the factory does not process the object, it must return null.&#xA;  *&lt;p>&#xA;  * For example, a caller might bind a printer object with some printer-related&#xA;  * attributes.&#xA;  *&lt;blockquote>&lt;pre>&#xA;  * ctx.rebind(&quot;inky&quot;, printer, printerAttrs);&#xA;  *&lt;/pre>&lt;/blockquote>&#xA;  * An LDAP service provider for &lt;tt>ctx&lt;/tt> uses a &lt;tt>DirStateFactory&lt;/tt>&#xA;  * (indirectly via &lt;tt>DirectoryManager.getStateToBind()&lt;/tt>)&#xA;  * and gives it &lt;tt>printer&lt;/tt> and &lt;tt>printerAttrs&lt;/tt>. A factory for&#xA;  * an LDAP directory might turn &lt;tt>printer&lt;/tt> into a set of attributes&#xA;  * and merge that with &lt;tt>printerAttrs&lt;/tt>. The service provider then&#xA;  * uses the resulting attributes to create an LDAP entry and updates&#xA;  * the directory.&#xA;  *&#xA;  * &lt;p> Since &lt;tt>DirStateFactory&lt;/tt> extends &lt;tt>StateFactory&lt;/tt>, it&#xA;  * has two &lt;tt>getStateToBind()&lt;/tt> methods, where one&#xA;  * differs from the other by the attributes&#xA;  * argument. &lt;tt>DirectoryManager.getStateToBind()&lt;/tt> will only use&#xA;  * the form that accepts the attributes argument, while&#xA;  * &lt;tt>NamingManager.getStateToBind()&lt;/tt> will only use the form that&#xA;  * does not accept the attributes argument.&#xA;  *&#xA;  * &lt;p> Either form of the &lt;tt>getStateToBind()&lt;/tt> method of a&#xA;  * DirStateFactory may be invoked multiple times, possibly using different&#xA;  * parameters.  The implementation is thread-safe.&#xA;  *&#xA;  * @author Rosanna Lee&#xA;  * @author Scott Seligman&#xA;  * @version 1.11 04/07/16&#xA;  *&#xA;  * @see DirectoryManager#getStateToBind&#xA;  * @see DirObjectFactory&#xA;  * @since 1.3&#xA;  */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="StateFactory.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
