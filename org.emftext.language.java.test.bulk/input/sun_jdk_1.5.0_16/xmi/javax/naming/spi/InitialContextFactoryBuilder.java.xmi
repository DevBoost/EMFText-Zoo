<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="InitialContextFactoryBuilder.java">
  <comments>/*&#xA; * @(#)InitialContextFactoryBuilder.java&#x9;1.11 04/07/16&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <namespaces>spi</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="InitialContextFactoryBuilder">
    <members xsi:type="members:InterfaceMethod" name="createInitialContextFactory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="InitialContextFactory.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="environment">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Creates an initial context factory using the specified&#xA;      * environment.&#xA;      *&lt;p>&#xA;      * The environment parameter is owned by the caller.&#xA;      * The implementation will not modify the object or keep a reference&#xA;      * to it, although it may keep a reference to a clone or copy.&#xA;      *&#xA;      * @param environment Environment used in creating an initial&#xA;      *&#x9;&#x9;&#x9;context implementation. Can be null.&#xA;      * @return A non-null initial context factory.&#xA;      * @exception NamingException If an initial context factory could not be created.&#xA;      */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA;  * This interface represents a builder that creates initial context factories.&#xA;  *&lt;p>&#xA;  * The JNDI framework allows for different initial context implementations&#xA;  * to be specified at runtime.  An initial context is created using&#xA;  * an initial context factory. A program can install its own builder&#xA;  * that creates initial context factories, thereby overriding the&#xA;  * default policies used by the framework, by calling&#xA;  * NamingManager.setInitialContextFactoryBuilder().&#xA;  * The InitialContextFactoryBuilder interface must be implemented by&#xA;  * such a builder.&#xA;  *&#xA;  * @author Rosanna Lee&#xA;  * @author Scott Seligman&#xA;  * @version 1.11 04/07/16&#xA;  *&#xA;  * @see InitialContextFactory&#xA;  * @see NamingManager#getInitialContext&#xA;  * @see NamingManager#setInitialContextFactoryBuilder&#xA;  * @see NamingManager#hasInitialContextFactoryBuilder&#xA;  * @see javax.naming.InitialContext&#xA;  * @see javax.naming.directory.InitialDirContext&#xA;  * @since 1.3&#xA;  */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
