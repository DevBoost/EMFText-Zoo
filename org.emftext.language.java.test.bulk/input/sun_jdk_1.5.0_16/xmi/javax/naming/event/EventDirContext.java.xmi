<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="EventDirContext.java">
  <comments>/*&#xA; * @(#)EventDirContext.java&#x9;1.8 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <namespaces>event</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Name.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <namespaces>directory</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../directory/DirContext.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <namespaces>directory</namespaces>
    <classifier xsi:type="classifiers:Class" href="../directory/SearchControls.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="EventDirContext">
    <members xsi:type="members:InterfaceMethod" name="addNamingListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Adds a listener for receiving naming events fired&#xA;     * when objects identified by the search filter &lt;tt>filter&lt;/tt> at&#xA;     * the object named by target are modified.&#xA;     * &lt;p>&#xA;     * The scope, returningObj flag, and returningAttributes flag from&#xA;     * the search controls &lt;tt>ctls&lt;/tt> are used to control the selection&#xA;     * of objects that the listener is interested in,&#xA;     * and determines what information is returned in the eventual&#xA;     * &lt;tt>NamingEvent&lt;/tt> object. Note that the requested&#xA;     * information to be returned might not be present in the &lt;tt>NamingEvent&lt;/tt>&#xA;     * object if they are unavailable or could not be obtained by the&#xA;     * service provider or service.&#xA;     *&#xA;     * @param target The nonnull name of the object resolved relative to this context.&#xA;     * @param filter The nonnull string filter (see RFC2254).&#xA;     * @param ctls   The possibly null search controls. If null, the default&#xA;     * &#x9;      search controls are used.&#xA;     * @param l  The nonnull listener.&#xA;     * @exception NamingException If a problem was encountered while&#xA;     * adding the listener.&#xA;     * @see EventContext#removeNamingListener&#xA;     * @see javax.naming.directory.DirContext#search(javax.naming.Name, java.lang.String, javax.naming.directory.SearchControls)&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Name.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctls">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../directory/SearchControls.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="NamingListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addNamingListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Adds a listener for receiving naming events fired when&#xA;     * objects identified by the search filter &lt;tt>filter&lt;/tt> at the&#xA;     * object named by the string target name are modified.&#xA;     * See the overload that accepts a &lt;tt>Name&lt;/tt> for details of&#xA;     * how this method behaves.&#xA;     *&#xA;     * @param target The nonnull string name of the object resolved relative to this context.&#xA;     * @param filter The nonnull string filter (see RFC2254).&#xA;     * @param ctls   The possibly null search controls. If null, the default&#xA;     * &#x9;      search controls is used.&#xA;     * @param l  The nonnull listener.&#xA;     * @exception NamingException If a problem was encountered while&#xA;     * adding the listener.&#xA;     * @see EventContext#removeNamingListener&#xA;     * @see javax.naming.directory.DirContext#search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls)&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctls">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../directory/SearchControls.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="NamingListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addNamingListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Adds a listener for receiving naming events fired&#xA;     * when objects identified by the search filter &lt;tt>filter&lt;/tt> and&#xA;     * filter arguments at the object named by the target are modified.&#xA;     * The scope, returningObj flag, and returningAttributes flag from&#xA;     * the search controls &lt;tt>ctls&lt;/tt> are used to control the selection&#xA;     * of objects that the listener is interested in,&#xA;     * and determines what information is returned in the eventual&#xA;     * &lt;tt>NamingEvent&lt;/tt> object.  Note that the requested&#xA;     * information to be returned might not be present in the &lt;tt>NamingEvent&lt;/tt>&#xA;     * object if they are unavailable or could not be obtained by the&#xA;     * service provider or service.&#xA;     *&#xA;     * @param target The nonnull name of the object resolved relative to this context.&#xA;     * @param filter The nonnull string filter (see RFC2254).&#xA;     * @param filterArgs The possibly null array of arguments for the filter.&#xA;     * @param ctls   The possibly null search controls. If null, the default&#xA;     * &#x9;      search controls are used.&#xA;     * @param l  The nonnull listener.&#xA;     * @exception NamingException If a problem was encountered while&#xA;     * adding the listener.&#xA;     * @see EventContext#removeNamingListener&#xA;     * @see javax.naming.directory.DirContext#search(javax.naming.Name, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Name.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filterArgs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctls">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../directory/SearchControls.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="NamingListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addNamingListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Adds a listener for receiving naming events fired when&#xA;     * objects identified by the search filter &lt;tt>filter&lt;/tt> &#xA;     * and filter arguments at the&#xA;     * object named by the string target name are modified.&#xA;     * See the overload that accepts a &lt;tt>Name&lt;/tt> for details of&#xA;     * how this method behaves.&#xA;     *&#xA;     * @param target The nonnull string name of the object resolved relative to this context.&#xA;     * @param filter The nonnull string filter (see RFC2254).&#xA;     * @param filterArgs The possibly null array of arguments for the filter.&#xA;     * @param ctls   The possibly null search controls. If null, the default&#xA;     * &#x9;      search controls is used.&#xA;     * @param l  The nonnull listener.&#xA;     * @exception NamingException If a problem was encountered while&#xA;     * adding the listener.&#xA;     * @see EventContext#removeNamingListener&#xA;     * @see javax.naming.directory.DirContext#search(java.lang.String, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)      */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filterArgs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctls">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../directory/SearchControls.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="NamingListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NamingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Contains methods for registering listeners to be notified&#xA; * of events fired when objects named in a directory context changes.&#xA; *&lt;p>&#xA; * The methods in this interface support identification of objects by &#xA; * &lt;A HREF=&quot;ftp://ftp.isi.edu/in-notes/rfc2254.txt&quot;>RFC 2254&lt;/a>&#xA; * search filters.&#xA; *&#xA; *&lt;P>Using the search filter, it is possible to register interest in objects &#xA; * that do not exist at the time of registration but later come into existence and&#xA; * satisfy the filter.  However, there might be limitations in the extent&#xA; * to which this can be supported by the service provider and underlying&#xA; * protocol/service.  If the caller submits a filter that cannot be&#xA; * supported in this way, &lt;tt>addNamingListener()&lt;/tt> throws an&#xA; * &lt;tt>InvalidSearchFilterException&lt;/tt>.&#xA; *&lt;p>&#xA; * See &lt;tt>EventContext&lt;/tt> for a description of event source&#xA; * and target, and information about listener registration/deregistration&#xA; * that are also applicable to methods in this interface.&#xA; * See the&#xA; * &lt;a href=package-summary.html#THREADING>package description&lt;/a>&#xA; * for information on threading issues.&#xA; *&lt;p>&#xA; * A &lt;tt>SearchControls&lt;/tt> or array object&#xA; * passed as a parameter to any method is owned by the caller.&#xA; * The service provider will not modify the object or keep a reference to it.&#xA; * &#xA; * @author Rosanna Lee&#xA; * @author Scott Seligman&#xA; * @version 1.8 03/12/19&#xA; * @since 1.3&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="EventContext.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../directory/DirContext.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
