<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="NamingEvent.java">
  <comments>/*&#xA; * @(#)NamingEvent.java&#x9;1.10 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <namespaces>event</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Binding.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="NamingEvent">
    <members xsi:type="members:Field" name="OBJECT_ADDED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Naming event type for indicating that a new object has been added.&#xA;     * The value of this constant is &lt;tt>0&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="OBJECT_REMOVED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Naming event type for indicating that an object has been removed.&#xA;     * The value of this constant is &lt;tt>1&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="OBJECT_RENAMED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Naming event type for indicating that an object has been renamed.&#xA;     * Note that some services might fire multiple events for a single&#xA;     * logical rename operation. For example, the rename operation might&#xA;     * be implemented by adding a binding with the new name and removing&#xA;     * the old binding.&#xA;     *&lt;p>&#xA;     * The old/new binding in &lt;tt>NamingEvent&lt;/tt> may be null if the old&#xA;     * name or new name is outside of the scope for which the listener &#xA;     * has registered.&#xA;     *&lt;p>&#xA;     * When an interior node in the namespace tree has been renamed, the&#xA;     * topmost node which is part of the listener's scope should used to generate&#xA;     * a rename event. The extent to which this can be supported is&#xA;     * provider-specific. For example, a service might generate rename&#xA;     * notifications for all descendants of the changed interior node and the&#xA;     * corresponding provider might not be able to prevent those&#xA;     * notifications from being propagated to the listeners.&#xA;     *&lt;p>&#xA;     * The value of this constant is &lt;tt>2&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="OBJECT_CHANGED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Naming event type for indicating that an object has been changed.&#xA;     * The changes might include the object's attributes, or the object itself.&#xA;     * Note that some services might fire multiple events for a single&#xA;     * modification. For example, the modification might&#xA;     * be implemented by first removing the old binding and adding&#xA;     * a new binding containing the same name but a different object.&#xA;     *&lt;p>&#xA;     * The value of this constant is &lt;tt>3&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="changeInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Contains information about the change that generated this event.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="type">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Contains the type of this event.&#xA;     * @see #OBJECT_ADDED&#xA;     * @see #OBJECT_REMOVED&#xA;     * @see #OBJECT_RENAMED&#xA;     * @see #OBJECT_CHANGED&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="oldBinding">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Binding.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Contains information about the object before the change.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="newBinding">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Binding.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Contains information about the object after the change.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="NamingEvent">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.3"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.4"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="source">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="EventContext.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newBd">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Binding.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oldBd">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Binding.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="changeInfo">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs an instance of &lt;tt>NamingEvent&lt;/tt>.&#xA;     *&lt;p>&#xA;     * The names in &lt;tt>newBd&lt;/tt> and &lt;tt>oldBd&lt;/tt> are to be resolved relative&#xA;     * to the event source &lt;tt>source&lt;/tt>.&#xA;     *&#xA;     * For an &lt;tt>OBJECT_ADDED&lt;/tt> event type, &lt;tt>newBd&lt;/tt> must not be null.&#xA;     * For an &lt;tt>OBJECT_REMOVED&lt;/tt> event type, &lt;tt>oldBd&lt;/tt> must not be null.&#xA;     * For an &lt;tt>OBJECT_CHANGED&lt;/tt> event type,  &lt;tt>newBd&lt;/tt> and &#xA;     * &lt;tt>oldBd&lt;/tt> must not be null. For  an &lt;tt>OBJECT_RENAMED&lt;/tt> event type,&#xA;     * one of &lt;tt>newBd&lt;/tt> or &lt;tt>oldBd&lt;/tt> may be null if the new or old&#xA;     * binding is outside of the scope for which the listener has registered.&#xA;     *&#xA;     * @param source The non-null context that fired this event.&#xA;     * @param type The type of the event.&#xA;     * @param newBd A possibly null binding before the change. See method description.&#xA;     * @param oldBd A possibly null binding after the change. See method description.&#xA;     * @param changeInfo A possibly null object containing information about the change.&#xA;     * @see #OBJECT_ADDED&#xA;     * @see #OBJECT_REMOVED&#xA;     * @see #OBJECT_RENAMED&#xA;     * @see #OBJECT_CHANGED&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getType">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the type of this event.&#xA;     * @return The type of this event.&#xA;     * @see #OBJECT_ADDED&#xA;     * @see #OBJECT_REMOVED&#xA;     * @see #OBJECT_RENAMED&#xA;     * @see #OBJECT_CHANGED&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEventContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="EventContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the event source that fired this event.&#xA;     * This returns the same object as &lt;tt>EventObject.getSource()&lt;/tt>.&#xA;     *&lt;p>&#xA;     * If the result of this method is used to access the &#xA;     * event source, for example, to look up the object or get its attributes,&#xA;     * then it needs to be locked  because implementations of &lt;tt>Context&lt;/tt>&#xA;     * are not guaranteed to be thread-safe&#xA;     * (and &lt;tt>EventContext&lt;/tt> is a subinterface of &lt;tt>Context&lt;/tt>).&#xA;     * See the&#xA;     * &lt;a href=package-summary.html#THREADING>package description&lt;/a>&#xA;     * for more information on threading issues.&#xA;     *&#xA;     * @return The non-null context that fired this event.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="EventContext.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/EventObject.class.xmi#//@classifiers.0/@members.3"/>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getOldBinding">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Binding.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the binding of the object before the change.&#xA;     *&lt;p>&#xA;     * The binding must be nonnull if the object existed before the change&#xA;     * relative to the source context (&lt;tt>getEventContext()&lt;/tt>).&#xA;     * That is, it must be nonnull for &lt;tt>OBJECT_REMOVED&lt;/tt> and&#xA;     * &lt;tt>OBJECT_CHANGED&lt;/tt>.&#xA;     * For &lt;tt>OBJECT_RENAMED&lt;/tt>, it is null if the object before the rename&#xA;     * is outside of the scope for which the listener has registered interest;&#xA;     * it is nonnull if the object is inside the scope before the rename.&#xA;     *&lt;p>&#xA;     * The name in the binding is to be resolved relative&#xA;     * to the event source &lt;tt>getEventContext()&lt;/tt>.&#xA;     * The object returned by &lt;tt>Binding.getObject()&lt;/tt> may be null if&#xA;     * such information is unavailable.&#xA;     *&#xA;     * @return The possibly null binding of the object before the change. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNewBinding">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Binding.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the binding of the object after the change.&#xA;     *&lt;p>&#xA;     * The binding must be nonnull if the object existed after the change&#xA;     * relative to the source context (&lt;tt>getEventContext()&lt;/tt>).&#xA;     * That is, it must be nonnull for &lt;tt>OBJECT_ADDED&lt;/tt> and&#xA;     * &lt;tt>OBJECT_CHANGED&lt;/tt>. For &lt;tt>OBJECT_RENAMED&lt;/tt>,&#xA;     * it is null if the object after the rename is outside the scope for&#xA;     * which the listener registered interest; it is nonnull if the object&#xA;     * is inside the scope after the rename.&#xA;     *&lt;p>&#xA;     * The name in the binding is to be resolved relative&#xA;     * to the event source &lt;tt>getEventContext()&lt;/tt>.&#xA;     * The object returned by &lt;tt>Binding.getObject()&lt;/tt> may be null if&#xA;     * such information is unavailable.&#xA;     *&#xA;     * @return The possibly null binding of the object after the change. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getChangeInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the change information for this event.&#xA;     * The value of the change information is service-specific. For example,&#xA;     * it could be an ID that identifies the change in a change log on the server.&#xA;     *&#xA;     * @return The possibly null change information of this event.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="dispatch">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="NamingListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Invokes the appropriate listener method on this event.&#xA;     * The default implementation of&#xA;     * this method handles the following event types:&#xA;     * &lt;tt>OBJECT_ADDED&lt;/TT>, &lt;TT>OBJECT_REMOVED&lt;/TT>, &#xA;     * &lt;TT>OBJECT_RENAMED&lt;/TT>, &lt;TT>OBJECT_CHANGED&lt;/TT>.&#xA;     *&lt;p>&#xA;     * The listener method is executed in the same thread&#xA;     * as this method.  See the&#xA;     * &lt;a href=package-summary.html#THREADING>package description&lt;/a>&#xA;     * for more information on threading issues.&#xA;     * @param listener The nonnull listener.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Switch">
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="NamespaceChangeListener.class.xmi#//@classifiers.0/@members.0"/>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="NamespaceChangeListener.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
              </expression>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="NamespaceChangeListener.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="NamespaceChangeListener.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
              </expression>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="NamespaceChangeListener.class.xmi#//@classifiers.0/@members.2"/>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="NamespaceChangeListener.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
              </expression>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="ObjectChangeListener.class.xmi#//@classifiers.0/@members.0"/>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="ObjectChangeListener.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
              </expression>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
        </cases>
        <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="7126752885365133499"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA;  * This class represents an event fired by a naming/directory service.&#xA;  *&lt;p>&#xA;  * The &lt;tt>NamingEvent&lt;/tt>'s state consists of&#xA;  * &lt;ul>&#xA;  * &lt;li>The event source: the &lt;tt>EventContext&lt;/tt> which fired this event.&#xA;  * &lt;li>The event type.&#xA;  * &lt;li>The new binding: information about the object after the change.&#xA;  * &lt;li>The old binding: information about the object before the change.&#xA;  * &lt;li>Change information: information about the change&#xA;  * that triggered this event; usually service provider-specific or server-specific&#xA;  * information.&#xA;  * &lt;/ul>&#xA;  * &lt;p>&#xA;  * Note that the event source is always the same &lt;tt>EventContext&lt;/tt>&#xA;  * &lt;em>instance&lt;/em>  that the listener has registered with.  &#xA;  * Furthermore, the names of the bindings in&#xA;  * the &lt;tt>NamingEvent&lt;/tt> are always relative to that instance.&#xA;  * For example, suppose a listener makes the following registration:&#xA;  *&lt;blockquote>&lt;pre>&#xA;  *&#x9;NamespaceChangeListener listener = ...;&#xA;  *&#x9;src.addNamingListener(&quot;x&quot;, SUBTREE_SCOPE, listener);&#xA;  *&lt;/pre>&lt;/blockquote>&#xA;  * When an object named &quot;x/y&quot; is subsequently deleted, the corresponding&#xA;  * &lt;tt>NamingEvent&lt;/tt> (&lt;tt>evt&lt;/tt>) must contain:&#xA;  *&lt;blockquote>&lt;pre>&#xA;  *&#x9;evt.getEventContext() == src&#xA;  *&#x9;evt.getOldBinding().getName().equals(&quot;x/y&quot;)&#xA;  *&lt;/pre>&lt;/blockquote>&#xA;  *&#xA;  * Care must be taken when multiple threads are accessing the same&#xA;  * &lt;tt>EventContext&lt;/tt> concurrently.&#xA;  * See the&#xA;  * &lt;a href=package-summary.html#THREADING>package description&lt;/a>&#xA;  * for more information on threading issues.&#xA;  * &#xA;  * @author Rosanna Lee&#xA;  * @author Scott Seligman&#xA;  * @version 1.10 03/12/19&#xA;  *&#xA;  * @see NamingListener&#xA;  * @see EventContext&#xA;  * @since 1.3&#xA;  */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>util</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../../../java/util/EventObject.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
