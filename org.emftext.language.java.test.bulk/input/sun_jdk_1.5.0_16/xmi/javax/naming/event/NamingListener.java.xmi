<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="NamingListener.java">
  <comments>/*&#xA; * @(#)NamingListener.java&#x9;1.7 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>naming</namespaces>
  <namespaces>event</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="NamingListener">
    <members xsi:type="members:InterfaceMethod" name="namingExceptionThrown">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Called when a naming exception is thrown while attempting&#xA;     * to fire a &lt;tt>NamingEvent&lt;/tt>.&#xA;     *&#xA;     * @param evt The nonnull event.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="evt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NamingExceptionEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA;  * This interface is the root of listener interfaces that&#xA;  * handle &lt;tt>NamingEvent&lt;/tt>s.&#xA;  * It does not make sense for a listener to implement just this interface.&#xA;  * A listener typically implements a subinterface of &lt;tt>NamingListener&lt;/tt>,&#xA;  * such as &lt;tt>ObjectChangeListener&lt;/tt> or &lt;tt>NamespaceChangeListener&lt;/tt>.&#xA;  *&lt;p>&#xA;  * This interface contains a single method, &lt;tt>namingExceptionThrown()&lt;/tt>,&#xA;  * that must be implemented so that the listener can be notified of&#xA;  * exceptions that are thrown (by the service provider) while gathering&#xA;  * information about the events that they're interested in.&#xA;  * When this method is invoked, the listener has been automatically deregistered&#xA;  * from the &lt;tt>EventContext&lt;/tt> with which it has registered.&#xA;  *&lt;p>&#xA;  * For example, suppose a listener implements &lt;tt>ObjectChangeListener&lt;/tt> and &#xA;  * registers with a &lt;tt>EventContext&lt;/tt>.&#xA;  * Then, if the connection to the server is subsequently broken,&#xA;  * the listener will receive a &lt;tt>NamingExceptionEvent&lt;/tt> and may&#xA;  * take some corrective action, such as notifying the user of the application.&#xA;  * &#xA;  * @author Rosanna Lee&#xA;  * @author Scott Seligman&#xA;  * @version 1.7 03/12/19&#xA;  *&#xA;  * @see NamingEvent&#xA;  * @see NamingExceptionEvent&#xA;  * @see EventContext&#xA;  * @see EventDirContext&#xA;  * @since 1.3&#xA;  */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>util</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../java/util/EventListener.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
