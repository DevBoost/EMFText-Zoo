<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="RowSetWriter.java">
  <comments>/*&#xA; * @(#)RowSetWriter.java&#x9;1.8 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sql</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>sql</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="RowSetWriter">
    <members xsi:type="members:InterfaceMethod" name="writeData">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;   * Writes the changes in this &lt;code>RowSetWriter&lt;/code> object's&#xA;   * rowset back to the data source from which it got its data.&#xA;   *&#xA;   * @param caller the &lt;code>RowSet&lt;/code> object (1) that has implemented the&#xA;   *         &lt;code>RowSetInternal&lt;/code> interface, (2) with which this writer is&#xA;   *        registered, and (3) that called this method internally&#xA;   * @return &lt;code>true&lt;/code> if the modified data was written; &lt;code>false&lt;/code>&#xA;   *          if not, which will be the case if there is a conflict&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="caller">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="RowSetInternal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An object that implements the &lt;code>RowSetWriter&lt;/code> interface, &#xA; * called a &lt;i>writer&lt;/i>. A writer may be registered with a &lt;code>RowSet&lt;/code>&#xA; * object that supports the reader/writer paradigm.&#xA; * &lt;P>&#xA; * If a disconnected &lt;code>RowSet&lt;/code> object modifies some of its data,&#xA; * and it has a writer associated with it, it may be implemented so that it&#xA; * calls on the writer's &lt;code>writeData&lt;/code> method internally &#xA; * to write the updates back to the data source. In order to do this, the writer&#xA; * must first establish a connection with the rowset's data source.&#xA; * &lt;P>&#xA; * If the data to be updated has already been changed in the data source, there&#xA; * is a conflict, in which case the writer will not write&#xA; * the changes to the data source.  The algorithm the writer uses for preventing&#xA; * or limiting conflicts depends entirely on its implementation.&#xA; *&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
