<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="PooledConnection.java">
  <comments>/*&#xA; * @(#)PooledConnection.java&#x9;1.12 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sql</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>sql</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../java/sql/Connection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>sql</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="PooledConnection">
    <members xsi:type="members:InterfaceMethod" name="getConnection">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;   * Creates and returns a &lt;code>Connection&lt;/code> object that is a handle&#xA;   * for the physical connection that&#xA;   * this &lt;code>PooledConnection&lt;/code> object represents.&#xA;   * The connection pool manager calls this method when an application has&#xA;   * called the method &lt;code>DataSource.getConnection&lt;/code> and there are&#xA;   * no &lt;code>PooledConnection&lt;/code> objects available. See the&#xA;   * {@link PooledConnection interface description} for more information.&#xA;   *&#xA;   * @return  a &lt;code>Connection&lt;/code> object that is a handle to&#xA;   *          this &lt;code>PooledConnection&lt;/code> object&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
          <target xsi:type="classifiers:Interface" href="../../java/sql/Connection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="close">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Closes the physical connection that this &lt;code>PooledConnection&lt;/code>&#xA;   * object represents.  An application never calls this method directly;&#xA;   * it is called by the connection pool module, or manager.&#xA;   * &lt;P>&#xA;   * See the {@link PooledConnection interface description} for more &#xA;   * information.&#xA;   *&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addConnectionEventListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Registers the given event listener so that it will be notified&#xA;   * when an event occurs on this &lt;code>PooledConnection&lt;/code> object.&#xA;   *&#xA;   * @param listener a component, usually the connection pool manager,&#xA;   *        that has implemented the&#xA;   *        &lt;code>ConnectionEventListener&lt;/code> interface and wants to be&#xA;   *        notified when the connection is closed or has an error&#xA;   * @see #removeConnectionEventListener&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ConnectionEventListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeConnectionEventListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Removes the given event listener from the list of components that&#xA;   * will be notified when an event occurs on this&#xA;   * &lt;code>PooledConnection&lt;/code> object.&#xA;   *&#xA;   * @param listener a component, usually the connection pool manager,&#xA;   *        that has implemented the&#xA;   *        &lt;code>ConnectionEventListener&lt;/code> interface and &#xA;   *        been registered with this &lt;code>PooledConnection&lt;/code> object as &#xA;   *        a listener&#xA;   * @see #addConnectionEventListener&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ConnectionEventListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An object that provides hooks for connection pool management.  &#xA; * A &lt;code>PooledConnection&lt;/code> object&#xA; * represents a physical connection to a data source.  The connection&#xA; * can be recycled rather than being closed when an application is&#xA; * finished with it, thus reducing the number of connections that&#xA; * need to be made.&#xA; * &lt;P>&#xA; * An application programmer does not use the &lt;code>PooledConnection&lt;/code>&#xA; * interface directly; rather, it is used by a middle tier infrastructure&#xA; * that manages the pooling of connections.&#xA; * &lt;P>&#xA; * When an application calls the method &lt;code>DataSource.getConnection&lt;/code>,&#xA; * it gets back a &lt;code>Connection&lt;/code> object.  If connection pooling is&#xA; * being done, that &lt;code>Connection&lt;/code> object is actually a handle to&#xA; * a &lt;code>PooledConnection&lt;/code> object, which is a physical connection.&#xA; * &lt;P>&#xA; * The connection pool manager, typically the application server, maintains&#xA; * a pool of &lt;code>PooledConnection&lt;/code> objects.  If there is a&#xA; * &lt;code>PooledConnection&lt;/code> object available in the pool, the&#xA; * connection pool manager returns a &lt;code>Connection&lt;/code> object that&#xA; * is a handle to that physical connection.&#xA; * If no &lt;code>PooledConnection&lt;/code> object is available, the &#xA; * connection pool manager calls the &lt;code>PooledConnection&lt;/code>&#xA; * method &lt;code>getConnection&lt;/code> to create a new physical connection and&#xA; * returns a handle to it.&#xA; * &lt;P>&#xA; * When an application closes a connection, it calls the &lt;code>Connection&lt;/code>&#xA; * method &lt;code>close&lt;/code>. When connection pooling is being done,&#xA; * the connection pool manager is notified because it has registered itself as&#xA; * a &lt;code>ConnectionEventListener&lt;/code> object using the &#xA; * &lt;code>ConnectionPool&lt;/code> method &lt;code>addConnectionEventListener&lt;/code>.&#xA; * The connection pool manager deactivates the handle to&#xA; * the &lt;code>PooledConnection&lt;/code> object and  returns the &#xA; * &lt;code>PooledConnection&lt;/code> object to the pool of connections so that&#xA; * it can be used again.  Thus, when an application closes its connection,&#xA; * the underlying physical connection is recycled rather than being closed.&#xA; * &lt;P>&#xA; * The physical connection is not closed until the connection pool manager&#xA; * calls the &lt;code>PooledConnection&lt;/code> method &lt;code>close&lt;/code>.&#xA; * This method is generally called to have an orderly shutdown of the server or&#xA; * if a fatal error has made the connection unusable.&#xA; *&#xA; * @since 1.4 &#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
