<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="FilteredRowSet.java">
  <comments>/*&#xA; * @(#)FilteredRowSet.java&#x9;1.7 04/05/29&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sql</namespaces>
  <namespaces>rowset</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>sql</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>sql</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>naming</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>math</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="FilteredRowSet">
    <members xsi:type="members:InterfaceMethod" name="setFilter">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Predicate.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    * Applies the given &lt;code>Predicate&lt;/code> object to this&#xA;    * &lt;code>FilteredRowSet&lt;/code> &#xA;    * object. The filter applies controls both to inbound and outbound views,&#xA;    * constraining which rows are visible and which &#xA;    * rows can be manipulated.&#xA;    * &lt;p>&#xA;    * A new &lt;code>Predicate&lt;/code> object may be set at any time. This has the&#xA;    * effect of changing constraints on the &lt;code>RowSet&lt;/code> object's data. &#xA;    * In addition, modifying the filter at runtime presents issues whereby &#xA;    * multiple components may be operating on one &lt;code>FilteredRowSet&lt;/code> object. &#xA;    * Application developers must take responsibility for managing multiple handles &#xA;    * to &lt;code>FilteredRowSet&lt;/code> objects when their underling &lt;code>Predicate&lt;/code>&#xA;    * objects change.&#xA;    *&#xA;    * @param p a &lt;code>Predicate&lt;/code> object defining the filter for this&#xA;    * &lt;code>FilteredRowSet&lt;/code> object. Setting a &lt;b>null&lt;/b> value &#xA;    * will clear the predicate, allowing all rows to become visible.&#xA;    * &#xA;    * @throws SQLException if an error occurs when setting the &#xA;    *     &lt;code>Predicate&lt;/code> object&#xA;    */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFilter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Predicate.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    * Retrieves the active filter for this &lt;code>FilteredRowSet&lt;/code> object.&#xA;    *&#xA;    * @return p the &lt;code>Predicate&lt;/code> for this &lt;code>FilteredRowSet&lt;/code>&#xA;    * object; &lt;code>null&lt;/code> if no filter has been set.&#xA;    */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The standard interface that all standard implementations of &#xA; * &lt;code>FilteredRowSet&lt;/code> must implement. The &lt;code>FilteredRowSetImpl&lt;/code> class&#xA; * provides the reference implementation which may be extended if required.&#xA; * Alternatively, a vendor is free to implement its own version &#xA; * by implementing this interface.&#xA; *&#xA; * &lt;h3>1.0 Background&lt;/h3>&#xA; *&#xA; * There are occasions when a &lt;code>RowSet&lt;/code> object has a need to provide a degree&#xA; * of filtering to its contents. One possible solution is to provide&#xA; * a query language for all standard &lt;code>RowSet&lt;/code> implementations; however,&#xA; * this is an impractical approach for lightweight components such as disconnected&#xA; * &lt;code>RowSet&lt;/code>&#xA; * objects. The &lt;code>FilteredRowSet&lt;/code> interface seeks to address this need &#xA; * without supplying a heavyweight query language along with the processing that&#xA; * such a query language would require.&#xA; * &lt;p>&#xA; * A JDBC &lt;code>FilteredRowSet&lt;/code> standard implementation implements the &#xA; * &lt;code>RowSet&lt;/code> interfaces and extends the &#xA; * &lt;code>CachedRowSet&lt;/code>&lt;sup>&lt;font size=-2>TM&lt;/font>&lt;/sup> class. The &#xA; * &lt;code>CachedRowSet&lt;/code> class provides a set of protected cursor manipulation&#xA; * methods, which a &lt;code>FilteredRowSet&lt;/code> implementation can override &#xA; * to supply filtering support.&#xA; *&#xA; * &lt;h3>2.0 Predicate Sharing&lt;/h3>&#xA; *&#xA; * If a &lt;code>FilteredRowSet&lt;/code> implementation is shared using the&#xA; * inherited &lt;code>createShared&lt;/code> method in parent interfaces, the&#xA; * &lt;code>Predicate&lt;/code> should be shared without modification by all&#xA; * &lt;code>FilteredRowSet&lt;/code> instance clones. &#xA; *&#xA; * &lt;h3>3.0 Usage&lt;/h3>&#xA; * &lt;p>&#xA; * By implementing a &lt;code>Predicate&lt;/code> (see example in &lt;a href=&quot;Predicate.html&quot;>Predicate&lt;/a>&#xA; * class JavaDoc), a &lt;code>FilteredRowSet&lt;/code> could then be used as described&#xA; * below.&#xA; * &lt;P>&#xA; * &lt;code>&#xA; * &lt;pre>&#xA; *     FilteredRowSet frs = new FilteredRowSetImpl();&#xA; *     frs.populate(rs);&#xA; * &#xA; *     Range name = new Range(&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;columnName&quot;);&#xA; *     frs.setFilter(name);&#xA; * &#xA; *     frs.next() // only names from &quot;Alpha&quot; to &quot;Bravo&quot; will be returned&#xA; * &lt;/pre>&#xA; * &lt;/code>&#xA; * In the example above, we initialize a &lt;code>Range&lt;/code> object which &#xA; * implements the &lt;code>Predicate&lt;/code> interface. This object expresses&#xA; * the following constraints: All rows outputted or modified from this &#xA; * &lt;code>FilteredRowSet&lt;/code> object must fall between the values 'Alpha' and&#xA; * 'Bravo' both values inclusive, in the column 'columnName'. If a filter is &#xA; * applied to a &lt;code>FilteredRowSet&lt;/code> object that contains no data that&#xA; * falls within the range of the filter, no rows are returned. &#xA; * &lt;p>&#xA; * This framework allows multiple classes implementing predicates to be&#xA; * used in combination to achieved the required filtering result with&#xA; * out the need for query language processing.&#xA; * &lt;p>&#xA; * &lt;h3>4.0 Updating a &lt;code>FilteredRowSet&lt;/code> Object&lt;/h3>&#xA; * The predicate set on a &lt;code>FilteredRowSet&lt;/code> object&#xA; * applies a criterion on all rows in a &#xA; * &lt;code>RowSet&lt;/code> object to manage a subset of rows in a &lt;code>RowSet&lt;/code> &#xA; * object. This criterion governs the subset of rows that are visible and also &#xA; * defines which rows can be modified, deleted or inserted.&#xA; * &lt;p>&#xA; * Therefore, the predicate set on a &lt;code>FilteredRowSet&lt;/code> object must be &#xA; * considered as bi-directional and the set criterion as the gating mechanism &#xA; * for all views and updates to the &lt;code>FilteredRowSet&lt;/code> object. Any attempt &#xA; * to update the &lt;code>FilteredRowSet&lt;/code> that violates the criterion will&#xA; * result in a &lt;code>SQLException&lt;/code> object being thrown.&#xA; * &lt;p> &#xA; * The &lt;code>FilteredRowSet&lt;/code> range criterion can be modified by applying&#xA; * a new &lt;code>Predicate&lt;/code> object to the &lt;code>FilteredRowSet&lt;/code>&#xA; * instance at any time. This is  possible if no additional references to the&#xA; * &lt;code>FilteredRowSet&lt;/code> object are detected. A new filter has has an &#xA; * immediate effect on criterion enforcement within the &#xA; * &lt;code>FilteredRowSet&lt;/code> object, and all subsequent views and updates will be &#xA; * subject to similar enforcement.&#xA; * &lt;p>&#xA; * &lt;h3>5.0 Behavior of Rows Outside the Filter&lt;/h3>&#xA; * Rows that fall outside of the filter set on a &lt;code>FilteredRowSet&lt;/code>&#xA; * object cannot be modified until the filter is removed or a&#xA; * new filter is applied.&#xA; * &lt;p> &#xA; * Furthermore, only rows that fall within the bounds of a filter will be &#xA; * synchronized with the data source.&#xA; *&#xA; * @author Jonathan Bruce&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="WebRowSet.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
