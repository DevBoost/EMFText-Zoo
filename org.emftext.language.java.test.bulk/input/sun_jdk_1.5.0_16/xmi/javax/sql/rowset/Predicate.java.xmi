<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Predicate.java">
  <comments>/*&#xA; * @(#)Predicate.java&#x9;1.5 04/03/11&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sql</namespaces>
  <namespaces>rowset</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>sql</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>sql</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Predicate">
    <members xsi:type="members:InterfaceMethod" name="evaluate">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="rs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../RowSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method is typically called a &lt;code>FilteredRowSet&lt;/code> object&#xA;     * internal methods (not public) that control the &lt;code>RowSet&lt;/code> object's&#xA;     * cursor moving  from row to the next. In addition, if this internal method &#xA;     * moves the cursor onto a row that has been deleted, the internal method will &#xA;     * continue to ove the cursor until a valid row is found. &#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if there are more rows in the filter; &#xA;     *     &lt;code>false&lt;/code> otherwise&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="evaluate">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method is called by a &lt;code>FilteredRowSet&lt;/code> object&#xA;     * to check whether the value lies between the filtering criterion (or criteria&#xA;     * if multiple constraints exist) set using the &lt;code>setFilter()&lt;/code> method.&#xA;     * &lt;P>&#xA;     * The &lt;code>FilteredRowSet&lt;/code> object will use this method internally&#xA;     * while inserting new rows to a &lt;code>FilteredRowSet&lt;/code> instance.&#xA;     *&#xA;     * @param value An &lt;code>Object&lt;/code> value which needs to be checked,&#xA;     *        whether it can be part of this &lt;code>FilterRowSet&lt;/code> object.&#xA;     * @param column a &lt;code>int&lt;/code> object that must match the&#xA;     *        SQL index of a column in this &lt;code>RowSet&lt;/code> object. This must &#xA;     *        have been passed to &lt;code>Predicate&lt;/code> as one of the columns &#xA;     *        for filtering while initializing a &lt;code>Predicate&lt;/code>&#xA;     * @return &lt;code>true&lt;/code> ifrow value lies within the filter; &#xA;     *     &lt;code>false&lt;/code> otherwise&#xA;     * @throws SQLException if the column is not part of filtering criteria &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="evaluate">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method is called by the &lt;code>FilteredRowSet&lt;/code> object&#xA;     * to check whether the value lies between the filtering criteria set &#xA;     * using the setFilter method.&#xA;     * &lt;P>&#xA;     * The &lt;code>FilteredRowSet&lt;/code> object will use this method internally&#xA;     * while inserting new rows to a &lt;code>FilteredRowSet&lt;/code> instance.&#xA;     *&#xA;     * @param value An &lt;code>Object&lt;/code> value which needs to be checked,&#xA;     * whether it can be part of this &lt;code>FilterRowSet&lt;/code>.&#xA;     *&#xA;     * @param columnName a &lt;code>String&lt;/code> object that must match the&#xA;     *        SQL name of a column in this &lt;code>RowSet&lt;/code>, ignoring case. This must &#xA;     *        have been passed to &lt;code>Predicate&lt;/code> as one of the columns for filtering&#xA;     *        while initializing a &lt;code>Predicate&lt;/code>&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if value lies within the filter; &lt;code>false&lt;/code> otherwise&#xA;     * &#xA;     * @throws SQLException if the column is not part of filtering criteria &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The standard interface that provides the framework for all &#xA; * &lt;code>FilteredRowSet&lt;/code> objects to describe their filters.&#xA; * &lt;p>&#xA; * &lt;h3>1.0 Background&lt;/h3>&#xA; * The &lt;code>Predicate&lt;/code> interface is a standard interface that&#xA; * applications can implement to define the filter they wish to apply to a &#xA; * a &lt;code>FilteredRowSet&lt;/code> object. A &lt;code>FilteredRowSet&lt;/code>&#xA; * object consumes implementations of this interface and enforces the&#xA; * constraints defined in the implementation of the method &lt;code>evaluate&lt;/code>.&#xA; * A &lt;code>FilteredRowSet&lt;/code> object enforces the filter constraints in a &#xA; * bi-directional manner: It outputs only rows that are within&#xA; * the constraints of the filter; and conversely, it inserts, modifies, or updates&#xA; * only rows that are within the constraints of the filter.&#xA; * &#xA; * &lt;h3>2.0 Implementation Guidelines&lt;/h3>&#xA; * In order to supply a predicate for the &lt;code>FilteredRowSet&lt;/code>.&#xA; * this interface must be implemented.  At this time, the JDBC RowSet &#xA; * Implementations (JSR-114) does not specify any standard filters definitions. &#xA; * By specifying a standard means and mechanism for a range of filters to be&#xA; * defined and deployed with both the reference and vendor implementations &#xA; * of the &lt;code>FilteredRowSet&lt;/code> interface, this allows for a flexible&#xA; * and application motivated implementations of &lt;code>Predicate&lt;/code> to emerge.&#xA; * &lt;p>&#xA; * A sample implementation would look something like this:&#xA; * &lt;pre>&#xA; * &lt;code>&#xA; *    public class Range implements Predicate {&#xA; *&#xA; *       private Object lo[];&#xA; *       private Object hi[];&#xA; *       private int idx[];&#xA; *&#xA; *       public Range(Object[] lo, Object[] hi, int[] idx) {&#xA; *          this.lo = lo;&#xA; *          this.hi = hi;&#xA; *          this.idx = idx;&#xA; *       }&#xA; *&#xA; *      public boolean evaluate(RowSet rs) {&#xA; *          CachedRowSet crs = (CachedRowSet)rs;&#xA; *          boolean bool1,bool2;           &#xA; *       &#xA; *          // Check the present row determine if it lies&#xA; *          // within the filtering criteria. &#xA; *      &#xA; *          for (int i = 0; i &lt; idx.length; i++) {&#xA; *        &#xA; *&#x9;        if ((rs.getObject(idx[i]) >= lo[i]) &amp;&amp; &#xA; *                  (rs.getObject(idx[i]) >= hi[i]) { &#xA; *&#x9;            bool1 = true; // within filter constraints&#xA; *          } else {&#xA; *            bool2 = true; // outside of filter constraints             &#xA; *          } &#xA; *      }&#xA; *      &#xA; *      if (bool2) {&#xA; *         return false;&#xA; *      } else {&#xA; *         return true;&#xA; *      }&#xA; *  }          &#xA; * &lt;/code>&#xA; * &lt;/pre>&#xA; * &lt;P>&#xA; * The example above implements a simple range predicate. Note, that &#xA; * implementations should but are not required to provider &lt;code>String&lt;/code>&#xA; * and integer index based constructors to provide for JDBC RowSet Implementation&#xA; * applications that use both column identification conventions.&#xA; *&#xA; * @author Jonathan Bruce, Amit Handa&#xA; *&#xA; */</comments>
      <comments>// &lt;h3>3.0 FilteredRowSet Internals&lt;/h3></comments>
      <comments>// internalNext, Frist, Last. Discuss guidelines on how to approach this</comments>
      <comments>// and cite examples in reference implementations.</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
