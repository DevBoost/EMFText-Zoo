<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Joinable.java">
  <comments>/*&#xA; * @(#)Joinable.java&#x9;1.5 04/05/29&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sql</namespaces>
  <namespaces>rowset</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>sql</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Joinable">
    <members xsi:type="members:InterfaceMethod" name="setMatchColumn">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIdx">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets the designated column as the match column for this &lt;code>RowSet&lt;/code>&#xA;     * object. A &lt;code>JoinRowSet&lt;/code> object can now add this &lt;code>RowSet&lt;/code>&#xA;     * object based on the match column.&#xA;     * &lt;p>&#xA;     * Sub-interfaces such as the &lt;code>CachedRowSet&lt;/code>&lt;sup>&lt;font size=-2>TM&lt;/font>&lt;/sup>&#xA;     * interface define the method &lt;code>CachedRowSet.setKeyColumns&lt;/code>, which allows&#xA;     * primary key semantics to be enforced on specific columns.&#xA;     * Implementations of the &lt;code>setMatchColumn(int columnIdx)&lt;/code> method&#xA;     * should ensure that the constraints on the key columns are maintained when &#xA;     * a &lt;code>CachedRowSet&lt;/code> object sets a primary key column as a match column.&#xA;     *&#xA;     * @param columnIdx an &lt;code>int&lt;/code> identifying the index of the column to be&#xA;     *        set as the match column&#xA;     * @throws SQLException if an invalid column index is set&#xA;     * @see #setMatchColumn(int[])&#xA;     * @see #unsetMatchColumn(int)&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setMatchColumn">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIdxes">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated columns as the match column for this &lt;code>RowSet&lt;/code>&#xA;     * object. A &lt;code>JoinRowSet&lt;/code> object can now add this &lt;code>RowSet&lt;/code>&#xA;     * object based on the match column.&#xA;     *&#xA;     * @param columnIdxes an array of &lt;code>int&lt;/code> identifying the indexes of the &#xA;     *      columns to be set as the match columns&#xA;     * @throws SQLException if an invalid column index is set&#xA;     * @see #setMatchColumn(int[])&#xA;     * @see #unsetMatchColumn(int[])     &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setMatchColumn">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets the designated column as the match column for this &lt;code>RowSet&lt;/code>&#xA;     * object. A &lt;code>JoinRowSet&lt;/code> object can now add this &lt;code>RowSet&lt;/code>&#xA;     * object based on the match column.&#xA;     * &lt;p>&#xA;     * Subinterfaces such as the &lt;code>CachedRowSet&lt;/code> interface define&#xA;     * the method &lt;code>CachedRowSet.setKeyColumns&lt;/code>, which allows&#xA;     * primary key semantics to be enforced on specific columns.&#xA;     * Implementations of the &lt;code>setMatchColumn(String columnIdx)&lt;/code> method&#xA;     * should ensure that the constraints on the key columns are maintained when &#xA;     * a &lt;code>CachedRowSet&lt;/code> object sets a primary key column as a match column.&#xA;     *&#xA;     * @param columnName a &lt;code>String&lt;/code> object giving the name of the column&#xA;     *      to be set as the match column&#xA;     * @throws SQLException if an invalid column name is set, the column name&#xA;     *      is a null, or the column name is an empty string&#xA;     * @see #unsetMatchColumn&#xA;     * @see #setMatchColumn(int[])&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setMatchColumn">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnNames">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated columns as the match column for this &lt;code>RowSet&lt;/code>&#xA;     * object. A &lt;code>JoinRowSet&lt;/code> object can now add this &lt;code>RowSet&lt;/code>&#xA;     * object based on the match column.&#xA;     *&#xA;     * @param columnNames an array of &lt;code>String&lt;/code> objects giving the names &#xA;     *     of the column to be set as the match columns&#xA;     * @throws SQLException if an invalid column name is set, the column name&#xA;     *      is a null, or the column name is an empty string&#xA;     * @see #unsetMatchColumn&#xA;     * @see #setMatchColumn(int[])&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMatchColumnIndexes">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Retrieves the indexes of the match columns that were set for this&#xA;     * &lt;code>RowSet&lt;/code> object with the method&#xA;     * &lt;code>setMatchColumn(int[] columnIdxes)&lt;/code>.&#xA;     *&#xA;     * @return an &lt;code>int&lt;/code> array identifying the indexes of the columns&#xA;     *         that were set as the match columns for this &lt;code>RowSet&lt;/code> object&#xA;     * @throws SQLException if no match column has been set&#xA;     * @see #setMatchColumn&#xA;     * @see #unsetMatchColumn     &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMatchColumnNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Retrieves the names of the match columns that were set for this&#xA;     * &lt;code>RowSet&lt;/code> object with the method&#xA;     * &lt;code>setMatchColumn(String [] columnNames)&lt;/code>.&#xA;     *&#xA;     * @return an array of &lt;code>String&lt;/code> objects giving the names of the columns&#xA;     *         set as the match columns for this &lt;code>RowSet&lt;/code> object&#xA;     * @throws SQLException if no match column has been set&#xA;     * @see #setMatchColumn&#xA;     * @see #unsetMatchColumn&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="unsetMatchColumn">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIdx">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Unsets the designated column as the match column for this &lt;code>RowSet&lt;/code>&#xA;     * object.&#xA;     * &lt;P>&#xA;     * &lt;code>RowSet&lt;/code> objects that implement the &lt;code>Joinable&lt;/code> interface&#xA;     * must ensure that a key-like constraint continues to be enforced until the&#xA;     * method &lt;code>CachedRowSet.unsetKeyColumns&lt;/code> has been called on the&#xA;     * designated column.&#xA;     *&#xA;     * @param columnIdx an &lt;code>int&lt;/code> that identifies the index of the column&#xA;     *          that is to be unset as a match column&#xA;     * @throws SQLException if an invalid column index is designated or if&#xA;     *          the designated column was not previously set as a match&#xA;     *          column&#xA;     * @see #setMatchColumn     &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="unsetMatchColumn">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIdxes">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Unsets the designated columns as the match column for this &lt;code>RowSet&lt;/code>&#xA;     * object.&#xA;     *&#xA;     * @param columnIdxes an arrary of &lt;code>int&lt;/code> that identifies the indexes&#xA;     *     of the columns that are to be unset as match columns&#xA;     * @throws SQLException if an invalid column index is designated or if&#xA;     *          the designated column was not previously set as a match&#xA;     *          column&#xA;     * @see #setMatchColumn       &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="unsetMatchColumn">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Unsets the designated column as the match column for this &lt;code>RowSet&lt;/code>&#xA;     * object.&#xA;     * &lt;P>&#xA;     * &lt;code>RowSet&lt;/code> objects that implement the &lt;code>Joinable&lt;/code> interface&#xA;     * must ensure that a key-like constraint continues to be enforced until the&#xA;     * method &lt;code>CachedRowSet.unsetKeyColumns&lt;/code> has been called on the&#xA;     * designated column.&#xA;     *&#xA;     * @param columnName a &lt;code>String&lt;/code> object giving the name of the column&#xA;     *          that is to be unset as a match column&#xA;     * @throws SQLException if an invalid column name is designated or&#xA;     *          the designated column was not previously set as a match&#xA;     *          column&#xA;     * @see #setMatchColumn          &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="unsetMatchColumn">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Unsets the designated columns as the match columns for this &lt;code>RowSet&lt;/code>&#xA;     * object.&#xA;     *      &#xA;     * @param columnName an array of &lt;code>String&lt;/code> objects giving the names of &#xA;     *     the columns that are to be unset as the match columns&#xA;     * @throws SQLException if an invalid column name is designated or the &#xA;     *     designated column was not previously set as a match column&#xA;     * @see #setMatchColumn  &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;h3>1.0 Background&lt;/h3>&#xA; * The &lt;code>Joinable&lt;/code> interface provides the methods for getting and&#xA; * setting a match column, which is the basis for forming the SQL &lt;code>JOIN&lt;/code>&#xA; * formed by adding &lt;code>RowSet&lt;/code> objects to a &lt;code>JoinRowSet&lt;/code>&#xA; * object.&#xA; * &lt;P>&#xA; * Any standard &lt;code>RowSet&lt;/code> implementation &lt;b>may&lt;/b> implement &#xA; * the &lt;code>Joinable&lt;/code> interface in order to be&#xA; * added to a &lt;code>JoinRowSet&lt;/code> object. Implementing this interface gives&#xA; * a &lt;code>RowSet&lt;/code> object the ability to use &lt;code>Joinable&lt;/code> methods,&#xA; * which set, retrieve, and get information about match columns.  An&#xA; * application may add a&#xA; * &lt;code>RowSet&lt;/code> object that has not implemented the &lt;code>Joinable&lt;/code>&#xA; * interface to a &lt;code>JoinRowSet&lt;/code> object, but to do so it must use one&#xA; * of the &lt;code>JoinRowSet.addRowSet&lt;/code> methods that takes both a&#xA; * &lt;code>RowSet&lt;/code> object and a match column or an array of &lt;code>RowSet&lt;/code>&#xA; * objects and an array of match columns. &#xA; * &lt;P>&#xA; * To get access to the methods in the &lt;code>Joinable&lt;/code> interface, a&#xA; * &lt;code>RowSet&lt;/code> object implements at least one of the&#xA; * five standard &lt;code>RowSet&lt;/code> interfaces and also implements the &#xA; * &lt;code>Joinable&lt;/code> interface.  In addition, most &lt;code>RowSet&lt;/code>&#xA; * objects extend the &lt;code>BaseRowSet&lt;/code> class.  For example:&#xA; * &lt;pre>&#xA; *     class MyRowSetImpl extends BaseRowSet implements CachedRowSet, Joinable {&#xA; *         :&#xA; *         :&#xA; *     }&#xA; * &lt;/pre>&#xA; * &lt;P>&#xA; * &lt;h3>2.0 Usage Guidelines&lt;/h3>&#xA; * &lt;P>&#xA; * The methods in the &lt;code>Joinable&lt;/code> interface allow a &lt;code>RowSet&lt;/code> object &#xA; * to set a match column, retrieve a match column, or unset a match column, which is&#xA; * the column upon which an SQL &lt;code>JOIN&lt;/code> can be based.&#xA; * An instance of a class that implements these methods can be added to a &#xA; * &lt;code>JoinRowSet&lt;/code> object to allow an SQL &lt;code>JOIN&lt;/code> relationship to&#xA; *  be established.&#xA; * &lt;p>&#xA; * &lt;pre>&#xA; *     CachedRowSet crs = new MyRowSetImpl();&#xA; *     crs.populate((ResultSet)rs);&#xA; *     (Joinable)crs.setMatchColumnIndex(1);&#xA; *&#xA; *     JoinRowSet jrs = new JoinRowSetImpl();&#xA; *     jrs.addRowSet(crs);&#xA; * &lt;/pre>&#xA; * In the previous example, &lt;i>crs&lt;/i> is a &lt;code>CachedRowSet&lt;/code> object that&#xA; * has emplemented the &lt;code>Joinable&lt;/code> interface.  In the following example,&#xA; * &lt;i>crs2&lt;/i> has not, so it must supply the match column as an argument to the&#xA; * &lt;code>addRowSet&lt;/code> method. This example assumes that column 1 is the match&#xA; * column.&#xA; * &lt;PRE>&#xA; *     CachedRowSet crs2 = new MyRowSetImpl();&#xA; *     crs2.populate((ResultSet)rs);&#xA; *     &#xA; *     JoinRowSet jrs2 = new JoinRowSetImpl();&#xA; *     jrs2.addRowSet(crs2, 1);&#xA; * &lt;/PRE>&#xA; * &lt;p>&#xA; * The &lt;code>JoinRowSet&lt;/code> interface makes it possible to get data from one or&#xA; * more &lt;code>RowSet&lt;/code> objects consolidated into one table without having to incur &#xA; * the expense of creating a connection to a database. It is therefore ideally suited&#xA; * for use by disconnected &lt;code>RowSet&lt;/code> objects. Nevertheless, any&#xA; * &lt;code>RowSet&lt;/code> object &lt;b>may&lt;/b> implement this interface&#xA; * regardless of whether it is connected or disconnected. Note that a&#xA; * &lt;code>JdbcRowSet&lt;/code> object, being always connected to its data source, can&#xA; * become part of an SQL &lt;code>JOIN&lt;/code> directly without having to become part&#xA; * of a &lt;code>JoinRowSet&lt;/code> object. &#xA; * &lt;P>&#xA; * &lt;h3>3.0 Managing Multiple Match Columns&lt;/h3>&#xA; * The index array passed into the &lt;code>setMatchColumn&lt;/code> methods indicates &#xA; * how many match columns are being set (the length of the array) in addition to&#xA; * which columns will be used for the match. For example:&#xA; * &lt;pre>&#xA; *     int[] i = {1, 2, 4, 7}; // indicates four match columns, with column&#xA; *                             // indexes 1, 2, 4, 7 participating in the JOIN.&#xA; *     Joinable.setMatchColumn(i);&#xA; * &lt;/pre>&#xA; * Subsequent match columns may be added as follows to a different &lt;code>Joinable&lt;/code>&#xA; * object (a &lt;code>RowSet&lt;/code> object that has implemented the &lt;code>Joinable&lt;/code>&#xA; * interface).&#xA; * &lt;pre>&#xA; *     int[] w = {3, 2, 5, 3};&#xA; *     Joinable2.setMatchColumn(w);&#xA; * &lt;/pre>&#xA; * When an application adds two or more &lt;code>RowSet&lt;/code> objects to a&#xA; * &lt;code>JoinRowSet&lt;/code> object, the order of the indexes in the array is &#xA; * particularly important. Each index of &#xA; * the array maps directly to the corresponding index of the previously added &#xA; * &lt;code>RowSet&lt;/code> object. If overlap or underlap occurs, the match column &#xA; * data is maintained in the event an additional &lt;code>Joinable&lt;/code> RowSet is&#xA; * added and needs to relate to the match column data. Therefore, applications &#xA; * can set multiple match columns in any order, but&#xA; * this order has a direct effect on the outcome of the &lt;code>SQL&lt;/code> JOIN.&#xA; * &lt;p>&#xA; * This assertion applies in exactly the same manner when column names are used &#xA; * rather than column indexes to indicate match columns.&#xA; *&#xA; * @see JoinRowSet&#xA; * @author  Jonathan Bruce&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
