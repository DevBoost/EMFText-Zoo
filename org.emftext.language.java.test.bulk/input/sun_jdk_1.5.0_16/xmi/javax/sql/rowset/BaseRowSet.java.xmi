<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../java.ecore#/17" name="BaseRowSet.java">
  <comments>/*&#xA; * @(#)BaseRowSet.java&#x9;1.11 04/07/20  &#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved. &#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sql</namespaces>
  <namespaces>rowset</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>sql</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>sql</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>sql</namespaces>
    <namespaces>rowset</namespaces>
    <namespaces>serial</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="BaseRowSet">
    <members xsi:type="members:Field" name="UNICODE_STREAM_PARAM">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA; * A constant indicating to a &lt;code>RowSetReaderImpl&lt;/code> object&#xA; * that a given parameter is a Unicode stream. This&#xA; * &lt;code>RowSetReaderImpl&lt;/code> object is provided as an extension of the &#xA; * &lt;code>SyncProvider&lt;/code> abstract class defined in the &#xA; * &lt;code>SyncFactory&lt;/code> static factory SPI mechanism.&#xA; */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="BINARY_STREAM_PARAM">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA; * A constant indicating to a &lt;code>RowSetReaderImpl&lt;/code> object&#xA; * that a given parameter is a binary stream. A&#xA; * &lt;code>RowSetReaderImpl&lt;/code> object is provided as an extension of the &#xA; * &lt;code>SyncProvider&lt;/code> abstract class defined in the &#xA; * &lt;code>SyncFactory&lt;/code> static factory SPI mechanism.&#xA; */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ASCII_STREAM_PARAM">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA; * A constant indicating to a &lt;code>RowSetReaderImpl&lt;/code> object&#xA; * that a given parameter is an ASCII stream. A&#xA; * &lt;code>RowSetReaderImpl&lt;/code> object is provided as an extension of the &#xA; * &lt;code>SyncProvider&lt;/code> abstract class defined in the &#xA; * &lt;code>SyncFactory&lt;/code> static factory SPI mechanism.&#xA; */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="binaryStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * The &lt;code>InputStream&lt;/code> object that will be&#xA;     * returned by the method &lt;code>getBinaryStream&lt;/code>, which is&#xA;     * specified in the &lt;code>ResultSet&lt;/code> interface.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="unicodeStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * The &lt;code>InputStream&lt;/code> object that will be&#xA;     * returned by the method &lt;code>getUnicodeStream&lt;/code>,&#xA;     * which is specified in the &lt;code>ResultSet&lt;/code> interface.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="asciiStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * The &lt;code>InputStream&lt;/code> object that will be&#xA;     * returned by the method &lt;code>getAsciiStream&lt;/code>,&#xA;     * which is specified in the &lt;code>ResultSet&lt;/code> interface.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="charStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/Reader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** &#xA;     * The &lt;code>Reader&lt;/code> object that will be&#xA;     * returned by the method &lt;code>getCharacterStream&lt;/code>,&#xA;     * which is specified in the &lt;code>ResultSet&lt;/code> interface.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="command">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The query that will be sent to the DBMS for execution when the&#xA;     * method &lt;code>execute&lt;/code> is called.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="URL">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The JDBC URL the reader, writer, or both supply to the method &#xA;     * &lt;code>DriverManager.getConnection&lt;/code> when the &#xA;     * &lt;code>DriverManager&lt;/code> is used to get a connection.&#xA;     * &lt;P>&#xA;     * The JDBC URL identifies the driver to be used to make the conndection.&#xA;     * This URL can be found in the documentation supplied by the driver&#xA;     * vendor.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="dataSource">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The logical name of the data source that the reader/writer should use &#xA;     * in order to retrieve a &lt;code>DataSource&lt;/code> object from a Java&#xA;     * Directory and Naming Interface (JNDI) naming service.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="username">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The user name the reader, writer, or both supply to the method &#xA;     * &lt;code>DriverManager.getConnection&lt;/code> when the &#xA;     * &lt;code>DriverManager&lt;/code> is used to get a connection.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="password">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The password the reader, writer, or both supply to the method &#xA;     * &lt;code>DriverManager.getConnection&lt;/code> when the &#xA;     * &lt;code>DriverManager&lt;/code> is used to get a connection.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="rowSetType">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0/@members.4"/>
        </next>
        <target xsi:type="classifiers:Interface" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * A constant indicating the type of this JDBC &lt;code>RowSet&lt;/code>&#xA;     * object. It must be one of the following &lt;code>ResultSet&lt;/code>&#xA;     * constants:  &lt;code>TYPE_FORWARD_ONLY&lt;/code>, &#xA;     * &lt;code>TYPE_SCROLL_INSENSITIVE&lt;/code>, or &#xA;     * &lt;code>TYPE_SCROLL_SENSITIVE&lt;/code>.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="showDeleted">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * A &lt;code>boolean&lt;/code> indicating whether deleted rows are visible in this&#xA;     * JDBC &lt;code>RowSet&lt;/code> object .&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="queryTimeout">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// default is false</comments>
        <comments>/**&#xA;     * The maximum number of seconds the driver &#xA;     * will wait for a command to execute.  This limit applies while&#xA;     * this JDBC &lt;code>RowSet&lt;/code> object is connected to its data&#xA;     * source, that is, while it is populating itself with&#xA;     * data and while it is writing data back to the data source. &#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="maxRows">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// default is no timeout</comments>
        <comments>/**&#xA;     * The maximum number of rows the reader should read.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="maxFieldSize">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// default is no limit</comments>
        <comments>/**&#xA;     * The maximum field size the reader should read.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="concurrency">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0/@members.7"/>
        </next>
        <target xsi:type="classifiers:Interface" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// default is no limit</comments>
        <comments>/**&#xA;     * A constant indicating the concurrency of this JDBC &lt;code>RowSet&lt;/code>&#xA;     * object. It must be one of the following &lt;code>ResultSet&lt;/code>&#xA;     * constants: &lt;code>CONCUR_READ_ONLY&lt;/code> or&#xA;     * &lt;code>CONCUR_UPDATABLE&lt;/code>.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="readOnly">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * A &lt;code>boolean&lt;/code> indicating whether this JDBC &lt;code>RowSet&lt;/code>&#xA;     * object is read-only.  &lt;code>true&lt;/code> indicates that it is read-only;&#xA;     * &lt;code>false&lt;/code> that it is writable.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="escapeProcessing">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * A &lt;code>boolean&lt;/code> indicating whether the reader for this&#xA;     * JDBC &lt;code>RowSet&lt;/code> object should perform escape processing.&#xA;     * &lt;code>true&lt;/code> means that escape processing is turned on;&#xA;     * &lt;code>false&lt;/code> that it is not. The default is &lt;code>true&lt;/code>.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="isolation">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * A constant indicating the isolation level of the connection &#xA;     * for this JDBC &lt;code>RowSet&lt;/code> object . It must be one of&#xA;     * the following &lt;code>Connection&lt;/code> constants:&#xA;     * &lt;code>TRANSACTION_NONE&lt;/code>, &#xA;     * &lt;code>TRANSACTION_READ_UNCOMMITTED&lt;/code>,&#xA;     * &lt;code>TRANSACTION_READ_COMMITTED&lt;/code>, &#xA;     * &lt;code>TRANSACTION_REPEATABLE_READ&lt;/code> or &#xA;     * &lt;code>TRANSACTION_SERIALIZABLE&lt;/code>.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fetchDir">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0/@members.0"/>
        </next>
        <target xsi:type="classifiers:Interface" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * A constant used as a hint to the driver that indicates the direction in &#xA;     * which data from this JDBC &lt;code>RowSet&lt;/code> object  is going&#xA;     * to be fetched. The following &lt;code>ResultSet&lt;/code> constants are&#xA;     * possible values:&#xA;     * &lt;code>FETCH_FORWARD&lt;/code>, &#xA;     * &lt;code>FETCH_REVERSE&lt;/code>, &#xA;     * &lt;code>FETCH_UNKNOWN&lt;/code>.&#xA;     * &lt;P>&#xA;     * Unused at this time.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fetchSize">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// default fetch direction</comments>
        <comments>/**&#xA;     * A hint to the driver that indicates the expected number of rows&#xA;     * in this JDBC &lt;code>RowSet&lt;/code> object .&#xA;     * &lt;P>&#xA;     * Unused at this time.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="map">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// default fetchSize</comments>
        <comments>/**&#xA;     * The &lt;code>java.util.Map&lt;/code> object that contains entries mapping&#xA;     * SQL type names to classes in the Java programming language for the&#xA;     * custom mapping of user-defined types.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="listeners">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * A &lt;code>Vector&lt;/code> object that holds the list of listeners&#xA;     * that have registered with this &lt;code>RowSet&lt;/code> object.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="params">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * A &lt;code>Vector&lt;/code> object that holds the parameters set&#xA;     * for this &lt;code>RowSet&lt;/code> object's current command.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="BaseRowSet">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24">
            <comments>// allocate the listeners collection</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </value>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// could be transient?</comments>
        <comments>/**&#xA;     * Constructs a new &lt;code>BaseRowSet&lt;/code> object initialized with&#xA;     * a default &lt;code>Vector&lt;/code> object for its &lt;code>listeners&lt;/code>&#xA;     * field. The other default values with which it is initialized are listed&#xA;     * in Section 6.0 of the class comment for this class.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="initParams">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Performs the necessary internal configurations and initializations&#xA;     * to allow any JDBC &lt;code>RowSet&lt;/code> implementation to start using&#xA;     * the standard facilities provided by a &lt;code>BaseRowSet&lt;/code>&#xA;     * instance. This method &lt;b>should&lt;/b> be called after the &lt;code>RowSet&lt;/code> object &#xA;     * has been instantiated to correctly initialize all parameters. This method&#xA;     * &lt;b>should&lt;/b> never be called by an application, but is called from with&#xA;     * a &lt;code>RowSet&lt;/code> implementation extending this class.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addRowSetListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../RowSetListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//--------------------------------------------------------------------</comments>
        <comments>// Events</comments>
        <comments>//--------------------------------------------------------------------</comments>
        <comments>/**&#xA;    * The listener will be notified whenever an event occurs on this &lt;code>RowSet&lt;/code>&#xA;    * object.&#xA;    * &lt;P>&#xA;    * A listener might, for example, be a table or graph that needs to&#xA;    * be updated in order to accurately reflect the current state of&#xA;    * the &lt;code>RowSet&lt;/code> object.&#xA;    * &lt;p>&#xA;    * &lt;b>Note&lt;/b>: if the &lt;code>RowSetListener&lt;/code> object is &#xA;    * &lt;code>null&lt;/code>, this method silently discards the &lt;code>null&lt;/code>&#xA;    * value and does not add a null reference to the set of listeners. &#xA;    * &lt;p>&#xA;    * &lt;b>Note&lt;/b>: if the listener is already set, and the new &lt;code>RowSetListerner&lt;/code> &#xA;    * instance is added to the set of listeners already registered to receive  &#xA;    * event notifications from this &lt;code>RowSet&lt;/code>.&#xA;    *&#xA;    * @param listener an object that has implemented the&#xA;    *     &lt;code>javax.sql.RowSetListener&lt;/code> interface and wants to be notified&#xA;    *     of any events that occur on this &lt;code>RowSet&lt;/code> object; May be&#xA;    *     null.&#xA;    * @see #removeRowSetListener&#xA;    */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.36"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="removeRowSetListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../RowSetListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    * Removes the designated object from this &lt;code>RowSet&lt;/code> object's list of listeners.&#xA;    * If the given argument is not a registered listener, this method&#xA;    * does nothing.&#xA;    *&#xA;    *  &lt;b>Note&lt;/b>: if the &lt;code>RowSetListener&lt;/code> object is &#xA;    * &lt;code>null&lt;/code>, this method silently discards the &lt;code>null&lt;/code>&#xA;    * value.&#xA;    *&#xA;    * @param listener a &lt;code>RowSetListener&lt;/code> object that is on the list &#xA;    *        of listeners for this &lt;code>RowSet&lt;/code> object&#xA;    * @see #addRowSetListener&#xA;    */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.37"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkforRowSetInterface">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Determine if instance of this class extends the RowSet interface.     &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="The class extending abstract class BaseRowSet "/>
                <children xsi:type="references:StringReference" value="must implement javax.sql.RowSet or one of it's sub-interfaces."/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>javax</namespaces>
                <namespaces>sql</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../RowSet.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:SelfReference">
                <self xsi:type="literals:This"/>
              </child>
            </expression>
          </children>
          <children xsi:type="literals:BooleanLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="notifyCursorMoved">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;    * Notifies all of the listeners registered with this&#xA;    * &lt;code>RowSet&lt;/code> object that its cursor has moved. &#xA;    * &lt;P>&#xA;    * When an application calls a method to move the cursor,&#xA;    * that method moves the cursor and then calls this method&#xA;    * internally. An application &lt;b>should&lt;/b> never invoke &#xA;    * this method directly.    &#xA;    *&#xA;    * @throws SQLException if the class extending the &lt;code>BaseRowSet&lt;/code>&#xA;    *     abstract class does not implement the &lt;code>RowSet&lt;/code> interface or&#xA;    *     one of it's sub-interfaces.&#xA;    */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="event">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../RowSetEvent.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../RowSetEvent.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../RowSet.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:SelfReference">
                    <self xsi:type="literals:This"/>
                  </child>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../RowSetListener.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@variable"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="../RowSetListener.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.1/@init">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </child>
                  </expression>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.1/@init">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../../../java/util/Iterator.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/util/AbstractList.class.xmi#//@classifiers.0/@members.11"/>
                </next>
              </initialValue>
            </init>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.15"/>
            </next>
          </children>
          <children xsi:type="literals:BooleanLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="notifyRowChanged">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;    * Notifies all of the listeners registered with this &lt;code>RowSet&lt;/code> object that&#xA;    * one of its rows has changed.&#xA;    * &lt;P>&#xA;    * When an application calls a method that changes a row, such as&#xA;    * the &lt;code>CachedRowSet&lt;/code> methods &lt;code>insertRow&lt;/code>,&#xA;    * &lt;code>updateRow&lt;/code>, or &lt;code>deleteRow&lt;/code>,&#xA;    * that method calls &lt;code>notifyRowChanged&lt;/code>&#xA;    * internally. An application &lt;b>should&lt;/b> never invoke &#xA;    * this method directly.&#xA;    *&#xA;    * @throws SQLException if the class extending the &lt;code>BaseRowSet&lt;/code>&#xA;    *     abstract class does not implement the &lt;code>RowSet&lt;/code> interface or&#xA;    *     one of it's sub-interfaces.     &#xA;    */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="event">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../RowSetEvent.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../RowSetEvent.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../RowSet.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:SelfReference">
                    <self xsi:type="literals:This"/>
                  </child>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../RowSetListener.class.xmi#//@classifiers.0/@members.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.1/@statement/@statements.0/@variable"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="../RowSetListener.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.1/@statement/@statements.1/@init">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </child>
                  </expression>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.1/@statement/@statements.1/@init">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../../../java/util/Iterator.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/util/AbstractList.class.xmi#//@classifiers.0/@members.11"/>
                </next>
              </initialValue>
            </init>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.15"/>
            </next>
          </children>
          <children xsi:type="literals:BooleanLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="notifyRowSetChanged">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;    * Notifies all of the listeners registered with this &lt;code>RowSet&lt;/code>&#xA;    * object that its entire contents have changed.&#xA;    * &lt;P>&#xA;    * When an application calls methods that change the entire contents&#xA;    * of the &lt;code>RowSet&lt;/code> object, such as the &lt;code>CachedRowSet&lt;/code> methods &#xA;    * &lt;code>execute&lt;/code>, &lt;code>populate&lt;/code>, &lt;code>restoreOriginal&lt;/code>,&#xA;    * or &lt;code>release&lt;/code>, that method calls &lt;code>notifyRowSetChanged&lt;/code>&#xA;    * internally (either directly or indirectly). An application &lt;b>should&lt;/b>&#xA;    * never invoke this method directly.&#xA;    *&#xA;    * @throws SQLException if the class extending the &lt;code>BaseRowSet&lt;/code>&#xA;    *     abstract class does not implement the &lt;code>RowSet&lt;/code> interface or&#xA;    *     one of it's sub-interfaces.&#xA;    */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="event">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../RowSetEvent.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../RowSetEvent.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../RowSet.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:SelfReference">
                    <self xsi:type="literals:This"/>
                  </child>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../RowSetListener.class.xmi#//@classifiers.0/@members.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.1/@statement/@statements.0/@variable"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="../RowSetListener.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.1/@statement/@statements.1/@init">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </child>
                  </expression>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.1/@statement/@statements.1/@init">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../../../java/util/Iterator.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/util/AbstractList.class.xmi#//@classifiers.0/@members.11"/>
                </next>
              </initialValue>
            </init>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/util/Vector.class.xmi#//@classifiers.0/@members.15"/>
            </next>
          </children>
          <children xsi:type="literals:BooleanLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCommand">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the SQL query that is the command for this&#xA;     * &lt;code>RowSet&lt;/code> object. The command property contains the query that &#xA;     * will be executed to populate this &lt;code>RowSet&lt;/code> object.&#xA;     * &lt;P>&#xA;     * The SQL query returned by this method is used by &lt;code>RowSet&lt;/code> methods&#xA;     * such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code>, which may be implemented&#xA;     * by any class that extends the &lt;code>BaseRowSet&lt;/code> abstract class and&#xA;     * implements one or more of the standard JSR-114 &lt;code>RowSet&lt;/code> &#xA;     * interfaces.&#xA;     * &lt;P>&#xA;     * The command is used by the &lt;code>RowSet&lt;/code> object's &#xA;     * reader to obtain a &lt;code>ResultSet&lt;/code> object.  The reader then&#xA;     * reads the data from the &lt;code>ResultSet&lt;/code> object and uses it to&#xA;     * to populate this &lt;code>RowSet&lt;/code> object.&#xA;     * &lt;P> &#xA;     * The default value for the &lt;code>command&lt;/code> property is &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @return the &lt;code>String&lt;/code> that is the value for this&#xA;     *         &lt;code>RowSet&lt;/code> object's &lt;code>command&lt;/code> property;&#xA;     *         may be &lt;code>null&lt;/code>&#xA;     * @see #setCommand&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setCommand">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cmd">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets this &lt;code>RowSet&lt;/code> object's &lt;code>command&lt;/code> property to &#xA;     * the given &lt;code>String&lt;/code> object and clears the parameters, if any, &#xA;     * that were set for the previous command.&#xA;     * &lt;P>&#xA;     * The &lt;code>command&lt;/code> property may not be needed if the &lt;code>RowSet&lt;/code> &#xA;     * object gets its data from a source that does not support commands,&#xA;     * such as a spreadsheet or other tabular file.&#xA;     * Thus, this property is optional and may be &lt;code>null&lt;/code>.  &#xA;     *&#xA;     * @param cmd a &lt;code>String&lt;/code> object containing an SQL query&#xA;     *            that will be set as this &lt;code>RowSet&lt;/code> object's command &#xA;     *            property; may be &lt;code>null&lt;/code> but may not be an empty string&#xA;     * @throws SQLException if an empty string is provided as the command value &#xA;     * @see #getCommand&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// cmd equal to null or</comments>
        <comments>// cmd with length 0 (implies url ==&quot;&quot;)</comments>
        <comments>// are not independent events.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="Invalid command string detected. "/>
                  <children xsi:type="references:StringReference" value="Cannot be of length less than 0"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <comments>// &quot;unbind&quot; any parameters from any previous command.</comments>
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Throw">
                  <throwable xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:StringReference" value="Set initParams() before setCommand"/>
                  </throwable>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.30"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
                </value>
              </expression>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getUrl">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Retrieves the JDBC URL that this &lt;code>RowSet&lt;/code> object's &#xA;     * &lt;code>javax.sql.Reader&lt;/code> object uses to make a connection &#xA;     * with a relational database using a JDBC technology-enabled driver.&#xA;     *&lt;P>&#xA;     * The &lt;code>Url&lt;/code> property will be &lt;code>null&lt;/code> if the underlying data&#xA;     * source is a non-SQL data source, such as a spreadsheet or an XML&#xA;     * data source.&#xA;     * &#xA;     * @return a &lt;code>String&lt;/code> object that contains the JDBC URL&#xA;     *         used to establish the connection for this &lt;code>RowSet&lt;/code>&#xA;     *         object; may be &lt;code>null&lt;/code> (default value) if not set &#xA;     * @throws SQLException if an error occurs retrieving the URL value&#xA;     * @see #setUrl&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setUrl">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="url">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the Url property for this &lt;code>RowSet&lt;/code> object&#xA;     * to the given &lt;code>String&lt;/code> object and sets the dataSource name&#xA;     * property to &lt;code>null&lt;/code>. The Url property is a&#xA;     * JDBC URL that is used when&#xA;     * the connection is created using a JDBC technology-enabled driver &#xA;     * (&quot;JDBC driver&quot;) and the &lt;code>DriverManager&lt;/code>. &#xA;     * The correct JDBC URL for the specific driver to be used can be found&#xA;     * in the driver documentation.  Although there are guidelines for for how&#xA;     * a JDBC URL is formed,&#xA;     * a driver vendor can specify any &lt;code>String&lt;/code> object except&#xA;     * one with a length of &lt;code>0&lt;/code> (an empty string).&#xA;     * &lt;P>&#xA;     * Setting the Url property is optional if connections are established using&#xA;     * a &lt;code>DataSource&lt;/code> object instead of the &lt;code>DriverManager&lt;/code>.&#xA;     * The driver will use either the URL property or the &#xA;     * dataSourceName property to create a connection, whichever was&#xA;     * specified most recently. If an application uses a JDBC URL, it&#xA;     * must load a JDBC driver that accepts the JDBC URL before it uses the&#xA;     * &lt;code>RowSet&lt;/code> object to connect to a database.  The &lt;code>RowSet&lt;/code> &#xA;     * object will use the URL internally to create a database connection in order &#xA;     * to read or write data.  &#xA;     * &#xA;     * @param url a &lt;code>String&lt;/code> object that contains the JDBC URL&#xA;     *     that will be used to establish the connection to a database for this &#xA;     *     &lt;code>RowSet&lt;/code> object; may be &lt;code>null&lt;/code> but must not&#xA;     *     be an empty string&#xA;     * @throws SQLException if an error occurs setting the Url property or the &#xA;     *     parameter supplied is a string with a length of &lt;code>0&lt;/code> (an&#xA;     *     empty string)&#xA;     * @see #getUrl&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="Invalid url string detected. "/>
                  <children xsi:type="references:StringReference" value="Cannot be of length less than 1"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
                </value>
              </expression>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDataSourceName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the logical name that when supplied to a naming service&#xA;     * that uses the Java Naming and Directory Interface (JNDI) API, will&#xA;     * retrieve a &lt;code>javax.sql.DataSource&lt;/code> object. This&#xA;     * &lt;code>DataSource&lt;/code> object can be used to establish a connection&#xA;     * to the data source that it represents. &#xA;     * &lt;P>&#xA;     * Users should set either the url or the data source name property.&#xA;     * The driver will use the property set most recently to establish a &#xA;     * connection.&#xA;     *&#xA;     * @return a &lt;code>String&lt;/code> object that identifies the&#xA;     *         &lt;code>DataSource&lt;/code> object to be used for making a &#xA;     *         connection; if no logical name has been set, &lt;code>null&lt;/code> &#xA;     *         is returned.&#xA;     * @see #setDataSourceName&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setDataSourceName">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets the &lt;code>DataSource&lt;/code> name property for this &lt;code>RowSet&lt;/code> &#xA;     * object to the given logical name and sets this &lt;code>RowSet&lt;/code> object's&#xA;     * Url property to &lt;code>null&lt;/code>. The name must have been bound to a &#xA;     * &lt;code>DataSource&lt;/code> object in a JNDI naming service so that an&#xA;     * application can do a lookup using that name to retrieve the &#xA;     * &lt;code>DataSource&lt;/code> object bound to it. The &lt;code>DataSource&lt;/code>&#xA;     * object can then be used to establish a connection to the data source it&#xA;     * represents.&#xA;     * &lt;P>&#xA;     * Users should set either the Url property or the dataSourceName property.&#xA;     * If both properties are set, the driver will use the property set most recently.&#xA;     *&#xA;     * @param name a &lt;code>String&lt;/code> object with the name that can be supplied&#xA;     *     to a naming service based on JNDI technology to retrieve the&#xA;     *     &lt;code>DataSource&lt;/code> object that can be used to get a connection;&#xA;     *     may be &lt;code>null&lt;/code> but must not be an empty string&#xA;     * @throws SQLException if an empty string is provided as the &lt;code>DataSource&lt;/code>&#xA;     *    name&#xA;     * @see #getDataSourceName&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="DataSource name cannot be empty string"/>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="references:StringReference" value=""/>
            </next>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
                </value>
              </expression>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getUsername">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the user name used to create a database connection.  Because it&#xA;     * is not serialized, the username property is set at runtime before&#xA;     * calling the method &lt;code>execute&lt;/code>.&#xA;     * &#xA;     * @return the &lt;code>String&lt;/code> object containing the user name that&#xA;     *         is supplied to the data source to create a connection; may be&#xA;     *         &lt;code>null&lt;/code> (default value) if not set&#xA;     * @see #setUsername&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setUsername">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets the username property for this &lt;code>RowSet&lt;/code> object&#xA;     * to the given user name. Because it&#xA;     * is not serialized, the username property is set at run time before&#xA;     * calling the method &lt;code>execute&lt;/code>.&#xA;     *&#xA;     * @param name the &lt;code>String&lt;/code> object containing the user name that&#xA;     *     is supplied to the data source to create a connection. It may be null.     &#xA;     * @see #getUsername&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPassword">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the password used to create a database connection for this&#xA;     * &lt;code>RowSet&lt;/code> object.  Because the password property is not&#xA;     * serialized, it is set at run time before calling the method&#xA;     * &lt;code>execute&lt;/code>. The default value is &lt;code>null&lt;/code>&#xA;     *&#xA;     * @return the &lt;code>String&lt;/code> object that represents the password&#xA;     *         that must be supplied to the database to create a connection&#xA;     * @see #setPassword&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setPassword">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pass">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets the password used to create a database connection for this&#xA;     * &lt;code>RowSet&lt;/code> object to the given &lt;code>String&lt;/code>&#xA;     * object.  Because the password property is not&#xA;     * serialized, it is set at run time before calling the method&#xA;     * &lt;code>execute&lt;/code>.&#xA;     *&#xA;     * @param pass the &lt;code>String&lt;/code> object that represents the password&#xA;     *     that is supplied to the database to create a connection. It may be&#xA;     *     null.&#xA;     * @see #getPassword&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setType">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the type for this &lt;code>RowSet&lt;/code> object to the specified type. &#xA;     * The default type is &lt;code>ResultSet.TYPE_SCROLL_INSENSITIVE&lt;/code>.&#xA;     *&#xA;     * @param type one of the following constants:&#xA;     *             &lt;code>ResultSet.TYPE_FORWARD_ONLY&lt;/code>,&#xA;     *             &lt;code>ResultSet.TYPE_SCROLL_INSENSITIVE&lt;/code>, or&#xA;     *             &lt;code>ResultSet.TYPE_SCROLL_SENSITIVE&lt;/code>&#xA;     * @throws SQLException if the parameter supplied is not one of the &#xA;     *         following constants:&#xA;     *          &lt;code>ResultSet.TYPE_FORWARD_ONLY&lt;/code> or&#xA;     *          &lt;code>ResultSet.TYPE_SCROLL_INSENSITIVE&lt;/code>&#xA;     *          &lt;code>ResultSet.TYPE_SCROLL_SENSITIVE&lt;/code>&#xA;     * @see #getConcurrency&#xA;     * @see #getType&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Invalid type of RowSet set. Must be either "/>
                <children xsi:type="references:StringReference" value="ResultSet.TYPE_FORWARD_ONLY or ResultSet.TYPE_SCROLL_INSENSITIVE "/>
                <children xsi:type="references:StringReference" value="or ResultSet.TYPE_SCROLL_SENSITIVE."/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0/@members.3"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0/@members.4"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getType">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the type of this &lt;code>RowSet&lt;/code> object. The type is initially &#xA;     * determined by the statement that created the &lt;code>RowSet&lt;/code> object. &#xA;     * The &lt;code>RowSet&lt;/code> object can call the method&#xA;     * &lt;code>setType&lt;/code> at any time to change its&#xA;     * type.  The default is &lt;code>TYPE_SCROLL_INSENSITIVE&lt;/code>.&#xA;     *&#xA;     * @return the type of this JDBC &lt;code>RowSet&lt;/code>&#xA;     *         object, which must be one of the following:&#xA;     *         &lt;code>ResultSet.TYPE_FORWARD_ONLY&lt;/code>, &#xA;     *         &lt;code>ResultSet.TYPE_SCROLL_INSENSITIVE&lt;/code>, or&#xA;     *         &lt;code>ResultSet.TYPE_SCROLL_SENSITIVE&lt;/code>&#xA;     * @throws SQLException if an error occurs getting the type of&#xA;     *     of this &lt;code>RowSet&lt;/code> object&#xA;     * @see #setType&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setConcurrency">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="concurrency">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the concurrency for this &lt;code>RowSet&lt;/code> object to&#xA;     * the specified concurrency. The default concurrency for any &lt;code>RowSet&lt;/code>&#xA;     * object (connected or disconnected) is &lt;code>ResultSet.CONCUR_UPDATABLE&lt;/code>,&#xA;     * but this method may be called at any time to change the concurrency.&#xA;     * &lt;P>&#xA;     * @param concurrency one of the following constants:&#xA;     *                    &lt;code>ResultSet.CONCUR_READ_ONLY&lt;/code> or&#xA;     *                    &lt;code>ResultSet.CONCUR_UPDATABLE&lt;/code> &#xA;     * @throws SQLException if the parameter supplied is not one of the &#xA;     *         following constants:&#xA;     *          &lt;code>ResultSet.CONCUR_UPDATABLE&lt;/code> or&#xA;     *          &lt;code>ResultSet.CONCUR_READ_ONLY&lt;/code>&#xA;     * @see #getConcurrency&#xA;     * @see #isReadOnly&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Invalid concurrency set. Must be either "/>
                <children xsi:type="references:StringReference" value="ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE."/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0/@members.6"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0/@members.7"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isReadOnly">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns a &lt;code>boolean&lt;/code> indicating whether this &#xA;     * &lt;code>RowSet&lt;/code> object is read-only.&#xA;     * Any attempts to update a read-only &lt;code>RowSet&lt;/code> object will result in an&#xA;     * &lt;code>SQLException&lt;/code> being thrown. By default, &#xA;     * rowsets are updatable if updates are possible.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if this &lt;code>RowSet&lt;/code> object&#xA;     *         cannot be updated; &lt;code>false&lt;/code> otherwise&#xA;     * @see #setConcurrency&#xA;     * @see #setReadOnly&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
      </statements>
    </members>
    <members xsi:type="members:EmptyMember"/>
    <members xsi:type="members:ClassMethod" name="setReadOnly">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets this &lt;code>RowSet&lt;/code> object's readOnly  property to the given &lt;code>boolean&lt;/code>.&#xA;     * &#xA;     * @param value &lt;code>true&lt;/code> to indicate that this &#xA;     *              &lt;code>RowSet&lt;/code> object is read-only; &#xA;     *              &lt;code>false&lt;/code> to indicate that it is updatable&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getTransactionIsolation">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the transaction isolation property for this&#xA;     * &lt;code>RowSet&lt;/code> object's connection. This property represents&#xA;     * the transaction isolation level requested for use in transactions.&#xA;     * &lt;P>&#xA;     * For &lt;code>RowSet&lt;/code> implementations such as&#xA;     * the &lt;code>CachedRowSet&lt;/code> that operate in a disconnected environment,&#xA;     * the &lt;code>SyncProvider&lt;/code> object&#xA;     * offers complementary locking and data integrity options. The&#xA;     * options described below are pertinent only to connected &lt;code>RowSet&lt;/code>&#xA;     * objects (&lt;code>JdbcRowSet&lt;/code> objects).&#xA;     * &#xA;     * @return one of the following constants:&#xA;     *         &lt;code>Connection.TRANSACTION_NONE&lt;/code>,&#xA;     *         &lt;code>Connection.TRANSACTION_READ_UNCOMMITTED&lt;/code>,&#xA;     *         &lt;code>Connection.TRANSACTION_READ_COMMITTED&lt;/code>,&#xA;     *         &lt;code>Connection.TRANSACTION_REPEATABLE_READ&lt;/code>, or&#xA;     *         &lt;code>Connection.TRANSACTION_SERIALIZABLE&lt;/code>&#xA;     * @see javax.sql.rowset.spi.SyncFactory&#xA;     * @see javax.sql.rowset.spi.SyncProvider&#xA;     * @see #setTransactionIsolation&#xA;&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
      </statements>
    </members>
    <members xsi:type="members:EmptyMember"/>
    <members xsi:type="members:ClassMethod" name="setTransactionIsolation">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="level">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets the transaction isolation property for this JDBC &lt;code>RowSet&lt;/code> object to the given &#xA;     * constant. The DBMS will use this transaction isolation level for&#xA;     * transactions if it can.&#xA;     * &lt;p>&#xA;     * For &lt;code>RowSet&lt;/code> implementations such as&#xA;     * the &lt;code>CachedRowSet&lt;/code> that operate in a disconnected environment,&#xA;     * the &lt;code>SyncProvider&lt;/code> object being used&#xA;     * offers complementary locking and data integrity options. The&#xA;     * options described below are pertinent only to connected &lt;code>RowSet&lt;/code>&#xA;     * objects (&lt;code>JdbcRowSet&lt;/code> objects).&#xA;     *&#xA;     * @param level one of the following constants, listed in ascending order:&#xA;     *              &lt;code>Connection.TRANSACTION_NONE&lt;/code>,&#xA;     *              &lt;code>Connection.TRANSACTION_READ_UNCOMMITTED&lt;/code>,&#xA;     *              &lt;code>Connection.TRANSACTION_READ_COMMITTED&lt;/code>,&#xA;     *              &lt;code>Connection.TRANSACTION_REPEATABLE_READ&lt;/code>, or&#xA;     *              &lt;code>Connection.TRANSACTION_SERIALIZABLE&lt;/code>&#xA;     * @throws SQLException if the given parameter is not one of the Connection &#xA;     *          constants&#xA;     * @see javax.sql.rowset.spi.SyncFactory&#xA;     * @see javax.sql.rowset.spi.SyncProvider     &#xA;     * @see #getTransactionIsolation&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Invalid transaction isolation set. Must "/>
                <children xsi:type="references:StringReference" value="be either "/>
                <children xsi:type="references:StringReference" value="Connection.TRANSACTION_NONE or "/>
                <children xsi:type="references:StringReference" value="Connection.TRANSACTION_READ_UNCOMMITTED or "/>
                <children xsi:type="references:StringReference" value="Connection.TRANSACTION_READ_COMMITTED or "/>
                <children xsi:type="references:StringReference" value="Connection.RRANSACTION_REPEATABLE_READ or "/>
                <children xsi:type="references:StringReference" value="Connection.TRANSACTION_SERIALIZABLE"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../java/sql/Connection.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../../../java/sql/Connection.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../java/sql/Connection.class.xmi#//@classifiers.0/@members.2"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../../../java/sql/Connection.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../java/sql/Connection.class.xmi#//@classifiers.0/@members.1"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../../../java/sql/Connection.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../java/sql/Connection.class.xmi#//@classifiers.0/@members.3"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../../../java/sql/Connection.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../java/sql/Connection.class.xmi#//@classifiers.0/@members.4"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../../../java/sql/Connection.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getTypeMap">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>util</namespaces>
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <typeArguments xsi:type="generics:UnknownTypeArgument"/>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the type map associated with the &lt;code>Connection&lt;/code>&#xA;     * object for this &lt;code>RowSet&lt;/code> object.&#xA;     * &lt;P>&#xA;     * Drivers that support the JDBC 3.0 API will create &#xA;     * &lt;code>Connection&lt;/code> objects with an associated type map. &#xA;     * This type map, which is initially empty, can contain one or more&#xA;     * fully-qualified SQL names and &lt;code>Class&lt;/code> objects indicating &#xA;     * the class to which the named SQL value will be mapped. The type mapping&#xA;     * specified in the connection's type map is used for custom type mapping&#xA;     * when no other type map supersedes it.&#xA;     * &lt;p>&#xA;     * If a type map is explicitly supplied to a method that can perform&#xA;     * custom mapping, that type map supersedes the connection's type map.&#xA;     *&#xA;     * @return the &lt;code>java.util.Map&lt;/code> object that is the type map&#xA;     *         for this &lt;code>RowSet&lt;/code> object's connection&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setTypeMap">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="map">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>util</namespaces>
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <typeArguments xsi:type="generics:UnknownTypeArgument"/>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Installs the given &lt;code>java.util.Map&lt;/code> object as the type map&#xA;     * associated with the &lt;code>Connection&lt;/code> object for this &#xA;     * &lt;code>RowSet&lt;/code> object.  The custom mapping indicated in&#xA;     * this type map will be used unless a different type map is explicitly&#xA;     * supplied to a method, in which case the type map supplied will be used.&#xA;     *&#xA;     * @param map a &lt;code>java.util.Map&lt;/code> object that contains the &#xA;     *     mapping from SQL type names for user defined types (UDT) to classes in &#xA;     *     the Java programming language.  Each entry in the &lt;code>Map&lt;/code>&#xA;     *     object consists of the fully qualified SQL name of a UDT and the &#xA;     *     &lt;code>Class&lt;/code> object for the &lt;code>SQLData&lt;/code> implementation &#xA;     *     of that UDT. May be &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaxFieldSize">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the maximum number of bytes that can be used for a column&#xA;     * value in this &lt;code>RowSet&lt;/code> object.&#xA;     * This limit applies only to columns that hold values of the&#xA;     * following types:  &lt;code>BINARY&lt;/code>, &lt;code>VARBINARY&lt;/code>,&#xA;     * &lt;code>LONGVARBINARY&lt;/code>, &lt;code>CHAR&lt;/code>, &lt;code>VARCHAR&lt;/code>, &#xA;     * and &lt;code>LONGVARCHAR&lt;/code>.  If the limit is exceeded, the excess&#xA;     * data is silently discarded.&#xA;     *&#xA;     * @return an &lt;code>int&lt;/code> indicating the current maximum column size&#xA;     *     limit; zero means that there is no limit&#xA;     * @throws SQLException if an error occurs internally determining the &#xA;     *    maximum limit of the column size&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setMaxFieldSize">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="max">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the maximum number of bytes that can be used for a column&#xA;     * value in this &lt;code>RowSet&lt;/code> object to the given number.&#xA;     * This limit applies only to columns that hold values of the&#xA;     * following types:  &lt;code>BINARY&lt;/code>, &lt;code>VARBINARY&lt;/code>,&#xA;     * &lt;code>LONGVARBINARY&lt;/code>, &lt;code>CHAR&lt;/code>, &lt;code>VARCHAR&lt;/code>, &#xA;     * and &lt;code>LONGVARCHAR&lt;/code>.  If the limit is exceeded, the excess&#xA;     * data is silently discarded. For maximum portability, it is advisable to&#xA;     * use values greater than 256.&#xA;     *&#xA;     * @param max an &lt;code>int&lt;/code> indicating the new maximum column size &#xA;     *     limit; zero means that there is no limit &#xA;     * @throws SQLException if (1) an error occurs internally setting the&#xA;     *     maximum limit of the column size or (2) a size of less than 0 is set&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Invalid max field size set. Cannot be of "/>
                <children xsi:type="references:StringReference" value="value: "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaxRows">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the maximum number of rows that this &lt;code>RowSet&lt;/code> object may contain. If &#xA;     * this limit is exceeded, the excess rows are silently dropped.&#xA;     *&#xA;     * @return an &lt;code>int&lt;/code> indicating the current maximum number of&#xA;     *     rows; zero means that there is no limit&#xA;     * @throws SQLException if an error occurs internally determining the&#xA;     *     maximum limit of rows that a &lt;code>Rowset&lt;/code> object can contain&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setMaxRows">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="max">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the maximum number of rows that this &lt;code>RowSet&lt;/code> object may contain to &#xA;     * the given number. If this limit is exceeded, the excess rows are &#xA;     * silently dropped.&#xA;     *&#xA;     * @param max an &lt;code>int&lt;/code> indicating the current maximum number &#xA;     *     of rows; zero means that there is no limit&#xA;     * @throws SQLException if an error occurs internally setting the&#xA;     *     maximum limit on the number of rows that a JDBC &lt;code>RowSet&lt;/code> object&#xA;     *     can contain; or if &lt;i>max&lt;/i> is less than &lt;code>0&lt;/code>; or &#xA;     *     if &lt;i>max&lt;/i> is less than the &lt;code>fetchSize&lt;/code> of the &#xA;     *     &lt;code>RowSet&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Invalid max row size set. Cannot be of "/>
                <children xsi:type="references:StringReference" value="value: "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="Invalid max row size set. Cannot be less "/>
                  <children xsi:type="references:StringReference" value="than the fetchSize."/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.68"/>
              <self xsi:type="literals:This"/>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setEscapeProcessing">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="enable">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets to the given &lt;code>boolean&lt;/code> whether or not the driver will&#xA;     * scan for escape syntax and do escape substitution before sending SQL &#xA;     * statements to the database. The default is for the driver to do escape&#xA;     * processing.&#xA;     * &lt;P>&#xA;     * Note: Since &lt;code>PreparedStatement&lt;/code> objects have usually been&#xA;     * parsed prior to making this call, disabling escape processing for &#xA;     * prepared statements will likely have no effect.&#xA;     *&#xA;     * @param enable &lt;code>true&lt;/code> to enable escape processing; &#xA;     *     &lt;code>false&lt;/code> to disable it&#xA;     * @throws SQLException if an error occurs setting the underlying JDBC&#xA;     * technology-enabled driver to process the escape syntax&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getQueryTimeout">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the maximum number of seconds the driver will wait for a &#xA;     * query to execute. If the limit is exceeded, an &lt;code>SQLException&lt;/code>&#xA;     * is thrown.&#xA;     *&#xA;     * @return the current query timeout limit in seconds; zero means that&#xA;     *     there is no limit&#xA;     * @throws SQLException if an error occurs in determining the query&#xA;     *     time-out value&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setQueryTimeout">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seconds">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets to the given number the maximum number of seconds the driver will &#xA;     * wait for a query to execute. If the limit is exceeded, an&#xA;     * &lt;code>SQLException&lt;/code> is thrown.&#xA;     *&#xA;     * @param seconds the new query time-out limit in seconds; zero means that&#xA;     *     there is no limit; must not be less than zero&#xA;     * @throws SQLException if an error occurs setting the query &#xA;     *     time-out or if the query time-out value is less than 0&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Invalid query timeout value set. Cannot be "/>
                <children xsi:type="references:StringReference" value="of value: "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.0"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getShowDeleted">
      <typeReference xsi:type="types:Boolean"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves a &lt;code>boolean&lt;/code> indicating whether rows marked &#xA;     * for deletion appear in the set of current rows.  &#xA;     * The default value is &lt;code>false&lt;/code>.&#xA;     * &lt;P>&#xA;     * Note: Allowing deleted rows to remain visible complicates the behavior&#xA;     * of some of the methods.  However, most &lt;code>RowSet&lt;/code> object users&#xA;     * can simply ignore this extra detail because only sophisticated&#xA;     * applications will likely want to take advantage of this feature.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if deleted rows are visible;&#xA;     *         &lt;code>false&lt;/code> otherwise&#xA;     * @throws SQLException if an error occurs determining if deleted rows&#xA;     * are visible or not&#xA;     * @see #setShowDeleted&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setShowDeleted">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the property &lt;code>showDeleted&lt;/code> to the given &#xA;     * &lt;code>boolean&lt;/code> value, which determines whether&#xA;     * rows marked for deletion appear in the set of current rows.&#xA;     *&#xA;     * @param value &lt;code>true&lt;/code> if deleted rows should be shown;&#xA;     *     &lt;code>false&lt;/code> otherwise&#xA;     * @throws SQLException if an error occurs setting whether deleted &#xA;     *     rows are visible or not&#xA;     * @see #getShowDeleted&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEscapeProcessing">
      <typeReference xsi:type="types:Boolean"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Ascertains whether escape processing is enabled for this&#xA;     * &lt;code>RowSet&lt;/code> object.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if escape processing is turned on; &#xA;     *         &lt;code>false&lt;/code> otherwise&#xA;     * @throws SQLException if an error occurs determining if escape&#xA;     *     processing is enabled or not or if the internal escape&#xA;     *     processing trigger has not been enabled&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setFetchDirection">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="direction">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gives the driver a performance hint as to the direction in&#xA;     * which the rows in this &lt;code>RowSet&lt;/code> object will be &#xA;     * processed.  The driver may ignore this hint. &#xA;     * &lt;P>&#xA;     * A &lt;code>RowSet&lt;/code> object inherits the default properties of the&#xA;     * &lt;code>ResultSet&lt;/code> object from which it got its data.  That&#xA;     * &lt;code>ResultSet&lt;/code> object's default fetch direction is set by &#xA;     * the &lt;code>Statement&lt;/code> object that created it.&#xA;     * &lt;P>&#xA;     * This method applies to a &lt;code>RowSet&lt;/code> object only while it is&#xA;     * connected to a database using a JDBC driver.&#xA;     * &lt;p>&#xA;     * A &lt;code>RowSet&lt;/code> object may use this method at any time to change &#xA;     * its setting for the fetch direction.&#xA;     *&#xA;     * @param direction one of &lt;code>ResultSet.FETCH_FORWARD&lt;/code>,&#xA;     *                  &lt;code>ResultSet.FETCH_REVERSE&lt;/code>, or&#xA;     *                  &lt;code>ResultSet.FETCH_UNKNOWN&lt;/code>&#xA;     * @throws SQLException if (1) the &lt;code>RowSet&lt;/code> type is &#xA;     *     &lt;code>TYPE_FORWARD_ONLY&lt;/code> and the given fetch direction is not&#xA;     *     &lt;code>FETCH_FORWARD&lt;/code> or (2) the given fetch direction is not&#xA;     *     one of the following:&#xA;     *        ResultSet.FETCH_FORWARD,&#xA;     *        ResultSet.FETCH_REVERSE, or&#xA;     *        ResultSet.FETCH_UNKNOWN &#xA;     * @see #getFetchDirection&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// Changed the condition checking to the below as there were two</comments>
        <comments>// conditions that had to be checked</comments>
        <comments>// 1. RowSet is TYPE_FORWARD_ONLY and direction is not FETCH_FORWARD</comments>
        <comments>// 2. Direction is not one of the valid values</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Invalid Fetch Direction"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.45"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0"/>
                  </children>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0"/>
                  </children>
                </expression>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0"/>
                  </children>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0"/>
                  </children>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../../../java/sql/ResultSet.class.xmi#//@classifiers.0"/>
                  </children>
                </expression>
              </children>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFetchDirection">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves this &lt;code>RowSet&lt;/code> object's current setting for the &#xA;     * fetch direction. The default type is &lt;code>ResultSet.FETCH_FORWARD&lt;/code>&#xA;     *&#xA;     * @return one of &lt;code>ResultSet.FETCH_FORWARD&lt;/code>,&#xA;     *                  &lt;code>ResultSet.FETCH_REVERSE&lt;/code>, or&#xA;     *                  &lt;code>ResultSet.FETCH_UNKNOWN&lt;/code>&#xA;     * @throws SQLException if an error occurs in determining the &#xA;     *     current fetch direction for fetching rows&#xA;     * @see #setFetchDirection&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>//Added the following code to throw a </comments>
        <comments>//SQL Exception if the fetchDir is not </comments>
        <comments>//set properly.Bug id:4914155</comments>
        <comments>// This checking is not necessary!</comments>
        <comments>/*&#xA;         if((fetchDir != ResultSet.FETCH_FORWARD) &amp;&amp;&#xA;    &#x9;   (fetchDir != ResultSet.FETCH_REVERSE) &amp;&amp;&#xA;    &#x9;   (fetchDir != ResultSet.FETCH_UNKNOWN)) {&#xA;    &#x9;    throw new SQLException(&quot;Fetch Direction Invalid&quot;);&#xA;    &#x9; }   &#xA;         */</comments>
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setFetchSize">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="rows">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the fetch size for this &lt;code>RowSet&lt;/code> object to the given number of&#xA;     * rows.  The fetch size gives a JDBC technology-enabled driver (&quot;JDBC driver&quot;)&#xA;     * a hint as to the&#xA;     * number of rows that should be fetched from the database when more rows&#xA;     * are needed for this &lt;code>RowSet&lt;/code> object. If the fetch size specified &#xA;     * is zero, the driver ignores the value and is free to make its own best guess &#xA;     * as to what the fetch size should be.  &#xA;     * &lt;P>&#xA;     * A &lt;code>RowSet&lt;/code> object inherits the default properties of the&#xA;     * &lt;code>ResultSet&lt;/code> object from which it got its data.  That&#xA;     * &lt;code>ResultSet&lt;/code> object's default fetch size is set by &#xA;     * the &lt;code>Statement&lt;/code> object that created it.&#xA;     * &lt;P>&#xA;     * This method applies to a &lt;code>RowSet&lt;/code> object only while it is&#xA;     * connected to a database using a JDBC driver.&#xA;     * For connected &lt;code>RowSet&lt;/code> implementations such as &#xA;     * &lt;code>JdbcRowSet&lt;/code>, this method has a direct and immediate effect&#xA;     * on the underlying JDBC driver.&#xA;     * &lt;P>&#xA;     * A &lt;code>RowSet&lt;/code> object may use this method at any time to change &#xA;     * its setting for the fetch size.&#xA;     * &lt;p>&#xA;     * For &lt;code>RowSet&lt;/code> implementations such as&#xA;     * &lt;code>CachedRowSet&lt;/code>, which operate in a disconnected environment,&#xA;     * the &lt;code>SyncProvider&lt;/code> object being used&#xA;     * may leverage the fetch size to poll the data source and &#xA;     * retrieve a number of rows that do not exceed the fetch size and that may&#xA;     * form a subset of the actual rows returned by the original query. This is&#xA;     * an implementation variance determined by the specific &lt;code>SyncProvider&lt;/code>&#xA;     * object employed by the disconnected &lt;code>RowSet&lt;/code> object.&#xA;     * &lt;P>&#xA;     *&#xA;     * @param rows the number of rows to fetch; &lt;code>0&lt;/code> to let the&#xA;     *        driver decide what the best fetch size is; must not be less&#xA;     *        than &lt;code>0&lt;/code> or more than the maximum number of rows&#xA;     *        allowed for this &lt;code>RowSet&lt;/code> object (the number returned&#xA;     *        by a call to the method {@link #getMaxRows})&#xA;     * @throws SQLException if the specified fetch size is less than &lt;code>0&lt;/code>&#xA;     *        or more than the limit for the maximum number of rows&#xA;     * @see #getFetchSize&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>//Added this checking as maxRows can be 0 when this function is called</comments>
        <comments>//maxRows = 0 means rowset can hold any number of rows, os this checking</comments>
        <comments>// is needed to take care of this condition.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.57"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Invalid fetch size set. Cannot be of "/>
                <children xsi:type="references:StringReference" value="value: "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.0"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.0"/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.57"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFetchSize">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the fetch size for this &lt;code>RowSet&lt;/code> object. The default &#xA;     * value is zero.&#xA;     *&#xA;     * @return the number of rows suggested as the fetch size when this &lt;code>RowSet&lt;/code> object &#xA;     *     needs more rows from the database&#xA;     * @throws SQLException if an error occurs determining the number of rows in the&#xA;     *     current fetch size&#xA;     * @see #setFetchSize&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getConcurrency">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the concurrency for this &lt;code>RowSet&lt;/code> object. &#xA;     * The default is &lt;code>CONCUR_UPDATABLE&lt;/code> for both connected and&#xA;     * disconnected &lt;code>RowSet&lt;/code> objects.&#xA;     * &lt;P>&#xA;     * An application can call the method &lt;code>setConcurrency&lt;/code> at any time &#xA;     * to change a &lt;code>RowSet&lt;/code> object's concurrency. &#xA;     * &lt;p>&#xA;     * @return the concurrency type for this &lt;code>RowSet&lt;/code>&#xA;     *     object, which must be one of the following:&#xA;     *     &lt;code>ResultSet.CONCUR_READ_ONLY&lt;/code> or&#xA;     *     &lt;code>ResultSet.CONCUR_UPDATABLE&lt;/code> &#xA;     * @throws SQLException if an error occurs getting the concurrency&#xA;     *     of this &lt;code>RowSet&lt;/code> object&#xA;     * @see #setConcurrency&#xA;     * @see #isReadOnly&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkParamIndex">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="idx">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>//-----------------------------------------------------------------------</comments>
        <comments>// Parameters</comments>
        <comments>//-----------------------------------------------------------------------</comments>
        <comments>/**&#xA;     * Checks the given index to see whether it is less than &lt;code>1&lt;/code> and&#xA;     * throws an &lt;code>SQLException&lt;/code> object if it is.&#xA;     * &lt;P>&#xA;     * This method is called by many methods internally; it is never&#xA;     * called by an application directly.&#xA;     *&#xA;     * @param idx an &lt;code>int&lt;/code> indicating which parameter is to be&#xA;     *     checked; the first parameter is &lt;code>1&lt;/code>&#xA;     * @throws SQLException if the parameter is less than &lt;code>1&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Invalid Parameter Index"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </expression>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setNull">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sqlType">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//---------------------------------------------------------------------</comments>
        <comments>// setter methods for setting the parameters in a &lt;code>RowSet&lt;/code> object's command </comments>
        <comments>//---------------------------------------------------------------------</comments>
        <comments>/**&#xA;     * Sets the designated parameter to SQL &lt;code>NULL&lt;/code>.&#xA;     * Note that the parameter's SQL type must be specified using one of the&#xA;&#x9; * type codes defined in &lt;code>java.sql.Types&lt;/code>.  This SQL type is&#xA;     * specified in the second parameter. &#xA;     * &lt;p>&#xA;     * Note that the second parameter tells the DBMS the data type of the value being&#xA;     * set to &lt;code>NULL&lt;/code>. Some DBMSs require this information, so it is required&#xA;     * in order to make code more portable.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.&#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;P>&#xA;     * Calls made to the method &lt;code>getParams&lt;/code> after this version of&#xA;     * &lt;code>setNull&lt;/code>&#xA;     * has been called will return an &lt;code>Object&lt;/code> array containing the parameter values that&#xA;     * have been set.  In that array, the element that represents the values&#xA;     * set with this method will itself be an array. The first element of that array &#xA;     * is &lt;code>null&lt;/code>.&#xA;     * The second element is the value set for &lt;i>sqlType&lt;/i>. &#xA;     * The parameter number is indicated by an element's position in the array &#xA;     * returned by the method &lt;code>getParams&lt;/code>,&#xA;     * with the first element being the value for the first placeholder parameter, the&#xA;     * second element being the value for the second placeholder parameter, and so on.&#xA;     * In other words, if the second placeholder parameter is being set to&#xA;     * &lt;code>null&lt;/code>, the array containing it will be the second element in &#xA;     * the array returned by &lt;code>getParams&lt;/code>.&#xA;     * &lt;P>&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is &lt;i>parameterIndex&lt;/i> -1.&#xA;     *&#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param sqlType an &lt;code>int&lt;/code> that is one of the SQL type codes&#xA;     *        defined in the class {@link java.sql.Types}. If a non-standard &#xA;     *        &lt;i>sqlType&lt;/i> is supplied, this method will not throw a &#xA;     *        &lt;code>SQLException&lt;/code>. This allows implicit support for &#xA;     *        non-standard SQL types.&#xA;     * @throws SQLException if a database access error occurs or the given&#xA;     *        parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nullVal">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsAfter/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@parameters.1"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setNull"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setNull">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sqlType">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="typeName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to SQL &lt;code>NULL&lt;/code>.&#xA;     * &#xA;     * Although this version of the  method &lt;code>setNull&lt;/code> is intended&#xA;     * for user-defined&#xA;     * and &lt;code>REF&lt;/code> parameters, this method may be used to set a null&#xA;     * parameter for any JDBC type. The following are user-defined types: &#xA;     * &lt;code>STRUCT&lt;/code>, &lt;code>DISTINCT&lt;/code>, and &lt;code>JAVA_OBJECT&lt;/code>, &#xA;     * and named array types.&#xA;     *  &#xA;     * &lt;P>&lt;B>Note:&lt;/B> To be portable, applications must give the&#xA;     * SQL type code and the fully qualified SQL type name when specifying&#xA;     * a &lt;code>NULL&lt;/code> user-defined or &lt;code>REF&lt;/code> parameter. &#xA;     * In the case of a user-defined type, the name is the type name of&#xA;     * the parameter itself.  For a &lt;code>REF&lt;/code> parameter, the name is &#xA;     * the type name of the referenced type.  If a JDBC technology-enabled&#xA;     * driver does not need the type code or type name information,&#xA;     * it may ignore it.&#xA;     * &lt;P> &#xA;     * If the parameter does not have a user-defined or &lt;code>REF&lt;/code> type,&#xA;     * the given &lt;code>typeName&lt;/code> parameter is ignored.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.&#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;P>&#xA;     * Calls made to the method &lt;code>getParams&lt;/code> after this version of&#xA;     * &lt;code>setNull&lt;/code>&#xA;     * has been called will return an &lt;code>Object&lt;/code> array containing the parameter values that&#xA;     * have been set.  In that array, the element that represents the values&#xA;     * set with this method will itself be an array. The first element of that array &#xA;     * is &lt;code>null&lt;/code>.&#xA;     * The second element is the value set for &lt;i>sqlType&lt;/i>, and the third&#xA;     * element is the value set for &lt;i>typeName&lt;/i>. &#xA;     * The parameter number is indicated by an element's position in the array &#xA;     * returned by the method &lt;code>getParams&lt;/code>,&#xA;     * with the first element being the value for the first placeholder parameter, the&#xA;     * second element being the value for the second placeholder parameter, and so on.&#xA;     * In other words, if the second placeholder parameter is being set to&#xA;     * &lt;code>null&lt;/code>, the array containing it will be the second element in &#xA;     * the array returned by &lt;code>getParams&lt;/code>.&#xA;     * &lt;P>&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is &lt;i>parameterIndex&lt;/i> -1.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param sqlType a value from &lt;code>java.sql.Types&lt;/code>&#xA;     * @param typeName the fully qualified name of an SQL user-defined type,&#xA;     *                 which is ignored if the parameter is not a user-defined&#xA;     *                 type or &lt;code>REF&lt;/code> value&#xA;     * @throws SQLException if an error occurs or the given parameter index&#xA;     *            is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nullVal">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsAfter/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@parameters.1"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@parameters.2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setNull"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@statements.0/@variable"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setBoolean">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &lt;code>boolean&lt;/code> in the&#xA;     * Java programming language.  The driver converts this to an SQL &#xA;     * &lt;code>BIT&lt;/code> value when it sends it to the database.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.&#xA;     * Methods such as &lt;code>execute&lt;/code>, &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;p>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.     &#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the parameter value&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setNull"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Boolean.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@parameters.1"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setByte">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Byte"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &lt;code>byte&lt;/code> in the Java&#xA;     * programming language.  The driver converts this to an SQL &#xA;     * &lt;code>TINYINT&lt;/code> value when it sends it to the database.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called. &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.     &#xA;     * &lt;p>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the parameter value&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setByte"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Byte.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.1"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setShort">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &lt;code>short&lt;/code> in the&#xA;     * Java programming language.  The driver converts this to an SQL &#xA;     * &lt;code>SMALLINT&lt;/code> value when it sends it to the database.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.&#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.     &#xA;     * &lt;p>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;p>&#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the parameter value&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setShort"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Short.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75/@parameters.1"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setInt">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to an &lt;code>int&lt;/code> in the Java&#xA;     * programming language.  The driver converts this to an SQL &#xA;     * &lt;code>INTEGER&lt;/code> value when it sends it to the database.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.&#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the parameter value&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setInt"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.1"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setLong">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &lt;code>long&lt;/code> in the Java&#xA;     * programming language.  The driver converts this to an SQL &#xA;     * &lt;code>BIGINT&lt;/code> value when it sends it to the database.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.      &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P> &#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     *  &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the parameter value&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setLong"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Long.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.1"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setFloat">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &lt;code>float&lt;/code> in the&#xA;     * Java programming language.  The driver converts this to an SQL &#xA;     * &lt;code>FLOAT&lt;/code> value when it sends it to the database.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.      &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the parameter value&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.78/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setFloat"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.78/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Float.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.78/@parameters.1"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setDouble">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &lt;code>double&lt;/code> in the&#xA;     * Java programming language.  The driver converts this to an SQL &#xA;     * &lt;code>DOUBLE&lt;/code> value when it sends it to the database.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called. &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.    &#xA;     * &lt;P>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * S  &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the parameter value&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setDouble"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Double.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.1"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setBigDecimal">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>math</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &#xA;     * &lt;code>java.lang.BigDecimal&lt;/code> value.  The driver converts this to &#xA;     * an SQL &lt;code>NUMERIC&lt;/code> value when it sends it to the database.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.      &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * Note: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the parameter value&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setBigDecimal"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@parameters.1"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setString">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &lt;code>String&lt;/code>&#xA;     * value.  The driver converts this to an SQL &#xA;     * &lt;code>VARCHAR&lt;/code> or &lt;code>LONGVARCHAR&lt;/code> value&#xA;     * (depending on the argument's size relative to the driver's limits &#xA;     * on &lt;code>VARCHAR&lt;/code> values) when it sends it to the database.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.      &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;p>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;p>&#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the parameter value&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setString"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@parameters.1"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setBytes">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given array of bytes. &#xA;     * The driver converts this to an SQL &#xA;     * &lt;code>VARBINARY&lt;/code> or &lt;code>LONGVARBINARY&lt;/code> value&#xA;     * (depending on the argument's size relative to the driver's limits &#xA;     * on &lt;code>VARBINARY&lt;/code> values) when it sends it to the database.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.&#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;p>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the parameter value&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.82/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setBytes"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.82/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.82/@parameters.1"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setDate">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/sql/Date.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &lt;code>java.sql.Date&lt;/code> &#xA;     * value. The driver converts this to an SQL &#xA;     * &lt;code>DATE&lt;/code> value when it sends it to the database.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.&#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;P>&#xA;     * Calls made to the method &lt;code>getParams&lt;/code> after this version&#xA;     * of &lt;code>setDate&lt;/code>&#xA;     * has been called will return an array with the value to be set for&#xA;     * placeholder parameter number &lt;i>parameterIndex&lt;/i> being the &lt;code>Date&lt;/code> &#xA;     * object supplied as the second parameter.&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is &lt;i>parameterIndex&lt;/i> -1.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the parameter value&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setDate"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@parameters.1"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setTime">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/sql/Time.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &lt;code>java.sql.Time&lt;/code>&#xA;     * value.  The driver converts this to an SQL &lt;code>TIME&lt;/code> value&#xA;     * when it sends it to the database.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.      &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;P>&#xA;     * Calls made to the method &lt;code>getParams&lt;/code> after this version &#xA;     * of the method &lt;code>setTime&lt;/code>&#xA;     * has been called will return an array of the parameters that have been set.&#xA;     * The parameter to be set for parameter placeholder number &lt;i>parameterIndex&lt;/i>&#xA;     * will be the &lt;code>Time&lt;/code> object that was set as the second parameter &#xA;     * to this method.&#xA;     * &lt;P>&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is &lt;i>parameterIndex&lt;/i> -1.&#xA;     *&#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x a &lt;code>java.sql.Time&lt;/code> object, which is to be set as the value&#xA;     *              for placeholder parameter &lt;i>parameterIndex&lt;/i>&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.84/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setTime"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.84/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.84/@parameters.1"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setTimestamp">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/sql/Timestamp.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &#xA;     * &lt;code>java.sql.Timestamp&lt;/code> value.&#xA;     * The driver converts this to an SQL &lt;code>TIMESTAMP&lt;/code> value when it&#xA;     * sends it to the database.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.      &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;P>&#xA;     * Calls made to the method &lt;code>getParams&lt;/code> after this version of&#xA;     * &lt;code>setTimestamp&lt;/code>&#xA;     * has been called will return an array with the value for parameter placeholder&#xA;     * number &lt;i>parameterIndex&lt;/i> being the &lt;code>Timestamp&lt;/code> object that was&#xA;     * supplied as the second parameter to this method.&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is &lt;i>parameterIndex&lt;/i> -1.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x a &lt;code>java.sql.Timestamp&lt;/code> object&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setTimestamp"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@parameters.1"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setAsciiStream">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &#xA;     * &lt;code>java.io.InputStream&lt;/code> object,&#xA;     * which will have the specified number of bytes.&#xA;     * The contents of the stream will be read and sent to the database.  &#xA;     * This method throws an &lt;code>SQLException&lt;/code> object if the number of bytes&#xA;     * read and sent to the database is not equal to &lt;i>length&lt;/i>.&#xA;     * &lt;P>&#xA;     * When a very large ASCII value is input to a &lt;code>LONGVARCHAR&lt;/code>&#xA;     * parameter, it may be more practical to send it via a&#xA;     * &lt;code>java.io.InputStream&lt;/code> object. A JDBC technology-enabled &#xA;     * driver will read the data from the stream as needed until it reaches&#xA;     * end-of-file. The driver will do any necessary conversion from ASCII to &#xA;     * the database &lt;code>CHAR&lt;/code> format.&#xA;     *   &#xA;     * &lt;P>&lt;B>Note:&lt;/B> This stream object can be either a standard&#xA;     * Java stream object or your own subclass that implements the&#xA;     * standard interface.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.      &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * Note: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.     &#xA;     * &lt;P>&#xA;     * Calls made to the method &lt;code>getParams&lt;/code> after &lt;code>setAsciiStream&lt;/code>&#xA;     * has been called will return an array containing the parameter values that&#xA;     * have been set.  The element in the array that represents the values&#xA;     * set with this method will itself be an array. The first element of that array &#xA;     * is the given &lt;code>java.io.InputStream&lt;/code> object.&#xA;     * The second element is the value set for &lt;i>length&lt;/i>. &#xA;     * The third element is an internal &lt;code>BaseRowSet&lt;/code> constant&#xA;     * specifying that the stream passed to this method is an ASCII stream.&#xA;     * The parameter number is indicated by an element's position in the array &#xA;     * returned by the method &lt;code>getParams&lt;/code>,&#xA;     * with the first element being the value for the first placeholder parameter, the&#xA;     * second element being the value for the second placeholder parameter, and so on.&#xA;     * In other words, if the input stream being set is the value for the second&#xA;     * placeholder parameter, the array containing it will be the second element in &#xA;     * the array returned by &lt;code>getParams&lt;/code>.&#xA;     * &lt;P>&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is element number &lt;i>parameterIndex&lt;/i> -1.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the Java input stream that contains the ASCII parameter value&#xA;     * @param length the number of bytes in the stream. This is the number of bytes&#xA;     *       the driver will send to the DBMS; lengths of 0 or less are &#xA;     *       are undefined but will cause an invalid length exception to be&#xA;     *       thrown in the underlying JDBC driver.&#xA;     * @throws SQLException if an error occurs, the parameter index is out of bounds,&#xA;     *       or when connected to a data source, the number of bytes the driver reads&#xA;     *       and sends to the database is not equal to the number of bytes specified &#xA;     *       in &lt;i>length&lt;/i>&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="asciiStream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsAfter/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@parameters.2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setAsciiStream"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@statements.0/@variable"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setBinaryStream">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets the designated parameter to the given &lt;code>java.io.InputStream&lt;/code>&#xA;     * object, which will have the specified number of bytes.&#xA;     * The contents of the stream will be read and sent to the database.  &#xA;     * This method throws an &lt;code>SQLException&lt;/code> object if the number of bytes&#xA;     * read and sent to the database is not equal to &lt;i>length&lt;/i>.&#xA;     * &lt;P>&#xA;     * When a very large binary value is input to a &#xA;     * &lt;code>LONGVARBINARY&lt;/code> parameter, it may be more practical &#xA;     * to send it via a &lt;code>java.io.InputStream&lt;/code> object.&#xA;     * A JDBC technology-enabled driver will read the data from the&#xA;     * stream as needed until it reaches end-of-file. &#xA;     *   &#xA;     * &lt;P>&lt;B>Note:&lt;/B> This stream object can be either a standard&#xA;     * Java stream object or your own subclass that implements the&#xA;     * standard interface.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.     &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     *&lt;P>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;P>&#xA;     * Calls made to the method &lt;code>getParams&lt;/code> after &lt;code>setBinaryStream&lt;/code>&#xA;     * has been called will return an array containing the parameter values that&#xA;     * have been set.  In that array, the element that represents the values&#xA;     * set with this method will itself be an array. The first element of that array &#xA;     * is the given &lt;code>java.io.InputStream&lt;/code> object.&#xA;     * The second element is the value set for &lt;i>length&lt;/i>. &#xA;     * The third element is an internal &lt;code>BaseRowSet&lt;/code> constant&#xA;     * specifying that the stream passed to this method is a binary stream.&#xA;     * The parameter number is indicated by an element's position in the array &#xA;     * returned by the method &lt;code>getParams&lt;/code>,&#xA;     * with the first element being the value for the first placeholder parameter, the&#xA;     * second element being the value for the second placeholder parameter, and so on.&#xA;     * In other words, if the input stream being set is the value for the second&#xA;     * placeholder parameter, the array containing it will be the second element in &#xA;     * the array returned by &lt;code>getParams&lt;/code>.&#xA;     * &lt;P>&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is element number &lt;i>parameterIndex&lt;/i> -1.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the input stream that contains the binary value to be set&#xA;     * @param length the number of bytes in the stream; lengths of 0 or less are  &#xA;     *         are undefined but will cause an invalid length exception to be&#xA;     *         thrown in the underlying JDBC driver.&#xA;     * @throws SQLException if an error occurs, the parameter index is out of bounds,&#xA;     *         or when connected to a data source, the number of bytes the driver &#xA;     *         reads and sends to the database is not equal to the number of bytes &#xA;     *         specified in &lt;i>length&lt;/i>&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="binaryStream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsAfter/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@parameters.2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setBinaryStream"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setUnicodeStream">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**  &#xA;     * Sets the designated parameter to the given &#xA;     * &lt;code>java.io.InputStream&lt;/code> object, which will have the specified&#xA;     * number of bytes. The contents of the stream will be read and sent&#xA;     * to the database.  &#xA;     * This method throws an &lt;code>SQLException&lt;/code> if the number of bytes&#xA;     * read and sent to the database is not equal to &lt;i>length&lt;/i>.&#xA;     * &lt;P>&#xA;     * When a very large Unicode value is input to a&#xA;     * &lt;code>LONGVARCHAR&lt;/code> parameter, it may be more practical&#xA;     * to send it via a &lt;code>java.io.InputStream&lt;/code> object.&#xA;     * A JDBC technology-enabled driver will read the data from the &#xA;     * stream as needed, until it reaches end-of-file. &#xA;     * The driver will do any necessary conversion from Unicode to the&#xA;     * database &lt;code>CHAR&lt;/code> format.&#xA;     * The byte format of the Unicode stream must be Java UTF-8, as&#xA;     * defined in the Java Virtual Machine Specification.&#xA;     *   &#xA;     * &lt;P>&lt;B>Note:&lt;/B> This stream object can be either a standard&#xA;     * Java stream object or your own subclass that implements the&#xA;     * standard interface.&#xA;     * &lt;P>&#xA;     * This method is deprecated; the method &lt;code>getCharacterStream&lt;/code>&#xA;     * should be used in its place.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.&#xA;     * Calls made to the method &lt;code>getParams&lt;/code> after &lt;code>setUnicodeStream&lt;/code>&#xA;     * has been called will return an array containing the parameter values that&#xA;     * have been set.  In that array, the element that represents the values&#xA;     * set with this method will itself be an array. The first element of that array &#xA;     * is the given &lt;code>java.io.InputStream&lt;/code> object.&#xA;     * The second element is the value set for &lt;i>length&lt;/i>. &#xA;     * The third element is an internal &lt;code>BaseRowSet&lt;/code> constant &#xA;     * specifying that the stream passed to this method is a Unicode stream.&#xA;     * The parameter number is indicated by an element's position in the array &#xA;     * returned by the method &lt;code>getParams&lt;/code>,&#xA;     * with the first element being the value for the first placeholder parameter, the&#xA;     * second element being the value for the second placeholder parameter, and so on.&#xA;     * In other words, if the input stream being set is the value for the second&#xA;     * placeholder parameter, the array containing it will be the second element in &#xA;     * the array returned by &lt;code>getParams&lt;/code>.&#xA;     * &lt;P>&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is element number &lt;i>parameterIndex&lt;/i> -1.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the &lt;code>java.io.InputStream&lt;/code> object that contains the&#xA;     *          UNICODE parameter value&#xA;     * @param length the number of bytes in the input stream&#xA;     * @throws SQLException if an error occurs, the parameter index is out of bounds,&#xA;     *         or the number of bytes the driver reads and sends to the database is&#xA;     *         not equal to the number of bytes specified in &lt;i>length&lt;/i>&#xA;     * @deprecated getCharacterStream should be used in its place&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="unicodeStream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsAfter/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setUnicodeStream"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setCharacterStream">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="reader">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/io/Reader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &lt;code>java.io.Reader&lt;/code>&#xA;     * object, which will have the specified number of characters. The &#xA;     * contents of the reader will be read and sent to the database.  &#xA;     * This method throws an &lt;code>SQLException&lt;/code> if the number of bytes&#xA;     * read and sent to the database is not equal to &lt;i>length&lt;/i>.&#xA;     * &lt;P>&#xA;     * When a very large Unicode value is input to a&#xA;     * &lt;code>LONGVARCHAR&lt;/code> parameter, it may be more practical&#xA;     * to send it via a &lt;code>Reader&lt;/code> object.&#xA;     * A JDBC technology-enabled driver will read the data from the &#xA;     * stream as needed until it reaches end-of-file. &#xA;     * The driver will do any necessary conversion from Unicode to the&#xA;     * database &lt;code>CHAR&lt;/code> format.&#xA;     * The byte format of the Unicode stream must be Java UTF-8, as&#xA;     * defined in the Java Virtual Machine Specification.&#xA;     *  &#xA;     * &lt;P>&lt;B>Note:&lt;/B> This stream object can be either a standard&#xA;     * Java stream object or your own subclass that implements the&#xA;     * standard interface.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.&#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;P>&#xA;     * Calls made to the method &lt;code>getParams&lt;/code> after&#xA;     * &lt;code>setCharacterStream&lt;/code>&#xA;     * has been called will return an array containing the parameter values that&#xA;     * have been set.  In that array, the element that represents the values&#xA;     * set with this method will itself be an array. The first element of that array &#xA;     * is the given &lt;code>java.io.Reader&lt;/code> object.&#xA;     * The second element is the value set for &lt;i>length&lt;/i>. &#xA;     * The parameter number is indicated by an element's position in the array &#xA;     * returned by the method &lt;code>getParams&lt;/code>,&#xA;     * with the first element being the value for the first placeholder parameter, the&#xA;     * second element being the value for the second placeholder parameter, and so on.&#xA;     * In other words, if the reader being set is the value for the second&#xA;     * placeholder parameter, the array containing it will be the second element in &#xA;     * the array returned by &lt;code>getParams&lt;/code>.&#xA;     * &lt;P>&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is element number &lt;i>parameterIndex&lt;/i> -1.&#xA;     *&#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param reader the &lt;code>Reader&lt;/code> object that contains the&#xA;     *        Unicode data&#xA;     * @param length the number of characters in the stream; lengths of 0 or &#xA;     *        less are undefined but will cause an invalid length exception to &#xA;     *        be thrown in the underlying JDBC driver.     &#xA;     * @throws SQLException if an error occurs, the parameter index is out of bounds,&#xA;     *        or when connected to a data source, the number of bytes the driver&#xA;     *        reads and sends to the database is not equal to the number of bytes&#xA;     *        specified in &lt;i>length&lt;/i>&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="charStream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsAfter/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@parameters.2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setCharacterStream"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.0/@variable"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="targetSqlType">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scale">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to an &lt;code>Object&lt;/code> in the Java&#xA;     * programming language. The second parameter must be an&#xA;     * &lt;code>Object&lt;/code> type.  For integral values, the &#xA;     * &lt;code>java.lang&lt;/code> equivalent&#xA;     * objects should be used. For example, use the class &lt;code>Integer&lt;/code>&#xA;     * for an &lt;code>int&lt;/code>.&#xA;     * &lt;P>&#xA;     * The driver converts this object to the specified&#xA;     * target SQL type before sending it to the database.&#xA;     * If the object has a custom mapping (is of a class implementing&#xA;     * &lt;code>SQLData&lt;/code>), the driver should call the method&#xA;     * &lt;code>SQLData.writeSQL&lt;/code> to write the object to the SQL &#xA;     * data stream. If, on the other hand, the object is of a class&#xA;     * implementing &lt;code>Ref&lt;/code>, &lt;code>Blob&lt;/code>, &lt;code>Clob&lt;/code>,&#xA;     * &lt;code>Struct&lt;/code>, or &lt;code>Array&lt;/code>,&#xA;     * the driver should pass it to the database as a value of the&#xA;     * corresponding SQL type.&#xA;     * &lt;P> &#xA;     * &lt;p>Note that this method may be used to pass database-&#xA;     * specific abstract data types.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.      &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;P>&#xA;     * Calls made to the method &lt;code>getParams&lt;/code> after this version of&#xA;     * &lt;code>setObject&lt;/code>&#xA;     * has been called will return an array containing the parameter values that&#xA;     * have been set.  In that array, the element that represents the values&#xA;     * set with this method will itself be an array. The first element of that array &#xA;     * is the given &lt;code>Object&lt;/code> instance, and the&#xA;     * second element is the value set for &lt;i>targetSqlType&lt;/i>.  The&#xA;     * third element is the value set for &lt;i>scale&lt;/i>, which the driver will&#xA;     * ignore if the type of the object being set is not &#xA;     * &lt;code>java.sql.Types.NUMERIC&lt;/code> or &lt;code>java.sql.Types.DECIMAL&lt;/code>.&#xA;     * The parameter number is indicated by an element's position in the array &#xA;     * returned by the method &lt;code>getParams&lt;/code>,&#xA;     * with the first element being the value for the first placeholder parameter, the&#xA;     * second element being the value for the second placeholder parameter, and so on.&#xA;     * In other words, if the object being set is the value for the second&#xA;     * placeholder parameter, the array containing it will be the second element in &#xA;     * the array returned by &lt;code>getParams&lt;/code>.&#xA;     *&lt;P>&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is element number &lt;i>parameterIndex&lt;/i> -1.&#xA;     *&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the &lt;code>Object&lt;/code> containing the input parameter value;&#xA;     *        must be an &lt;code>Object&lt;/code> type&#xA;     * @param targetSqlType the SQL type (as defined in &lt;code>java.sql.Types&lt;/code>)&#xA;     *        to be sent to the database. The &lt;code>scale&lt;/code> argument may &#xA;     *        further qualify this type. If a non-standard &lt;i>targetSqlType&lt;/i>&#xA;     *        is supplied, this method will not throw a &lt;code>SQLException&lt;/code>.&#xA;     *        This allows implicit support for non-standard SQL types.&#xA;     * @param scale for the types &lt;code>java.sql.Types.DECIMAL&lt;/code> and &#xA;     *        &lt;code>java.sql.Types.NUMERIC&lt;/code>, this is the number&#xA;     *        of digits after the decimal point.  For all other types, this &#xA;     *        value will be ignored.&#xA;     * @throws SQLException if an error occurs or the parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="obj">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsAfter/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@parameters.2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@parameters.3"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setObject"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@statements.0/@variable"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="targetSqlType">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the value of the designated parameter with the given &#xA;     * &lt;code>Object&lt;/code> value.&#xA;     * This method is like &lt;code>setObject(int parameterIndex, Object x, int&#xA;     * targetSqlType, int scale)&lt;/code> except that it assumes a scale of zero.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.      &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code>&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;P>&#xA;     * Calls made to the method &lt;code>getParams&lt;/code> after this version of&#xA;     * &lt;code>setObject&lt;/code>&#xA;     * has been called will return an array containing the parameter values that&#xA;     * have been set.  In that array, the element that represents the values&#xA;     * set with this method will itself be an array. The first element of that array &#xA;     * is the given &lt;code>Object&lt;/code> instance.&#xA;     * The second element is the value set for &lt;i>targetSqlType&lt;/i>.&#xA;     * The parameter number is indicated by an element's position in the array &#xA;     * returned by the method &lt;code>getParams&lt;/code>,&#xA;     * with the first element being the value for the first placeholder parameter, the&#xA;     * second element being the value for the second placeholder parameter, and so on.&#xA;     * In other words, if the object being set is the value for the second&#xA;     * placeholder parameter, the array containing it will be the second element in &#xA;     * the array returned by &lt;code>getParams&lt;/code>.&#xA;     * &lt;P>&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is element number &lt;i>parameterIndex&lt;/i> -1.     &#xA;     *&#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the &lt;code>Object&lt;/code> containing the input parameter value;&#xA;     *        must be an &lt;code>Object&lt;/code> type&#xA;     * @param targetSqlType the SQL type (as defined in &lt;code>java.sql.Types&lt;/code>)&#xA;     *        to be sent to the database. If a non-standard &lt;i>targetSqlType&lt;/i>&#xA;     *        is supplied, this method will not throw a &lt;code>SQLException&lt;/code>.&#xA;     *        This allows implicit support for non-standard SQL types.     &#xA;     * @throws SQLException if an error occurs or the parameter index &#xA;     *        is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="obj">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsAfter/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.91/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.91/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.91/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.91/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.91/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.91/@parameters.2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setObject"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.91/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.91/@statements.0/@variable"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to an &lt;code>Object&lt;/code> in the Java&#xA;     * programming language. The second parameter must be an &#xA;     * &lt;code>Object&lt;/code>&#xA;     * type.  For integral values, the &lt;code>java.lang&lt;/code> equivalent&#xA;     * objects should be used. For example, use the class &lt;code>Integer&lt;/code>&#xA;     * for an &lt;code>int&lt;/code>.&#xA;     * &lt;P>&#xA;     * The JDBC specification defines a standard mapping from&#xA;     * Java &lt;code>Object&lt;/code> types to SQL types.  The driver will&#xA;     * use this standard mapping to  convert the given object&#xA;     * to its corresponding SQL type before sending it to the database.&#xA;     * If the object has a custom mapping (is of a class implementing&#xA;     * &lt;code>SQLData&lt;/code>), the driver should call the method&#xA;     * &lt;code>SQLData.writeSQL&lt;/code> to write the object to the SQL &#xA;     * data stream.&#xA;     * &lt;P>&#xA;     * If, on the other hand, the object is of a class&#xA;     * implementing &lt;code>Ref&lt;/code>, &lt;code>Blob&lt;/code>, &lt;code>Clob&lt;/code>,&#xA;     * &lt;code>Struct&lt;/code>, or &lt;code>Array&lt;/code>,&#xA;     * the driver should pass it to the database as a value of the&#xA;     * corresponding SQL type.&#xA;     * &lt;P> &#xA;     * This method throws an exception if there &#xA;     * is an ambiguity, for example, if the object is of a class&#xA;     * implementing more than one interface.&#xA;     * &lt;P> &#xA;     * Note that this method may be used to pass database-specific&#xA;     * abstract data types.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.      &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;p>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;P>&#xA;     * After this method has been called, a call to the&#xA;     * method &lt;code>getParams&lt;/code> &#xA;     * will return an object array of the current command parameters, which will&#xA;     * include the &lt;code>Object&lt;/code> set for placeholder parameter number&#xA;     * &lt;code>parameterIndex&lt;/code>.&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is element number &lt;i>parameterIndex&lt;/i> -1.&#xA;     *&#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x the object containing the input parameter value&#xA;     * @throws SQLException if an error occurs the &#xA;     *                         parameter index is out of bounds, or there&#xA;     *                         is ambiguity in the implementation of the&#xA;     *                         object being set&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.92/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setObject"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.92/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.92/@parameters.1"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setRef">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ref">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/sql/Ref.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &lt;code>Ref&lt;/code> object in &#xA;     * the Java programming language.  The driver converts this to an SQL &#xA;     * &lt;code>REF&lt;/code> value when it sends it to the database. Internally, the &#xA;     * &lt;code>Ref&lt;/code> is represented as a &lt;code>SerialRef&lt;/code> to ensure &#xA;     * serializability.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.      &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;p>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;p>&#xA;     * After this method has been called, a call to the&#xA;     * method &lt;code>getParams&lt;/code> &#xA;     * will return an object array of the current command parameters, which will&#xA;     * include the &lt;code>Ref&lt;/code> object set for placeholder parameter number&#xA;     * &lt;code>parameterIndex&lt;/code>.&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is element number &lt;i>parameterIndex&lt;/i> -1.&#xA;     *&#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param ref a &lt;code>Ref&lt;/code> object representing an SQL &lt;code>REF&lt;/code> &#xA;     *         value; cannot be null&#xA;     * @throws SQLException if an error occurs; the parameter index is out of&#xA;     *         bounds or the &lt;code>Ref&lt;/code> object is &lt;code>null&lt;/code>; or&#xA;     *         the &lt;code>Ref&lt;/code> object returns a &lt;code>null&lt;/code> base type&#xA;     *         name.&#xA;     * @see #getParams&#xA;     * @see javax.sql.rowset.serial.SerialRef&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.93/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setRef"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.93/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="serial/SerialRef.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.93/@parameters.1"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setBlob">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/sql/Blob.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &lt;code>Blob&lt;/code> object in&#xA;     * the Java programming language.  The driver converts this to an SQL &#xA;     * &lt;code>BLOB&lt;/code> value when it sends it to the database. Internally,&#xA;     * the &lt;code>Blob&lt;/code> is represented as a &lt;code>SerialBlob&lt;/code>&#xA;     * to ensure serializability.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.     &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;p>&#xA;     * After this method has been called, a call to the&#xA;     * method &lt;code>getParams&lt;/code> &#xA;     * will return an object array of the current command parameters, which will&#xA;     * include the &lt;code>Blob&lt;/code> object set for placeholder parameter number&#xA;     * &lt;code>parameterIndex&lt;/code>.&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is element number &lt;i>parameterIndex&lt;/i> -1.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x a &lt;code>Blob&lt;/code> object representing an SQL&#xA;     *          &lt;code>BLOB&lt;/code> value&#xA;     * @throws SQLException if an error occurs or the&#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     * @see javax.sql.rowset.serial.SerialBlob&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setBlob"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="serial/SerialBlob.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@parameters.1"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setClob">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/sql/Clob.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &lt;code>Clob&lt;/code> object in&#xA;     * the Java programming language.  The driver converts this to an SQL &#xA;     * &lt;code>CLOB&lt;/code> value when it sends it to the database. Internally, the &#xA;     * &lt;code>Clob&lt;/code> is represented as a &lt;code>SerialClob&lt;/code> to ensure &#xA;     * serializability.     &#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.      &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;p>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;p>&#xA;     * After this method has been called, a call to the&#xA;     * method &lt;code>getParams&lt;/code> &#xA;     * will return an object array of the current command parameters, which will&#xA;     * include the &lt;code>Clob&lt;/code> object set for placeholder parameter number&#xA;     * &lt;code>parameterIndex&lt;/code>.&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is element number &lt;i>parameterIndex&lt;/i> -1.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *     in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *     The first parameter is 1, the second is 2, and so on; must be&#xA;     *     &lt;code>1&lt;/code> or greater&#xA;     * @param x a &lt;code>Clob&lt;/code> object representing an SQL&#xA;     *     &lt;code>CLOB&lt;/code> value; cannot be null&#xA;     * @throws SQLException if an error occurs; the parameter index is out of&#xA;     *     bounds or the &lt;code>Clob&lt;/code> is null&#xA;     * @see #getParams&#xA;     * @see javax.sql.rowset.serial.SerialBlob     &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.95/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setClob"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.95/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="serial/SerialClob.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.95/@parameters.1"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setArray">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="array">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/sql/Array.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to an &lt;code>Array&lt;/code> object in the &#xA;     * Java programming language.  The driver converts this to an SQL &#xA;     * &lt;code>ARRAY&lt;/code> value when it sends it to the database. Internally,&#xA;     * the &lt;code>Array&lt;/code> is represented as a &lt;code>SerialArray&lt;/code>&#xA;     * to ensure serializability.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.      &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * Note: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;p>&#xA;     * After this method has been called, a call to the&#xA;     * method &lt;code>getParams&lt;/code> &#xA;     * will return an object array of the current command parameters, which will&#xA;     * include the &lt;code>Array&lt;/code> object set for placeholder parameter number&#xA;     * &lt;code>parameterIndex&lt;/code>.&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is element number &lt;i>parameterIndex&lt;/i> -1.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param array an &lt;code>Array&lt;/code> object representing an SQL &#xA;     *        &lt;code>ARRAY&lt;/code> value; cannot be null. The &lt;code>Array&lt;/code> object&#xA;     *        passed to this method must return a non-null Object for all &#xA;     *        &lt;code>getArray()&lt;/code> method calls. &#xA;     * @throws SQLException if an error occurs; the parameter index is out of &#xA;     *        bounds or the &lt;code>ARRAY&lt;/code> is null&#xA;     * @see #getParams&#xA;     * @see javax.sql.rowset.serial.SerialArray&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setArray"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="serial/SerialArray.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@parameters.1"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setDate">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/sql/Date.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &lt;code>java.sql.Date&lt;/code> &#xA;     * object.  &#xA;     * When the DBMS does not store time zone information, the driver will use&#xA;     * the given &lt;code>Calendar&lt;/code> object to construct the SQL &lt;code>DATE&lt;/code>&#xA;     * value to send to the database. With a&#xA;     * &lt;code>Calendar&lt;/code> object, the driver can calculate the date&#xA;     * taking into account a custom time zone.  If no &lt;code>Calendar&lt;/code>&#xA;     * object is specified, the driver uses the time zone of the Virtual Machine&#xA;     * that is running the application.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.&#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;P>&#xA;     * Calls made to the method &lt;code>getParams&lt;/code> after this version of&#xA;     * &lt;code>setDate&lt;/code>&#xA;     * has been called will return an array containing the parameter values that&#xA;     * have been set.  In that array, the element that represents the values&#xA;     * set with this method will itself be an array. The first element of that array &#xA;     * is the given &lt;code>java.sql.Date&lt;/code> object.&#xA;     * The second element is the value set for &lt;i>cal&lt;/i>. &#xA;     * The parameter number is indicated by an element's position in the array &#xA;     * returned by the method &lt;code>getParams&lt;/code>,&#xA;     * with the first element being the value for the first placeholder parameter, the&#xA;     * second element being the value for the second placeholder parameter, and so on.&#xA;     * In other words, if the date being set is the value for the second&#xA;     * placeholder parameter, the array containing it will be the second element in &#xA;     * the array returned by &lt;code>getParams&lt;/code>.&#xA;     * &lt;P>&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is &lt;i>parameterIndex&lt;/i> -1.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x a &lt;code>java.sql.Date&lt;/code> object representing an SQL&#xA;     *        &lt;code>DATE&lt;/code> value&#xA;     * @param cal a &lt;code>java.util.Calendar&lt;/code> object to use when&#xA;     *        when constructing the date&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="date">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsAfter/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setDate"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@statements.0/@variable"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setTime">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/sql/Time.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &lt;code>java.sql.Time&lt;/code> &#xA;     * object.  The driver converts this&#xA;     * to an SQL &lt;code>TIME&lt;/code> value when it sends it to the database.&#xA;     * &lt;P>&#xA;     * When the DBMS does not store time zone information, the driver will use&#xA;     * the given &lt;code>Calendar&lt;/code> object to construct the SQL &lt;code>TIME&lt;/code>&#xA;     * value to send to the database. With a&#xA;     * &lt;code>Calendar&lt;/code> object, the driver can calculate the date&#xA;     * taking into account a custom time zone.  If no &lt;code>Calendar&lt;/code>&#xA;     * object is specified, the driver uses the time zone of the Virtual Machine&#xA;     * that is running the application.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.      &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;P>&#xA;     * Calls made to the method &lt;code>getParams&lt;/code> after this version of&#xA;     * &lt;code>setTime&lt;/code>&#xA;     * has been called will return an array containing the parameter values that&#xA;     * have been set.  In that array, the element that represents the values&#xA;     * set with this method will itself be an array. The first element of that array &#xA;     * is the given &lt;code>java.sql.Time&lt;/code> object.&#xA;     * The second element is the value set for &lt;i>cal&lt;/i>.&#xA;     * The parameter number is indicated by an element's position in the array &#xA;     * returned by the method &lt;code>getParams&lt;/code>,&#xA;     * with the first element being the value for the first placeholder parameter, the&#xA;     * second element being the value for the second placeholder parameter, and so on.&#xA;     * In other words, if the time being set is the value for the second&#xA;     * placeholder parameter, the array containing it will be the second element in &#xA;     * the array returned by &lt;code>getParams&lt;/code>.&#xA;     * &lt;P>&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is &lt;i>parameterIndex&lt;/i> -1.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x a &lt;code>java.sql.Time&lt;/code> object &#xA;     * @param cal the &lt;code>java.util.Calendar&lt;/code> object the driver can use to&#xA;     *         construct the time&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="time">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsAfter/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setTime"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@statements.0/@variable"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setTimestamp">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parameterIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/sql/Timestamp.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the designated parameter to the given &#xA;     * &lt;code>java.sql.Timestamp&lt;/code> object.  The driver converts this&#xA;     * to an SQL &lt;code>TIMESTAMP&lt;/code> value when it sends it to the database.&#xA;     * &lt;P>&#xA;     * When the DBMS does not store time zone information, the driver will use&#xA;     * the given &lt;code>Calendar&lt;/code> object to construct the SQL &lt;code>TIMESTAMP&lt;/code>&#xA;     * value to send to the database. With a&#xA;     * &lt;code>Calendar&lt;/code> object, the driver can calculate the timestamp&#xA;     * taking into account a custom time zone.  If no &lt;code>Calendar&lt;/code>&#xA;     * object is specified, the driver uses the time zone of the Virtual Machine&#xA;     * that is running the application.&#xA;     * &lt;P>&#xA;     * The parameter value set by this method is stored internally and&#xA;     * will be supplied as the appropriate parameter in this &lt;code>RowSet&lt;/code>&#xA;     * object's command when the method &lt;code>execute&lt;/code> is called.      &#xA;     * Methods such as &lt;code>execute&lt;/code> and &lt;code>populate&lt;/code> must be &#xA;     * provided in any class that extends this class and implements one or &#xA;     * more of the standard JSR-114 &lt;code>RowSet&lt;/code> interfaces.&#xA;     * &lt;P>&#xA;     * NOTE: &lt;code>JdbcRowSet&lt;/code> does not require the &lt;code>populate&lt;/code> method&#xA;     * as it is undefined in this class.&#xA;     * &lt;P>&#xA;     * Calls made to the method &lt;code>getParams&lt;/code> after this version of&#xA;     * &lt;code>setTimestamp&lt;/code>&#xA;     * has been called will return an array containing the parameter values that&#xA;     * have been set.  In that array, the element that represents the values&#xA;     * set with this method will itself be an array. The first element of that array &#xA;     * is the given &lt;code>java.sql.Timestamp&lt;/code> object.&#xA;     * The second element is the value set for &lt;i>cal&lt;/i>.&#xA;     * The parameter number is indicated by an element's position in the array &#xA;     * returned by the method &lt;code>getParams&lt;/code>,&#xA;     * with the first element being the value for the first placeholder parameter, the&#xA;     * second element being the value for the second placeholder parameter, and so on.&#xA;     * In other words, if the timestamp being set is the value for the second&#xA;     * placeholder parameter, the array containing it will be the second element in &#xA;     * the array returned by &lt;code>getParams&lt;/code>.&#xA;     * &lt;P>&#xA;     * Note that because the numbering of elements in an array starts at zero,&#xA;     * the array element that corresponds to placeholder parameter number&#xA;     * &lt;i>parameterIndex&lt;/i> is &lt;i>parameterIndex&lt;/i> -1.&#xA;     *   &#xA;     * @param parameterIndex the ordinal number of the placeholder parameter &#xA;     *        in this &lt;code>RowSet&lt;/code> object's command that is to be set. &#xA;     *        The first parameter is 1, the second is 2, and so on; must be&#xA;     *        &lt;code>1&lt;/code> or greater&#xA;     * @param x a &lt;code>java.sql.Timestamp&lt;/code> object &#xA;     * @param cal the &lt;code>java.util.Calendar&lt;/code> object the driver can use to&#xA;     *         construct the timestamp&#xA;     * @throws SQLException if an error occurs or the &#xA;     *                         parameter index is out of bounds&#xA;     * @see #getParams&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="timestamp">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsAfter/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Set initParams() before setTimestamp"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@statements.0/@variable"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="clearParameters">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Clears all of the current parameter values in this &lt;code>RowSet&lt;/code>&#xA;     * object's internal representation of the parameters to be set in&#xA;     * this &lt;code>RowSet&lt;/code> object's command when it is executed.&#xA;     * &lt;P>&#xA;     * In general, parameter values remain in force for repeated use in&#xA;     * this &lt;code>RowSet&lt;/code> object's command. Setting a parameter value with the&#xA;     * setter methods automatically clears the value of the&#xA;     * designated parameter and replaces it with the new specified value.&#xA;     * &lt;P>&#xA;     * This method is called internally by the &lt;code>setCommand&lt;/code>&#xA;     * method to clear all of the parameters set for the previous command.&#xA;     * &lt;P>&#xA;     * Furthermore, this method differs from the &lt;code>initParams&lt;/code>&#xA;     * method in that it maintains the schema of the &lt;code>RowSet&lt;/code> object.&#xA;     *&#xA;     * @throws SQLException if an error occurs clearing the parameters&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.30"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getParams">
      <comments>//end if</comments>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves an array containing the parameter values (both Objects and&#xA;     * primitives) that have been set for this&#xA;     * &lt;code>RowSet&lt;/code> object's command and throws an &lt;code>SQLException&lt;/code> object&#xA;     * if all parameters have not been set.   Before the command is sent to the&#xA;     * DBMS to be executed, these parameters will be substituted&#xA;     * for placeholder parameters in the  &lt;code>PreparedStatement&lt;/code> object &#xA;     * that is the command for a &lt;code>RowSet&lt;/code> implementation extending&#xA;     * the &lt;code>BaseRowSet&lt;/code> class.&#xA;     * &lt;P>&#xA;     * Each element in the array that is returned is an &lt;code>Object&lt;/code> instance&#xA;     * that contains the values of the parameters supplied to a setter method.&#xA;     * The order of the elements is determined by the value supplied for&#xA;     * &lt;i>parameterIndex&lt;/i>.  If the setter method takes only the parameter index&#xA;     * and the value to be set (possibly null), the array element will contain the value to be set&#xA;     * (which will be expressed as an &lt;code>Object&lt;/code>).  If there are additional&#xA;     * parameters, the array element will itself be an array containing the value to be set&#xA;     * plus any additional parameter values supplied to the setter method. If the method&#xA;     * sets a stream, the array element includes the type of stream being supplied to the&#xA;     * method. These additional parameters are for the use of the driver or the DBMS and may or&#xA;     * may not be used.&#xA;     * &lt;P>&#xA;     * NOTE: Stored parameter values of types &lt;code>Array&lt;/code>, &lt;code>Blob&lt;/code>,&#xA;     * &lt;code>Clob&lt;/code> and &lt;code>Ref&lt;/code> are returned as &lt;code>SerialArray&lt;/code>, &#xA;     * &lt;code>SerialBlob&lt;/code>, &lt;code>SerialClob&lt;/code> and &lt;code>SerialRef&lt;/code>&#xA;     * respectively.&#xA;     *&#xA;     * @return an array of &lt;code>Object&lt;/code> instances that includes the &#xA;     *         parameter values that may be set in this &lt;code>RowSet&lt;/code> object's&#xA;     *         command; an empty array if no parameters have been set&#xA;     * @throws SQLException if an error occurs retrieveing the object array of&#xA;     *         parameters of this &lt;code>RowSet&lt;/code> object or if not all parameters have&#xA;     *         been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.27"/>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="paramsArray">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.18"/>
                  </next>
                </sizes>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@statements.0/@statement/@statements.1/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="paramsArray">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// The parameters may be set in random order</comments>
                  <comments>// but all must be set, check to verify all</comments>
                  <comments>// have been set till the last parameter</comments>
                  <comments>// else throw exception.</comments>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.18"/>
                  </next>
                </sizes>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <comments>//end if</comments>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@statements.0/@elseStatement/@statements.0/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@statements.0/@elseStatement/@statements.1/@init"/>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.25"/>
                      <arguments xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@statements.0/@elseStatement/@statements.1/@init"/>
                      </arguments>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Throw">
                    <throwable xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:StringReference" value="missing parameter: "/>
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@statements.0/@elseStatement/@statements.1/@init"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                          </expression>
                        </children>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </arguments>
                    </throwable>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@statements.0/@elseStatement/@statements.0/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@statements.0/@elseStatement/@statements.1/@init"/>
                    </arraySelectors>
                  </children>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@statements.0/@elseStatement/@statements.1/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.18"/>
                </next>
              </children>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@statements.0/@elseStatement/@statements.1/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
          <statements xsi:type="statements:Return">
            <comments>//end for</comments>
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@statements.0/@elseStatement/@statements.0/@variable"/>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="4886719666485113312"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>//end getParams</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An abstract class providing a &lt;code>RowSet&lt;/code> object with its basic functionality. &#xA; * The basic functions include having properties and sending event notifications,&#xA; * which all JavaBeans&lt;sup>&lt;font size=-2>TM&lt;/font>&lt;/sup> components must implement.&#xA; * &lt;P>&#xA; * &lt;h3>1.0 Overview&lt;/h3>&#xA; * The &lt;code>BaseRowSet&lt;/code> class provides the core functionality &#xA; * for all &lt;code>RowSet&lt;/code> implementations,&#xA; * and all standard implementations &lt;b>may&lt;/b> use this class in combination with &#xA; * one or more &lt;code>RowSet&lt;/code> interfaces in order to provide a standard&#xA; * vendor-specific implementation.  To clarify, all implementations must implement&#xA; * at least one of the &lt;code>RowSet&lt;/code> interfaces (&lt;code>JdbcRowSet&lt;/code>,&#xA; * &lt;code>CachedRowSet&lt;/code>, &lt;code>JoinRowSet&lt;/code>, &lt;code>FilteredRowSet&lt;/code>,&#xA; * or &lt;code>WebRowSet&lt;/code>). This means that any implementation that extends&#xA; * the &lt;code>BaseRowSet&lt;/code> class must also implement one of the &lt;code>RowSet&lt;/code>&#xA; * interfaces.&#xA; * &lt;p>&#xA; * The &lt;code>BaseRowSet&lt;/code> class provides the following:&#xA; * &lt;p>&#xA; * &lt;UL>&#xA; * &lt;LI>&lt;b>Properties&lt;/b>&#xA; *     &lt;ul>&#xA; *     &lt;li>Fields for storing current properties&#xA; *     &lt;li>Methods for getting and setting properties&#xA; *     &lt;/ul>&#xA; *  &lt;p>&#xA; * &lt;LI>&lt;b>Event notification&lt;/b>&#xA; * &lt;P>&#xA; * &lt;LI>&lt;b>A complete set of setter methods&lt;/b> for setting the parameters in a&#xA; *      &lt;code>RowSet&lt;/code> object's command&#xA; *  &lt;p>&#xA; * &lt;LI> &lt;b>Streams&lt;/b>&#xA; *  &lt;ul>&#xA; *  &lt;li>Fields for storing stream instances&#xA; *  &lt;li>Constants for indicating the type of a stream&#xA; *  &lt;/ul>&#xA; *  &lt;p>&#xA; * &lt;/UL>&#xA; * &#xA; * &lt;h3>2.0 Setting Properties&lt;/h3>&#xA; * All rowsets maintain a set of properties, which will usually be set using&#xA; * a tool.  The number and kinds of properties a rowset has will vary,&#xA; * depending on what the &lt;code>RowSet&lt;/code> implementation does and how it gets &#xA; * its data.  For example,&#xA; * rowsets that get their data from a &lt;code>ResultSet&lt;/code> object need to&#xA; * set the properties that are required for making a database connection.&#xA; * If a &lt;code>RowSet&lt;/code> object uses the &lt;code>DriverManager&lt;/code> facility to make a &#xA; * connection, it needs to set a property for the JDBC URL that identifies the&#xA; * appropriate driver, and it needs to set the properties that give the &#xA; * user name and password.&#xA; * If, on the other hand, the rowset uses a &lt;code>DataSource&lt;/code> object&#xA; * to make the connection, which is the preferred method, it does not need to&#xA; * set the property for the JDBC URL.  Instead, it needs to set the property&#xA; * for the logical name of the data source along with the properties for &#xA; * the user name and password.&#xA; * &lt;P>&#xA; * NOTE:  In order to use a &lt;code>DataSource&lt;/code> object for making a&#xA; * connection, the &lt;code>DataSource&lt;/code> object must have been registered&#xA; * with a naming service that uses the Java Naming and Directory&#xA; * Interface&lt;sup>&lt;font size=-2>TM&lt;/font>&lt;/sup> (JNDI) API.  This registration&#xA; * is usually done by a person acting in the capacity of a system administrator.&#xA; * &lt;P>&#xA; * &lt;h3>3.0 Setting the Command and Its Parameters&lt;/h3>&#xA; * When a rowset gets its data from a relational database, it executes a command (a query)&#xA; * that produces a &lt;code>ResultSet&lt;/code> object.  This query is the command that is set&#xA; * for the &lt;code>RowSet&lt;/code> object's command property.  The rowset populates itself with data by reading the &#xA; * data from the &lt;code>ResultSet&lt;/code> object into itself. If the query&#xA; * contains placeholders for values to be set, the &lt;code>BaseRowSet&lt;/code> setter methods&#xA; * are used to set these values. All setter methods allow these values to be set&#xA; * to &lt;code>null&lt;/code> if required.&#xA; * &lt;P>&#xA; * The following code fragment illustrates how the &#xA; * &lt;code>CachedRowSet&lt;/code>&lt;sup>&lt;font size=-2>TM&lt;/font>&lt;/sup>&#xA; * object &lt;code>crs&lt;/code> might have its command property set.  Note that if a&#xA; * tool is used to set properties, this is the code that the tool would use.&#xA; * &lt;PRE>&#xA; *    crs.setCommand(&quot;SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS&quot; +&#xA; *                   &quot;WHERE CREDIT_LIMIT > ? AND REGION = ?&quot;);&#xA; * &lt;/PRE>&#xA; * &lt;P>&#xA; * In this example, the values for &lt;code>CREDIT_LIMIT&lt;/code> and&#xA; * &lt;code>REGION&lt;/code> are placeholder parameters, which are indicated with a&#xA; * question mark (?).  The first question mark is placeholder parameter number&#xA; * &lt;code>1&lt;/code>, the second question mark is placeholder parameter number&#xA; * &lt;code>2&lt;/code>, and so on.  Any placeholder parameters must be set with&#xA; * values before the query can be executed. To set these&#xA; * placeholder parameters, the &lt;code>BaseRowSet&lt;/code> class provides a set of setter&#xA; * methods, similar to those provided by the &lt;code>PreparedStatement&lt;/code>&#xA; * interface, for setting values of each data type.  A &lt;code>RowSet&lt;/code> object stores the&#xA; * parameter values internally, and its &lt;code>execute&lt;/code> method uses them internally&#xA; * to set values for the placeholder parameters &#xA; * before it sends the command to the DBMS to be executed.&#xA; * &lt;P>&#xA; * The following code fragment demonstrates &#xA; * setting the two parameters in the query from the previous example.&#xA; * &lt;PRE>&#xA; *    crs.setInt(1, 5000);&#xA; *    crs.setString(2, &quot;West&quot;);&#xA; * &lt;/PRE>&#xA; * If the &lt;code>execute&lt;/code> method is called at this point, the query&#xA; * sent to the DBMS will be:&#xA; * &lt;PRE>&#xA; *    &quot;SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS&quot; +&#xA; *                   &quot;WHERE CREDIT_LIMIT > 5000 AND REGION = 'West'&quot;&#xA; * &lt;/PRE>&#xA; * NOTE: Setting &lt;code>Array&lt;/code>, &lt;code>Clob&lt;/code>, &lt;code>Blob&lt;/code> and &#xA; * &lt;code>Ref&lt;/code> objects as a command parameter, stores these values as&#xA; * &lt;code>SerialArray&lt;/code>, &lt;code>SerialClob&lt;/code>, &lt;code>SerialBlob&lt;/code>&#xA; * and &lt;code>SerialRef&lt;/code> objects respectively.&#xA; *     &#xA; * &lt;h3>4.0 Handling of Parameters Behind the Scenes&lt;/h3>&#xA; *&#xA; * NOTE: The &lt;code>BaseRowSet&lt;/code> class provides two kinds of setter methods,&#xA; * those that set properties and those that set placeholder parameters. The setter&#xA; * methods discussed in this section are those that set placeholder parameters.&#xA; * &lt;P>&#xA; * The placeholder parameters set with the &lt;code>BaseRowSet&lt;/code> setter methods&#xA; * are stored as objects in an internal &lt;code>Hashtable&lt;/code> object. &#xA; * Primitives are stored as their &lt;code>Object&lt;/code> type. For example, &lt;code>byte&lt;/code>&#xA; * is stored as &lt;code>Byte&lt;/code> object, and &lt;code>int&lt;/code> is stored as &#xA; * an &lt;code>Integer&lt;/code> object.&#xA; * When the method &lt;code>execute&lt;/code> is called, the values in the &#xA; * &lt;code>Hashtable&lt;/code> object are substituted for the appropriate placeholder &#xA; * parameters in the command.&#xA; * &lt;P)>&#xA; * A call to the method &lt;code>getParams&lt;/code> returns the values stored in the&#xA; * &lt;code>Hashtable&lt;/code> object as an array of &lt;code>Object&lt;/code> instances.&#xA; * An element in this array may be a simple &lt;code>Object&lt;/code> instance or an &#xA; * array (which is a type of &lt;code>Object&lt;/code>). The particular setter method used&#xA; * determines whether an element in this array is an &lt;code>Object&lt;/code> or an array.&#xA; * &lt;P>&#xA; * The majority of methods for setting placeholder parameters take two parameters,&#xA; *  with the first parameter &#xA; * indicating which placeholder parameter is to be set, and the second parameter&#xA; * giving the value to be set.  Methods such as &lt;code>getInt&lt;/code>, &#xA; * &lt;code>getString&lt;/code>, &lt;code>getBoolean&lt;/code>, and &lt;code>getLong&lt;/code> fall into &#xA; * this category.  After these methods have been called, a call to the method&#xA; * &lt;code>getParams&lt;/code> will return an array with the values that have been set. Each&#xA; * element in the array is an &lt;code>Object&lt;/code> instance representing the &#xA; * values that have been set. The order of these values in the array is determined by the&#xA; * &lt;code>int&lt;/code> (the first parameter) passed to the setter method. The values in the&#xA; * array are the values (the second parameter) passed to the setter method.&#xA; * In other words, the first element in the array is the value&#xA; * to be set for the first placeholder parameter in the &lt;code>RowSet&lt;/code> object's&#xA; * command. The second element is the value to&#xA; * be set for the second placeholder parameter, and so on. &#xA; * &lt;P>&#xA; * Several setter methods send the driver and DBMS information beyond the value to be set.&#xA; * When the method &lt;code>getParams&lt;/code> is called after one of these setter methods has&#xA; * been used, the elements in the array will themselves be arrays to accommodate the &#xA; * additional information. In this category, the method &lt;code>setNull&lt;/code> is a special case&#xA; * because one version takes only&#xA; * two parameters (&lt;code>setNull(int parameterIndex, int SqlType)&lt;/code>). Nevertheless,&#xA; * it requires&#xA; * an array to contain the information that will be passed to the driver and DBMS.  The first&#xA; * element in this array is the value to be set, which is &lt;code>null&lt;/code>, and the&#xA; * second element is the &lt;code>int&lt;/code> supplied for &lt;i>sqlType&lt;/i>, which &#xA; * indicates the type of SQL value that is being set to &lt;code>null&lt;/code>. This information&#xA; * is needed by some DBMSs and is therefore required in order to ensure that applications&#xA; * are portable.&#xA; * The other version is intended to be used when the value to be set to &lt;code>null&lt;/code>&#xA; * is a user-defined type. It takes three parameters &#xA; * (&lt;code>setNull(int parameterIndex, int sqlType, String typeName)&lt;/code>) and also&#xA; * requires an array to contain the information to be passed to the driver and DBMS.&#xA; * The first two elements in this array are the same as for the first version of&#xA; * &lt;code>setNull&lt;/code>.  The third element, &lt;i>typeName&lt;/i>, gives the SQL name of&#xA; * the user-defined type. As is true with the other setter methods, the number of the&#xA; * placeholder parameter to be set is indicated by an element's position in the array&#xA; * returned by &lt;code>getParams&lt;/code>.  So, for example, if the parameter&#xA; * supplied to &lt;code>setNull&lt;/code> is &lt;code>2&lt;/code>, the second element in the array &#xA; * returned by &lt;code>getParams&lt;/code> will be an array of two or three elements.&#xA; * &lt;P>&#xA; * Some methods, such as &lt;code>setObject&lt;/code> and &lt;code>setDate&lt;/code> have versions&#xA; * that take more than two parameters, with the extra parameters giving information &#xA; * to the driver or the DBMS. For example, the methods &lt;code>setDate&lt;/code>,&#xA; * &lt;code>setTime&lt;/code>, and &lt;code>setTimestamp&lt;/code> can take a &lt;code>Calendar&lt;/code>&#xA; * object as their third parameter.  If the DBMS does not store time zone information,&#xA; * the drivern uses the &lt;code>Calendar&lt;/code> object to construct the &lt;code>Date&lt;/code>,&#xA; * &lt;code>Time&lt;/code>, or &lt;code>Timestamp&lt;/code> object being set. As is true with other&#xA; * methods that provide additional information, the element in the array returned &#xA; * by &lt;code>getParams&lt;/code> is an array instead of a simple &lt;code>Object&lt;/code> instance.&#xA; * &lt;P>&#xA; * The methods &lt;code>setAsciiStream&lt;/code>, &lt;code>setBinaryStream&lt;/code>,&#xA; * &lt;code>setCharacterStream&lt;/code>, and &lt;code>setUnicodeStream&lt;/code> (which is &#xA; * deprecated, so applications should use &lt;code>getCharacterStream&lt;/code> instead)&#xA; * take three parameters, so for them, the element in the array returned by&#xA; * &lt;code>getParams&lt;/code> is also an array.  What is different about these setter&#xA; * methods is that in addition to the information provided by parameters, the array contains&#xA; * one of the &lt;code>BaseRowSet&lt;/code> constants indicating the type of stream being set. &#xA;* &lt;p>&#xA;* NOTE: The method &lt;code>getParams&lt;/code> is called internally by &#xA;* &lt;code>RowSet&lt;/code> implementations extending this class; it is not normally called by an &#xA;* application programmer directly.&#xA;* &#xA;* &lt;h3>5.0 Event Notification&lt;/h3>&#xA;* The &lt;code>BaseRowSet&lt;/code> class provides the event notification&#xA;* mechanism for rowsets.  It contains the field &#xA;* &lt;code>listeners&lt;/code>, methods for adding and removing listeners, and &#xA;* methods for notifying listeners of changes.&#xA;* &lt;P>&#xA;* A listener is an object that has implemented the &lt;code>RowSetListener&lt;/code> interface.&#xA;* If it has been added to a &lt;code>RowSet&lt;/code> object's list of listeners, it will be notified&#xA;*  when an event occurs on that &lt;code>RowSet&lt;/code> object.  Each listener's &#xA;* implementation of the &lt;code>RowSetListener&lt;/code> methods defines what that object&#xA;* will do when it is notified that an event has occurred. &#xA;* &lt;P>&#xA;* There are three possible events for a &lt;code>RowSet&lt;/code> object:&#xA;* &lt;OL>&#xA;* &lt;LI>the cursor moves&#xA;* &lt;LI>an individual row is changed (updated, deleted, or inserted)&#xA;* &lt;LI>the contents of the entire &lt;code>RowSet&lt;/code> object  are changed&#xA;* &lt;/OL>&#xA;* &lt;P>&#xA;* The &lt;code>BaseRowSet&lt;/code> method used for the notification indicates the&#xA;* type of event that has occurred.  For example, the method &#xA;* &lt;code>notifyRowChanged&lt;/code> indicates that a row has been updated, &#xA;* deleted, or inserted.  Each of the notification methods creates a &#xA;* &lt;code>RowSetEvent&lt;/code> object, which is supplied to the listener in order to &#xA;* identify the &lt;code>RowSet&lt;/code> object on which the event occurred. &#xA;* What the listener does with this information, which may be nothing, depends on how it was &#xA;* implemented.  &#xA;* &lt;p>&#xA;* &lt;h3>6.0 Default Behavior&lt;/h3>&#xA;* A default &lt;code>BaseRowSet&lt;/code> object is initialized with many starting values.&#xA;* &#xA;* The following is true of a default &lt;code>RowSet&lt;/code> instance that extends&#xA;* the &lt;code>BaseRowSet&lt;/code> class:&#xA;* &lt;UL>&#xA;*   &lt;LI>Has a scrollable cursor and does not show changes&#xA;*       made by others.&#xA;*   &lt;LI>Is updatable.&#xA;*   &lt;LI>Does not show rows that have been deleted.&#xA;*   &lt;LI>Has no time limit for how long a driver may take to&#xA;*       execute the &lt;code>RowSet&lt;/code> object's command.&#xA;*   &lt;LI>Has no limit for the number of rows it may contain.&#xA;*   &lt;LI>Has no limit for the number of bytes a column may contain. NOTE: This &#xA;*   limit applies only to columns that hold values of the&#xA;*   following types:  &lt;code>BINARY&lt;/code>, &lt;code>VARBINARY&lt;/code>,&#xA;*   &lt;code>LONGVARBINARY&lt;/code>, &lt;code>CHAR&lt;/code>, &lt;code>VARCHAR&lt;/code>, &#xA;*   and &lt;code>LONGVARCHAR&lt;/code>.&#xA;*   &lt;LI>Will not see uncommitted data (make &quot;dirty&quot; reads).&#xA;*   &lt;LI>Has escape processing turned on.&#xA;*   &lt;LI>Has its connection's type map set to &lt;code>null&lt;/code>.&#xA;*   &lt;LI>Has an empty &lt;code>Vector&lt;/code> object for storing the values set&#xA;*       for the placeholder parameters in the &lt;code>RowSet&lt;/code> object's command.&#xA;* &lt;/UL>&#xA;* &lt;p>&#xA;* If other values are desired, an application must set the property values&#xA;* explicitly. For example, the following line of code sets the maximum number &#xA;* of rows for the &lt;code>CachedRowSet&lt;/code> object &lt;i>crs&lt;/i> to 500.&#xA;* &lt;PRE>&#xA;*    crs.setMaxRows(500);&#xA;* &lt;/PRE>&#xA;* Methods implemented in extensions of this &lt;code>BaseRowSet&lt;/code> class &lt;b>must&lt;/b> throw an &#xA;* &lt;code>SQLException&lt;/code> object for any violation of the defined assertions.  Also, if the &#xA;* extending class overrides and reimplements any &lt;code>BaseRowSet&lt;/code> method and encounters &#xA;* connectivity or underlying data source issues, that method &lt;b>may&lt;/b> in addition throw an &#xA;* &lt;code>SQLException&lt;/code> object for that reason.&#xA;*/</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../java/lang/Cloneable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
