<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="SyncProviderException.java">
  <comments>/*&#xA; * @(#)SyncProviderException.java&#x9;1.7 04/05/29&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sql</namespaces>
  <namespaces>rowset</namespaces>
  <namespaces>spi</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>sql</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>sql</namespaces>
    <namespaces>rowset</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="SyncProviderException">
    <members xsi:type="members:Field" name="syncResolver">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="SyncResolver.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The instance of &lt;code>javax.sql.rowset.spi.SyncResolver&lt;/code> that&#xA;     * this &lt;code>SyncProviderException&lt;/code> object will return when its&#xA;     * &lt;code>getSyncResolver&lt;/code> method is called.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="SyncProviderException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new &lt;code>SyncProviderException&lt;/code> object without a detail message.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="SyncProviderException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="msg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a &lt;code>SyncProviderException&lt;/code> object with the specified &#xA;     * detail message.&#xA;     *&#xA;     * @param msg the detail message&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="SyncProviderException">
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Cannot instantiate a SyncProviderException "/>
                <children xsi:type="references:StringReference" value="with a null SyncResolver object"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="syncResolver">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SyncResolver.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a &lt;code>SyncProviderException&lt;/code> object with the specified&#xA;     * &lt;code>SyncResolver&lt;/code> instance.&#xA;     * &#xA;     * @param syncResolver the &lt;code>SyncResolver&lt;/code> instance used to&#xA;     *     to process the synchronization conflicts&#xA;     * @throws IllegalArgumentException if the &lt;code>SyncResolver&lt;/code> object&#xA;     *     is &lt;code>null&lt;/code>.  &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getSyncResolver">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="SyncResolver.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>SyncResolver&lt;/code> object that has been set for&#xA;     * this &lt;code>SyncProviderException&lt;/code> object, or&#xA;     * if none has been set, an instance of the default &lt;code>SyncResolver&lt;/code>&#xA;     * implementation included in the reference implementation.&#xA;     * &lt;P>&#xA;     * If a &lt;code>SyncProviderException&lt;/code> object is thrown, an application&#xA;     * may use this method to generate a &lt;code>SyncResolver&lt;/code> object &#xA;     * with which to resolve the conflict or conflicts that caused the&#xA;     * exception to be thrown. &#xA;     *&#xA;     * @return the &lt;code>SyncResolver&lt;/code> object set for this&#xA;     *     &lt;code>SyncProviderException&lt;/code> object or, if none has&#xA;     *     been set, an instance of the default &lt;code>SyncResolver&lt;/code>&#xA;     *     implementation. In addition, the default &lt;code>SyncResolver&lt;/code> &#xA;     *     implementation is also returned if the &lt;code>SyncResolver()&lt;/code> or&#xA;     *     &lt;code>SyncResolver(String)&lt;/code> constructors are used to instantiate &#xA;     *     the &lt;code>SyncResolver&lt;/code> instance.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>com</namespaces>
                    <namespaces>sun</namespaces>
                    <namespaces>rowset</namespaces>
                    <namespaces>internal</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../com/sun/rowset/internal/SyncResolverImpl.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </value>
              </expression>
            </statements>
            <catcheBlocks>
              <parameter name="sqle">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setSyncResolver">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="syncResolver">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SyncResolver.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the &lt;code>SyncResolver&lt;/code> object for this&#xA;     * &lt;code>SyncProviderException&lt;/code> object to the one supplied.&#xA;     * If the argument supplied is &lt;code>null&lt;/code>, a call to the method&#xA;     * &lt;code>getSyncResolver&lt;/code> will return the default reference&#xA;     * implementation of the &lt;code>SyncResolver&lt;/code> interface.&#xA;     *&#xA;     * @param syncResolver the &lt;code>SyncResolver&lt;/code> object to be set; &#xA;     *     cannot be &lt;code>null&lt;/code>     &#xA;     * @throws IllegalArgumentException if the &lt;code>SyncResolver&lt;/code> object&#xA;     *     is &lt;code>null&lt;/code>.     &#xA;     * @see #getSyncResolver&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Cannot set a null SyncResolver "/>
                <children xsi:type="references:StringReference" value="object"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="939908523620640692"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Indicates an error with the &lt;code>SyncProvider&lt;/code> mechanism. This exception&#xA; * is created by a &lt;code>SyncProvider&lt;/code> abstract class extension if it&#xA; * encounters violations in reading from or writing to the originating data source.&#xA; * &lt;P>&#xA; * If it is implemented to do so, the &lt;code>SyncProvider&lt;/code> object may also create a &#xA; * &lt;code>SyncResolver&lt;/code> object and either initialize the &lt;code>SyncProviderException&lt;/code> &#xA; * object with it at construction time or set it with the &lt;code>SyncProvider&lt;/code> object at&#xA; * a later time. &#xA; * &lt;P>&#xA; * The method &lt;code>acceptChanges&lt;/code> will throw this exception after the writer&#xA; * has finished checking for conflicts and has found one or more conflicts. An&#xA; * application may catch a &lt;code>SyncProviderException&lt;/code> object and call its&#xA; * &lt;code>getSyncResolver&lt;/code> method to get its &lt;code>SyncResolver&lt;/code> object.&#xA; * See the code fragment in the interface comment for &#xA; * &lt;a href=&quot;SyncResolver.java&quot;>&lt;code>SyncResolver&lt;/code>&lt;/a> for an example.&#xA; * This &lt;code>SyncResolver&lt;/code> object will mirror the &lt;code>RowSet&lt;/code>&#xA; * object that generated the exception, except that it will contain only the values&#xA; * from the data source that are in conflict.  All other values in the &lt;code>SyncResolver&lt;/code>&#xA; * object will be &lt;code>null&lt;/code>. &#xA; * &lt;P>&#xA; * The &lt;code>SyncResolver&lt;/code> object may be used to examine and resolve &#xA; * each conflict in a row and then go to the next row with a conflict to&#xA; * repeat the procedure.&#xA; * &lt;P>&#xA; * A &lt;code>SyncProviderException&lt;/code> object may or may not contain a description of the&#xA; * condition causing the exception.  The inherited method &lt;code>getMessage&lt;/code> may be&#xA; * called to retrieve the description if there is one.&#xA; * &#xA; * @author Jonathan Bruce&#xA; * @see javax.sql.rowset.spi.SyncFactory&#xA; * @see javax.sql.rowset.spi.SyncResolver&#xA; * @see javax.sql.rowset.spi.SyncFactoryException&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>sql</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../../../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
