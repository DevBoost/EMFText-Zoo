<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="XADataSource.java">
  <comments>/*&#xA; * @(#)XADataSource.java&#x9;1.9 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>sql</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>sql</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="XADataSource">
    <members xsi:type="members:InterfaceMethod" name="getXAConnection">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;   * Attempts to establish a physical database connection that can be&#xA;   * used in a distributed transaction.&#xA;   *&#xA;   * @return  an &lt;code>XAConnection&lt;/code> object, which represents a&#xA;   *          physical connection to a data source, that can be used in&#xA;   *          a distributed transaction&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
          <target xsi:type="classifiers:Interface" href="XAConnection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getXAConnection">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;   * Attempts to establish a physical database connection, using the given&#xA;   * user name and password. The connection that is returned is one that&#xA;   * can be used in a distributed transaction.&#xA;   *&#xA;   * @param user the database user on whose behalf the connection is being made&#xA;   * @param password the user's password&#xA;   * @return  an &lt;code>XAConnection&lt;/code> object, which represents a&#xA;   *          physical connection to a data source, that can be used in&#xA;   *          a distributed transaction&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
          <target xsi:type="classifiers:Interface" href="XAConnection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="user">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="password">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLogWriter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;   * &lt;p>Retrieves the log writer for this &lt;code>XADataSource&lt;/code> object.&#xA;   *&#xA;   * @return the log writer for this data source; &lt;code>null&lt;/code> if no log&#xA;   *          writer has been set, which means that logging is disabled&#xA;   * @exception SQLException if a database access error occurs  &#xA;   * @see #setLogWriter&#xA;   */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/io/PrintWriter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setLogWriter">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Sets the log writer for this &lt;code>XADataSource&lt;/code> object&#xA;   * to the given &lt;code>java.io.PrintWriter&lt;/code> object.&#xA;   * &lt;P>&#xA;   * The log writer is a character output stream to which all logging&#xA;   * and tracing messages for this &lt;code>XADataSource&lt;/code> object will be&#xA;   * printed.  This includes messages printed by the methods of this&#xA;   * object, messages printed by methods of other objects manufactured&#xA;   * by this object, and so on.  Messages printed to a log writer that is&#xA;   * specific to a data source are not printed to the log writer associated&#xA;   * with the &lt;code>java.sql.DriverManager&lt;/code> class. When a data source&#xA;   * object is created, the log writer is initially &lt;code>null&lt;/code>.&#xA;   *&#xA;   * @param out the new log writer; to disable logging, set to &lt;code>null&lt;/code>&#xA;   * @exception SQLException if a database access error occurs  &#xA;   * @see #getLogWriter&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/io/PrintWriter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setLoginTimeout">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * &lt;p>Sets the maximum time in seconds that this data source will wait&#xA;   * while attempting to connect to a data source.  A value of zero&#xA;   * specifies that the timeout is the default system timeout &#xA;   * if there is one; otherwise, it specifies that there is no timeout.&#xA;   * When a data source object is created, the login timeout is&#xA;   * initially zero.&#xA;   *&#xA;   * @param seconds the data source login time limit&#xA;   * @exception SQLException if a database access error occurs&#xA;   * @see #getLoginTimeout&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seconds">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLoginTimeout">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;   * Retrieves the maximum time in seconds that this data source can wait&#xA;   * while attempting to connect to a data source.  A value of zero&#xA;   * means that the timeout is the default system timeout &#xA;   * if there is one; otherwise, it means that there is no timeout.&#xA;   * When a data source object is created, the login timeout is&#xA;   * initially zero.&#xA;   *&#xA;   * @return the number of seconds that is the login time limit for this&#xA;   *         &lt;code>XADataSource&lt;/code> object or zero if there is no&#xA;   *         no timeout limit or the timeout limit is the default system&#xA;   *         timeout limit if there is one&#xA;   * @exception SQLException if a database access error occurs&#xA;   * @see #setLoginTimeout&#xA;   */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/sql/SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A factory for &lt;code>XAConnection&lt;/code> objects that is used internally.  &#xA; * An object that implements the &lt;code>XADataSource&lt;/code> interface is&#xA; * typically registered with a naming service that uses the&#xA; * Java Naming and Directory Interface&lt;sup>&lt;font size=-3>TM&lt;/font>&lt;/sup>&#xA; * (JNDI). &#xA; *&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
