<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ClassLoaderRepository.java">
  <comments>/*&#xA; * @(#)ClassLoaderRepository.java&#x9;1.18 03/12/19&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>management</namespaces>
  <namespaces>loading</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../MBeanServer.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ClassLoaderRepository">
    <members xsi:type="members:InterfaceMethod" name="loadClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="className">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Load the given class name through the list of class loaders.&#xA;     * Each ClassLoader in turn from the ClassLoaderRepository is&#xA;     * asked to load the class via its {@link&#xA;     * ClassLoader#loadClass(String)} method.  If it successfully&#xA;     * returns a {@link Class} object, that is the result of this&#xA;     * method.  If it throws a {@link ClassNotFoundException}, the&#xA;     * search continues with the next ClassLoader.  If it throws&#xA;     * another exception, the exception is propagated from this&#xA;     * method.  If the end of the list is reached, a {@link&#xA;     * ClassNotFoundException} is thrown.&lt;/p>&#xA;     *&#xA;     * @param className The name of the class to be loaded.&#xA;     *&#xA;     * @return the loaded class.&#xA;     *&#xA;     * @exception ClassNotFoundException The specified class could not be &#xA;     *            found.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="loadClassWithout">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exclude">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="className">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Load the given class name through the list of class loaders,&#xA;     * excluding the given one.  Each ClassLoader in turn from the&#xA;     * ClassLoaderRepository, except &lt;code>exclude&lt;/code>, is asked to&#xA;     * load the class via its {@link ClassLoader#loadClass(String)}&#xA;     * method.  If it successfully returns a {@link Class} object,&#xA;     * that is the result of this method.  If it throws a {@link&#xA;     * ClassNotFoundException}, the search continues with the next&#xA;     * ClassLoader.  If it throws another exception, the exception is&#xA;     * propagated from this method.  If the end of the list is&#xA;     * reached, a {@link ClassNotFoundException} is thrown.&lt;/p>&#xA;     *&#xA;     * &lt;p>Be aware that if a ClassLoader in the ClassLoaderRepository&#xA;     * calls this method from its {@link ClassLoader#loadClass(String)&#xA;     * loadClass} method, it exposes itself to a deadlock if another&#xA;     * ClassLoader in the ClassLoaderRepository does the same thing at&#xA;     * the same time.  The {@link #loadClassBefore} method is&#xA;     * recommended to avoid the risk of deadlock.&lt;/p>&#xA;     *&#xA;     * @param className The name of the class to be loaded.&#xA;     * @param exclude The class loader to be excluded.  May be null,&#xA;     * in which case this method is equivalent to {@link #loadClass&#xA;     * loadClass(className)}.&#xA;     *&#xA;     * @return the loaded class.&#xA;     *&#xA;     * @exception ClassNotFoundException The specified class could not&#xA;     * be found.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="loadClassBefore">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stop">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="className">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Load the given class name through the list of class loaders,&#xA;     * stopping at the given one.  Each ClassLoader in turn from the&#xA;     * ClassLoaderRepository is asked to load the class via its {@link&#xA;     * ClassLoader#loadClass(String)} method.  If it successfully&#xA;     * returns a {@link Class} object, that is the result of this&#xA;     * method.  If it throws a {@link ClassNotFoundException}, the&#xA;     * search continues with the next ClassLoader.  If it throws&#xA;     * another exception, the exception is propagated from this&#xA;     * method.  If the search reaches &lt;code>stop&lt;/code> or the end of&#xA;     * the list, a {@link ClassNotFoundException} is thrown.&lt;/p>&#xA;     *&#xA;     * &lt;p>Typically this method is called from the {@link&#xA;     * ClassLoader#loadClass(String) loadClass} method of&#xA;     * &lt;code>stop&lt;/code>, to consult loaders that appear before it&#xA;     * in the &lt;code>ClassLoaderRepository&lt;/code>.  By stopping the&#xA;     * search as soon as &lt;code>stop&lt;/code> is reached, a potential&#xA;     * deadlock with concurrent class loading is avoided.&lt;/p>&#xA;     *&#xA;     * @param className The name of the class to be loaded.&#xA;     * @param stop The class loader at which to stop.  May be null, in&#xA;     * which case this method is equivalent to {@link #loadClass(String)&#xA;     * loadClass(className)}.&#xA;     *&#xA;     * @return the loaded class.&#xA;     *&#xA;     * @exception ClassNotFoundException The specified class could not&#xA;     * be found.&#xA;     *&#xA;     * @since.unbundled JMX 1.2&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>// for Javadoc</comments>
      <comments>/**&#xA; * &lt;p>Instances of this interface are used to keep the list of ClassLoaders &#xA; * registered in an MBean Server.&#xA; * They provide the necessary methods to load classes using the registered &#xA; * ClassLoaders.&lt;/p>&#xA; *&#xA; * &lt;p>The first ClassLoader in a &lt;code>ClassLoaderRepository&lt;/code> is&#xA; * always the MBean Server's own ClassLoader.&lt;/p>&#xA; *&#xA; * &lt;p>When an MBean is registered in an MBean Server, if it is of a&#xA; * subclass of {@link java.lang.ClassLoader} and if it does not&#xA; * implement the interface {@link PrivateClassLoader}, it is added to&#xA; * the end of the MBean Server's &lt;code>ClassLoaderRepository&lt;/code>.&#xA; * If it is subsequently unregistered from the MBean Server, it is&#xA; * removed from the &lt;code>ClassLoaderRepository&lt;/code>.&lt;/p>&#xA; *&#xA; * &lt;p>The order of MBeans in the &lt;code>ClassLoaderRepository&lt;/code> is&#xA; * significant.  For any two MBeans &lt;em>X&lt;/em> and &lt;em>Y&lt;/em> in the&#xA; * &lt;code>ClassLoaderRepository&lt;/code>, &lt;em>X&lt;/em> must appear before&#xA; * &lt;em>Y&lt;/em> if the registration of &lt;em>X&lt;/em> was completed before&#xA; * the registration of &lt;em>Y&lt;/em> started.  If &lt;em>X&lt;/em> and&#xA; * &lt;em>Y&lt;/em> were registered concurrently, their order is&#xA; * indeterminate.  The registration of an MBean corresponds to the&#xA; * call to {@link MBeanServer#registerMBean} or one of the {@link&#xA; * MBeanServer}&lt;code>.createMBean&lt;/code> methods.&lt;/p>&#xA; *&#xA; * @see javax.management.MBeanServerFactory&#xA; *&#xA; * @since 1.5&#xA; * @since.unbundled JMX 1.1&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
