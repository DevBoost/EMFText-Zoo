<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="MLetContent.java">
  <comments>/*&#xA; * @(#)MLetContent.java&#x9;1.20 03/12/19&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>management</namespaces>
  <namespaces>loading</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <comments>// java import</comments>
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/net/URL.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/net/MalformedURLException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="MLetContent">
    <comments>/**&#xA; * This class represents the contents of the &lt;CODE>MLET&lt;/CODE> tag.&#xA; * &lt;p>&#xA; * The &lt;CODE>MLET&lt;/CODE> tag has the following syntax:&#xA; * &lt;p>&#xA; * &amp;lt;&lt;CODE>MLET&lt;/CODE>&lt;BR>&#xA; *      &lt;CODE>CODE = &lt;/CODE>&lt;VAR>class&lt;/VAR>&lt;CODE> | OBJECT = &lt;/CODE>&lt;VAR>serfile&lt;/VAR>&lt;BR>&#xA; *      &lt;CODE>ARCHIVE = &amp;quot;&lt;/CODE>&lt;VAR>archiveList&lt;/VAR>&lt;CODE>&amp;quot;&lt;/CODE>&lt;BR>&#xA; *      &lt;CODE>[CODEBASE = &lt;/CODE>&lt;VAR>codebaseURL&lt;/VAR>&lt;CODE>]&lt;/CODE>&lt;BR>&#xA; *      &lt;CODE>[NAME = &lt;/CODE>&lt;VAR>mbeanname&lt;/VAR>&lt;CODE>]&lt;/CODE>&lt;BR>&#xA; *      &lt;CODE>[VERSION = &lt;/CODE>&lt;VAR>version&lt;/VAR>&lt;CODE>]&lt;/CODE>&lt;BR>&#xA; * &amp;gt;&lt;BR>&#xA; *&#x9;&lt;CODE>[&lt;/CODE>&lt;VAR>arglist&lt;/VAR>&lt;CODE>]&lt;/CODE>&lt;BR>&#xA; * &amp;lt;&lt;CODE>/MLET&lt;/CODE>&amp;gt;&#xA; * &lt;p>&#xA; * where:&#xA; * &lt;DL>&#xA; * &lt;DT>&lt;CODE>CODE = &lt;/CODE>&lt;VAR>class&lt;/VAR>&lt;/DT>&#xA; * &lt;DD>&#xA; * This attribute specifies the full Java class name, including package name, of the MBean to be obtained.&#xA; * The compiled &lt;CODE>.class&lt;/CODE> file of the MBean must be contained in one of the &lt;CODE>.jar&lt;/CODE> files specified by the &lt;CODE>ARCHIVE&lt;/CODE>&#xA; * attribute. Either &lt;CODE>CODE&lt;/CODE> or &lt;CODE>OBJECT&lt;/CODE> must be present.&#xA; * &lt;/DD>&#xA; * &lt;DT>&lt;CODE>OBJECT = &lt;/CODE>&lt;VAR>serfile&lt;/VAR>&lt;/DT>&#xA; * &lt;DD>&#xA; * This attribute specifies the &lt;CODE>.ser&lt;/CODE> file that contains a serialized representation of the MBean to be obtained.&#xA; * This file must be contained in one of the &lt;CODE>.jar&lt;/CODE> files specified by the &lt;CODE>ARCHIVE&lt;/CODE> attribute. If the &lt;CODE>.jar&lt;/CODE> file contains a directory hierarchy, specify the path of the file within this hierarchy. Otherwise  a match will not be found. Either &lt;CODE>CODE&lt;/CODE> or &lt;CODE>OBJECT&lt;/CODE> must be present.&#xA; * &lt;/DD>&#xA; * &lt;DT>&lt;CODE>ARCHIVE = &amp;quot;&lt;/CODE>&lt;VAR>archiveList&lt;/VAR>&lt;CODE>&amp;quot;&lt;/CODE>&lt;/DT>&#xA; * &lt;DD>&#xA; * This mandatory attribute specifies one or more &lt;CODE>.jar&lt;/CODE> files &#xA; * containing MBeans or other resources used by&#xA; * the MBean to be obtained. One of the &lt;CODE>.jar&lt;/CODE> files must contain the file specified by the &lt;CODE>CODE&lt;/CODE> or &lt;CODE>OBJECT&lt;/CODE> attribute.&#xA; * If archivelist contains more than one file:&#xA; * &lt;UL>&#xA; * &lt;LI>Each file must be separated from the one that follows it by a comma (,).&#xA; * &lt;LI>&lt;VAR>archivelist&lt;/VAR> must be enclosed in double quote marks.&#xA; * &lt;/UL>&#xA; * All &lt;CODE>.jar&lt;/CODE> files in &lt;VAR>archivelist&lt;/VAR> must be stored in the directory specified by the code base URL.&#xA; * &lt;/DD>&#xA; * &lt;DT>&lt;CODE>CODEBASE = &lt;/CODE>&lt;VAR>codebaseURL&lt;/VAR>&lt;/DT>&#xA; * &lt;DD>&#xA; * This optional attribute specifies the code base URL of the MBean to be obtained. It identifies the directory that contains&#xA; * the &lt;CODE>.jar&lt;/CODE> files specified by the &lt;CODE>ARCHIVE&lt;/CODE> attribute. Specify this attribute only if the &lt;CODE>.jar&lt;/CODE> files are not in the same&#xA; * directory as the MLet text file. If this attribute is not specified, the base URL of the MLet text file is used.&#xA; * &lt;/DD>&#xA; * &lt;DT>&lt;CODE>NAME = &lt;/CODE>&lt;VAR>mbeanname&lt;/VAR>&lt;/DT>&#xA; * &lt;DD>&#xA; * This optional attribute specifies the object name to be assigned to the&#xA; * MBean instance when the MLet service registers it. If &#xA; * &lt;VAR>mbeanname&lt;/VAR> starts with the colon character (:), the domain &#xA; * part of the object name is the domain of the agent. The MLet service &#xA; * invokes the &lt;CODE>getDomain()&lt;/CODE> method of the Framework class to &#xA; * obtain this information.&#xA; * &lt;/DD>&#xA; * &lt;DT>&lt;CODE>PERSISTENT = &lt;/CODE>&lt;VAR>true | false&lt;/VAR>&lt;/DT>&#xA; * &lt;DD>&#xA; * This optional attribute specifies the persistency or not persistency of the&#xA; * MBean instance when the MLet service registers it.&#xA; * &lt;/DD>&#xA; * &lt;DT>&lt;CODE>VERSION = &lt;/CODE>&lt;VAR>version&lt;/VAR>&lt;/DT>&#xA; * &lt;DD>&#xA; * This optional attribute specifies the version number of the MBean and &#xA; * associated &lt;CODE>.jar&lt;/CODE> files to be obtained. This version number can &#xA; * be used to specify that the &lt;CODE>.jar&lt;/CODE> files are loaded from the &#xA; * server to update those stored locally in the cache the next time the MLet&#xA; * text file is loaded. &lt;VAR>version&lt;/VAR> must be a series of non-negative &#xA; * decimal integers each separated by a period from the one that precedes it.&#xA; * &lt;/DD>&#xA; * &lt;DT>&lt;VAR>paramlist&lt;/VAR>&lt;/DT>&#xA; * &lt;DD>&#xA; * This optional attribute specifies a list of one or more parameters for the &#xA; * MBean to be instantiated. Each parameter in &lt;VAR>paramlist&lt;/VAR> corresponds to a modification in the &#xA; * modification list. Use the following syntax to specify each item in&#xA; * &lt;VAR>paramlist&lt;/VAR>:&lt;/DD>&#xA; * &lt;DL>&#xA; * &lt;P>&#xA; * &lt;DT>&amp;lt;&lt;CODE>PARAM NAME=&lt;/CODE>&lt;VAR>propertyName&lt;/VAR> &lt;CODE>VALUE=&lt;/CODE>&lt;VAR>value&lt;/VAR>&amp;gt;&lt;/DT>&#xA; * &lt;P>&#xA; * &lt;DD>where:&lt;/DD>&#xA; * &lt;UL>&#xA; * &lt;LI>&lt;VAR>propertyName&lt;/VAR> is the name of the property in the modification&#xA; * &lt;LI>&lt;VAR>value&lt;/VAR> is the value in the modification&lt;/UL>&#xA; * &lt;/DL>&#xA; * &lt;P>The MLet service passes all the values in the modification list as &#xA; * &lt;CODE>String&lt;/CODE> objects. &#xA; * &lt;/DL>&#xA; * &#xA; * &lt;p>&lt;STRONG>Note - &lt;/STRONG>Multiple &lt;CODE>MLET&lt;/CODE> tags with the same &#xA; * code base URL share the same instance of the &lt;CODE>MLetClassLoader&lt;/CODE> &#xA; * class.&#xA; *&#xA; * @version     3.3     02/08/99&#xA; * @author      Sun Microsystems, Inc&#xA; *&#xA; * @since 1.5&#xA; */</comments>
    <members xsi:type="members:Field" name="attributes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * A hash table of the attributes of the &lt;CODE>MLET&lt;/CODE> tag &#xA;     * and their values.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="documentURL">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/net/URL.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The MLet text file's base URL.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="baseURL">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/net/URL.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The base URL.&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="MLetContent">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="att">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// Initialize baseURL</comments>
              <comments>//</comments>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
              <arguments xsi:type="references:StringReference" value="codebase"/>
            </child>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.2/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                  <value xsi:type="references:StringReference" value="/"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.2/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.43"/>
                  <arguments xsi:type="references:StringReference" value="/"/>
                </next>
              </child>
            </condition>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/net/URL.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.2/@variable"/>
                </value>
              </expression>
            </statements>
            <catcheBlocks>
              <comments>// OK : Move to next block as baseURL could not be initialized.</comments>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/net/MalformedURLException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.2/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="file">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/net/URL.class.xmi#//@classifiers.0/@members.35"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.4/@statement/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.47"/>
                  <arguments xsi:type="literals:CharacterLiteral" value="47"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:TryBlock">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../java/net/URL.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.4/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.56"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          <arguments xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.4/@statement/@statements.1/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                          </arguments>
                        </next>
                      </arguments>
                    </value>
                  </expression>
                </statements>
                <catcheBlocks>
                  <comments>// OK : Move to next block as baseURL could not be initialized.</comments>
                  <parameter name="e">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../java/net/MalformedURLException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </parameter>
                </catcheBlocks>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.4/@statement/@statements.1/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.4/@statement/@statements.1/@variable"/>
                <children xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.4/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                    </next>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </children>
                <relationOperators xsi:type="operators:LessThan"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="url">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/net/URL.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an &lt;CODE>MLet&lt;/CODE> instance initialized with attributes read&#xA;     * from an &lt;CODE>MLET&lt;/CODE> tag in an MLet text file.&#xA;     *&#xA;     * @param url The URL of the MLet text file containing the &lt;CODE>MLET&lt;/CODE> tag.&#xA;     * @param attributes A list of the attributes of the &lt;CODE>MLET&lt;/CODE> tag.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getAttributes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// GETTERS AND SETTERS</comments>
        <comments>//--------------------</comments>
        <comments>/**&#xA;     * Gets the attributes of the &lt;CODE>MLET&lt;/CODE> tag.&#xA;     * @return A hash table of the attributes of the &lt;CODE>MLET&lt;/CODE> tag &#xA;     * and their values.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDocumentBase">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/net/URL.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the MLet text file's base URL.&#xA;     * @return The MLet text file's base URL.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCodeBase">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/net/URL.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the code base URL.&#xA;     * @return The code base URL.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getJarFiles">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the list of &lt;CODE>.jar&lt;/CODE> files specified by the &lt;CODE>ARCHIVE&lt;/CODE> &#xA;     * attribute of the &lt;CODE>MLET&lt;/CODE> tag.&#xA;     * @return A comma-separated list of &lt;CODE>.jar&lt;/CODE> file names.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
            <arguments xsi:type="references:StringReference" value="archive"/>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the value of the &lt;CODE>CODE&lt;/CODE> &#xA;     * attribute of the &lt;CODE>MLET&lt;/CODE> tag.&#xA;     * @return The value of the &lt;CODE>CODE&lt;/CODE> &#xA;     * attribute of the &lt;CODE>MLET&lt;/CODE> tag.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
            <arguments xsi:type="references:StringReference" value="code"/>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getSerializedObject">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the value of the &lt;CODE>OBJECT&lt;/CODE>&#xA;     * attribute of the &lt;CODE>MLET&lt;/CODE> tag.&#xA;     * @return The value of the &lt;CODE>OBJECT&lt;/CODE> &#xA;     * attribute of the &lt;CODE>MLET&lt;/CODE> tag.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
            <arguments xsi:type="references:StringReference" value="object"/>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the value of the &lt;CODE>NAME&lt;/CODE>&#xA;     * attribute of the &lt;CODE>MLET&lt;/CODE> tag.&#xA;     * @return The value of the &lt;CODE>NAME&lt;/CODE>&#xA;     * attribute of the &lt;CODE>MLET&lt;/CODE> tag.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
            <arguments xsi:type="references:StringReference" value="name"/>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getVersion">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the value of the &lt;CODE>VERSION&lt;/CODE>&#xA;     * attribute of the &lt;CODE>MLET&lt;/CODE> tag.&#xA;     * @return The value of the &lt;CODE>VERSION&lt;/CODE>&#xA;     * attribute of the &lt;CODE>MLET&lt;/CODE> tag.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
            <arguments xsi:type="references:StringReference" value="version"/>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getParameter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the value of the specified    &#xA;     * attribute of the &lt;CODE>MLET&lt;/CODE> tag.&#xA;     *&#xA;     * @param name A string representing the name of the attribute.&#xA;     * @return The value of the specified    &#xA;     * attribute of the &lt;CODE>MLET&lt;/CODE> tag.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../java/util/Map.class.xmi#//@classifiers.0/@members.4"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.68"/>
                </next>
              </arguments>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
  </classifiers>
</containers:CompilationUnit>
