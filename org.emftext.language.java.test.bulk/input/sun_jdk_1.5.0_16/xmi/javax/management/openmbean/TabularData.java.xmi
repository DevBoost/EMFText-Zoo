<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="TabularData.java">
  <comments>/*&#xA; * @(#)TabularData.java&#x9;3.19 04/02/10&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>management</namespaces>
  <namespaces>openmbean</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <comments>// java import</comments>
    <comments>//</comments>
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Set.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Collection.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="TabularData">
    <comments>/*extends Map*/</comments>
    <members xsi:type="members:InterfaceMethod" name="getTabularType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TabularType.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* *** TabularData specific information methods *** */</comments>
        <comments>/**&#xA;     * Returns the &lt;i>tabular type&lt;/i> describing this&#xA;     * &lt;tt>TabularData&lt;/tt> instance.&#xA;     *&#xA;     * @return the tabular type.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="calculateIndex">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="CompositeData.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Calculates the index that would be used in this &lt;tt>TabularData&lt;/tt> instance to refer to the specified&#xA;     * composite data &lt;var>value&lt;/var> parameter if it were added to this instance.&#xA;     * This method checks for the type validity of the specified &lt;var>value&lt;/var>, &#xA;     * but does not check if the calculated index is already used to refer to a value in this &lt;tt>TabularData&lt;/tt> instance.&#xA;     *&#xA;     * @param  value&#x9;&#x9;&#x9;  the composite data value whose index in this &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;  &lt;tt>TabularData&lt;/tt> instance is to be calculated;&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;  must be of the same composite type as this instance's row type;&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;  must not be null.&#xA;     *&#xA;     * @return the index that the specified &lt;var>value&lt;/var> would have in this &lt;tt>TabularData&lt;/tt> instance.&#xA;     * &#xA;     * @throws NullPointerException       if &lt;var>value&lt;/var> is &lt;tt>null&lt;/tt> &#xA;     * &#xA;     * @throws InvalidOpenTypeException   if &lt;var>value&lt;/var> does not conform to this &lt;tt>TabularData&lt;/tt> instance's &#xA;     *&#x9;&#x9;&#x9;&#x9;          row type definition.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="size">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* *** Content information query methods *** */</comments>
        <comments>/**&#xA;     * Returns the number of &lt;tt>CompositeData&lt;/tt> values (ie the&#xA;     * number of rows) contained in this &lt;tt>TabularData&lt;/tt>&#xA;     * instance.&#xA;     *&#xA;     * @return the number of values contained.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isEmpty">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if the number of &lt;tt>CompositeData&lt;/tt>&#xA;     * values (ie the number of rows) contained in this&#xA;     * &lt;tt>TabularData&lt;/tt> instance is zero.&#xA;     *&#xA;     * @return true if this &lt;tt>TabularData&lt;/tt> is empty.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="containsKey">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if and only if this &lt;tt>TabularData&lt;/tt> instance contains a &lt;tt>CompositeData&lt;/tt> value &#xA;     * (ie a row) whose index is the specified &lt;var>key&lt;/var>. If &lt;var>key&lt;/var> is &lt;tt>null&lt;/tt> or does not conform to&#xA;     * this &lt;tt>TabularData&lt;/tt> instance's &lt;tt>TabularType&lt;/tt> definition, this method simply returns &lt;tt>false&lt;/tt>.&#xA;     * &#xA;     * @param  key  the index value whose presence in this &lt;tt>TabularData&lt;/tt> instance is to be tested.&#xA;     *&#xA;     * @return  &lt;tt>true&lt;/tt> if this &lt;tt>TabularData&lt;/tt> indexes a row value with the specified key.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="containsValue">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="CompositeData.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if and only if this &lt;tt>TabularData&lt;/tt> instance contains the specified&#xA;     * &lt;tt>CompositeData&lt;/tt> value. If &lt;var>value&lt;/var> is &lt;tt>null&lt;/tt> or does not conform to&#xA;     * this &lt;tt>TabularData&lt;/tt> instance's row type definition, this method simply returns &lt;tt>false&lt;/tt>.&#xA;     *&#xA;     * @param  value  the row value whose presence in this &lt;tt>TabularData&lt;/tt> instance is to be tested.&#xA;     *&#xA;     * @return  &lt;tt>true&lt;/tt> if this &lt;tt>TabularData&lt;/tt> instance contains the specified row value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="CompositeData.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;tt>CompositeData&lt;/tt> value whose index is&#xA;     * &lt;var>key&lt;/var>, or &lt;tt>null&lt;/tt> if there is no value mapping&#xA;     * to &lt;var>key&lt;/var>, in this &lt;tt>TabularData&lt;/tt> instance.&#xA;     *&#xA;     * @param key the key of the row to return.&#xA;     *&#xA;     * @return the value corresponding to &lt;var>key&lt;/var>.&#xA;     *&#xA;     * @throws NullPointerException if the &lt;var>key&lt;/var> is&#xA;     * &lt;tt>null&lt;/tt>&#xA;     * @throws InvalidKeyException if the &lt;var>key&lt;/var> does not&#xA;     * conform to this &lt;tt>TabularData&lt;/tt> instance's *&#xA;     * &lt;tt>TabularType&lt;/tt> definition&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="put">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="CompositeData.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* *** Content modification operations (one element at a time) *** */</comments>
        <comments>/**&#xA;     * Adds &lt;var>value&lt;/var> to this &lt;tt>TabularData&lt;/tt> instance.&#xA;     * The composite type of &lt;var>value&lt;/var> must be the same as this&#xA;     * instance's row type (ie the composite type returned by&#xA;     * &lt;tt>this.getTabularType().{@link TabularType#getRowType&#xA;     * getRowType()}&lt;/tt>), and there must not already be an existing&#xA;     * value in this &lt;tt>TabularData&lt;/tt> instance whose index is the&#xA;     * same as the one calculated for the &lt;var>value&lt;/var> to be&#xA;     * added. The index for &lt;var>value&lt;/var> is calculated according&#xA;     * to this &lt;tt>TabularData&lt;/tt> instance's &lt;tt>TabularType&lt;/tt>&#xA;     * definition (see &lt;tt>TabularType.{@link&#xA;     * TabularType#getIndexNames getIndexNames()}&lt;/tt>).&#xA;     *&#xA;     * @param  value&#x9;&#x9;&#x9;  the composite data value to be added as a new row to this &lt;tt>TabularData&lt;/tt> instance;&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;  must be of the same composite type as this instance's row type;&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;  must not be null.&#xA;     *&#xA;     * @throws NullPointerException       if &lt;var>value&lt;/var> is &lt;tt>null&lt;/tt> &#xA;     * @throws InvalidOpenTypeException   if &lt;var>value&lt;/var> does not conform to this &lt;tt>TabularData&lt;/tt> instance's &#xA;     *&#x9;&#x9;&#x9;&#x9;          row type definition.&#xA;     * @throws KeyAlreadyExistsException  if the index for &lt;var>value&lt;/var>, calculated according to &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;  this &lt;tt>TabularData&lt;/tt> instance's &lt;tt>TabularType&lt;/tt> definition &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;  already maps to an existing value in the underlying HashMap.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="remove">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="CompositeData.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the &lt;tt>CompositeData&lt;/tt> value whose index is &lt;var>key&lt;/var> from this &lt;tt>TabularData&lt;/tt> instance,&#xA;     * and returns the removed value, or returns &lt;tt>null&lt;/tt> if there is no value whose index is &lt;var>key&lt;/var>.&#xA;     *&#xA;     * @param  key  the index of the value to get in this &lt;tt>TabularData&lt;/tt> instance;&#xA;     *&#x9;&#x9;    must be valid with this &lt;tt>TabularData&lt;/tt> instance's row type definition;&#xA;     *&#x9;&#x9;    must not be null.&#xA;     * &#xA;     * @return previous value associated with specified key, or &lt;tt>null&lt;/tt>&#xA;     *&#x9;       if there was no mapping for key.  &#xA;     *&#xA;     * @throws NullPointerException  if the &lt;var>key&lt;/var> is &lt;tt>null&lt;/tt> &#xA;     * @throws InvalidKeyException   if the &lt;var>key&lt;/var> does not conform to this &lt;tt>TabularData&lt;/tt> instance's &#xA;     *&#x9;&#x9;&#x9;&#x9;     &lt;tt>TabularType&lt;/tt> definition &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="putAll">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="values">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="CompositeData.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* ***   Content modification bulk operations   *** */</comments>
        <comments>/**&#xA;     * Add all the elements in &lt;var>values&lt;/var> to this &lt;tt>TabularData&lt;/tt> instance. &#xA;     * If any  element in &lt;var>values&lt;/var> does not satisfy the constraints defined in {@link #put(CompositeData) &lt;tt>put&lt;/tt>},&#xA;     * or if any two elements in &lt;var>values&lt;/var> have the same index calculated according to this &lt;tt>TabularData&lt;/tt> &#xA;     * instance's &lt;tt>TabularType&lt;/tt> definition, then an exception describing the failure is thrown &#xA;     * and no element of &lt;var>values&lt;/var> is added,  thus leaving this &lt;tt>TabularData&lt;/tt> instance unchanged.&#xA;     *&#xA;     * @param  values  the array of composite data values to be added as new rows to this &lt;tt>TabularData&lt;/tt> instance;&#xA;     *&#x9;&#x9;       if &lt;var>values&lt;/var> is &lt;tt>null&lt;/tt> or empty, this method returns without doing anything.&#xA;     * &#xA;     * @throws NullPointerException       if an element of &lt;var>values&lt;/var> is &lt;tt>null&lt;/tt> &#xA;     * @throws InvalidOpenTypeException   if an element of &lt;var>values&lt;/var> does not conform to &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;  this &lt;tt>TabularData&lt;/tt> instance's row type definition &#xA;     * @throws KeyAlreadyExistsException  if the index for an element of &lt;var>values&lt;/var>, calculated according to &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;  this &lt;tt>TabularData&lt;/tt> instance's &lt;tt>TabularType&lt;/tt> definition &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;  already maps to an existing value in this instance,&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;  or two elements of &lt;var>values&lt;/var> have the same index.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="clear">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes all &lt;tt>CompositeData&lt;/tt> values (ie rows) from this &lt;tt>TabularData&lt;/tt> instance.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="keySet">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Set.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* ***   Collection views of the keys and values   *** */</comments>
        <comments>/**&#xA;     * Returns a set view of the keys (ie the index values) of the &lt;tt>CompositeData&lt;/tt> values (ie the rows) &#xA;     * contained in this &lt;tt>TabularData&lt;/tt> instance. The returned Set can then be used to iterate over the keys.&#xA;     *&#xA;     * @return a set view of the index values used in this &lt;tt>TabularData&lt;/tt> instance.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="values">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a collection view of the &lt;tt>CompositeData&lt;/tt> values (ie the rows) &#xA;     * contained in this &lt;tt>TabularData&lt;/tt> instance. &#xA;     * The returned collection can then be used to iterate over the values.&#xA;     *&#xA;     * @return a collection view of the rows contained in this &lt;tt>TabularData&lt;/tt> instance.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* ***  Commodity methods from java.lang.Object  *** */</comments>
        <comments>/**&#xA;     * Compares the specified &lt;var>obj&lt;/var> parameter with this &lt;code>TabularData&lt;/code> instance for equality. &#xA;     * &lt;p>&#xA;     * Returns &lt;tt>true&lt;/tt> if and only if all of the following statements are true:&#xA;     * &lt;ul>&#xA;     * &lt;li>&lt;var>obj&lt;/var> is non null,&lt;/li>&#xA;     * &lt;li>&lt;var>obj&lt;/var> also implements the &lt;code>TabularData&lt;/code> interface,&lt;/li>&#xA;     * &lt;li>their row types are equal&lt;/li>&#xA;     * &lt;li>their contents (ie index to value mappings) are equal&lt;/li>&#xA;     * &lt;/ul>&#xA;     * This ensures that this &lt;tt>equals&lt;/tt> method works properly for &lt;var>obj&lt;/var> parameters which are&#xA;     * different implementations of the &lt;code>TabularData&lt;/code> interface.&#xA;     * &lt;br>&amp;nbsp;&#xA;     * @param  obj  the object to be compared for equality with this &lt;code>TabularData&lt;/code> instance;&#xA;     * &#xA;     * @return  &lt;code>true&lt;/code> if the specified object is equal to this &lt;code>TabularData&lt;/code> instance.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the hash code value for this &lt;code>TabularData&lt;/code> instance. &#xA;     * &lt;p>&#xA;     * The hash code of a &lt;code>TabularData&lt;/code> instance is the sum of the hash codes&#xA;     * of all elements of information used in &lt;code>equals&lt;/code> comparisons &#xA;     * (ie: its &lt;i>tabular type&lt;/i> and its content, where the content is defined as all the index to value mappings). &#xA;     * &lt;p>&#xA;     * This ensures that &lt;code> t1.equals(t2) &lt;/code> implies that &lt;code> t1.hashCode()==t2.hashCode() &lt;/code> &#xA;     * for any two &lt;code>TabularDataSupport&lt;/code> instances &lt;code>t1&lt;/code> and &lt;code>t2&lt;/code>, &#xA;     * as required by the general contract of the method&#xA;     * {@link Object#hashCode() Object.hashCode()}.&#xA;     *&#xA;     * @return  the hash code value for this &lt;code>TabularDataSupport&lt;/code> instance&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string representation of this &lt;code>TabularData&lt;/code> instance. &#xA;     * &lt;p>&#xA;     * The string representation consists of the name of the implementing class, &#xA;     * and the tabular type of this instance.&#xA;     * &#xA;     * @return  a string representation of this &lt;code>TabularData&lt;/code> instance&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>// jmx import</comments>
      <comments>//</comments>
      <comments>/**&#xA; * The &lt;tt>TabularData&lt;/tt> interface specifies the behavior of a specific type of complex &lt;i>open data&lt;/i> objects&#xA; * which represent &lt;i>tabular data&lt;/i> structures.&#xA; *&#xA; * @version     3.19  04/02/10&#xA; * @author      Sun Microsystems, Inc.&#xA; *&#xA; * @since 1.5&#xA; * @since.unbundled JMX 1.1&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
