<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="OpenMBeanParameterInfo.java">
  <comments>/*&#xA; * @(#)OpenMBeanParameterInfo.java&#x9;3.21 03/12/19&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>management</namespaces>
  <namespaces>openmbean</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <comments>// java import</comments>
    <comments>//</comments>
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Set.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="OpenMBeanParameterInfo">
    <members xsi:type="members:InterfaceMethod" name="getDescription">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Re-declares methods that are in class MBeanParameterInfo of JMX 1.0</comments>
        <comments>// (these will be removed when MBeanParameterInfo is made a parent interface of this interface)</comments>
        <comments>/**&#xA;     * Returns a human readable description of the parameter &#xA;     * described by this &lt;tt>OpenMBeanParameterInfo&lt;/tt> instance.&#xA;     *&#xA;     * @return the description.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of the parameter&#xA;     * described by this &lt;tt>OpenMBeanParameterInfo&lt;/tt> instance.&#xA;     *&#xA;     * @return the name.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getOpenType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="OpenType.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Now declares methods that are specific to open MBeans</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Returns the &lt;i>open type&lt;/i> of the values of the parameter&#xA;     * described by this &lt;tt>OpenMBeanParameterInfo&lt;/tt> instance.&#xA;     *&#xA;     * @return the open type.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDefaultValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the default value for this parameter, if it has one, or&#xA;     * &lt;tt>null&lt;/tt> otherwise.&#xA;     *&#xA;     * @return the default value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLegalValues">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Set.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the set of legal values for this parameter, if it has&#xA;     * one, or &lt;tt>null&lt;/tt> otherwise.&#xA;     *&#xA;     * @return the set of legal values.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMinValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the minimal value for this parameter, if it has one, or&#xA;     * &lt;tt>null&lt;/tt> otherwise.&#xA;     *&#xA;     * @return the minimum value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMaxValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the maximal value for this parameter, if it has one, or&#xA;     * &lt;tt>null&lt;/tt> otherwise.&#xA;     *&#xA;     * @return the maximum value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hasDefaultValue">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if this parameter has a specified default&#xA;     * value, or &lt;tt>false&lt;/tt> otherwise.&#xA;     *&#xA;     * @return true if there is a default value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hasLegalValues">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if this parameter has a specified set of&#xA;     * legal values, or &lt;tt>false&lt;/tt> otherwise.&#xA;     *&#xA;     * @return true if there is a set of legal values.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hasMinValue">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if this parameter has a specified minimal&#xA;     * value, or &lt;tt>false&lt;/tt> otherwise.&#xA;     *&#xA;     * @return true if there is a minimum value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hasMaxValue">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if this parameter has a specified maximal&#xA;     * value, or &lt;tt>false&lt;/tt> otherwise.&#xA;     *&#xA;     * @return true if there is a maximum value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isValue">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests whether &lt;var>obj&lt;/var> is a valid value for the parameter&#xA;     * described by this &lt;code>OpenMBeanParameterInfo&lt;/code> instance.&#xA;     *&#xA;     * @param obj the object to be tested.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if &lt;var>obj&lt;/var> is a valid value&#xA;     * for for the parameter described by this&#xA;     * &lt;code>OpenMBeanParameterInfo&lt;/code> instance,&#xA;     * &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Compares the specified &lt;var>obj&lt;/var> parameter with this &lt;code>OpenMBeanParameterInfo&lt;/code> instance for equality. &#xA;     * &lt;p>&#xA;     * Returns &lt;tt>true&lt;/tt> if and only if all of the following statements are true:&#xA;     * &lt;ul>&#xA;     * &lt;li>&lt;var>obj&lt;/var> is non null,&lt;/li>&#xA;     * &lt;li>&lt;var>obj&lt;/var> also implements the &lt;code>OpenMBeanParameterInfo&lt;/code> interface,&lt;/li>&#xA;     * &lt;li>their names are equal&lt;/li>&#xA;     * &lt;li>their open types are equal&lt;/li>&#xA;     * &lt;li>their default, min, max and legal values are equal.&lt;/li>&#xA;     * &lt;/ul>&#xA;     * This ensures that this &lt;tt>equals&lt;/tt> method works properly for &lt;var>obj&lt;/var> parameters which are&#xA;     * different implementations of the &lt;code>OpenMBeanParameterInfo&lt;/code> interface.&#xA;     * &lt;br>&amp;nbsp;&#xA;     * @param  obj  the object to be compared for equality with this &lt;code>OpenMBeanParameterInfo&lt;/code> instance;&#xA;     * &#xA;     * @return  &lt;code>true&lt;/code> if the specified object is equal to this &lt;code>OpenMBeanParameterInfo&lt;/code> instance.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the hash code value for this &lt;code>OpenMBeanParameterInfo&lt;/code> instance. &#xA;     * &lt;p>&#xA;     * The hash code of an &lt;code>OpenMBeanParameterInfo&lt;/code> instance is the sum of the hash codes&#xA;     * of all elements of information used in &lt;code>equals&lt;/code> comparisons &#xA;     * (ie: its name, its &lt;i>open type&lt;/i>, and its default, min, max and legal values). &#xA;     * &lt;p>&#xA;     * This ensures that &lt;code> t1.equals(t2) &lt;/code> implies that &lt;code> t1.hashCode()==t2.hashCode() &lt;/code> &#xA;     * for any two &lt;code>OpenMBeanParameterInfo&lt;/code> instances &lt;code>t1&lt;/code> and &lt;code>t2&lt;/code>, &#xA;     * as required by the general contract of the method&#xA;     * {@link Object#hashCode() Object.hashCode()}.&#xA;     * &lt;p>&#xA;     *&#xA;     * @return  the hash code value for this &lt;code>OpenMBeanParameterInfo&lt;/code> instance&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string representation of this &lt;code>OpenMBeanParameterInfo&lt;/code> instance. &#xA;     * &lt;p>&#xA;     * The string representation consists of the name of this class (ie &lt;code>javax.management.openmbean.OpenMBeanParameterInfo&lt;/code>), &#xA;     * the string representation of the name and open type of the described parameter, &#xA;     * and the string representation of its default, min, max and legal values.&#xA;     * &#xA;     * @return  a string representation of this &lt;code>OpenMBeanParameterInfo&lt;/code> instance&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>// to be substituted for jdk1.1.x</comments>
      <comments>// jmx import</comments>
      <comments>//</comments>
      <comments>/**&#xA; * &lt;p>Describes a parameter used in one or more operations or&#xA; * constructors of an open MBean.&lt;/p>&#xA; *&#xA; * &lt;p>This interface declares the same methods as the class {@link&#xA; * javax.management.MBeanParameterInfo}.  A class implementing this&#xA; * interface (typically {@link OpenMBeanParameterInfoSupport}) should&#xA; * extend {@link javax.management.MBeanParameterInfo}.&lt;/p>&#xA; *&#xA; * @version     3.21  03/12/19&#xA; * @author      Sun Microsystems, Inc.&#xA; *&#xA; * @since 1.5&#xA; * @since.unbundled JMX 1.1&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
