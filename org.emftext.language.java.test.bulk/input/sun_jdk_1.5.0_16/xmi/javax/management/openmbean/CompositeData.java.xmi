<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="CompositeData.java">
  <comments>/*&#xA; * @(#)CompositeData.java&#x9;3.19 04/02/10&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>management</namespaces>
  <namespaces>openmbean</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <comments>// java import</comments>
    <comments>//</comments>
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Collection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="CompositeData">
    <members xsi:type="members:InterfaceMethod" name="getCompositeType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CompositeType.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;i>composite type &lt;/i> of this &lt;i>composite data&lt;/i> instance.&#xA;     *&#xA;     * @return the type of this CompositeData.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of the item whose name is &lt;tt>key&lt;/tt>.&#xA;     *&#xA;     * @param key the name of the item.&#xA;     *&#xA;     * @return the value associated with this key.&#xA;     *&#xA;     * @throws IllegalArgumentException  if &lt;tt>key&lt;/tt> is a null or empty String.&#xA;     *&#xA;     * @throws InvalidKeyException  if &lt;tt>key&lt;/tt> is not an existing item name for this &lt;tt>CompositeData&lt;/tt> instance.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAll">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keys">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of the values of the items whose names are specified by &lt;tt>keys&lt;/tt>, in the same order as &lt;tt>keys&lt;/tt>.&#xA;     *&#xA;     * @param keys the names of the items.&#xA;     *&#xA;     * @return the values corresponding to the keys.&#xA;     *&#xA;     * @throws IllegalArgumentException  if an element in &lt;tt>keys&lt;/tt> is a null or empty String.&#xA;     *&#xA;     * @throws InvalidKeyException  if an element in &lt;tt>keys&lt;/tt> is not an existing item name for this &lt;tt>CompositeData&lt;/tt> instance.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="containsKey">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if and only if this &lt;tt>CompositeData&lt;/tt> instance contains &#xA;     * an item whose name is &lt;tt>key&lt;/tt>. &#xA;     * If &lt;tt>key&lt;/tt> is a null or empty String, this method simply returns false.&#xA;     *&#xA;     * @param key the key to be tested.&#xA;     *&#xA;     * @return true if this &lt;tt>CompositeData&lt;/tt> contains the key.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="containsValue">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if and only if this &lt;tt>CompositeData&lt;/tt> instance contains an item &#xA;     * whose value is &lt;tt>value&lt;/tt>.&#xA;     *&#xA;     * @param value the value to be tested.&#xA;     *&#xA;     * @return true if this &lt;tt>CompositeData&lt;/tt> contains the value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="values">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an unmodifiable Collection view of the item values contained in this &lt;tt>CompositeData&lt;/tt> instance.&#xA;     * The returned collection's iterator will return the values in the ascending lexicographic order of the corresponding &#xA;     * item names. &#xA;     *&#xA;     * @return the values.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Compares the specified &lt;var>obj&lt;/var> parameter with this &lt;code>CompositeData&lt;/code> instance for equality. &#xA;     * &lt;p>&#xA;     * Returns &lt;tt>true&lt;/tt> if and only if all of the following statements are true:&#xA;     * &lt;ul>&#xA;     * &lt;li>&lt;var>obj&lt;/var> is non null,&lt;/li>&#xA;     * &lt;li>&lt;var>obj&lt;/var> also implements the &lt;code>CompositeData&lt;/code> interface,&lt;/li>&#xA;     * &lt;li>their composite types are equal&lt;/li>&#xA;     * &lt;li>their contents (ie item values) are equal.&lt;/li>&#xA;     * &lt;/ul>&#xA;     * This ensures that this &lt;tt>equals&lt;/tt> method works properly for &lt;var>obj&lt;/var> parameters which are&#xA;     * different implementations of the &lt;code>CompositeData&lt;/code> interface.&#xA;     * &lt;br>&amp;nbsp;&#xA;     * @param  obj  the object to be compared for equality with this &lt;code>CompositeData&lt;/code> instance;&#xA;     * &#xA;     * @return  &lt;code>true&lt;/code> if the specified object is equal to this &lt;code>CompositeData&lt;/code> instance.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the hash code value for this &lt;code>CompositeData&lt;/code> instance. &#xA;     * &lt;p>&#xA;     * The hash code of a &lt;code>CompositeData&lt;/code> instance is the sum of the hash codes&#xA;     * of all elements of information used in &lt;code>equals&lt;/code> comparisons &#xA;     * (ie: its &lt;i>composite type&lt;/i> and all the item values). &#xA;     * &lt;p>&#xA;     * This ensures that &lt;code> t1.equals(t2) &lt;/code> implies that &lt;code> t1.hashCode()==t2.hashCode() &lt;/code> &#xA;     * for any two &lt;code>CompositeData&lt;/code> instances &lt;code>t1&lt;/code> and &lt;code>t2&lt;/code>, &#xA;     * as required by the general contract of the method&#xA;     * {@link Object#hashCode() Object.hashCode()}.&#xA;     * &lt;p>&#xA;     *&#xA;     * @return  the hash code value for this &lt;code>CompositeData&lt;/code> instance&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string representation of this &lt;code>CompositeData&lt;/code> instance. &#xA;     * &lt;p>&#xA;     * The string representation consists of the name of the implementing class, &#xA;     * the string representation of the composite type of this instance, and the string representation of the contents&#xA;     * (ie list the itemName=itemValue mappings).&#xA;     * &#xA;     * @return  a string representation of this &lt;code>CompositeData&lt;/code> instance&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>// jmx import</comments>
      <comments>//</comments>
      <comments>/**&#xA; * The &lt;tt>CompositeData&lt;/tt> interface specifies the behavior of a specific type of complex &lt;i>open data&lt;/i> objects&#xA; * which represent &lt;i>composite data&lt;/i> structures.&#xA; *&#xA; * @version     3.19  04/02/10&#xA; * @author      Sun Microsystems, Inc.&#xA; *&#xA; * @since 1.5&#xA; * @since.unbundled JMX 1.1&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
