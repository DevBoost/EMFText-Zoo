<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="JMXConnectorServerMBean.java">
  <comments>/*&#xA; * @(#)JMXConnectorServerMBean.java&#x9;1.25 04/05/05&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>management</namespaces>
  <namespaces>remote</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../MBeanServer.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="JMXConnectorServerMBean">
    <members xsi:type="members:InterfaceMethod" name="start">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Activates the connector server, that is, starts listening for&#xA;     * client connections.  Calling this method when the connector&#xA;     * server is already active has no effect.  Calling this method&#xA;     * when the connector server has been stopped will generate an&#xA;     * {@link IOException}.&lt;/p>&#xA;     *&#xA;     * @exception IOException if it is not possible to start listening&#xA;     * or if the connector server has been stopped.&#xA;     *&#xA;     * @exception IllegalStateException if the connector server has&#xA;     * not been attached to an MBean server.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="stop">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Deactivates the connector server, that is, stops listening for&#xA;     * client connections.  Calling this method will also close all&#xA;     * client connections that were made by this server.  After this&#xA;     * method returns, whether normally or with an exception, the&#xA;     * connector server will not create any new client&#xA;     * connections.&lt;/p>&#xA;     *&#xA;     * &lt;p>Once a connector server has been stopped, it cannot be started&#xA;     * again.&lt;/p>&#xA;     *&#xA;     * &lt;p>Calling this method when the connector server has already&#xA;     * been stopped has no effect.  Calling this method when the&#xA;     * connector server has not yet been started will disable the&#xA;     * connector server object permanently.&lt;/p>&#xA;     *&#xA;     * &lt;p>If closing a client connection produces an exception, that&#xA;     * exception is not thrown from this method.  A {@link&#xA;     * JMXConnectionNotification} with type {@link&#xA;     * JMXConnectionNotification#FAILED} is emitted from this MBean&#xA;     * with the connection ID of the connection that could not be&#xA;     * closed.&lt;/p>&#xA;     *&#xA;     * &lt;p>Closing a connector server is a potentially slow operation.&#xA;     * For example, if a client machine with an open connection has&#xA;     * crashed, the close operation might have to wait for a network&#xA;     * protocol timeout.  Callers that do not want to block in a close&#xA;     * operation should do it in a separate thread.&lt;/p>&#xA;     *&#xA;     * @exception IOException if the server cannot be closed cleanly.&#xA;     * When this exception is thrown, the server has already attempted&#xA;     * to close all client connections.  All client connections are&#xA;     * closed except possibly those that generated exceptions when the&#xA;     * server attempted to close them.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isActive">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Determines whether the connector server is active.  A connector&#xA;     * server starts being active when its {@link #start start} method&#xA;     * returns successfully and remains active until either its&#xA;     * {@link #stop stop} method is called or the connector server&#xA;     * fails.&lt;/p>&#xA;     *&#xA;     * @return true if the connector server is active.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setMBeanServerForwarder">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mbsf">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="MBeanServerForwarder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Adds an object that intercepts requests for the MBean server&#xA;     * that arrive through this connector server.  This object will be&#xA;     * supplied as the &lt;code>MBeanServer&lt;/code> for any new connection&#xA;     * created by this connector server.  Existing connections are&#xA;     * unaffected.&lt;/p>&#xA;     *&#xA;     * &lt;p>If this connector server is already associated with an&#xA;     * &lt;code>MBeanServer&lt;/code> object, then that object is given to&#xA;     * {@link MBeanServerForwarder#setMBeanServer&#xA;     * mbsf.setMBeanServer}.  If doing so produces an exception, this&#xA;     * method throws the same exception without any other effect.&lt;/p>&#xA;     *&#xA;     * &lt;p>If this connector is not already associated with an&#xA;     * &lt;code>MBeanServer&lt;/code> object, or if the&#xA;     * &lt;code>mbsf.setMBeanServer&lt;/code> call just mentioned succeeds,&#xA;     * then &lt;code>mbsf&lt;/code> becomes this connector server's&#xA;     * &lt;code>MBeanServer&lt;/code>.&lt;/p>&#xA;     *&#xA;     * @param mbsf the new &lt;code>MBeanServerForwarder&lt;/code>.&#xA;     *&#xA;     * @exception IllegalArgumentException if the call to {@link&#xA;     * MBeanServerForwarder#setMBeanServer mbsf.setMBeanServer} fails&#xA;     * with &lt;code>IllegalArgumentException&lt;/code>.  This includes the&#xA;     * case where &lt;code>mbsf&lt;/code> is null.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getConnectionIds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>The list of IDs for currently-open connections to this&#xA;     * connector server.&lt;/p>&#xA;     *&#xA;     * @return a new string array containing the list of IDs.  If&#xA;     * there are no currently-open connections, this array will be&#xA;     * empty.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAddress">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="JMXServiceURL.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>The address of this connector server.&lt;/p>&#xA;     *&#xA;     * @return the address of this connector server, or null if it&#xA;     * does not have one.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>The attributes for this connector server.&lt;/p>&#xA;     *&#xA;     * @return a read-only map containing the attributes for this&#xA;     * connector server.  Attributes whose values are not serializable&#xA;     * are omitted from this map.  If there are no serializable&#xA;     * attributes, the returned map is empty.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="toJMXConnector">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="JMXConnector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="env">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Returns a client stub for this connector server.  A client&#xA;     * stub is a serializable object whose {@link&#xA;     * JMXConnector#connect(Map) connect} method can be used to make&#xA;     * one new connection to this connector server.&lt;/p>&#xA;     *&#xA;     * &lt;p>A given connector need not support the generation of client&#xA;     * stubs.  However, the connectors specified by the JMX Remote API do &#xA;     * (JMXMP Connector and RMI Connector).&lt;/p>&#xA;     *&#xA;     * @param env client connection parameters of the same sort that&#xA;     * can be provided to {@link JMXConnector#connect(Map)&#xA;     * JMXConnector.connect(Map)}.  Can be null, which is equivalent&#xA;     * to an empty map.&#xA;     *&#xA;     * @return a client stub that can be used to make a new connection&#xA;     * to this connector server.&#xA;     *&#xA;     * @exception UnsupportedOperationException if this connector&#xA;     * server does not support the generation of client stubs.&#xA;     *&#xA;     * @exception IllegalStateException if the JMXConnectorServer is&#xA;     * not started (see {@link JMXConnectorServerMBean#isActive()}).&#xA;     *&#xA;     * @exception IOException if a communications problem means that a&#xA;     * stub cannot be created.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>MBean interface for connector servers.  A JMX API connector server&#xA; * is attached to an MBean server, and establishes connections to that&#xA; * MBean server for remote clients.&lt;/p>&#xA; *&#xA; * &lt;p>A newly-created connector server is &lt;em>inactive&lt;/em>, and does&#xA; * not yet listen for connections.  Only when its {@link #start start}&#xA; * method has been called does it start listening for connections.&lt;/p>&#xA; *&#xA; * @since 1.5&#xA; * @since.unbundled 1.0&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
