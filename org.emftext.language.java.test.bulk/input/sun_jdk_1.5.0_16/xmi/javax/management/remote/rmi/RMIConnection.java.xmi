<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="RMIConnection.java">
  <comments>/*&#xA; * @(#)RMIConnection.java&#x9;1.39 04/05/05&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>management</namespaces>
  <namespaces>remote</namespaces>
  <namespaces>rmi</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <comments>// IO</comments>
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/io/InterruptedIOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <comments>// RMI</comments>
    <namespaces>java</namespaces>
    <namespaces>rmi</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../java/rmi/Remote.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>rmi</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/rmi/MarshalledObject.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <comments>// JMX</comments>
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../AttributeList.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../AttributeNotFoundException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../InstanceAlreadyExistsException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../IntrospectionException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../InvalidAttributeValueException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../ListenerNotFoundException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../MalformedObjectNameException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../MBeanException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../MBeanInfo.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../MBeanRegistrationException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../MBeanServer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../MBeanServerConnection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../NotificationListener.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../NotCompliantMBeanException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../ObjectInstance.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../ReflectionException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <namespaces>loading</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../loading/ClassLoaderRepository.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <namespaces>remote</namespaces>
    <classifier xsi:type="classifiers:Class" href="../NotificationResult.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <comments>// Util</comments>
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../java/util/Set.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>security</namespaces>
    <namespaces>auth</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="RMIConnection">
    <members xsi:type="members:InterfaceMethod" name="getConnectionId">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Returns the connection ID.  This string is different for&#xA;     * every open connection to a given RMI connector server.&lt;/p>&#xA;     *&#xA;     * @return the connection ID&#xA;     *&#xA;     * @see RMIConnector#connect RMIConnector.connect&#xA;     *&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="close">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Closes this connection.  On return from this method, the RMI&#xA;     * object implementing this interface is unexported, so further&#xA;     * remote calls to it will fail.&lt;/p>&#xA;     *&#xA;     * @throws IOException if the connection could not be closed,&#xA;     * or the Remote object could not be unexported, or there was a&#xA;     * communication failure when transmitting the remote close&#xA;     * request.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createMBean">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ObjectInstance.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="className">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ReflectionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceAlreadyExistsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../MBeanRegistrationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../NotCompliantMBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#createMBean(String,&#xA;     * ObjectName)}.&#xA;     *&#xA;     * @param className The class name of the MBean to be instantiated.&#xA;     * @param name The object name of the MBean. May be null.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return An &lt;code>ObjectInstance&lt;/code>, containing the&#xA;     * &lt;code>ObjectName&lt;/code> and the Java class name of the newly&#xA;     * instantiated MBean.  If the contained &lt;code>ObjectName&lt;/code>&#xA;     * is &lt;code>n&lt;/code>, the contained Java class name is&#xA;     * &lt;code>{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()&lt;/code>.&#xA;     *&#xA;     * @throws ReflectionException Wraps a&#xA;     * &lt;code>java.lang.ClassNotFoundException&lt;/code> or a&#xA;     * &lt;code>java.lang.Exception&lt;/code> that occurred&#xA;     * when trying to invoke the MBean's constructor.&#xA;     * @throws InstanceAlreadyExistsException The MBean is already&#xA;     * under the control of the MBean server.&#xA;     * @throws MBeanRegistrationException The&#xA;     * &lt;code>preRegister&lt;/code> (&lt;code>MBeanRegistration&lt;/code>&#xA;     * interface) method of the MBean has thrown an exception. The&#xA;     * MBean will not be registered.&#xA;     * @throws MBeanException The constructor of the MBean has&#xA;     * thrown an exception.&#xA;     * @throws NotCompliantMBeanException This class is not a JMX&#xA;     * compliant MBean.&#xA;     * @throws RuntimeOperationsException Wraps a&#xA;     * &lt;code>java.lang.IllegalArgumentException&lt;/code>: The className&#xA;     * passed in parameter is null, the &lt;code>ObjectName&lt;/code> passed&#xA;     * in parameter contains a pattern or no &lt;code>ObjectName&lt;/code>&#xA;     * is specified for the MBean.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createMBean">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ObjectInstance.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="className">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="loaderName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ReflectionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceAlreadyExistsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../MBeanRegistrationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../NotCompliantMBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#createMBean(String,&#xA;     * ObjectName, ObjectName)}.&#xA;     *&#xA;     * @param className The class name of the MBean to be instantiated.&#xA;     * @param name The object name of the MBean. May be null.&#xA;     * @param loaderName The object name of the class loader to be used.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return An &lt;code>ObjectInstance&lt;/code>, containing the&#xA;     * &lt;code>ObjectName&lt;/code> and the Java class name of the newly&#xA;     * instantiated MBean.  If the contained &lt;code>ObjectName&lt;/code>&#xA;     * is &lt;code>n&lt;/code>, the contained Java class name is&#xA;     * &lt;code>{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()&lt;/code>.&#xA;     *&#xA;     * @throws ReflectionException Wraps a&#xA;     * &lt;code>java.lang.ClassNotFoundException&lt;/code> or a&#xA;     * &lt;code>java.lang.Exception&lt;/code> that occurred when trying to&#xA;     * invoke the MBean's constructor.&#xA;     * @throws InstanceAlreadyExistsException The MBean is already&#xA;     * under the control of the MBean server.&#xA;     * @throws MBeanRegistrationException The&#xA;     * &lt;code>preRegister&lt;/code> (&lt;code>MBeanRegistration&lt;/code>&#xA;     * interface) method of the MBean has thrown an exception. The&#xA;     * MBean will not be registered.&#xA;     * @throws MBeanException The constructor of the MBean has&#xA;     * thrown an exception.&#xA;     * @throws NotCompliantMBeanException This class is not a JMX&#xA;     * compliant MBean.&#xA;     * @throws InstanceNotFoundException The specified class loader&#xA;     * is not registered in the MBean server.&#xA;     * @throws RuntimeOperationsException Wraps a&#xA;     * &lt;code>java.lang.IllegalArgumentException&lt;/code>: The className&#xA;     * passed in parameter is null, the &lt;code>ObjectName&lt;/code> passed&#xA;     * in parameter contains a pattern or no &lt;code>ObjectName&lt;/code>&#xA;     * is specified for the MBean.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createMBean">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ObjectInstance.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="className">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="params">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/rmi/MarshalledObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="signature">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ReflectionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceAlreadyExistsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../MBeanRegistrationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../NotCompliantMBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#createMBean(String,&#xA;     * ObjectName, Object[], String[])}.  The &lt;code>Object[]&lt;/code>&#xA;     * parameter is wrapped in a &lt;code>MarshalledObject&lt;/code>.&#xA;     *&#xA;     * @param className The class name of the MBean to be instantiated.&#xA;     * @param name The object name of the MBean. May be null.&#xA;     * @param params An array containing the parameters of the&#xA;     * constructor to be invoked, encapsulated into a&#xA;     * &lt;code>MarshalledObject&lt;/code>.  The encapsulated array can be&#xA;     * null, equivalent to an empty array.&#xA;     * @param signature An array containing the signature of the&#xA;     * constructor to be invoked.  Can be null, equivalent to an empty&#xA;     * array.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return An &lt;code>ObjectInstance&lt;/code>, containing the&#xA;     * &lt;code>ObjectName&lt;/code> and the Java class name of the newly&#xA;     * instantiated MBean.  If the contained &lt;code>ObjectName&lt;/code>&#xA;     * is &lt;code>n&lt;/code>, the contained Java class name is&#xA;     * &lt;code>{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()&lt;/code>.&#xA;     *&#xA;     * @throws ReflectionException Wraps a&#xA;     * &lt;code>java.lang.ClassNotFoundException&lt;/code> or a&#xA;     * &lt;code>java.lang.Exception&lt;/code> that occurred when trying to&#xA;     * invoke the MBean's constructor.&#xA;     * @throws InstanceAlreadyExistsException The MBean is already&#xA;     * under the control of the MBean server.&#xA;     * @throws MBeanRegistrationException The&#xA;     * &lt;code>preRegister&lt;/code> (&lt;code>MBeanRegistration&lt;/code>&#xA;     * interface) method of the MBean has thrown an exception. The&#xA;     * MBean will not be registered.&#xA;     * @throws MBeanException The constructor of the MBean has&#xA;     * thrown an exception.&#xA;     * @throws NotCompliantMBeanException This class is not a JMX&#xA;     * compliant MBean.&#xA;     * @throws RuntimeOperationsException Wraps a&#xA;     * &lt;code>java.lang.IllegalArgumentException&lt;/code>: The className&#xA;     * passed in parameter is null, the &lt;code>ObjectName&lt;/code> passed&#xA;     * in parameter contains a pattern, or no &lt;code>ObjectName&lt;/code>&#xA;     * is specified for the MBean.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createMBean">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ObjectInstance.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="className">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="loaderName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="params">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/rmi/MarshalledObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="signature">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ReflectionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceAlreadyExistsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../MBeanRegistrationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../NotCompliantMBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#createMBean(String,&#xA;     * ObjectName, ObjectName, Object[], String[])}.  The&#xA;     * &lt;code>Object[]&lt;/code> parameter is wrapped in a&#xA;     * &lt;code>MarshalledObject&lt;/code>.&#xA;     *&#xA;     * @param className The class name of the MBean to be instantiated.&#xA;     * @param name The object name of the MBean. May be null.&#xA;     * @param loaderName The object name of the class loader to be used.&#xA;     * @param params An array containing the parameters of the&#xA;     * constructor to be invoked, encapsulated into a&#xA;     * &lt;code>MarshalledObject&lt;/code>.  The encapsulated array can be&#xA;     * null, equivalent to an empty array.&#xA;     * @param signature An array containing the signature of the&#xA;     * constructor to be invoked.  Can be null, equivalent to an empty&#xA;     * array.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return An &lt;code>ObjectInstance&lt;/code>, containing the&#xA;     * &lt;code>ObjectName&lt;/code> and the Java class name of the newly&#xA;     * instantiated MBean.  If the contained &lt;code>ObjectName&lt;/code>&#xA;     * is &lt;code>n&lt;/code>, the contained Java class name is&#xA;     * &lt;code>{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()&lt;/code>.&#xA;     *&#xA;     * @throws ReflectionException Wraps a&#xA;     * &lt;code>java.lang.ClassNotFoundException&lt;/code> or a&#xA;     * &lt;code>java.lang.Exception&lt;/code> that occurred when trying to&#xA;     * invoke the MBean's constructor.&#xA;     * @throws InstanceAlreadyExistsException The MBean is already&#xA;     * under the control of the MBean server.&#xA;     * @throws MBeanRegistrationException The&#xA;     * &lt;code>preRegister&lt;/code> (&lt;code>MBeanRegistration&lt;/code>&#xA;     * interface) method of the MBean has thrown an exception. The&#xA;     * MBean will not be registered.&#xA;     * @throws MBeanException The constructor of the MBean has&#xA;     * thrown an exception.&#xA;     * @throws NotCompliantMBeanException This class is not a JMX&#xA;     * compliant MBean.&#xA;     * @throws InstanceNotFoundException The specified class loader&#xA;     * is not registered in the MBean server.&#xA;     * @throws RuntimeOperationsException Wraps a&#xA;     * &lt;code>java.lang.IllegalArgumentException&lt;/code>: The className&#xA;     * passed in parameter is null, the &lt;code>ObjectName&lt;/code> passed&#xA;     * in parameter contains a pattern, or no &lt;code>ObjectName&lt;/code>&#xA;     * is specified for the MBean.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="unregisterMBean">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../MBeanRegistrationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method&#xA;     * {@link javax.management.MBeanServerConnection#unregisterMBean(ObjectName)}.&#xA;     *&#xA;     * @param name The object name of the MBean to be unregistered.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @throws InstanceNotFoundException The MBean specified is not&#xA;     * registered in the MBean server.&#xA;     * @throws MBeanRegistrationException The preDeregister&#xA;     * ((&lt;code>MBeanRegistration&lt;/code> interface) method of the MBean&#xA;     * has thrown an exception.&#xA;     * @throws RuntimeOperationsException Wraps a&#xA;     * &lt;code>java.lang.IllegalArgumentException&lt;/code>: The object&#xA;     * name in parameter is null or the MBean you are when trying to&#xA;     * unregister is the {@link javax.management.MBeanServerDelegate&#xA;     * MBeanServerDelegate} MBean.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getObjectInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ObjectInstance.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method&#xA;     * {@link javax.management.MBeanServerConnection#getObjectInstance(ObjectName)}.&#xA;     *&#xA;     * @param name The object name of the MBean.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return The &lt;code>ObjectInstance&lt;/code> associated with the MBean&#xA;     * specified by &lt;var>name&lt;/var>.  The contained &lt;code>ObjectName&lt;/code>&#xA;     * is &lt;code>name&lt;/code> and the contained class name is&#xA;     * &lt;code>{@link #getMBeanInfo getMBeanInfo(name)}.getClassName()&lt;/code>.&#xA;     *&#xA;     * @throws InstanceNotFoundException The MBean specified is not&#xA;     * registered in the MBean server.&#xA;     * @throws RuntimeOperationsException Wraps a&#xA;     * &lt;code>java.lang.IllegalArgumentException&lt;/code>: The object&#xA;     * name in parameter is null.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="queryMBeans">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../ObjectInstance.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Set.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="query">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/rmi/MarshalledObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#queryMBeans(ObjectName,&#xA;     * QueryExp)}.  The &lt;code>QueryExp&lt;/code> is wrapped in a&#xA;     * &lt;code>MarshalledObject&lt;/code>.&#xA;     *&#xA;     * @param name The object name pattern identifying the MBeans to&#xA;     * be retrieved. If null or no domain and key properties are&#xA;     * specified, all the MBeans registered will be retrieved.&#xA;     * @param query The query expression to be applied for selecting&#xA;     * MBeans, encapsulated into a &lt;code>MarshalledObject&lt;/code>. If&#xA;     * the &lt;code>MarshalledObject&lt;/code> encapsulates a null value no&#xA;     * query expression will be applied for selecting MBeans.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return A set containing the &lt;code>ObjectInstance&lt;/code>&#xA;     * objects for the selected MBeans.  If no MBean satisfies the&#xA;     * query an empty list is returned.&#xA;     *&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="queryNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Set.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="query">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/rmi/MarshalledObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#queryNames(ObjectName,&#xA;     * QueryExp)}.  The &lt;code>QueryExp&lt;/code> is wrapped in a&#xA;     * &lt;code>MarshalledObject&lt;/code>.&#xA;     *&#xA;     * @param name The object name pattern identifying the MBean names&#xA;     * to be retrieved. If null or no domain and key properties are&#xA;     * specified, the name of all registered MBeans will be retrieved.&#xA;     * @param query The query expression to be applied for selecting&#xA;     * MBeans, encapsulated into a &lt;code>MarshalledObject&lt;/code>. If&#xA;     * the &lt;code>MarshalledObject&lt;/code> encapsulates a null value no&#xA;     * query expression will be applied for selecting MBeans.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return A set containing the ObjectNames for the MBeans&#xA;     * selected.  If no MBean satisfies the query, an empty list is&#xA;     * returned.&#xA;     *&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isRegistered">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method&#xA;     * {@link javax.management.MBeanServerConnection#isRegistered(ObjectName)}.&#xA;     *&#xA;     * @param name The object name of the MBean to be checked.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return True if the MBean is already registered in the MBean&#xA;     * server, false otherwise.&#xA;     *&#xA;     * @throws RuntimeOperationsException Wraps a&#xA;     * &lt;code>java.lang.IllegalArgumentException&lt;/code>: The object&#xA;     * name in parameter is null.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMBeanCount">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method&#xA;     * {@link javax.management.MBeanServerConnection#getMBeanCount()}.&#xA;     *&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return the number of MBeans registered.&#xA;     *&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttribute">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attribute">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../AttributeNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ReflectionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#getAttribute(ObjectName,&#xA;     * String)}.&#xA;     *&#xA;     * @param name The object name of the MBean from which the&#xA;     * attribute is to be retrieved.&#xA;     * @param attribute A String specifying the name of the attribute&#xA;     * to be retrieved.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return&#x9;The value of the retrieved attribute.&#xA;     *&#xA;     * @throws AttributeNotFoundException The attribute specified&#xA;     * is not accessible in the MBean.&#xA;     * @throws MBeanException Wraps an exception thrown by the&#xA;     * MBean's getter.&#xA;     * @throws InstanceNotFoundException The MBean specified is not&#xA;     * registered in the MBean server.&#xA;     * @throws ReflectionException Wraps a&#xA;     * &lt;code>java.lang.Exception&lt;/code> thrown when trying to invoke&#xA;     * the getter.&#xA;     * @throws RuntimeOperationsException Wraps a&#xA;     * &lt;code>java.lang.IllegalArgumentException&lt;/code>: The object&#xA;     * name in parameter is null or the attribute in parameter is&#xA;     * null.&#xA;     * @throws RuntimeMBeanException Wraps a runtime exception thrown&#xA;     * by the MBean's getter.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     *&#xA;     * @see #setAttribute&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../AttributeList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ReflectionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#getAttributes(ObjectName,&#xA;     * String[])}.&#xA;     *&#xA;     * @param name The object name of the MBean from which the&#xA;     * attributes are retrieved.&#xA;     * @param attributes A list of the attributes to be retrieved.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return The list of the retrieved attributes.&#xA;     *&#xA;     * @throws InstanceNotFoundException The MBean specified is not&#xA;     * registered in the MBean server.&#xA;     * @throws ReflectionException An exception occurred when&#xA;     * trying to invoke the getAttributes method of a Dynamic MBean.&#xA;     * @throws RuntimeOperationsException Wrap a&#xA;     * &lt;code>java.lang.IllegalArgumentException&lt;/code>: The object&#xA;     * name in parameter is null or attributes in parameter is null.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     *&#xA;     * @see #setAttributes&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attribute">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/rmi/MarshalledObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../AttributeNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InvalidAttributeValueException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ReflectionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#setAttribute(ObjectName,&#xA;     * Attribute)}.  The &lt;code>Attribute&lt;/code> parameter is wrapped&#xA;     * in a &lt;code>MarshalledObject&lt;/code>.&#xA;     *&#xA;     * @param name The name of the MBean within which the attribute is&#xA;     * to be set.&#xA;     * @param attribute The identification of the attribute to be set&#xA;     * and the value it is to be set to, encapsulated into a&#xA;     * &lt;code>MarshalledObject&lt;/code>.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @throws InstanceNotFoundException The MBean specified is not&#xA;     * registered in the MBean server.&#xA;     * @throws AttributeNotFoundException The attribute specified&#xA;     * is not accessible in the MBean.&#xA;     * @throws InvalidAttributeValueException The value specified&#xA;     * for the attribute is not valid.&#xA;     * @throws MBeanException Wraps an exception thrown by the&#xA;     * MBean's setter.&#xA;     * @throws ReflectionException Wraps a&#xA;     * &lt;code>java.lang.Exception&lt;/code> thrown when trying to invoke&#xA;     * the setter.&#xA;     * @throws RuntimeOperationsException Wraps a&#xA;     * &lt;code>java.lang.IllegalArgumentException&lt;/code>: The object&#xA;     * name in parameter is null or the attribute in parameter is&#xA;     * null.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     *&#xA;     * @see #getAttribute&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAttributes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../AttributeList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/rmi/MarshalledObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ReflectionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#setAttributes(ObjectName,&#xA;     * AttributeList)}.  The &lt;code>AttributeList&lt;/code> parameter is&#xA;     * wrapped in a &lt;code>MarshalledObject&lt;/code>.&#xA;     *&#xA;     * @param name The object name of the MBean within which the&#xA;     * attributes are to be set.&#xA;     * @param attributes A list of attributes: The identification of&#xA;     * the attributes to be set and the values they are to be set to,&#xA;     * encapsulated into a &lt;code>MarshalledObject&lt;/code>.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return The list of attributes that were set, with their new&#xA;     * values.&#xA;     *&#xA;     * @throws InstanceNotFoundException The MBean specified is not&#xA;     * registered in the MBean server.&#xA;     * @throws ReflectionException An exception occurred when&#xA;     * trying to invoke the getAttributes method of a Dynamic MBean.&#xA;     * @throws RuntimeOperationsException Wraps a&#xA;     * &lt;code>java.lang.IllegalArgumentException&lt;/code>: The object&#xA;     * name in parameter is null or attributes in parameter is null.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     *&#xA;     * @see #getAttributes&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="invoke">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="operationName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="params">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/rmi/MarshalledObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="signature">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ReflectionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#invoke(ObjectName,&#xA;     * String, Object[], String[])}.  The &lt;code>Object[]&lt;/code>&#xA;     * parameter is wrapped in a &lt;code>MarshalledObject&lt;/code>.&#xA;     *&#xA;     * @param name The object name of the MBean on which the method is&#xA;     * to be invoked.&#xA;     * @param operationName The name of the operation to be invoked.&#xA;     * @param params An array containing the parameters to be set when&#xA;     * the operation is invoked, encapsulated into a&#xA;     * &lt;code>MarshalledObject&lt;/code>.  The encapsulated array can be&#xA;     * null, equivalent to an empty array.&#xA;     * @param signature An array containing the signature of the&#xA;     * operation. The class objects will be loaded using the same&#xA;     * class loader as the one used for loading the MBean on which the&#xA;     * operation was invoked.  Can be null, equivalent to an empty&#xA;     * array.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return The object returned by the operation, which represents&#xA;     * the result of invoking the operation on the MBean specified.&#xA;     *&#xA;     * @throws InstanceNotFoundException The MBean specified is not&#xA;     * registered in the MBean server.&#xA;     * @throws MBeanException Wraps an exception thrown by the&#xA;     * MBean's invoked method.&#xA;     * @throws ReflectionException Wraps a&#xA;     * &lt;code>java.lang.Exception&lt;/code> thrown while trying to invoke&#xA;     * the method.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     * @throws RuntimeOperationsException Wraps an {@link&#xA;     * IllegalArgumentException} when &lt;code>name&lt;/code> or&#xA;     * &lt;code>operationName&lt;/code> is null.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDefaultDomain">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method&#xA;     * {@link javax.management.MBeanServerConnection#getDefaultDomain()}.&#xA;     *&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return the default domain.&#xA;     *&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDomains">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method&#xA;     * {@link javax.management.MBeanServerConnection#getDomains()}.&#xA;     *&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return the list of domains.&#xA;     *&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMBeanInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../MBeanInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../IntrospectionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ReflectionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method&#xA;     * {@link javax.management.MBeanServerConnection#getMBeanInfo(ObjectName)}.&#xA;     *&#xA;     * @param name The name of the MBean to analyze&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return An instance of &lt;code>MBeanInfo&lt;/code> allowing the&#xA;     * retrieval of all attributes and operations of this MBean.&#xA;     *&#xA;     * @throws IntrospectionException An exception occured during&#xA;     * introspection.&#xA;     * @throws InstanceNotFoundException The MBean specified was&#xA;     * not found.&#xA;     * @throws ReflectionException An exception occurred when&#xA;     * trying to invoke the getMBeanInfo of a Dynamic MBean.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     * @throws RuntimeOperationsException Wraps a&#xA;     * &lt;code>java.lang.IllegalArgumentException&lt;/code>: The object&#xA;     * name in parameter is null.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isInstanceOf">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="className">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#isInstanceOf(ObjectName,&#xA;     * String)}.&#xA;     *&#xA;     * @param name The &lt;code>ObjectName&lt;/code> of the MBean.&#xA;     * @param className The name of the class.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @return true if the MBean specified is an instance of the&#xA;     * specified class according to the rules above, false otherwise.&#xA;     *&#xA;     * @throws InstanceNotFoundException The MBean specified is not&#xA;     * registered in the MBean server.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     * @throws RuntimeOperationsException Wraps a&#xA;     * &lt;code>java.lang.IllegalArgumentException&lt;/code>: The object&#xA;     * name in parameter is null.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addNotificationListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/rmi/MarshalledObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="handback">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/rmi/MarshalledObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#addNotificationListener(ObjectName,&#xA;     * ObjectName, NotificationFilter, Object)}.  The&#xA;     * &lt;code>NotificationFilter&lt;/code> parameter is wrapped in a&#xA;     * &lt;code>MarshalledObject&lt;/code>.  The &lt;code>Object&lt;/code>&#xA;     * (handback) parameter is also wrapped in a&#xA;     * &lt;code>MarshalledObject&lt;/code>.&#xA;     *&#xA;     * @param name The name of the MBean on which the listener should&#xA;     * be added.&#xA;     * @param listener The object name of the listener which will&#xA;     * handle the notifications emitted by the registered MBean.&#xA;     * @param filter The filter object, encapsulated into a&#xA;     * &lt;code>MarshalledObject&lt;/code>. If filter encapsulated in the&#xA;     * &lt;code>MarshalledObject&lt;/code> has a null value, no filtering&#xA;     * will be performed before handling notifications.&#xA;     * @param handback The context to be sent to the listener when a&#xA;     * notification is emitted, encapsulated into a&#xA;     * &lt;code>MarshalledObject&lt;/code>.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @throws InstanceNotFoundException The MBean name of the&#xA;     * notification listener or of the notification broadcaster does&#xA;     * not match any of the registered MBeans.&#xA;     * @throws RuntimeOperationsException Wraps an {@link&#xA;     * IllegalArgumentException}.  The MBean named by&#xA;     * &lt;code>listener&lt;/code> exists but does not implement the {@link&#xA;     * NotificationListener} interface, or &lt;code>name&lt;/code> or&#xA;     * &lt;code>listener&lt;/code> is null.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     *&#xA;     * @see #removeNotificationListener(ObjectName, ObjectName, Subject)&#xA;     * @see #removeNotificationListener(ObjectName, ObjectName,&#xA;     * MarshalledObject, MarshalledObject, Subject)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeNotificationListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ListenerNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,&#xA;     * ObjectName)}.&#xA;     *&#xA;     * @param name The name of the MBean on which the listener should&#xA;     * be removed.&#xA;     * @param listener The object name of the listener to be removed.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @throws InstanceNotFoundException The MBean name provided&#xA;     * does not match any of the registered MBeans.&#xA;     * @throws ListenerNotFoundException The listener is not&#xA;     * registered in the MBean.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     * @throws RuntimeOperationsException Wraps an {@link&#xA;     * IllegalArgumentException} when &lt;code>name&lt;/code> or&#xA;     * &lt;code>listener&lt;/code> is null.&#xA;     *&#xA;     * @see #addNotificationListener&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeNotificationListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/rmi/MarshalledObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="handback">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/rmi/MarshalledObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ListenerNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,&#xA;     * ObjectName, NotificationFilter, Object)}.  The&#xA;     * &lt;code>NotificationFilter&lt;/code> parameter is wrapped in a&#xA;     * &lt;code>MarshalledObject&lt;/code>.  The &lt;code>Object&lt;/code>&#xA;     * parameter is also wrapped in a &lt;code>MarshalledObject&lt;/code>.&#xA;     *&#xA;     * @param name The name of the MBean on which the listener should&#xA;     * be removed.&#xA;     * @param listener A listener that was previously added to this&#xA;     * MBean.&#xA;     * @param filter The filter that was specified when the listener&#xA;     * was added, encapsulated into a &lt;code>MarshalledObject&lt;/code>.&#xA;     * @param handback The handback that was specified when the&#xA;     * listener was added, encapsulated into a &lt;code>MarshalledObject&lt;/code>.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @throws InstanceNotFoundException The MBean name provided&#xA;     * does not match any of the registered MBeans.&#xA;     * @throws ListenerNotFoundException The listener is not&#xA;     * registered in the MBean, or it is not registered with the given&#xA;     * filter and handback.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to perform this operation.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     * @throws RuntimeOperationsException Wraps an {@link&#xA;     * IllegalArgumentException} when &lt;code>name&lt;/code> or&#xA;     * &lt;code>listener&lt;/code> is null.&#xA;     *&#xA;     * @see #addNotificationListener&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addNotificationListeners">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="names">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filters">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/rmi/MarshalledObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubjects">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Special Handling of Notifications -------------------------------------</comments>
        <comments>/**&#xA;     * &lt;p>Handles the method {@link&#xA;     * javax.management.MBeanServerConnection#addNotificationListener(ObjectName,&#xA;     * NotificationListener, NotificationFilter, Object)}.&lt;/p>&#xA;     *&#xA;     * &lt;p>Register for notifications from the given MBeans that match&#xA;     * the given filters.  The remote client can subsequently retrieve&#xA;     * the notifications using the {@link #fetchNotifications&#xA;     * fetchNotifications} method.&lt;/p>&#xA;     *&#xA;     * &lt;p>For each listener, the original&#xA;     * &lt;code>NotificationListener&lt;/code> and &lt;code>handback&lt;/code> are&#xA;     * kept on the client side; in order for the client to be able to&#xA;     * identify them, the server generates and returns a unique&#xA;     * &lt;code>listenerID&lt;/code>.  This &lt;code>listenerID&lt;/code> is&#xA;     * forwarded with the &lt;code>Notifications&lt;/code> to the remote&#xA;     * client.&lt;/p>&#xA;     *&#xA;     * &lt;p>If any one of the given (name, filter) pairs cannot be&#xA;     * registered, then the operation fails with an exception, and no&#xA;     * names or filters are registered.&lt;/p>&#xA;     *&#xA;     * @param names the &lt;code>ObjectNames&lt;/code> identifying the&#xA;     * MBeans emitting the Notifications.&#xA;     * @param filters an array of marshalled representations of the&#xA;     * &lt;code>NotificationFilters&lt;/code>.  Elements of this array can&#xA;     * be null.&#xA;     * @param delegationSubjects the &lt;code>Subjects&lt;/code> on behalf&#xA;     * of which the listeners are being added.  Elements of this array&#xA;     * can be null.  Also, the &lt;code>delegationSubjects&lt;/code>&#xA;     * parameter itself can be null, which is equivalent to an array&#xA;     * of null values with the same size as the &lt;code>names&lt;/code> and&#xA;     * &lt;code>filters&lt;/code> arrays.&#xA;     *&#xA;     * @return an array of &lt;code>listenerIDs&lt;/code> identifying the&#xA;     * local listeners.  This array has the same number of elements as&#xA;     * the parameters.&#xA;     *&#xA;     * @throws IllegalArgumentException if &lt;code>names&lt;/code> or&#xA;     * &lt;code>filters&lt;/code> is null, or if &lt;code>names&lt;/code> contains&#xA;     * a null element, or if the three arrays do not all have the same&#xA;     * size.&#xA;     * @throws ClassCastException if one of the elements of&#xA;     * &lt;code>filters&lt;/code> unmarshalls as a non-null object that is&#xA;     * not a &lt;code>NotificationFilter&lt;/code>.&#xA;     * @throws InstanceNotFoundException if one of the&#xA;     * &lt;code>names&lt;/code> does not correspond to any registered MBean.&#xA;     * @throws SecurityException if, for one of the MBeans, the&#xA;     * client, or the delegated Subject if any, does not have&#xA;     * permission to add a listener.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeNotificationListeners">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listenerIDs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../ListenerNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Handles the&#xA;     * {@link javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener)&#xA;     * removeNotificationListener(ObjectName, NotificationListener)} and&#xA;     * {@link javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object)&#xA;     * removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)} methods.&lt;/p>&#xA;     *&#xA;     * &lt;p>This method removes one or more&#xA;     * &lt;code>NotificationListener&lt;/code>s from a given MBean in the&#xA;     * MBean server.&lt;/p>&#xA;     *&#xA;     * &lt;p>The &lt;code>NotificationListeners&lt;/code> are identified by the&#xA;     * IDs which were returned by the {@link&#xA;     * #addNotificationListeners(ObjectName[], MarshalledObject[],&#xA;     * Subject[])} method.&lt;/p>&#xA;     *&#xA;     * @param name the &lt;code>ObjectName&lt;/code> identifying the MBean &#xA;     * emitting the Notifications.&#xA;     * @param listenerIDs the list of the IDs corresponding to the&#xA;     * listeners to remove.&#xA;     * @param delegationSubject The &lt;code>Subject&lt;/code> containing the&#xA;     * delegation principals or &lt;code>null&lt;/code> if the authentication&#xA;     * principal is used instead.&#xA;     *&#xA;     * @throws InstanceNotFoundException if the given&#xA;     * &lt;code>name&lt;/code> does not correspond to any registered MBean.&#xA;     * @throws ListenerNotFoundException if one of the listeners was&#xA;     * not found on the server side.  This exception can happen if the&#xA;     * MBean discarded a listener for some reason other than a call to&#xA;     * &lt;code>MBeanServer.removeNotificationListener&lt;/code>.&#xA;     * @throws SecurityException if the client, or the delegated Subject&#xA;     * if any, does not have permission to remove the listeners.&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     * @throws IllegalArgumentException if &lt;code>ObjectName&lt;/code> or&#xA;     * &lt;code>listenerIds&lt;/code> is null or if &lt;code>listenerIds&lt;/code>&#xA;     * contains a null element.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="fetchNotifications">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NotificationResult.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clientSequenceNumber">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maxNotifications">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timeout">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Retrieves notifications from the connector server.  This&#xA;     * method can block until there is at least one notification or&#xA;     * until the specified timeout is reached.  The method can also&#xA;     * return at any time with zero notifications.&lt;/p>&#xA;     *&#xA;     * &lt;p>A notification can be included in the result if its sequence&#xA;     * number is no less than &lt;code>clientSequenceNumber&lt;/code> and&#xA;     * this client has registered at least one listener for the MBean&#xA;     * generating the notification, with a filter that accepts the&#xA;     * notification.  Each listener that is interested in the&#xA;     * notification is identified by an Integer ID that was returned&#xA;     * by {@link #addNotificationListeners(ObjectName[],&#xA;     * MarshalledObject[], Subject[])}.&lt;/p>&#xA;     *&#xA;     * @param clientSequenceNumber the first sequence number that the&#xA;     * client is interested in.  If negative, it is interpreted as&#xA;     * meaning the sequence number that the next notification will&#xA;     * have.&#xA;     *&#xA;     * @param maxNotifications the maximum number of different&#xA;     * notifications to return.  The &lt;code>TargetedNotification&lt;/code>&#xA;     * array in the returned &lt;code>NotificationResult&lt;/code> can have&#xA;     * more elements than this if the same notification appears more&#xA;     * than once.  The behavior is unspecified if this parameter is&#xA;     * negative.&#xA;     *&#xA;     * @param timeout the maximum time in milliseconds to wait for a&#xA;     * notification to arrive.  This can be 0 to indicate that the&#xA;     * method should not wait if there are no notifications, but&#xA;     * should return at once.  It can be &lt;code>Long.MAX_VALUE&lt;/code>&#xA;     * to indicate that there is no timeout.  The behavior is&#xA;     * unspecified if this parameter is negative.&#xA;     *&#xA;     * @return A &lt;code>NotificationResult&lt;/code>.&#xA;     *&#xA;     * @throws IOException if a general communication exception occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** &#xA; * &lt;p>RMI object used to forward an MBeanServer request from a client&#xA; * to its MBeanServer implementation on the server side.  There is one&#xA; * Remote object implementing this interface for each remote client&#xA; * connected to an RMI connector.&lt;/p>&#xA; *&#xA; * &lt;p>User code does not usually refer to this interface.  It is&#xA; * specified as part of the public API so that different&#xA; * implementations of that API will interoperate.&lt;/p>&#xA; *&#xA; * &lt;p>To ensure that client parameters will be deserialized at the&#xA; * server side with the correct classloader, client parameters such as&#xA; * parameters used to invoke a method are wrapped in a {@link&#xA; * MarshalledObject}.  An implementation of this interface must first&#xA; * get the appropriate class loader for the operation and its target,&#xA; * then deserialize the marshalled parameters with this classloader.&#xA; * Except as noted, a parameter that is a&#xA; * &lt;code>MarshalledObject&lt;/code> or &lt;code>MarshalledObject[]&lt;/code>&#xA; * must not be null; the behavior is unspecified if it is.&lt;/p>&#xA; *&#xA; * &lt;p>Class loading aspects are detailed in the companion document &#xA; * &lt;em>JMX Remote API&lt;/em>, which completes this documentation.&#xA; * It should be available as a PDF document in the same place as this &#xA; * Javadoc specification.&lt;/p>&#xA; *&#xA; * @since 1.5&#xA; * @since.unbundled 1.0&#xA; * &lt;p>Most methods in this interface parallel methods in the {@link&#xA; * MBeanServerConnection} interface.  Where an aspect of the behavior&#xA; * of a method is not specified here, it is the same as in the&#xA; * corresponding &lt;code>MBeanServerConnection&lt;/code> method.&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../java/rmi/Remote.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
