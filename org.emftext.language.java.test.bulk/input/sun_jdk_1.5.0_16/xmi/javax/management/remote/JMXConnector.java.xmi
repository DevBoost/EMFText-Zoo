<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/types ../../../java.ecore#/16" name="JMXConnector.java">
  <comments>/*&#xA; * @(#)JMXConnector.java&#x9;1.30 04/05/05&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>management</namespaces>
  <namespaces>remote</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../ListenerNotFoundException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../MBeanServerConnection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../NotificationBroadcaster.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../NotificationEmitter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../NotificationFilter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../NotificationListener.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>security</namespaces>
    <namespaces>auth</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../security/auth/Subject.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="JMXConnector">
    <members xsi:type="members:Field" name="CREDENTIALS">
      <initialValue xsi:type="references:StringReference" value="jmx.remote.credentials"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * &lt;p>Name of the attribute that specifies the credentials to send&#xA;      * to the connector server during connection.  The value&#xA;      * associated with this attribute, if any, is a serializable&#xA;      * object of an appropriate type for the server's {@link&#xA;      * JMXAuthenticator}.&#xA;      */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="connect">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Establishes the connection to the connector server.  This&#xA;     * method is equivalent to {@link #connect(Map)&#xA;     * connect(null)}.&lt;/p>&#xA;     *&#xA;     * @exception IOException if the connection could not be made&#xA;     * because of a communication problem.&#xA;     *&#xA;     * @exception SecurityException if the connection could not be&#xA;     * made for security reasons.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="connect">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="env">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Establishes the connection to the connector server.&lt;/p>&#xA;     *&#xA;     * &lt;p>If &lt;code>connect&lt;/code> has already been called successfully&#xA;     * on this object, calling it again has no effect.  If, however,&#xA;     * {@link #close} was called after &lt;code>connect&lt;/code>, the new&#xA;     * &lt;code>connect&lt;/code> will throw an &lt;code>IOException&lt;/code>.&lt;p>&#xA;     *&#xA;     * &lt;p>Otherwise, either &lt;code>connect&lt;/code> has never been called&#xA;     * on this object, or it has been called but produced an&#xA;     * exception.  Then calling &lt;code>connect&lt;/code> will attempt to&#xA;     * establish a connection to the connector server.&lt;/p>&#xA;     *&#xA;     * @param env the properties of the connection.  Properties in&#xA;     * this map override properties in the map specified when the&#xA;     * &lt;code>JMXConnector&lt;/code> was created, if any.  This parameter&#xA;     * can be null, which is equivalent to an empty map.&#xA;     *&#xA;     * @exception IOException if the connection could not be made&#xA;     * because of a communication problem.&#xA;     *&#xA;     * @exception SecurityException if the connection could not be&#xA;     * made for security reasons.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMBeanServerConnection">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../MBeanServerConnection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Returns an &lt;code>MBeanServerConnection&lt;/code> object&#xA;     * representing a remote MBean server.  For a given&#xA;     * &lt;code>JMXConnector&lt;/code>, two successful calls to this method&#xA;     * will usually return the same &lt;code>MBeanServerConnection&lt;/code>&#xA;     * object, though this is not required.&lt;/p>&#xA;     *&#xA;     * &lt;p>For each method in the returned&#xA;     * &lt;code>MBeanServerConnection&lt;/code>, calling the method causes&#xA;     * the corresponding method to be called in the remote MBean&#xA;     * server.  The value returned by the MBean server method is the&#xA;     * value returned to the client.  If the MBean server method&#xA;     * produces an &lt;code>Exception&lt;/code>, the same&#xA;     * &lt;code>Exception&lt;/code> is seen by the client.  If the MBean&#xA;     * server method, or the attempt to call it, produces an&#xA;     * &lt;code>Error&lt;/code>, the &lt;code>Error&lt;/code> is wrapped in a&#xA;     * {@link JMXServerErrorException}, which is seen by the&#xA;     * client.&lt;/p>&#xA;     *&#xA;     * &lt;p>Calling this method is equivalent to calling&#xA;     * {@link #getMBeanServerConnection(Subject) getMBeanServerConnection(null)}&#xA;     * meaning that no delegation subject is specified and that all the&#xA;     * operations called on the &lt;code>MBeanServerConnection&lt;/code> must&#xA;     * use the authenticated subject, if any.&lt;/p>&#xA;     *&#xA;     * @return an object that implements the&#xA;     * &lt;code>MBeanServerConnection&lt;/code> interface by forwarding its&#xA;     * methods to the remote MBean server.&#xA;     *&#xA;     * @exception IOException if a valid&#xA;     * &lt;code>MBeanServerConnection&lt;/code> cannot be created, for&#xA;     * instance because the connection to the remote MBean server has&#xA;     * not yet been established (with the {@link #connect(Map)&#xA;     * connect} method), or it has been closed, or it has broken.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMBeanServerConnection">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../MBeanServerConnection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegationSubject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Returns an &lt;code>MBeanServerConnection&lt;/code> object representing&#xA;     * a remote MBean server on which operations are performed on behalf of&#xA;     * the supplied delegation subject. For a given &lt;code>JMXConnector&lt;/code>&#xA;     * and &lt;code>Subject&lt;/code>, two successful calls to this method will&#xA;     * usually return the same &lt;code>MBeanServerConnection&lt;/code> object,&#xA;     * though this is not required.&lt;/p>&#xA;     *&#xA;     * &lt;p>For each method in the returned&#xA;     * &lt;code>MBeanServerConnection&lt;/code>, calling the method causes&#xA;     * the corresponding method to be called in the remote MBean&#xA;     * server on behalf of the given delegation subject instead of the&#xA;     * authenticated subject. The value returned by the MBean server&#xA;     * method is the value returned to the client. If the MBean server&#xA;     * method produces an &lt;code>Exception&lt;/code>, the same&#xA;     * &lt;code>Exception&lt;/code> is seen by the client. If the MBean&#xA;     * server method, or the attempt to call it, produces an&#xA;     * &lt;code>Error&lt;/code>, the &lt;code>Error&lt;/code> is wrapped in a&#xA;     * {@link JMXServerErrorException}, which is seen by the&#xA;     * client.&lt;/p>&#xA;     *&#xA;     * @param delegationSubject the &lt;code>Subject&lt;/code> on behalf of&#xA;     * which requests will be performed.  Can be null, in which case&#xA;     * requests will be performed on behalf of the authenticated&#xA;     * Subject, if any.&#xA;     *&#xA;     * @return an object that implements the &lt;code>MBeanServerConnection&lt;/code>&#xA;     * interface by forwarding its methods to the remote MBean server on behalf&#xA;     * of a given delegation subject.&#xA;     *&#xA;     * @exception IOException if a valid &lt;code>MBeanServerConnection&lt;/code>&#xA;     * cannot be created, for instance because the connection to the remote&#xA;     * MBean server has not yet been established (with the {@link #connect(Map)&#xA;     * connect} method), or it has been closed, or it has broken.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="close">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Closes the client connection to its server.  Any ongoing or new&#xA;     * request using the MBeanServerConnection returned by {@link&#xA;     * #getMBeanServerConnection()} will get an&#xA;     * &lt;code>IOException&lt;/code>.&lt;/p>&#xA;     *&#xA;     * &lt;p>If &lt;code>close&lt;/code> has already been called successfully&#xA;     * on this object, calling it again has no effect.  If&#xA;     * &lt;code>close&lt;/code> has never been called, or if it was called&#xA;     * but produced an exception, an attempt will be made to close the&#xA;     * connection.  This attempt can succeed, in which case&#xA;     * &lt;code>close&lt;/code> will return normally, or it can generate an&#xA;     * exception.&lt;/p>&#xA;     *&#xA;     * &lt;p>Closing a connection is a potentially slow operation.  For&#xA;     * example, if the server has crashed, the close operation might&#xA;     * have to wait for a network protocol timeout.  Callers that do&#xA;     * not want to block in a close operation should do it in a&#xA;     * separate thread.&lt;/p>&#xA;     *&#xA;     * @exception IOException if the connection cannot be closed&#xA;     * cleanly.  If this exception is thrown, it is not known whether&#xA;     * the server end of the connection has been cleanly closed.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addConnectionNotificationListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../NotificationListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../NotificationFilter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="handback">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Adds a listener to be informed of changes in connection&#xA;     * status.  The listener will receive notifications of type {@link&#xA;     * JMXConnectionNotification}.  An implementation can send other&#xA;     * types of notifications too.&lt;/p>&#xA;     *&#xA;     * &lt;p>Any number of listeners can be added with this method.  The&#xA;     * same listener can be added more than once with the same or&#xA;     * different values for the filter and handback.  There is no&#xA;     * special treatment of a duplicate entry.  For example, if a&#xA;     * listener is registered twice with no filter, then its&#xA;     * &lt;code>handleNotification&lt;/code> method will be called twice for&#xA;     * each notification.&lt;/p>&#xA;     *&#xA;     * @param listener a listener to receive connection status&#xA;     * notifications.&#xA;     * @param filter a filter to select which notifications are to be&#xA;     * delivered to the listener, or null if all notifications are to&#xA;     * be delivered.&#xA;     * @param handback an object to be given to the listener along&#xA;     * with each notification.  Can be null.&#xA;     *&#xA;     * @exception NullPointerException if &lt;code>listener&lt;/code> is&#xA;     * null.&#xA;     *&#xA;     * @see #removeConnectionNotificationListener&#xA;     * @see NotificationBroadcaster#addNotificationListener&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeConnectionNotificationListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../NotificationListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../ListenerNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Removes a listener from the list to be informed of changes&#xA;     * in status.  The listener must previously have been added.  If&#xA;     * there is more than one matching listener, all are removed.&lt;/p>&#xA;     *&#xA;     * @param listener a listener to receive connection status&#xA;     * notifications.&#xA;     *&#xA;     * @exception NullPointerException if &lt;code>listener&lt;/code> is&#xA;     * null.&#xA;     *&#xA;     * @exception ListenerNotFoundException if the listener is not&#xA;     * registered with this &lt;code>JMXConnector&lt;/code>.&#xA;     *&#xA;     * @see #removeConnectionNotificationListener(NotificationListener,&#xA;     * NotificationFilter, Object)&#xA;     * @see #addConnectionNotificationListener&#xA;     * @see NotificationEmitter#removeNotificationListener&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeConnectionNotificationListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../NotificationListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="f">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../NotificationFilter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="handback">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../ListenerNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Removes a listener from the list to be informed of changes&#xA;     * in status.  The listener must previously have been added with&#xA;     * the same three parameters.  If there is more than one matching&#xA;     * listener, only one is removed.&lt;/p>&#xA;     *&#xA;     * @param l a listener to receive connection status notifications.&#xA;     * @param f a filter to select which notifications are to be&#xA;     * delivered to the listener.  Can be null.&#xA;     * @param handback an object to be given to the listener along&#xA;     * with each notification.  Can be null.&#xA;     *&#xA;     * @exception ListenerNotFoundException if the listener is not&#xA;     * registered with this &lt;code>JMXConnector&lt;/code>, or is not&#xA;     * registered with the given filter and handback.&#xA;     *&#xA;     * @see #removeConnectionNotificationListener(NotificationListener)&#xA;     * @see #addConnectionNotificationListener&#xA;     * @see NotificationEmitter#removeNotificationListener&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getConnectionId">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Gets this connection's ID from the connector server.  For a&#xA;     * given connector server, every connection will have a unique id&#xA;     * which does not change during the lifetime of the&#xA;     * connection.&lt;/p>&#xA;     *&#xA;     * @return the unique ID of this connection.  This is the same as&#xA;     * the ID that the connector server includes in its {@link&#xA;     * JMXConnectionNotification}s.  The {@link&#xA;     * javax.management.remote package description} describes the&#xA;     * conventions for connection IDs.&#xA;     *&#xA;     * @exception IOException if the connection ID cannot be obtained,&#xA;     * for instance because the connection is closed or broken.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>The client end of a JMX API connector.  An object of this type can&#xA; * be used to establish a connection to a connector server.&lt;/p>&#xA; *&#xA; * &lt;p>A newly-created object of this type is unconnected.  Its {@link&#xA; * #connect connect} method must be called before it can be used.&#xA; * However, objects created by {@link&#xA; * JMXConnectorFactory#connect(JMXServiceURL, Map)&#xA; * JMXConnectorFactory.connect} are already connected.&lt;/p>&#xA; *&#xA; * @since 1.5&#xA; * @since.unbundled 1.0&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
