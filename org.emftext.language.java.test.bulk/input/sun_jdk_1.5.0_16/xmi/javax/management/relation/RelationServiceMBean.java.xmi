<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="RelationServiceMBean.java">
  <comments>/*&#xA; * @(#)RelationServiceMBean.java&#x9;1.26 04/02/10&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>management</namespaces>
  <namespaces>relation</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../ObjectName.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/List.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="RelationServiceMBean">
    <members xsi:type="members:InterfaceMethod" name="isActive">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationServiceNotRegisteredException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Checks if the Relation Service is active.&#xA;     * Current condition is that the Relation Service must be registered in the&#xA;     * MBean Server&#xA;     *&#xA;     * @exception RelationServiceNotRegisteredException  if it is not&#xA;     * registered&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPurgeFlag">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Accessors</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Returns the flag to indicate if when a notification is received for the&#xA;     * unregistration of an MBean referenced in a relation, if an immediate&#xA;     * &quot;purge&quot; of the relations (look for the relations no longer valid)&#xA;     * has to be performed, or if that will be performed only when the&#xA;     * purgeRelations method is explicitly called.&#xA;     * &lt;P>true is immediate purge.&#xA;     *&#xA;     * @return true if purges are immediate.&#xA;     *&#xA;     * @see #setPurgeFlag&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setPurgeFlag">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="thePurgeFlg">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the flag to indicate if when a notification is received for the&#xA;     * unregistration of an MBean referenced in a relation, if an immediate&#xA;     * &quot;purge&quot; of the relations (look for the relations no longer valid)&#xA;     * has to be performed, or if that will be performed only when the&#xA;     * purgeRelations method is explicitly called.&#xA;     * &lt;P>true is immediate purge.&#xA;     *&#xA;     * @param thePurgeFlg  flag&#xA;     *&#xA;     * @see #getPurgeFlag&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createRelationType">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelTypeName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRoleInfoArray">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="RoleInfo.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InvalidRelationTypeException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Relation type handling</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Creates a relation type (RelationTypeSupport object) with given&#xA;     * role infos (provided by the RoleInfo objects), and adds it in the&#xA;     * Relation Service.&#xA;     *&#xA;     * @param theRelTypeName  name of the relation type&#xA;     * @param theRoleInfoArray  array of role infos&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception InvalidRelationTypeException  If:&#xA;     * &lt;P>- there is already a relation type with that name&#xA;     * &lt;P>- the same name has been used for two different role infos&#xA;     * &lt;P>- no role info provided&#xA;     * &lt;P>- one null role info provided&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addRelationType">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelTypeObj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="RelationType.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InvalidRelationTypeException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds given object as a relation type. The object is expected to&#xA;     * implement the RelationType interface.&#xA;     *&#xA;     * @param theRelTypeObj  relation type object (implementing the&#xA;     * RelationType interface)&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception InvalidRelationTypeException  if there is already a relation&#xA;     * type with that name&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAllRelationTypeNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves names of all known relation types.&#xA;     *&#xA;     * @return ArrayList of relation type names (Strings)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRoleInfos">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelTypeName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationTypeNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves list of role infos (RoleInfo objects) of a given relation&#xA;     * type.&#xA;     *&#xA;     * @param theRelTypeName  name of relation type&#xA;     *&#xA;     * @return ArrayList of RoleInfo.&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationTypeNotFoundException  if there is no relation type&#xA;     * with that name.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRoleInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RoleInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelTypeName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRoleInfoName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationTypeNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RoleInfoNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves role info for given role of a given relation type.&#xA;     *&#xA;     * @param theRelTypeName  name of relation type&#xA;     * @param theRoleInfoName  name of role&#xA;     *&#xA;     * @return RoleInfo object.&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationTypeNotFoundException  if the relation type is not&#xA;     * known in the Relation Service&#xA;     * @exception RoleInfoNotFoundException  if the role is not part of the&#xA;     * relation type.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeRelationType">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelTypeName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationServiceNotRegisteredException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationTypeNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes given relation type from Relation Service.&#xA;     * &lt;P>The relation objects of that type will be removed from the&#xA;     * Relation Service.&#xA;     *&#xA;     * @param theRelTypeName  name of the relation type to be removed&#xA;     *&#xA;     * @exception RelationServiceNotRegisteredException  if the Relation&#xA;     * Service is not registered in the MBean Server&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationTypeNotFoundException  If there is no relation type&#xA;     * with that name&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createRelation">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelTypeName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRoleList">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="RoleList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationServiceNotRegisteredException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RoleNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InvalidRelationIdException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationTypeNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InvalidRoleValueException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Relation handling</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Creates a simple relation (represented by a RelationSupport object) of&#xA;     * given relation type, and adds it in the Relation Service.&#xA;     * &lt;P>Roles are initialized according to the role list provided in&#xA;     * parameter. The ones not initialized in this way are set to an empty&#xA;     * ArrayList of ObjectNames.&#xA;     * &lt;P>A RelationNotification, with type RELATION_BASIC_CREATION, is sent.&#xA;     *&#xA;     * @param theRelId  relation identifier, to identify uniquely the relation&#xA;     * inside the Relation Service&#xA;     * @param theRelTypeName  name of the relation type (has to be created&#xA;     * in the Relation Service)&#xA;     * @param theRoleList  role list to initialize roles of the relation (can&#xA;     * be null).&#xA;     *&#xA;     * @exception RelationServiceNotRegisteredException  if the Relation&#xA;     * Service is not registered in the MBean Server&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RoleNotFoundException  if a value is provided for a role&#xA;     * that does not exist in the relation type&#xA;     * @exception InvalidRelationIdException  if relation id already used&#xA;     * @exception RelationTypeNotFoundException  if relation type not known in&#xA;     * Relation Service&#xA;     * @exception InvalidRoleValueException if:&#xA;     * &lt;P>- the same role name is used for two different roles&#xA;     * &lt;P>- the number of referenced MBeans in given value is less than&#xA;     * expected minimum degree&#xA;     * &lt;P>- the number of referenced MBeans in provided value exceeds expected&#xA;     * maximum degree&#xA;     * &lt;P>- one referenced MBean in the value is not an Object of the MBean&#xA;     * class expected for that role&#xA;     * &lt;P>- an MBean provided for that role does not exist&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addRelation">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelObjectName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationServiceNotRegisteredException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/NoSuchMethodException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InvalidRelationIdException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InvalidRelationServiceException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationTypeNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RoleNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InvalidRoleValueException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds an MBean created by the user (and registered by him in the MBean&#xA;     * Server) as a relation in the Relation Service.&#xA;     * &lt;P>To be added as a relation, the MBean must conform to the&#xA;     * following:&#xA;     * &lt;P>- implement the Relation interface&#xA;     * &lt;P>- have for RelationService ObjectName the ObjectName of current&#xA;     * Relation Service&#xA;     * &lt;P>- have a relation id that is unique and unused in current Relation Service&#xA;     * &lt;P>- have for relation type a relation type created in the Relation&#xA;     * Service&#xA;     * &lt;P>- have roles conforming to the role info provided in the relation&#xA;     * type.&#xA;     *&#xA;     * @param theRelObjectName  ObjectName of the relation MBean to be added.&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationServiceNotRegisteredException  if the Relation&#xA;     * Service is not registered in the MBean Server&#xA;     * @exception NoSuchMethodException  If the MBean does not implement the&#xA;     * Relation interface&#xA;     * @exception InvalidRelationIdException  if:&#xA;     * &lt;P>- no relation identifier in MBean&#xA;     * &lt;P>- the relation identifier is already used in the Relation Service&#xA;     * @exception InstanceNotFoundException  if the MBean for given ObjectName&#xA;     * has not been registered&#xA;     * @exception InvalidRelationServiceException  if:&#xA;     * &lt;P>- no Relation Service name in MBean&#xA;     * &lt;P>- the Relation Service name in the MBean is not the one of the&#xA;     * current Relation Service&#xA;     * @exception RelationTypeNotFoundException  if:&#xA;     * &lt;P>- no relation type name in MBean&#xA;     * &lt;P>- the relation type name in MBean does not correspond to a relation&#xA;     * type created in the Relation Service&#xA;     * @exception InvalidRoleValueException  if:&#xA;     * &lt;P>- the number of referenced MBeans in a role is less than&#xA;     * expected minimum degree&#xA;     * &lt;P>- the number of referenced MBeans in a role exceeds expected&#xA;     * maximum degree&#xA;     * &lt;P>- one referenced MBean in the value is not an Object of the MBean&#xA;     * class expected for that role&#xA;     * &lt;P>- an MBean provided for a role does not exist&#xA;     * @exception RoleNotFoundException  if a value is provided for a role&#xA;     * that does not exist in the relation type&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isRelationMBean">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../ObjectName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * If the relation is represented by an MBean (created by the user and&#xA;     * added as a relation in the Relation Service), returns the ObjectName of&#xA;     * the MBean.&#xA;     *&#xA;     * @param theRelId  relation id identifying the relation&#xA;     *&#xA;     * @return ObjectName of the corresponding relation MBean, or null if&#xA;     * the relation is not an MBean.&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationNotFoundException there is no relation associated&#xA;     * to that id&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isRelation">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theObjName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the relation id associated to the given ObjectName if the&#xA;     * MBean has been added as a relation in the Relation Service.&#xA;     *&#xA;     * @param theObjName  ObjectName of supposed relation&#xA;     *&#xA;     * @return relation id (String) or null (if the ObjectName is not a&#xA;     * relation handled by the Relation Service)&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hasRelation">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Boolean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Checks if there is a relation identified in Relation Service with given&#xA;     * relation id.&#xA;     *&#xA;     * @param theRelId  relation id identifying the relation&#xA;     *&#xA;     * @return boolean: true if there is a relation, false else&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAllRelationIds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns all the relation ids for all the relations handled by the&#xA;     * Relation Service.&#xA;     *&#xA;     * @return ArrayList of String&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="checkRoleReading">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRoleName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelTypeName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationTypeNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Checks if given Role can be read in a relation of the given type.&#xA;     *&#xA;     * @param theRoleName  name of role to be checked&#xA;     * @param theRelTypeName  name of the relation type&#xA;     *&#xA;     * @return an Integer wrapping an integer corresponding to possible&#xA;     * problems represented as constants in RoleUnresolved:&#xA;     * &lt;P>- 0 if role can be read&#xA;     * &lt;P>- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME&#xA;     * &lt;P>- integer corresponding to RoleStatus.ROLE_NOT_READABLE&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationTypeNotFoundException  if the relation type is not&#xA;     * known in the Relation Service&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="checkRoleWriting">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRole">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Role.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelTypeName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theInitFlg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Boolean.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationTypeNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Checks if given Role can be set in a relation of given type.&#xA;     *&#xA;     * @param theRole  role to be checked&#xA;     * @param theRelTypeName  name of relation type&#xA;     * @param theInitFlg  flag to specify that the checking is done for the&#xA;     * initialization of a role, write access shall not be verified.&#xA;     *&#xA;     * @return an Integer wrapping an integer corresponding to possible&#xA;     * problems represented as constants in RoleUnresolved:&#xA;     * &lt;P>- 0 if role can be set&#xA;     * &lt;P>- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME&#xA;     * &lt;P>- integer for RoleStatus.ROLE_NOT_WRITABLE&#xA;     * &lt;P>- integer for RoleStatus.LESS_THAN_MIN_ROLE_DEGREE&#xA;     * &lt;P>- integer for RoleStatus.MORE_THAN_MAX_ROLE_DEGREE&#xA;     * &lt;P>- integer for RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS&#xA;     * &lt;P>- integer for RoleStatus.REF_MBEAN_NOT_REGISTERED&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationTypeNotFoundException  if unknown relation type&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="sendRelationCreationNotification">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sends a notification (RelationNotification) for a relation creation.&#xA;     * The notification type is:&#xA;     * &lt;P>- RelationNotification.RELATION_BASIC_CREATION if the relation is an&#xA;     * object internal to the Relation Service&#xA;     * &lt;P>- RelationNotification.RELATION_MBEAN_CREATION if the relation is a&#xA;     * MBean added as a relation.&#xA;     * &lt;P>The source object is the Relation Service itself.&#xA;     * &lt;P>It is called in Relation Service createRelation() and&#xA;     * addRelation() methods.&#xA;     *&#xA;     * @param theRelId  relation identifier of the updated relation&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationNotFoundException  if there is no relation for given&#xA;     * relation id&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="sendRoleUpdateNotification">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theNewRole">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Role.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theOldRoleValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/util/List.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sends a notification (RelationNotification) for a role update in the&#xA;     * given relation. The notification type is:&#xA;     * &lt;P>- RelationNotification.RELATION_BASIC_UPDATE if the relation is an&#xA;     * object internal to the Relation Service&#xA;     * &lt;P>- RelationNotification.RELATION_MBEAN_UPDATE if the relation is a&#xA;     * MBean added as a relation.&#xA;     * &lt;P>The source object is the Relation Service itself.&#xA;     * &lt;P>It is called in relation MBean setRole() (for given role) and&#xA;     * setRoles() (for each role) methods (implementation provided in&#xA;     * RelationSupport class).&#xA;     * &lt;P>It is also called in Relation Service setRole() (for given role) and&#xA;     * setRoles() (for each role) methods.&#xA;     *&#xA;     * @param theRelId  relation identifier of the updated relation&#xA;     * @param theNewRole  new role (name and new value)&#xA;     * @param theOldRoleValue  old role value (List of ObjectName objects)&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationNotFoundException  if there is no relation for given&#xA;     * relation id&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="sendRelationRemovalNotification">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theUnregMBeanList">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/util/List.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sends a notification (RelationNotification) for a relation removal.&#xA;     * The notification type is:&#xA;     * &lt;P>- RelationNotification.RELATION_BASIC_REMOVAL if the relation is an&#xA;     * object internal to the Relation Service&#xA;     * &lt;P>- RelationNotification.RELATION_MBEAN_REMOVAL if the relation is a&#xA;     * MBean added as a relation.&#xA;     * &lt;P>The source object is the Relation Service itself.&#xA;     * &lt;P>It is called in Relation Service removeRelation() method.&#xA;     *&#xA;     * @param theRelId  relation identifier of the updated relation&#xA;     * @param theUnregMBeanList  List of ObjectNames of MBeans expected&#xA;     * to be unregistered due to relation removal (can be null)&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationNotFoundException  if there is no relation for given&#xA;     * relation id&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateRoleMap">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theNewRole">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Role.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theOldRoleValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/util/List.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationServiceNotRegisteredException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Handles update of the Relation Service role map for the update of given&#xA;     * role in given relation.&#xA;     * &lt;P>It is called in relation MBean setRole() (for given role) and&#xA;     * setRoles() (for each role) methods (implementation provided in&#xA;     * RelationSupport class).&#xA;     * &lt;P>It is also called in Relation Service setRole() (for given role) and&#xA;     * setRoles() (for each role) methods.&#xA;     * &lt;P>To allow the Relation Service to maintain the consistency (in case&#xA;     * of MBean unregistration) and to be able to perform queries, this method&#xA;     * must be called when a role is updated.&#xA;     *&#xA;     * @param theRelId  relation identifier of the updated relation&#xA;     * @param theNewRole  new role (name and new value)&#xA;     * @param theOldRoleValue  old role value (List of ObjectName objects)&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationServiceNotRegisteredException  if the Relation&#xA;     * Service is not registered in the MBean Server&#xA;     * @exception RelationNotFoundException  if no relation for given id.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeRelation">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationServiceNotRegisteredException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes given relation from the Relation Service.&#xA;     * &lt;P>A RelationNotification notification is sent, its type being:&#xA;     * &lt;P>- RelationNotification.RELATION_BASIC_REMOVAL if the relation was&#xA;     * only internal to the Relation Service&#xA;     * &lt;P>- RelationNotification.RELATION_MBEAN_REMOVAL if the relation is&#xA;     * registered as an MBean.&#xA;     * &lt;P>For MBeans referenced in such relation, nothing will be done,&#xA;     *&#xA;     * @param theRelId  relation id of the relation to be removed&#xA;     *&#xA;     * @exception RelationServiceNotRegisteredException  if the Relation&#xA;     * Service is not registered in the MBean Server&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationNotFoundException  if no relation corresponding to&#xA;     * given relation id&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="purgeRelations">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationServiceNotRegisteredException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Purges the relations.&#xA;     *&#xA;     * &lt;P>Depending on the purgeFlag value, this method is either called&#xA;     * automatically when a notification is received for the unregistration of&#xA;     * an MBean referenced in a relation (if the flag is set to true), or not&#xA;     * (if the flag is set to false).&#xA;     * &lt;P>In that case it is up to the user to call it to maintain the&#xA;     * consistency of the relations. To be kept in mind that if an MBean is&#xA;     * unregistered and the purge not done immediately, if the ObjectName is&#xA;     * reused and assigned to another MBean referenced in a relation, calling&#xA;     * manually this purgeRelations() method will cause trouble, as will&#xA;     * consider the ObjectName as corresponding to the unregistered MBean, not&#xA;     * seeing the new one.&#xA;     *&#xA;     * &lt;P>The behavior depends on the cardinality of the role where the&#xA;     * unregistered MBean is referenced:&#xA;     * &lt;P>- if removing one MBean reference in the role makes its number of&#xA;     * references less than the minimum degree, the relation has to be removed.&#xA;     * &lt;P>- if the remaining number of references after removing the MBean&#xA;     * reference is still in the cardinality range, keep the relation and&#xA;     * update it calling its handleMBeanUnregistration() callback.&#xA;     *&#xA;     * @exception RelationServiceNotRegisteredException  if the Relation&#xA;     * Service is not registered in the MBean Server.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="findReferencingRelations">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theMBeanName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelTypeName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRoleName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the relations where a given MBean is referenced.&#xA;     * &lt;P>This corresponds to the CIM &quot;References&quot; and &quot;ReferenceNames&quot;&#xA;     * operations.&#xA;     *&#xA;     * @param theMBeanName  ObjectName of MBean&#xA;     * @param theRelTypeName  can be null; if specified, only the relations&#xA;     * of that type will be considered in the search. Else all relation types&#xA;     * are considered.&#xA;     * @param theRoleName  can be null; if specified, only the relations&#xA;     * where the MBean is referenced in that role will be returned. Else all&#xA;     * roles are considered.&#xA;     *&#xA;     * @return an HashMap, where the keys are the relation ids of the relations&#xA;     * where the MBean is referenced, and the value is, for each key,&#xA;     * an ArrayList of role names (as an MBean can be referenced in several&#xA;     * roles in the same relation).&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="findAssociatedMBeans">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theMBeanName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelTypeName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRoleName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the MBeans associated to given one in a relation.&#xA;     * &lt;P>This corresponds to CIM Associators and AssociatorNames operations.&#xA;     *&#xA;     * @param theMBeanName  ObjectName of MBean&#xA;     * @param theRelTypeName  can be null; if specified, only the relations&#xA;     * of that type will be considered in the search. Else all&#xA;     * relation types are considered.&#xA;     * @param theRoleName  can be null; if specified, only the relations&#xA;     * where the MBean is referenced in that role will be considered. Else all&#xA;     * roles are considered.&#xA;     *&#xA;     * @return an HashMap, where the keys are the ObjectNames of the MBeans&#xA;     * associated to given MBean, and the value is, for each key, an ArrayList&#xA;     * of the relation ids of the relations where the key MBean is&#xA;     * associated to given one (as they can be associated in several different&#xA;     * relations).&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="findRelationsOfType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelTypeName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationTypeNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the relation ids for relations of the given type.&#xA;     *&#xA;     * @param theRelTypeName  relation type name&#xA;     *&#xA;     * @return an ArrayList of relation ids.&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationTypeNotFoundException  if there is no relation type&#xA;     * with that name.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRole">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRoleName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationServiceNotRegisteredException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RoleNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves role value for given role name in given relation.&#xA;     *&#xA;     * @param theRelId  relation id&#xA;     * @param theRoleName  name of role&#xA;     *&#xA;     * @return the ArrayList of ObjectName objects being the role value&#xA;     *&#xA;     * @exception RelationServiceNotRegisteredException  if the Relation&#xA;     * Service is not registered&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationNotFoundException  if no relation with given id&#xA;     * @exception RoleNotFoundException  if:&#xA;     * &lt;P>- there is no role with given name&#xA;     * &lt;P>or&#xA;     * &lt;P>- the role is not readable.&#xA;     *&#xA;     * @see #setRole&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRoles">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RoleResult.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRoleNameArray">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationServiceNotRegisteredException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves values of roles with given names in given relation.&#xA;     *&#xA;     * @param theRelId  relation id&#xA;     * @param theRoleNameArray  array of names of roles to be retrieved&#xA;     *&#xA;     * @return a RoleResult object, including a RoleList (for roles&#xA;     * successfully retrieved) and a RoleUnresolvedList (for roles not&#xA;     * retrieved).&#xA;     *&#xA;     * @exception RelationServiceNotRegisteredException  if the Relation&#xA;     * Service is not registered in the MBean Server&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationNotFoundException  if no relation with given id&#xA;     *&#xA;     * @see #setRoles&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAllRoles">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RoleResult.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationServiceNotRegisteredException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns all roles present in the relation.&#xA;     *&#xA;     * @param theRelId  relation id&#xA;     *&#xA;     * @return a RoleResult object, including a RoleList (for roles&#xA;     * successfully retrieved) and a RoleUnresolvedList (for roles not&#xA;     * readable).&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationNotFoundException  if no relation for given id&#xA;     * @exception RelationServiceNotRegisteredException  if the Relation&#xA;     * Service is not registered in the MBean Server&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRoleCardinality">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRoleName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RoleNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the number of MBeans currently referenced in the&#xA;     * given role.&#xA;     *&#xA;     * @param theRelId  relation id&#xA;     * @param theRoleName  name of role&#xA;     *&#xA;     * @return the number of currently referenced MBeans in that role&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationNotFoundException  if no relation with given id&#xA;     * @exception RoleNotFoundException  if there is no role with given name&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setRole">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRole">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Role.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationServiceNotRegisteredException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RoleNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InvalidRoleValueException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationTypeNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the given role in given relation.&#xA;     * &lt;P>Will check the role according to its corresponding role definition&#xA;     * provided in relation's relation type&#xA;     * &lt;P>The Relation Service will keep track of the change to keep the&#xA;     * consistency of relations by handling referenced MBean unregistrations.&#xA;     *&#xA;     * @param theRelId  relation id&#xA;     * @param theRole  role to be set (name and new value)&#xA;     *&#xA;     * @exception RelationServiceNotRegisteredException  if the Relation&#xA;     * Service is not registered in the MBean Server&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationNotFoundException  if no relation with given id&#xA;     * @exception RoleNotFoundException  if:&#xA;     * &lt;P>- internal relation&#xA;     * &lt;P>and&#xA;     * &lt;P>- the role does not exist or is not writable&#xA;     * @exception InvalidRoleValueException  if internal relation and value&#xA;     * provided for role is not valid:&#xA;     * &lt;P>- the number of referenced MBeans in given value is less than&#xA;     * expected minimum degree&#xA;     * &lt;P>or&#xA;     * &lt;P>- the number of referenced MBeans in provided value exceeds expected&#xA;     * maximum degree&#xA;     * &lt;P>or&#xA;     * &lt;P>- one referenced MBean in the value is not an Object of the MBean&#xA;     * class expected for that role&#xA;     * &lt;P>or&#xA;     * &lt;P>- an MBean provided for that role does not exist&#xA;     * @exception RelationTypeNotFoundException  if unknown relation type&#xA;     *&#xA;     * @see #getRole&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setRoles">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RoleResult.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRoleList">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="RoleList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationServiceNotRegisteredException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the given roles in given relation.&#xA;     * &lt;P>Will check the role according to its corresponding role definition&#xA;     * provided in relation's relation type&#xA;     * &lt;P>The Relation Service keeps track of the changes to keep the&#xA;     * consistency of relations by handling referenced MBean unregistrations.&#xA;     *&#xA;     * @param theRelId  relation id&#xA;     * @param theRoleList  list of roles to be set&#xA;     *&#xA;     * @return a RoleResult object, including a RoleList (for roles&#xA;     * successfully set) and a RoleUnresolvedList (for roles not&#xA;     * set).&#xA;     *&#xA;     * @exception RelationServiceNotRegisteredException  if the Relation&#xA;     * Service is not registered in the MBean Server&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationNotFoundException  if no relation with given id&#xA;     *&#xA;     * @see #getRoles&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getReferencedMBeans">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves MBeans referenced in the various roles of the relation.&#xA;     *&#xA;     * @param theRelId  relation id&#xA;     *&#xA;     * @return a HashMap mapping:&#xA;     * &lt;P> ObjectName -> ArrayList of String (role&#xA;     * names)&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationNotFoundException  if no relation for given&#xA;     * relation id&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRelationTypeName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theRelId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RelationNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns name of associated relation type for given relation.&#xA;     *&#xA;     * @param theRelId  relation id&#xA;     *&#xA;     * @return the name of the associated relation type.&#xA;     *&#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     * @exception RelationNotFoundException  if no relation for given&#xA;     * relation id&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The Relation Service is in charge of creating and deleting relation types&#xA; * and relations, of handling the consistency and of providing query&#xA; * mechanisms.&#xA; *&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
