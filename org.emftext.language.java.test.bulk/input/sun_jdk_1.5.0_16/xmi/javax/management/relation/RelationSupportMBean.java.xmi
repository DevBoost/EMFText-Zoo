<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="RelationSupportMBean.java">
  <comments>/*&#xA; * @(#)RelationSupportMBean.java&#x9;1.19 03/12/19&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>management</namespaces>
  <namespaces>relation</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="RelationSupportMBean">
    <members xsi:type="members:InterfaceMethod" name="isInRelationService">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Boolean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an internal flag specifying if the object is still handled by&#xA;     * the Relation Service.&#xA;     *&#xA;     * @return a Boolean equal to {@link Boolean#TRUE} if the object&#xA;     * is still handled by the Relation Service and {@link&#xA;     * Boolean#FALSE} otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setRelationServiceManagementFlag">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="theFlg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Boolean.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Specifies whether this relation is handled by the Relation&#xA;     * Service.&lt;/p>&#xA;     * &lt;P>BEWARE, this method has to be exposed as the Relation Service will&#xA;     * access the relation through its management interface. It is RECOMMENDED&#xA;     * NOT to use this method. Using it does not affect the registration of the&#xA;     * relation object in the Relation Service, but will provide wrong&#xA;     * information about it!&#xA;     *&#xA;     * @param theFlg whether the relation is handled by the Relation Service.&#xA;     * &#xA;     * @exception IllegalArgumentException  if null parameter&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A RelationSupport object is used internally by the Relation Service to&#xA; * represent simple relations (only roles, no properties or methods), with an&#xA; * unlimited number of roles, of any relation type. As internal representation,&#xA; * it is not exposed to the user.&#xA; * &lt;P>RelationSupport class conforms to the design patterns of standard MBean. So&#xA; * the user can decide to instantiate a RelationSupport object himself as&#xA; * a MBean (as it follows the MBean design patterns), to register it in the&#xA; * MBean Server, and then to add it in the Relation Service.&#xA; * &lt;P>The user can also, when creating his own MBean relation class, have it&#xA; * extending RelationSupport, to retrieve the implementations of required&#xA; * interfaces (see below).&#xA; * &lt;P>It is also possible to have in a user relation MBean class a member&#xA; * being a RelationSupport object, and to implement the required interfaces by&#xA; * delegating all to this member.&#xA; * &lt;P> RelationSupport implements the Relation interface (to be handled by the&#xA; * Relation Service).&#xA; *&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Relation.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
