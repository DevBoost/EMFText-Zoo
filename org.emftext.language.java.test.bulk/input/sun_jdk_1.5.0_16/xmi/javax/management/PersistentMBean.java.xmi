<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/types ../../java.ecore#/16" name="PersistentMBean.java">
  <comments>/*&#xA; * @(#)file      PersistentMBean.java&#xA; * @(#)author    IBM Corp.&#xA; * @(#)version   1.19&#xA; * @(#)lastedit      04/02/10&#xA; *&#xA; *&#xA; * Copyright IBM Corp. 1999-2000.  All rights reserved.&#xA; * &#xA; * The program is provided &quot;as is&quot; without any warranty express or implied,&#xA; * including the warranty of non-infringement and the implied warranties of&#xA; * merchantibility and fitness for a particular purpose. IBM will not be&#xA; * liable for any damages suffered by you or any third party claim against &#xA; * you regarding the Program.&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.&#xA; * This software is the proprietary information of Sun Microsystems, Inc.&#xA; * Use is subject to license terms.&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc.  Tous droits reserves.&#xA; * Ce logiciel est propriete de Sun Microsystems, Inc.&#xA; * Distribue par des licences qui en restreignent l'utilisation. &#xA; *&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>management</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="MBeanException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="RuntimeOperationsException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="InstanceNotFoundException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="PersistentMBean">
    <members xsi:type="members:InterfaceMethod" name="load">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Instantiates thisMBean instance with the data found for&#xA;     * the MBean in the persistent store.  The data loaded could include&#xA;     * attribute and operation values.&#xA;     *&#xA;     * This method should be called during construction or initialization of this instance, &#xA;     * and before the MBean is registered with the MBeanServer. &#xA;     *&#xA;     * @exception MBeanException Wraps another exception or persistence is not supported &#xA;     * @exception RuntimeOperationsException Wraps exceptions from the persistence mechanism&#xA;     * @exception InstanceNotFoundException Could not find or load this MBean from persistent&#xA;     *                                      storage   &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="store">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Captures the current state of this MBean instance and&#xA;     * writes it out to the persistent store.  The state stored could include &#xA;     * attribute and operation values. If one of these methods of persistence is&#xA;     * not supported a &quot;serviceNotFound&quot; exception will be thrown.&#xA;     * &lt;P>&#xA;     * Persistence policy from the MBean and attribute descriptor is used to guide execution&#xA;     * of this method. The MBean should be stored if 'persistPolicy' field is:&#xA;     * &lt;PRE>  != &quot;never&quot; &#xA;     *   = &quot;always&quot; &#xA;     *   = &quot;onTimer&quot; and now > 'lastPersistTime' + 'persistPeriod'&#xA;     *   = &quot;NoMoreOftenThan&quot; and now > 'lastPersistTime' + 'persistPeriod'&#xA;     * &lt;P>&#xA;     * Do not store the MBean if 'persistPolicy' field is:&#xA;     *    = &quot;never&quot;&#xA;     *    = &quot;onUpdate&quot;&#xA;     *    = &quot;onTimer&quot; &amp;&amp; now &lt; 'lastPersistTime' + 'persistPeriod' &#xA;     * &lt;P>&lt;/PRE>&#xA;     *&#xA;     * @exception MBeanException Wraps another exception or persistence is not supported &#xA;     * @exception RuntimeOperationsException Wraps exceptions from the persistence mechanism&#xA;     * @exception InstanceNotFoundException Could not find/access the persistent store&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *  This class is the interface to be implemented by MBeans that are meant to be &#xA; *  persistent.  MBeans supporting this interface should call the load method during&#xA; *  construction in order to prime the MBean from the persistent store.&#xA; *  In the case of a ModelMBean, the store method should be called by the MBeanServer based on the descriptors in&#xA; *  the ModelMBean or by the MBean itself during normal processing of the ModelMBean.&#xA; *&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
