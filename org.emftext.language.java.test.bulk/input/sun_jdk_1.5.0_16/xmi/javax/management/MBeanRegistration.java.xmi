<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="MBeanRegistration.java">
  <comments>/*&#xA; * @(#)MBeanRegistration.java&#x9;4.17 04/02/11&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>management</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="MBeanRegistration">
    <members xsi:type="members:InterfaceMethod" name="preRegister">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ObjectName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="server">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="MBeanServer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>lang</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allows the MBean to perform any operations it needs before&#xA;     * being registered in the MBean server.  If the name of the MBean&#xA;     * is not specified, the MBean can provide a name for its&#xA;     * registration.  If any exception is raised, the MBean will not be&#xA;     * registered in the MBean server.&#xA;     *&#xA;     * @param server The MBean server in which the MBean will be registered.&#xA;     *&#xA;     * @param name The object name of the MBean.  This name is null if&#xA;     * the name parameter to one of the &lt;code>createMBean&lt;/code> or&#xA;     * &lt;code>registerMBean&lt;/code> methods in the {@link MBeanServer}&#xA;     * interface is null.  In that case, this method must return a&#xA;     * non-null ObjectName for the new MBean.&#xA;     *&#xA;     * @return The name under which the MBean is to be registered.&#xA;     * This value must not be null.  If the &lt;code>name&lt;/code>&#xA;     * parameter is not null, it will usually but not necessarily be&#xA;     * the returned value.&#xA;     *&#xA;     * @exception java.lang.Exception This exception will be caught by&#xA;     * the MBean server and re-thrown as an {@link&#xA;     * MBeanRegistrationException}.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="postRegister">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="registrationDone">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Boolean.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allows the MBean to perform any operations needed after having been&#xA;     * registered in the MBean server or after the registration has failed.&#xA;     *&#xA;     * @param registrationDone Indicates whether or not the MBean has&#xA;     * been successfully registered in the MBean server. The value&#xA;     * false means that the registration phase has failed.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="preDeregister">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>lang</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allows the MBean to perform any operations it needs before&#xA;     * being unregistered by the MBean server.&#xA;     *&#xA;     * @exception java.lang.Exception This exception will be caught by&#xA;     * the MBean server and re-thrown as an {@link&#xA;     * MBeanRegistrationException}.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="postDeregister">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allows the MBean to perform any operations needed after having been&#xA;     * unregistered in the MBean server.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Can be implemented by an MBean in order to&#xA; * carry out operations before and after being registered or unregistered from&#xA; * the MBean server.&#xA; *&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
