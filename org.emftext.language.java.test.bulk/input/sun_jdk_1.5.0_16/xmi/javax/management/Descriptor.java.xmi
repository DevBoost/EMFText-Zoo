<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="Descriptor.java">
  <comments>/*&#xA; * @(#)file      Descriptor.java&#xA; * @(#)author    IBM Corp.&#xA; * @(#)version   1.23&#xA; * @(#)lastedit      04/02/10&#xA; */</comments>
  <comments>/*&#xA; * Copyright IBM Corp. 1999-2000.  All rights reserved.&#xA; * &#xA; * The program is provided &quot;as is&quot; without any warranty express or implied,&#xA; * including the warranty of non-infringement and the implied warranties of&#xA; * merchantibility and fitness for a particular purpose. IBM will not be&#xA; * liable for any damages suffered by you or any third party claim against &#xA; * you regarding the Program.&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.&#xA; * This software is the proprietary information of Sun Microsystems, Inc.&#xA; * Use is subject to license terms.&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc.  Tous droits reserves.&#xA; * Ce logiciel est propriete de Sun Microsystems, Inc.&#xA; * Distribue par des licences qui en restreignent l'utilisation. &#xA; *&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>management</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="RuntimeOperationsException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="MBeanException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>trace</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../com/sun/jmx/trace/Trace.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Descriptor">
    <members xsi:type="members:InterfaceMethod" name="getFieldValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fieldName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;&#x9; * Returns the value for a specific fieldname.&#xA;&#x9; *&#xA;&#x9; * @param fieldName The field name in question; if not found, null is returned.&#xA;&#x9; *&#xA;&#x9; * @return Object Field value.&#xA;&#x9; *&#xA;&#x9; * @exception RuntimeOperationsException for illegal value for field name.&#xA;&#x9; *              &#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setField">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fieldName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fieldValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**         &#xA;&#x9; * Sets the value for a specific fieldname.&#x9;The field value will be validated before&#xA;&#x9; * it is set.  If it is not valid, then an exception will be thrown. This will modify&#xA;&#x9; * an existing field or add a new field.&#xA;&#x9; *&#xA;&#x9; * @param fieldName The field name to be set. Cannot be null or empty.&#xA;&#x9; * @param fieldValue The field value to be set for the field&#xA;&#x9; * name.  Can be null.&#xA;&#x9; *&#xA;&#x9; * @exception RuntimeOperationsException for illegal value for field name or field value.&#xA;&#x9; *              &#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFields">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;&#x9; * Returns all of the  fields contained in this descriptor as a string array.&#xA;&#x9; * &#xA;&#x9; * @return String array of fields in the format &lt;i>fieldName=fieldValue&lt;/i>&#xA;&#x9; *          If the value of a field is not a String, then the toString() method&#xA;&#x9; *          will be called on it and the returned value used as the value for&#xA;&#x9; *          the field in the returned array. Object values which are not Strings&#xA;&#x9; *          will be enclosed in parentheses. If the descriptor is empty, you will get&#xA;&#x9; *          an empty array.    &#xA;&#x9; *&#xA;&#x9; * @see #setFields&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFieldNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;&#x9; * Returns all the fields names in the descriptor.&#xA;&#x9; * &#xA;&#x9; * @return String array of fields names. If the descriptor is empty, you will get&#xA;&#x9; *          an empty array.&#xA;&#x9; *&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFieldValues">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fieldNames">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;&#x9; * Returns all the field values in the descriptor as an array of Objects. The&#xA;&#x9; * returned values are in the same order as the fieldNames String array parameter.&#xA;&#x9; *&#xA;&#x9; * @param fieldNames String array of the names of the fields that the values&#xA;&#x9; * should be returned for.  If the array is empty then an empty array will be &#xA;&#x9; * returned.  If the array is 'null' then all values will be returned.  If a field &#xA;&#x9; * name in the array does not exist, then null is returned for the matching array&#xA;&#x9; * element being returned.&#xA;&#x9; *&#xA;&#x9; * @return Object array of field values. If the descriptor is empty, you will get&#xA;&#x9; *          an empty array.&#xA;&#x9; *&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeField">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fieldName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;&#x9; * Removes a field from the descriptor.&#xA;&#x9; *&#xA;&#x9; * @param fieldName String name of the field to be removed.&#xA;&#x9; * If the field is not found no exception is thrown.&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setFields">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fieldNames">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fieldValues">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;&#x9; * Sets all Fields in the list to the new value in with the same index&#xA;&#x9; * in the fieldValue array.  Array sizes must match.  &#xA;&#x9; * The field value will be validated before it is set.  &#xA;&#x9; * If it is not valid, then an exception will be thrown.&#xA;&#x9; * If the arrays are empty, then no change will take effect.&#xA;     * &#xA;&#x9; * @param fieldNames String array of field names. The array and array elements cannot be null.&#xA;&#x9; * @param fieldValues Object array of the corresponding field values.  The array cannot be null.&#xA;&#x9; *                      Elements of the array can be null.&#xA;&#x9; *  &#xA;&#x9; * @exception RuntimeOperationsException for illegal value for field Names or field Values.&#xA;&#x9; *              Neither can be null.  The array lengths must be equal. &#xA;&#x9; *              If the descriptor construction fails for any reason, this exception will be thrown.&#xA;&#x9; *&#xA;&#x9; * @see #getFields&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="clone">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;&#x9; * Returns a new Descriptor which is a duplicate of the Descriptor.&#xA;&#x9; *&#xA;&#x9; * @exception RuntimeOperationsException for illegal value for field Names or field Values.&#xA;&#x9; *              If the descriptor construction fails for any reason, this exception will be thrown.&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isValid">
      <typeReference xsi:type="types:Boolean"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;&#x9; * Returns true if all of the fields have legal values given their&#xA;&#x9; * names.&#xA;&#x9; *&#xA;&#x9; * @return true if the values are legal.&#xA;&#x9; *&#xA;&#x9; * @exception RuntimeOperationsException If the validity checking fails for any reason, this exception will be thrown.&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This interface represents the behavioral metadata set for a JMX Element.&#xA; * For examples, a descriptor is part of the ModelMBeanInfo, ModelMBeanNotificationInfo, ModelMBeanAttributeInfo,&#xA; * ModelMBeanConstructorInfo, and ModelMBeanParameterInfo.&#xA; * &lt;P>&#xA; * A descriptor consists of a collection of fields.  Each field is in fieldname=fieldvalue format.&#xA; * &lt;P>&#xA; * All field names and values are not predefined. New fields can be defined and added by any program.&#xA; * In the case of ModelMBean some fields have been predefined for consistency of implementation and support by the ModelMBeanInfo&#xA; * ModelMBean*Info, and ModelMBean classes.&#xA; *&lt;P>&#xA; *&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../java/io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../java/lang/Cloneable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
