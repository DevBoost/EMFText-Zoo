<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ModelMBeanNotificationBroadcaster.java">
  <comments>/*&#xA; * @(#)file      ModelMBeanNotificationBroadcaster.java&#xA; * @(#)author    IBM Corp.&#xA; * @(#)version   1.21&#xA; * @(#)lastedit      04/02/10&#xA; */</comments>
  <comments>/*&#xA; * Copyright IBM Corp. 1999-2000.  All rights reserved.&#xA; * &#xA; * The program is provided &quot;as is&quot; without any warranty express or implied,&#xA; * including the warranty of non-infringement and the implied warranties of&#xA; * merchantibility and fitness for a particular purpose. IBM will not be&#xA; * liable for any damages suffered by you or any third party claim against &#xA; * you regarding the Program.&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.&#xA; * This software is the proprietary information of Sun Microsystems, Inc.&#xA; * Use is subject to license terms.&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc.  Tous droits reserves.&#xA; * Ce logiciel est propriete de Sun Microsystems, Inc.&#xA; * Distribue par des licences qui en restreignent l'utilisation. &#xA; *&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>management</namespaces>
  <namespaces>modelmbean</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../InstanceNotFoundException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ModelMBeanNotificationBroadcaster">
    <members xsi:type="members:InterfaceMethod" name="sendNotification">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ntfyObj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Notification.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;&#x9; * Sends a Notification which is passed in to the registered&#xA;&#x9; * Notification listeners on the ModelMBean as a&#xA;&#x9; * jmx.modelmbean.generic notification.&#xA;&#x9; *&#xA;&#x9; * @param ntfyObj The notification which is to be passed to&#xA;&#x9; * the 'handleNotification' method of the listener object.&#xA;&#x9; *&#xA;&#x9; * @exception MBeanException Wraps a distributed communication Exception.&#xA;&#x9; * @exception RuntimeOperationsException Wraps an IllegalArgumentException: &#xA;&#x9; *       The Notification object passed in parameter is null.&#xA;&#x9; *&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="sendNotification">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ntfyText">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;&#x9; * Sends a Notification which contains the text string that is passed in&#xA;&#x9; * to the registered Notification listeners on the ModelMBean.&#xA;&#x9; *&#xA;&#x9; * @param ntfyText The text which is to be passed in the Notification to the 'handleNotification'&#xA;&#x9; * method of the listener object.  &#xA;&#x9; * the constructed Notification will be:&#xA;&#x9; *   type        &quot;jmx.modelmbean.generic&quot;&#xA;&#x9; *   source      this ModelMBean instance&#xA;&#x9; *   sequence    1&#xA;&#x9; *&#xA;&#x9; *&#xA;&#x9; * @exception MBeanException Wraps a distributed communication Exception.&#xA;&#x9; * @exception RuntimeOperationsException Wraps an IllegalArgumentException: &#xA;&#x9; *       The Notification text string passed in parameter is null.&#xA;&#x9; *&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="sendAttributeChangeNotification">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="notification">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../AttributeChangeNotification.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;&#x9; * Sends an attributeChangeNotification which is passed in to&#xA;&#x9; * the registered attributeChangeNotification listeners on the&#xA;&#x9; * ModelMBean.&#xA;&#x9; *&#xA;&#x9; * @param notification The notification which is to be passed&#xA;&#x9; * to the 'handleNotification' method of the listener object.&#xA;&#x9; *&#xA;&#x9; * @exception MBeanException Wraps a distributed communication Exception.&#xA;&#x9; * @exception RuntimeOperationsException Wraps an IllegalArgumentException: The AttributeChangeNotification object passed in parameter is null.&#xA;&#x9; *&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="sendAttributeChangeNotification">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oldValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Attribute.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Attribute.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;&#x9; * Sends an attributeChangeNotification which contains the old value and new value for the&#xA;&#x9; * attribute to the registered AttributeChangeNotification listeners on the ModelMBean.&#xA;&#x9; * &lt;P>&#xA;&#x9; * @param oldValue The original value for the Attribute&#xA;&#x9; * @param newValue The current value for the Attribute&#xA;&#x9; *&lt;P>&#xA;&#x9; * &lt;PRE>  &#xA;&#x9; * The constructed attributeChangeNotification will be:&#xA;&#x9; *   type        &quot;jmx.attribute.change&quot;&#xA;&#x9; *   source      this ModelMBean instance&#xA;&#x9; *   sequence    1&#xA;&#x9; *   attributeName oldValue.getName()&#xA;&#x9; *   attributeType oldValue's class&#xA;&#x9; *   attributeOldValue oldValue.getValue()&#xA;&#x9; *   attributeNewValue newValue.getValue()&#xA;&#x9; * &lt;/PRE>&#xA;&#x9; *&#xA;&#x9; * @exception MBeanException Wraps a distributed communication Exception.&#xA;&#x9; * @exception RuntimeOperationsException Wraps an IllegalArgumentException: An Attribute object passed in parameter is null&#xA;&#x9; * or the names of the two Attribute objects in parameter are not the same.&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addAttributeChangeNotificationListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../NotificationListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributeName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="handback">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;&#x9; * Registers an object which implements the NotificationListener interface as a listener.  This&#xA;&#x9; * object's 'handleNotification()' method will be invoked when any attributeChangeNotification is issued through&#xA;&#x9; * or by the ModelMBean.  This does not include other Notifications.  They must be registered&#xA;&#x9; * for independently. An AttributeChangeNotification will be generated for this attributeName.&#xA;&#x9; *&#xA;&#x9; * @param listener The listener object which will handles notifications emitted by the registered MBean.&#xA;&#x9; * @param attributeName The name of the ModelMBean attribute for which to receive change notifications.&#xA;&#x9; *      If null, then all attribute changes will cause an attributeChangeNotification to be issued.&#xA;&#x9; * @param handback The context to be sent to the listener with the notification when a notification is emitted.&#xA;&#x9; *&#xA;&#x9; * @exception IllegalArgumentException The listener cannot be null.&#xA;&#x9; * @exception MBeanException Wraps a distributed communication Exception.&#xA;&#x9; * @exception RuntimeOperationsException Wraps an IllegalArgumentException The attribute name passed in parameter does not exist.&#xA;&#x9; *&#xA;&#x9; * @see #removeAttributeChangeNotificationListener&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeAttributeChangeNotificationListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../NotificationListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributeName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../ListenerNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;&#x9; * Removes a listener for attributeChangeNotifications from the RequiredModelMBean.&#xA;&#x9; *&#xA;&#x9; * @param listener The listener name which was handling notifications emitted by the registered MBean.&#xA;&#x9; * This method will remove all information related to this listener.&#xA;&#x9; * @param attributeName The attribute for which the listener no longer wants to receive attributeChangeNotifications.&#xA;&#x9; * If null the listener will be removed for all attributeChangeNotifications. &#xA;&#x9; *&#xA;&#x9; * @exception ListenerNotFoundException The listener is not registered in the MBean or is null.&#xA;&#x9; * @exception MBeanException Wraps a distributed communication Exception.&#xA;&#x9; * @exception RuntimeOperationsException Wraps an IllegalArgumentException If the inAttributeName parameter does not&#xA;&#x9; * correspond to an attribute name.&#xA;&#x9; *&#xA;&#x9; * @see #addAttributeChangeNotificationListener&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**                    &#xA; * This interface must be implemented by the ModelMBeans. An implementation of this interface &#xA; * must be shipped with every JMX Agent. &#xA; * &lt;P>&#xA; * Java resources wishing to be manageable instantiate the ModelMBean using the MBeanServer's &#xA; * createMBean method.  The resource then sets the ModelMBeanInfo (with Descriptors) for the ModelMBean&#xA; * instance. The attributes and operations exposed via the ModelMBeanInfo for the ModelMBean are accessible&#xA; * from MBeans, connectors/adaptors like other MBeans. Through the ModelMBeanInfo Descriptors, values and methods in&#xA; * the managed application can be defined and mapped to attributes and operations of the ModelMBean.&#xA; * This mapping can be defined during development in an XML formatted file or dynamically and&#xA; * programmatically at runtime. &#xA; * &lt;P>&#xA; * Every ModelMBean which is instantiated in the MBeanServer becomes manageable: &#xA; * its attributes and operations&#xA; * become remotely accessible through the connectors/adaptors connected to that MBeanServer. &#xA; * A Java object cannot be registered in the MBeanServer unless it is a JMX compliant MBean.&#xA; * By instantiating a ModelMBean, resources are guaranteed that the MBean is valid.&#xA; * &lt;P>&#xA; * MBeanException and RuntimeOperationsException must be thrown on every public method.  This allows &#xA; * for wrapping exceptions from distributed communications (RMI, EJB, etc.).  These exceptions do&#xA; * not have to be thrown by the implementation except in the scenarios described in the specification &#xA; * and javadoc.&#xA; *&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../NotificationBroadcaster.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
