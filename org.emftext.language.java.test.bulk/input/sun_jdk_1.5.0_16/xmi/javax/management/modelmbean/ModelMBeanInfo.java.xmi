<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ModelMBeanInfo.java">
  <comments>/*&#xA; * @(#)file      ModelMBeanInfo.java&#xA; * @(#)author    IBM Corp.&#xA; * @(#)version   1.24&#xA; * @(#)lastedit      04/02/10&#xA; */</comments>
  <comments>/*&#xA; * Copyright IBM Corp. 1999-2000.  All rights reserved.&#xA; * &#xA; * The program is provided &quot;as is&quot; without any warranty express or implied,&#xA; * including the warranty of non-infringement and the implied warranties of&#xA; * merchantibility and fitness for a particular purpose. IBM will not be&#xA; * liable for any damages suffered by you or any third party claim against &#xA; * you regarding the Program.&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.&#xA; * This software is the proprietary information of Sun Microsystems, Inc.&#xA; * Use is subject to license terms.&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc.  Tous droits reserves.&#xA; * Ce logiciel est propriete de Sun Microsystems, Inc.&#xA; * Distribue par des licences qui en restreignent l'utilisation. &#xA; *&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>management</namespaces>
  <namespaces>modelmbean</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Descriptor.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../DescriptorAccess.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ModelMBeanInfo">
    <members xsi:type="members:InterfaceMethod" name="getDescriptors">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Descriptor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inDescriptorType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a Descriptor array consisting of all &#xA;     * Descriptors for the ModelMBeanInfo of type inDescriptorType.&#xA;     *&#xA;     * @param inDescriptorType value of descriptorType field that must be set for the descriptor&#xA;     * to be returned.  Must be &quot;mbean&quot;, &quot;attribute&quot;, &quot;operation&quot;, &quot;constructor&quot; or &quot;notification&quot;.&#xA;     * If it is null or empty then all types will be returned.&#xA;     *&#xA;     * @return Descriptor array containing all descriptors for the ModelMBean if type inDescriptorType.&#xA;     *&#xA;     * @exception MBeanException Wraps a distributed communication Exception.&#xA;     * @exception RuntimeOperationsException Wraps an IllegalArgumentException when the descriptorType in parameter is&#xA;     * not one of: &quot;mbean&quot;, &quot;attribute&quot;, &quot;operation&quot;, &quot;constructor&quot;, &quot;notification&quot;, empty or null.&#xA;     *&#xA;     * @see #setDescriptors&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setDescriptors">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inDescriptors">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Descriptor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds or replaces descriptors in the ModelMBeanInfo.&#xA;     *&#xA;     * @param inDescriptors The descriptors to be set in the ModelMBeanInfo. Null&#xA;     * elements of the list will be ignored.  All descriptors must have name and descriptorType fields.&#xA;     *&#xA;     * @exception RuntimeOperationsException Wraps an IllegalArgumentException for a null or invalid descriptor.&#xA;     * @exception MBeanException Wraps a distributed communication Exception.&#xA;     *&#xA;     * @see #getDescriptors&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDescriptor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Descriptor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inDescriptorName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inDescriptorType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a Descriptor requested by name and descriptorType.&#xA;     *&#xA;     * @param inDescriptorName The name of the descriptor.&#xA;     * @param inDescriptorType The type of the descriptor being&#xA;     * requested.  If this is null or empty then all types are&#xA;     * searched. Valid types are 'mbean', 'attribute', 'constructor'&#xA;     * 'operation', and 'notification'. This value will be equal to&#xA;     * the 'descriptorType' field in the descriptor that is returned.&#xA;     *&#xA;     * @return Descriptor containing the descriptor for the ModelMBean&#xA;     * with the same name and descriptorType.  If no descriptor is&#xA;     * found, null is returned.&#xA;     *&#xA;     * @exception MBeanException Wraps a distributed communication Exception. &#xA;     * @exception RuntimeOperationsException Wraps an IllegalArgumentException for a null descriptor name or null or invalid type.&#xA;     * The type must be &quot;mbean&quot;,&quot;attribute&quot;, &quot;constructor&quot;, &quot;operation&quot;, or &quot;notification&quot;.&#xA;     *&#xA;     * @see #setDescriptor&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setDescriptor">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inDescriptor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Descriptor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inDescriptorType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets descriptors in the info array of type inDescriptorType&#xA;     * for the ModelMBean.  The setDescriptor method of the&#xA;     * corresponding ModelMBean*Info will be called to set the&#xA;     * specified descriptor.&#xA;     *&#xA;     * @param inDescriptor The descriptor to be set in the&#xA;     * ModelMBean. It must NOT be null.  All descriptors must have&#xA;     * name and descriptorType fields.&#xA;     * @param inDescriptorType The type of the descriptor being&#xA;     * set. If this is null then the descriptorType field in the&#xA;     * descriptor is used. If specified this value must be set in&#xA;     * the descriptorType field in the descriptor. Must be&#xA;     * &quot;mbean&quot;,&quot;attribute&quot;, &quot;constructor&quot;, &quot;operation&quot;, or&#xA;     * &quot;notification&quot;.&#xA;     *&#xA;     * @exception RuntimeOperationsException Wraps an&#xA;     * IllegalArgumentException for illegal or null arguments or&#xA;     * if the name field of the descriptor is not found in the&#xA;     * corresponding MBeanAttributeInfo or MBeanConstructorInfo or&#xA;     * MBeanNotificationInfo or MBeanOperationInfo.&#xA;     * @exception MBeanException Wraps a distributed communication&#xA;     * Exception.&#xA;     *&#xA;     * @see #getDescriptor&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMBeanDescriptor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Descriptor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the ModelMBean's descriptor which contains MBean wide policies.  This descriptor contains&#xA;     * metadata about the MBean and default policies for persistence and caching.&#xA;     * &lt;P>&#xA;     * The fields in the descriptor are defined, but not limited to, the following: &#xA;     * &lt;PRE>&#xA;     * name           : MBean name  &#xA;     * descriptorType : must be &quot;mbean&quot;   &#xA;     * displayName    : name of attribute to be used in displays &#xA;     * persistPolicy  : OnUpdate|OnTimer|NoMoreOftenThan|Always|Never  &#xA;     * persistLocation : The fully qualified directory name where the MBean should be persisted (if appropriate)&#xA;     * persistFile    : File name into which the MBean should be persisted&#xA;     * persistPeriod  : seconds - frequency of persist cycle for OnTime and NoMoreOftenThan PersistPolicy &#xA;     * currencyTimeLimit : how long value is valid, &amp;lt;0 never, =0 always, &amp;gt;0 seconds  &#xA;     * log            : where t: log all notifications f: log no notifications&#xA;     * logfile        : fully qualified filename to log events to&#xA;     * visibility     : 1-4 where 1: always visible 4: rarely visible&#xA;     * export         : name to be used to export/expose this MBean so that it is findable by&#xA;     *                  other JMX Agents.   &#xA;     * presentationString : xml formatted string to allow presentation of data to be associated with the MBean. &#xA;     * &lt;/PRE>&#xA;     * &lt;P>&#xA;     * The default descriptor is: name=mbeanName,descriptorType=mbean, displayName=this.getClassName(), &#xA;     *&#x9;persistPolicy=never,log=F,export=F,visibility=1&#xA;     * If the descriptor does not contain all these fields, they will be added with these default values.&#xA;     *&#xA;     * &lt;p>&lt;b>Note:&lt;/b> because of inconsistencies in previous versions of&#xA;     * this specification, it is recommended not to use negative or zero&#xA;     * values for &lt;code>currencyTimeLimit&lt;/code>.  To indicate that a&#xA;     * cached value is never valid, omit the&#xA;     * &lt;code>currencyTimeLimit&lt;/code> field.  To indicate that it is&#xA;     * always valid, use a very large number for this field.&lt;/p>&#xA;     *&#xA;     * @return the MBean descriptor.&#xA;     *&#xA;     * @exception MBeanException Wraps a distributed communication&#xA;     * Exception.&#xA;     *&#xA;     * @exception RuntimeOperationsException a {@link&#xA;     * RuntimeException} occurred while getting the descriptor.&#xA;     *&#xA;     * @see #setMBeanDescriptor&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setMBeanDescriptor">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inDescriptor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Descriptor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the ModelMBean's descriptor.  This descriptor contains default, MBean wide &#xA;     * metadata about the MBean and default policies for persistence and caching. This operation&#xA;     * does a complete replacement of the descriptor, no merging is done. If the descriptor to&#xA;     * set to is null then the default descriptor will be created.&#xA;     * The default descriptor is: name=mbeanName,descriptorType=mbean, displayName=this.getClassName(), &#xA;     *&#x9;persistPolicy=never,log=F,export=F,visibility=1&#xA;     * If the descriptor does not contain all these fields, they will be added with these default values.&#xA;     *&#xA;     * See {@link #getMBeanDescriptor getMBeanDescriptor} method javadoc for description of valid field names.&#xA;     *&#xA;     * @param inDescriptor the descriptor to set.&#xA;     *&#xA;     * @exception MBeanException Wraps a distributed communication Exception.&#xA;     * @exception RuntimeOperationsException Wraps an IllegalArgumentException  for invalid descriptor. &#xA;     *&#xA;     *&#xA;     * @see #getMBeanDescriptor&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttribute">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ModelMBeanAttributeInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a ModelMBeanAttributeInfo requested by name.&#xA;     *&#xA;     * @param inName The name of the ModelMBeanAttributeInfo to get.&#xA;     * If no ModelMBeanAttributeInfo exists for this name null is returned.&#xA;     *&#xA;     * @return the attribute info for the named attribute, or null&#xA;     * if there is none.&#xA;     *&#xA;     * @exception MBeanException Wraps a distributed communication&#xA;     * Exception.&#xA;     * @exception RuntimeOperationsException Wraps an&#xA;     * IllegalArgumentException for a null attribute name.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getOperation">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ModelMBeanOperationInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a ModelMBeanOperationInfo requested by name.&#xA;     *&#xA;     * @param inName The name of the ModelMBeanOperationInfo to get.&#xA;     * If no ModelMBeanOperationInfo exists for this name null is returned.&#xA;     *&#xA;     * @return the operation info for the named operation, or null&#xA;     * if there is none.&#xA;     *&#xA;     * @exception MBeanException Wraps a distributed communication Exception. &#xA;     * @exception RuntimeOperationsException Wraps an IllegalArgumentException for a null operation name.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNotification">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ModelMBeanNotificationInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RuntimeOperationsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a ModelMBeanNotificationInfo requested by name.&#xA;     *&#xA;     * @param inName The name of the ModelMBeanNotificationInfo to get.&#xA;     * If no ModelMBeanNotificationInfo exists for this name null is returned.&#xA;     *&#xA;     * @return the info for the named notification, or null if there&#xA;     * is none.&#xA;     *&#xA;     * @exception MBeanException Wraps a distributed communication Exception.&#xA;     * @exception RuntimeOperationsException Wraps an IllegalArgumentException for a null notification name.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="clone">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>lang</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates and returns a copy of this object.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanAttributeInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the list of attributes exposed for management. &#xA;     * Each attribute is described by an &lt;CODE>MBeanAttributeInfo&lt;/CODE> object.&#xA;     *&#xA;     * @return  An array of &lt;CODE>MBeanAttributeInfo&lt;/CODE> objects.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getClassName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>lang</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of the Java class of the MBean described by&#xA;     * this &lt;CODE>MBeanInfo&lt;/CODE>.&#xA;     *&#xA;     * @return the Java class name.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getConstructors">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanConstructorInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the list of the public constructors  of the MBean. &#xA;     * Each constructor is described by an &lt;CODE>MBeanConstructorInfo&lt;/CODE> object.&#xA;     *&#xA;     * @return  An array of &lt;CODE>MBeanConstructorInfo&lt;/CODE> objects.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDescription">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>lang</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a human readable description of the MBean.&#xA;     *&#xA;     * @return the description.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNotifications">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanNotificationInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the list of the notifications emitted by the MBean. &#xA;     * Each notification is described by an &lt;CODE>MBeanNotificationInfo&lt;/CODE> object.&#xA;     * &lt;P>&#xA;     * In addition to any notification specified by the application, &#xA;     * a ModelMBean may always send also two additional notifications:&#xA;     * &lt;UL>  &#xA;     * &lt;LI> One with descriptor name &quot;GENERIC&quot; and displayName &quot;jmx.modelmbean.generic&quot; &#xA;     * &lt;LI> Second is a standard attribute change notification&#xA;     *      with descriptor name &quot;ATTRIBUTE_CHANGE&quot; and displayName &quot;jmx.attribute.change&quot;&#xA;     * &lt;/UL>&#xA;     * Thus any implementation of ModelMBeanInfo should always add those two notifications&#xA;     * in addition to those specified by the application.&#xA;     * &#xA;     * @return  An array of &lt;CODE>MBeanNotificationInfo&lt;/CODE> objects.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getOperations">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../MBeanOperationInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the list of operations  of the MBean. &#xA;     * Each operation is described by an &lt;CODE>MBeanOperationInfo&lt;/CODE> object.&#xA;     *&#xA;     * @return  An array of &lt;CODE>MBeanOperationInfo&lt;/CODE> objects.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This interface is implemented by the ModelMBeanInfo for every ModelMBean. An implementation of this interface &#xA; * must be shipped with every JMX Agent. &#xA; * &lt;P>&#xA; * Java resources wishing to be manageable instantiate the ModelMBean using the MBeanServer's &#xA; * createMBean method.  The resource then sets the ModelMBeanInfo and Descriptors for the ModelMBean&#xA; * instance. The attributes, operations, and notifications exposed via the ModelMBeanInfo for the &#xA; * ModelMBean comprise the management interface and are accessible&#xA; * from MBeans, connectors/adaptors like other MBeans. Through the Descriptors, values and methods in&#xA; * the managed application can be defined and mapped to attributes and operations of the ModelMBean.&#xA; * This mapping can be defined during development in a file or dynamically and&#xA; * programmatically at runtime. &#xA; * &lt;P>&#xA; * Every ModelMBean which is instantiated in the MBeanServer becomes manageable: &#xA; * its attributes, operations, and notifications&#xA; * become remotely accessible through the connectors/adaptors connected to that MBeanServer. &#xA; * A Java object cannot be registered in the MBeanServer unless it is a JMX compliant MBean.&#xA; * By instantiating a ModelMBean, resources are guaranteed that the MBean is valid.&#xA; *&#xA; * MBeanException and RuntimeOperationsException must be thrown on every public method.  This allows &#xA; *  for wrapping exceptions from distributed communications (RMI, EJB, etc.)&#xA; *&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
