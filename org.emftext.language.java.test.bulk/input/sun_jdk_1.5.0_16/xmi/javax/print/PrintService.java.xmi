<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="PrintService.java">
  <comments>/*&#xA; * @(#)PrintService.java&#x9;1.11 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>print</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/util/Locale.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="attribute/Attribute.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="attribute/AttributeSet.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="attribute/PrintServiceAttribute.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="attribute/PrintServiceAttributeSet.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>event</namespaces>
    <classifier xsi:type="classifiers:Interface" href="event/PrintServiceAttributeListener.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="PrintService">
    <members xsi:type="members:InterfaceMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Returns a String name for this print service which may be used&#xA;      * by applications to request a particular print service.&#xA;      * In a suitable context, such as a name service, this name must be&#xA;      * unique.&#xA;      * In some environments this unique name may be the same as the user &#xA;      * friendly printer name defined as the &#xA;      * {@link javax.print.attribute.standard.PrinterName PrinterName}&#xA;      * attribute.&#xA;      * @return name of the service.&#xA;      */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createPrintJob">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DocPrintJob.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates and returns a PrintJob capable of handling data from&#xA;     * any of the supported document flavors.&#xA;     * @return a DocPrintJob object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addPrintServiceAttributeListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/PrintServiceAttributeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Registers a listener for events on this PrintService.&#xA;     * @param listener  a PrintServiceAttributeListener, which&#xA;     *        monitors the status of a print service&#xA;     * @see #removePrintServiceAttributeListener&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removePrintServiceAttributeListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/PrintServiceAttributeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the print-service listener from this print service.&#xA;     * This means the listener is no longer interested in &#xA;     * &lt;code>PrintService&lt;/code> events.&#xA;     * @param listener  a PrintServiceAttributeListener object&#xA;     * @see #addPrintServiceAttributeListener&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="attribute/PrintServiceAttributeSet.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains this print service's set of printer description attributes  &#xA;     * giving this Print Service's status. The returned attribute set object  &#xA;     * is unmodifiable. The returned attribute set object is a &quot;snapshot&quot; of  &#xA;     * this Print Service's attribute set at the time of the &#xA;     * &lt;CODE>getAttributes()&lt;/CODE> method call: that is, the returned &#xA;     * attribute set's contents will &lt;I>not&lt;/I> be updated if this print &#xA;     * service's attribute set's contents change in the future. To detect &#xA;     * changes in attribute values, call &lt;CODE>getAttributes()&lt;/CODE> again  &#xA;     * and compare the new attribute set to the previous attribute set; &#xA;     * alternatively, register a listener for print service events. &#xA;     *&#xA;     * @return  Unmodifiable snapshot of this Print Service's attribute set.&#xA;     *          May be empty, but not null.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttribute">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.5/@typeParameters.0"/>
      </typeReference>
      <typeParameters name="T">
        <extendTypes xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="attribute/PrintServiceAttribute.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </extendTypes>
      </typeParameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="category">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.5/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Class" href="../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the value of the single specified service attribute.&#xA;     * This may be useful to clients which only need the value of one&#xA;     * attribute and want to minimise overhead.&#xA;     * @param category the category of a PrintServiceAttribute supported&#xA;     * by this service - may not be null.&#xA;     * @return the value of the supported attribute or null if the&#xA;     * attribute is not supported by this service.&#xA;     * @exception NullPointerException if the category is null.&#xA;     * @exception  IllegalArgumentException&#xA;     *     (unchecked exception) if &lt;CODE>category&lt;/CODE> is not a &#xA;     *     &lt;code>Class&lt;/code> that implements interface &#xA;     *{@link javax.print.attribute.PrintServiceAttribute PrintServiceAttribute}. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSupportedDocFlavors">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DocFlavor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines the print data formats a client can specify when setting&#xA;     * up a job for this &lt;code>PrintService&lt;/code>. A print data format is&#xA;     * designated by a &quot;doc &#xA;     * flavor&quot; (class {@link javax.print.DocFlavor DocFlavor}) &#xA;     * consisting of a MIME type plus a print data representation class. &#xA;     * &lt;P>&#xA;     * Note that some doc flavors may not be supported in combination&#xA;     * with all attributes. Use &lt;code>getUnsupportedAttributes(..)&lt;/code>&#xA;     * to validate specific combinations.&#xA;     *&#xA;     * @return  Array of supported doc flavors, should have at least&#xA;     *          one element.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isDocFlavorSupported">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flavor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DocFlavor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines if this print service supports a specific &#xA;     * &lt;code>DocFlavor&lt;/code>.  This is a convenience method to determine&#xA;     * if the &lt;code>DocFlavor&lt;/code> would be a member of the result of&#xA;     * &lt;code>getSupportedDocFlavors()&lt;/code>.&#xA;     * &lt;p>&#xA;     * Note that some doc flavors may not be supported in combination&#xA;     * with all attributes. Use &lt;code>getUnsupportedAttributes(..)&lt;/code>&#xA;     * to validate specific combinations.&#xA;     *&#xA;     * @param flavor the &lt;code>DocFlavor&lt;/code>to query for support.&#xA;     * @return  &lt;code>true&lt;/code> if this print service supports the&#xA;     * specified &lt;code>DocFlavor&lt;/code>; &lt;code>false&lt;/code> otherwise.&#xA;     * @exception  NullPointerException&#xA;     *     (unchecked exception) Thrown if &lt;CODE>flavor&lt;/CODE> is null.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSupportedAttributeCategories">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Class" href="../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines the printing attribute categories a client can specify&#xA;     * when setting up a job for this print service.&#xA;     * A printing attribute category is &#xA;     * designated by a &lt;code>Class&lt;/code> that implements interface &#xA;     * {@link javax.print.attribute.Attribute Attribute}. This method returns &#xA;     * just the attribute &lt;I>categories&lt;/I> that are supported; it does not &#xA;     * return the particular attribute &lt;I>values&lt;/I> that are supported. &#xA;     * &lt;P>&#xA;     * This method returns all the printing attribute &#xA;     * categories this print service supports for any possible job.&#xA;     * Some categories may not be supported in a particular context (ie&#xA;     * for a particular &lt;code>DocFlavor&lt;/code>).&#xA;     * Use one of the methods that include a &lt;code>DocFlavor&lt;/code> to&#xA;     * validate the request before submitting it, such as&#xA;     * &lt;code>getSupportedAttributeValues(..)&lt;/code>.&#xA;     *&#xA;     * @return  Array of printing attribute categories that the client can&#xA;     *          specify as a doc-level or job-level attribute in a Print &#xA;     *          Request. Each element in the array is a {@link java.lang.Class &#xA;     *          Class} that implements interface {@link &#xA;     *          javax.print.attribute.Attribute Attribute}.&#xA;     *          The array is empty if no categories are supported.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isAttributeCategorySupported">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="category">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:ExtendsTypeArgument">
              <extendTypes xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="attribute/Attribute.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </extendTypes>
            </typeArguments>
            <target xsi:type="classifiers:Class" href="../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines whether a client can specify the given printing&#xA;     * attribute category when setting up a job for this print service. A&#xA;     * printing attribute category is designated by a &lt;code>Class&lt;/code>  &#xA;     * that implements interface {@link javax.print.attribute.Attribute &#xA;     * Attribute}. This method tells whether the attribute &lt;I>category&lt;/I> is &#xA;     * supported; it does not tell whether a particular attribute &lt;I>value&lt;/I> &#xA;     * is supported. &#xA;     * &lt;p>&#xA;     * Some categories may not be supported in a particular context (ie&#xA;     * for a particular &lt;code>DocFlavor&lt;/code>).&#xA;     * Use one of the methods which include a &lt;code>DocFlavor&lt;/code> to&#xA;     * validate the request before submitting it, such as&#xA;     * &lt;code>getSupportedAttributeValues(..)&lt;/code>.&#xA;     * &lt;P>&#xA;     * This is a convenience method to determine if the category&#xA;     * would be a member of the result of&#xA;     * &lt;code>getSupportedAttributeCategories()&lt;/code>.&#xA;     *&#xA;     * @param  category    Printing attribute category to test. It must be a&#xA;     *                        &lt;code>Class&lt;/code> that implements &#xA;     *                        interface &#xA;     *                {@link javax.print.attribute.Attribute Attribute}. &#xA;     *&#xA;     * @return  &lt;code>true&lt;/code> if this print service supports&#xA;     *&#x9;&#x9;specifying a doc-level or&#xA;     *          job-level attribute in &lt;CODE>category&lt;/CODE> in a Print &#xA;     *          Request; &lt;code>false&lt;/code> if it doesn't. &#xA;     *&#xA;     * @exception  NullPointerException&#xA;     *     (unchecked exception) Thrown if &lt;CODE>category&lt;/CODE> is null.&#xA;     * @exception  IllegalArgumentException&#xA;     *     (unchecked exception) Thrown if &lt;CODE>category&lt;/CODE> is not a &#xA;     *     &lt;code>Class&lt;/code> that implements interface &#xA;     *     {@link javax.print.attribute.Attribute Attribute}. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDefaultAttributeValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="category">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:ExtendsTypeArgument">
              <extendTypes xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="attribute/Attribute.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </extendTypes>
            </typeArguments>
            <target xsi:type="classifiers:Class" href="../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines this print service's default printing attribute value in&#xA;     * the given category. A printing attribute value is an instance of &#xA;     * a class that implements interface &#xA;     * {@link javax.print.attribute.Attribute Attribute}. If a client sets &#xA;     * up a print job and does not specify any attribute value in the &#xA;     * given category, this Print Service will use the &#xA;     * default attribute value instead.&#xA;     * &lt;p>&#xA;     * Some attributes may not be supported in a particular context (ie&#xA;     * for a particular &lt;code>DocFlavor&lt;/code>).&#xA;     * Use one of the methods that include a &lt;code>DocFlavor&lt;/code> to&#xA;     * validate the request before submitting it, such as&#xA;     * &lt;code>getSupportedAttributeValues(..)&lt;/code>.&#xA;     * &lt;P>&#xA;     * Not all attributes have a default value. For example the&#xA;     * service will not have a defaultvalue for &lt;code>RequestingUser&lt;/code>&#xA;     * i.e. a null return for a supported category means there is no&#xA;     * service default value for that category. Use the&#xA;     * &lt;code>isAttributeCategorySupported(Class)&lt;/code> method to&#xA;     * distinguish these cases.&#xA;     *&#xA;     * @param  category    Printing attribute category for which the default&#xA;     *                     attribute value is requested. It must be a {@link &#xA;     *                        java.lang.Class Class} that implements interface &#xA;     *                        {@link javax.print.attribute.Attribute &#xA;     *                        Attribute}. &#xA;     *&#xA;     * @return  Default attribute value for &lt;CODE>category&lt;/CODE>, or null &#xA;     *       if this Print Service does not support specifying a doc-level or &#xA;     *          job-level attribute in &lt;CODE>category&lt;/CODE> in a Print &#xA;     *          Request, or the service does not have a default value&#xA;     *          for this attribute.&#xA;     *&#xA;     * @exception  NullPointerException&#xA;     *     (unchecked exception) Thrown if &lt;CODE>category&lt;/CODE> is null.&#xA;     * @exception  IllegalArgumentException&#xA;     *     (unchecked exception) Thrown if &lt;CODE>category&lt;/CODE> is not a &#xA;     *     {@link java.lang.Class Class} that implements interface {@link &#xA;     *     javax.print.attribute.Attribute Attribute}. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSupportedAttributeValues">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="category">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:ExtendsTypeArgument">
              <extendTypes xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="attribute/Attribute.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </extendTypes>
            </typeArguments>
            <target xsi:type="classifiers:Class" href="../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flavor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DocFlavor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="attribute/AttributeSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines the printing attribute values a client can specify in&#xA;     * the given category when setting up a job for this print service. A&#xA;     * printing &#xA;     * attribute value is an instance of a class that implements interface &#xA;     * {@link javax.print.attribute.Attribute Attribute}. &#xA;     * &lt;P>&#xA;     * If &lt;CODE>flavor&lt;/CODE> is null and &lt;CODE>attributes&lt;/CODE> is null &#xA;     * or is an empty set, this method returns all the printing attribute &#xA;     * values this Print Service supports for any possible job. If &#xA;     * &lt;CODE>flavor&lt;/CODE> is not null or &lt;CODE>attributes&lt;/CODE> is not &#xA;     * an empty set, this method returns just the printing attribute values &#xA;     * that are compatible with the given doc flavor and/or set of attributes.&#xA;     * That is, a null return value may indicate that specifying this attribute&#xA;     * is incompatible with the specified DocFlavor.&#xA;     * Also if DocFlavor is not null it must be a flavor supported by this&#xA;     * PrintService, else IllegalArgumentException will be thrown.&#xA;     * &lt;P>&#xA;     * If the &lt;code>attributes&lt;/code> parameter contains an Attribute whose &#xA;     * category is the same as the &lt;code>category&lt;/code> parameter, the service&#xA;     * must ignore this attribute in the AttributeSet.&#xA;     * &lt;p>&#xA;     * &lt;code>DocAttribute&lt;/code>s which are to be specified on the&#xA;     * &lt;code>Doc&lt;/code> must be included in this set to accurately&#xA;     * represent the context.&#xA;     * &lt;p>&#xA;     * This method returns an Object because different printing attribute &#xA;     * categories indicate the supported attribute values in different ways.  &#xA;     * The documentation for each printing attribute in package {@link &#xA;     * javax.print.attribute.standard javax.print.attribute.standard} &#xA;     * describes how each attribute indicates its supported values. Possible &#xA;     * ways of indicating support include: &#xA;     * &lt;UL>&#xA;     * &lt;LI>&#xA;     * Return a single instance of the attribute category to indicate that any &#xA;     * value is legal -- used, for example, by an attribute whose value is an &#xA;     * arbitrary text string. (The value of the returned attribute object is&#xA;     * irrelevant.)&#xA;     * &lt;LI>&#xA;     * Return an array of one or more instances of the attribute category, &#xA;     * containing the legal values -- used, for example, by an attribute with  &#xA;     * a list of enumerated values. The type of the array is an array of the&#xA;     * specified attribute category type as returned by its&#xA;     * &lt;code>getCategory(Class)&lt;/code>.&#xA;     * &lt;LI>&#xA;     * Return a single object (of some class other than the attribute category) &#xA;     * that indicates bounds on the legal values -- used, for example, by an &#xA;     * integer-valued attribute that must lie within a certain range. &#xA;     * &lt;/UL>&#xA;     * &lt;P>&#xA;     *&#xA;     * @param  category    Printing attribute category to test. It must be a&#xA;     *                        {@link java.lang.Class Class} that implements &#xA;     *                        interface {@link &#xA;     *                        javax.print.attribute.Attribute Attribute}. &#xA;     * @param  flavor      Doc flavor for a supposed job, or null.&#xA;     * @param  attributes  Set of printing attributes for a supposed job&#xA;     *                        (both job-level attributes and document-level &#xA;     *                        attributes), or null. &#xA;     *&#xA;     * @return  Object indicating supported values for &lt;CODE>category&lt;/CODE>,&#xA;     *          or null if this Print Service does not support specifying a &#xA;     *          doc-level or job-level attribute in &lt;CODE>category&lt;/CODE> in &#xA;     *          a Print Request. &#xA;     *&#xA;     * @exception  NullPointerException&#xA;     *     (unchecked exception) Thrown if &lt;CODE>category&lt;/CODE> is null.&#xA;     * @exception  IllegalArgumentException&#xA;     *     (unchecked exception) Thrown if &lt;CODE>category&lt;/CODE> is not a &#xA;     *     {@link java.lang.Class Class} that implements interface {@link &#xA;     *     javax.print.attribute.Attribute Attribute}, or&#xA;     *     &lt;code>DocFlavor&lt;/code> is not supported by this service.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isAttributeValueSupported">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attrval">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="attribute/Attribute.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flavor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DocFlavor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="attribute/AttributeSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines whether a client can specify the given printing&#xA;     * attribute  &#xA;     * value when setting up a job for this Print Service. A printing&#xA;     * attribute value is an instance of a class that implements interface&#xA;     *  {@link javax.print.attribute.Attribute Attribute}. &#xA;     * &lt;P>&#xA;     * If &lt;CODE>flavor&lt;/CODE> is null and &lt;CODE>attributes&lt;/CODE> is null or&#xA;     * is an empty set, this method tells whether this Print Service supports &#xA;     * the given printing attribute value for some possible combination of doc &#xA;     * flavor and set of attributes. If &lt;CODE>flavor&lt;/CODE> is not null or &#xA;     * &lt;CODE>attributes&lt;/CODE> is not an empty set, this method tells whether &#xA;     * this Print Service supports the given printing attribute value in &#xA;     * combination with the given doc flavor and/or set of attributes.&#xA;     * &lt;p>&#xA;     * Also if DocFlavor is not null it must be a flavor supported by this&#xA;     * PrintService, else IllegalArgumentException will be thrown.&#xA;     * &lt;p>&#xA;     * &lt;code>DocAttribute&lt;/code>s which are to be specified on the&#xA;     * &lt;code>Doc&lt;/code> must be included in this set to accurately&#xA;     * represent the context.&#xA;     * &lt;p>&#xA;     * This is a convenience method to determine if the value&#xA;     * would be a member of the result of&#xA;     * &lt;code>getSupportedAttributeValues(...)&lt;/code>. &#xA;     *&#xA;     * @param  attrval       Printing attribute value to test.&#xA;     * @param  flavor      Doc flavor for a supposed job, or null.&#xA;     * @param  attributes  Set of printing attributes for a supposed job&#xA;     *                        (both job-level attributes and document-level &#xA;     *                        attributes), or null. &#xA;     *&#xA;     * @return  True if this Print Service supports specifying&#xA;     *        &lt;CODE>attrval&lt;/CODE> as a doc-level or job-level attribute in a &#xA;     *          Print Request, false if it doesn't. &#xA;     *&#xA;     * @exception  NullPointerException&#xA;     *     (unchecked exception)  if &lt;CODE>attrval&lt;/CODE> is null.&#xA;     * @exception  IllegalArgumentException if flavor is not supported by&#xA;     *      this PrintService.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUnsupportedAttributes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="attribute/AttributeSet.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flavor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DocFlavor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="attribute/AttributeSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Identifies the attributes that are unsupported for a print request&#xA;     * in the context of a particular DocFlavor.&#xA;     * This method is useful for validating a potential print job and&#xA;     * identifying the specific attributes which cannot be supported.&#xA;     * It is important to supply only a supported DocFlavor or an&#xA;     * IllegalArgumentException will be thrown. If the&#xA;     * return value from this method is null, all attributes are supported.&#xA;     * &lt;p>&#xA;     * &lt;code>DocAttribute&lt;/code>s which are to be specified on the&#xA;     * &lt;code>Doc&lt;/code> must be included in this set to accurately&#xA;     * represent the context.&#xA;     * &lt;p>&#xA;     * If the return value is non-null, all attributes in the returned&#xA;     * set are unsupported with this DocFlavor. The returned set does not&#xA;     * distinguish attribute categories that are unsupported from&#xA;     * unsupported attribute values.&#xA;     * &lt;p>&#xA;     * A supported print request can then be created by removing&#xA;     * all unsupported attributes from the original attribute set,&#xA;     * except in the case that the DocFlavor is unsupported.&#xA;     * &lt;p>&#xA;     * If any attributes are unsupported only because they are in conflict&#xA;     * with other attributes then it is at the discretion of the service&#xA;     * to select the attribute(s) to be identified as the cause of the&#xA;     * conflict.&#xA;     * &lt;p>&#xA;     * Use &lt;code>isDocFlavorSupported()&lt;/code> to verify that a DocFlavor&#xA;     * is supported before calling this method.&#xA;     *&#xA;     * @param  flavor      Doc flavor to test, or null&#xA;     * @param  attributes  Set of printing attributes for a supposed job&#xA;     *                        (both job-level attributes and document-level &#xA;     *                        attributes), or null. &#xA;     *&#xA;     * @return  null if this Print Service supports the print request&#xA;     * specification, else the unsupported attributes.&#xA;     *&#xA;     * @exception IllegalArgumentException if&lt;CODE>flavor&lt;/CODE> is&#xA;     *             not supported by this PrintService.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServiceUIFactory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ServiceUIFactory.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns a factory for UI components which allow users to interact&#xA;     * with the service in various roles.&#xA;     * Services which do not provide any UI should return null.&#xA;     * Print Services which do provide UI but want to be supported in&#xA;     * an environment with no UI support should ensure that the factory&#xA;     * is not initialised unless the application calls this method to&#xA;     * obtain the factory.&#xA;     * See &lt;code>ServiceUIFactory&lt;/code> for more information.&#xA;     * @return null or a factory for UI components.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines if two services are referring to the same underlying&#xA;     * service.  Objects encapsulating a print service may not exhibit&#xA;     * equality of reference even though they refer to the same underlying&#xA;     * service.&#xA;     * &lt;p>&#xA;     * Clients should call this method to determine if two services are&#xA;     * referring to the same underlying service. &#xA;     * &lt;p>&#xA;     * Services must implement this method and return true only if the&#xA;     * service objects being compared may be used interchangeably by the&#xA;     * client.&#xA;     * Services are free to return the same object reference to an underlying&#xA;     * service if that, but clients must not depend on equality of reference.&#xA;     * @param obj the reference object with which to compare.&#xA;     * @return true if this service is the same as the obj argument,&#xA;     * false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method should be implemented consistently with&#xA;     * &lt;code>equals(Object)&lt;/code>.&#xA;     * @return hash code of this object.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Interface PrintService is the factory for a DocPrintJob. A PrintService&#xA; * describes the capabilities of a Printer and can be queried regarding&#xA; * a printer's supported attributes.&#xA; * &lt;P>&#xA; * Example:&#xA; *   &lt;PRE>&#xA; *   DocFlavor flavor = DocFlavor.INPUT_STREAM.POSTSCRIPT;&#xA; *   PrintRequestAttributeSet aset = new HashPrintRequestHashAttributeSet();&#xA; *   aset.add(MediaSizeName.ISO_A4);&#xA; *   PrintService[] pservices =&#xA; *                 PrintServiceLookup.lookupPrintServices(flavor, aset);&#xA; *   if (pservices.length > 0) {&#xA; *       DocPrintJob pj = pservices[0].createPrintJob();&#xA; *       // InputStreamDoc is an implementation of the Doc interface //&#xA; *       Doc doc = new InputStreamDoc(&quot;test.ps&quot;, flavor);&#xA; *       try {&#xA; *             pj.print(doc, aset);&#xA; *        } catch (PrintException e) { &#xA; *        }&#xA; *   }&#xA; *   &lt;/PRE>&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
