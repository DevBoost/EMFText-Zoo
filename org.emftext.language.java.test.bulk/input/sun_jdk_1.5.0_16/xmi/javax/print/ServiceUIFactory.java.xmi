<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/types ../../java.ecore#/16" name="ServiceUIFactory.java">
  <comments>/*&#xA; * @(#)ServiceUIFactory.java&#x9;1.4 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>print</namespaces>
  <classifiers xsi:type="classifiers:Class" name="ServiceUIFactory">
    <members xsi:type="members:Field" name="JCOMPONENT_UI">
      <initialValue xsi:type="references:StringReference" value="javax.swing.JComponent"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Denotes a UI implemented as a Swing component.&#xA;     * The value of the String is the fully qualified classname :&#xA;     * &quot;javax.swing.JComponent&quot;.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="PANEL_UI">
      <initialValue xsi:type="references:StringReference" value="java.awt.Panel"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Denotes a UI implemented as an AWT panel.&#xA;     * The value of the String is the fully qualified classname :&#xA;     * &quot;java.awt.Panel&quot;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DIALOG_UI">
      <initialValue xsi:type="references:StringReference" value="java.awt.Dialog"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Denotes a UI implemented as an AWT dialog.&#xA;     * The value of the String is the fully qualified classname :&#xA;     * &quot;java.awt.Dialog&quot;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="JDIALOG_UI">
      <initialValue xsi:type="references:StringReference" value="javax.swing.JDialog"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Denotes a UI implemented as a Swing dialog.&#xA;     * The value of the String is the fully qualified classname :&#xA;     * &quot;javax.swing.JDialog&quot;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ABOUT_UIROLE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Denotes a UI which performs an informative &quot;About&quot; role.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ADMIN_UIROLE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Denotes a UI which performs an administrative role.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MAIN_UIROLE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Denotes a UI which performs the normal end user role.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="RESERVED_UIROLE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Not a valid role but role id's greater than this may be used&#xA;     * for private roles supported by a service. Knowledge of the&#xA;     * function performed by this role is required to make proper use&#xA;     * of it.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="role">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ui">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get a UI object which may be cast to the requested UI type&#xA;     * by the application and used in its user interface.&#xA;     * &lt;P>&#xA;     * @param role requested. Must be one of the standard roles or&#xA;     * a private role supported by this factory.&#xA;     * @param ui type in which the role is requested.&#xA;     * @return the UI role or null if the requested UI role is not available&#xA;     * from this factory&#xA;     * @throws IllegalArgumentException if the role or ui is neither&#xA;     * one of the standard ones, nor a private one&#xA;     * supported by the factory.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUIClassNamesForRole">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="role">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Given a UI role obtained from this factory obtain the UI&#xA;     * types available from this factory which implement this role.&#xA;     * The returned Strings should refer to the static variables defined&#xA;     * in this class so that applications can use equality of reference&#xA;     * (&quot;==&quot;).&#xA;     * @param role to be looked up.&#xA;     * @return the UI types supported by this class for the specified role,&#xA;     * null if no UIs are available for the role.&#xA;     * @throws IllegalArgumentException is the role is a non-standard&#xA;     * role not supported by this factory.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Services may optionally provide UIs which allow different styles&#xA; * of interaction in different roles.&#xA; * One role may be end-user browsing and setting of print options.&#xA; * Another role may be administering the print service. &#xA; * &lt;p>&#xA; * Although the Print Service API does not presently provide standardised&#xA; * support for administering a print service, monitoring of the print&#xA; * service is possible and a UI may provide for private update mechanisms.&#xA; * &lt;p>&#xA; * The basic design intent is to allow applications to lazily locate and&#xA; * initialize services only when needed without any API dependencies&#xA; * except in an environment in which they are used.&#xA; * &lt;p>&#xA; * Swing UIs are preferred as they provide a more consistent L&amp;F and&#xA; * can support accessibility APIs.&#xA; * &lt;p>&#xA; * Example usage:&#xA; * &lt;pre>&#xA; *  ServiceUIFactory factory = printService.getServiceUIFactory();&#xA; *  if (factory != null) {&#xA; *      JComponent swingui = (JComponent)factory.getUI(&#xA; *                                         ServiceUIFactory.MAIN_UIROLE,&#xA; *                                         ServiceUIFactory.JCOMPONENT_UI);&#xA; *      if (swingui != null) {&#xA; *          tabbedpane.add(&quot;Custom UI&quot;, swingui);&#xA; *      }&#xA; *  }&#xA; * &lt;/pre>&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
