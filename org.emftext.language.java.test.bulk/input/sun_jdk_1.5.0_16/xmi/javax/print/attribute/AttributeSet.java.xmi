<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="AttributeSet.java">
  <comments>/*&#xA; * @(#)AttributeSet.java&#x9;1.9 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>print</namespaces>
  <namespaces>attribute</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="AttributeSet">
    <members xsi:type="members:InterfaceMethod" name="get">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Attribute.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="category">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the attribute value which this attribute set contains in the &#xA;     * given attribute category. Returns &lt;tt>null&lt;/tt> if this attribute set &#xA;     * does not contain any attribute value in the given attribute category.&#xA;     *&#xA;     * @param  category  Attribute category whose associated attribute value&#xA;     *                   is to be returned. It must be a&#xA;     *                   {@link java.lang.Class Class}&#xA;     *                   that implements interface {@link Attribute &#xA;     *                   Attribute}. &#xA;     *&#xA;     * @return  The attribute value in the given attribute category contained&#xA;     *          in this attribute set, or &lt;tt>null&lt;/tt> if this attribute set&#xA;     *          does not contain any attribute value in the given attribute&#xA;     *          category. &#xA;     * &#xA;     * @throws  NullPointerException&#xA;     *     (unchecked exception) Thrown if the &lt;CODE>category&lt;/CODE> is null.&#xA;     * @throws  ClassCastException&#xA;     *     (unchecked exception) Thrown if the &lt;CODE>category&lt;/CODE> is not a &#xA;     *     {@link java.lang.Class Class} that implements interface {@link &#xA;     *     Attribute Attribute}. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attribute">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Attribute.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds the specified attribute to this attribute set if it is not &#xA;     * already present, first removing any existing value in the same&#xA;     * attribute category as the specified attribute value. &#xA;     *&#xA;     * @param  attribute  Attribute value to be added to this attribute set.&#xA;     *&#xA;     * @return  &lt;tt>true&lt;/tt> if this attribute set changed as a result of the&#xA;     *          call, i.e., the given attribute value was not already a member &#xA;     *          of this attribute set. &#xA;     * &#xA;     * @throws  NullPointerException&#xA;     *     (unchecked exception) Thrown if the &lt;CODE>attribute&lt;/CODE> is null. &#xA;     * @throws  UnmodifiableSetException&#xA;     *     (unchecked exception) Thrown if this attribute set does not support &#xA;     *     the &lt;CODE>add()&lt;/CODE> operation. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="remove">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="category">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes any attribute for this category from this attribute set if  &#xA;     * present. If &lt;CODE>category&lt;/CODE> is null, then &#xA;     * &lt;CODE>remove()&lt;/CODE> does nothing and returns &lt;tt>false&lt;/tt>. &#xA;     *&#xA;     * @param  category Attribute category to be removed from this&#xA;     *                  attribute set.&#xA;     *&#xA;     * @return  &lt;tt>true&lt;/tt> if this attribute set changed as a result of the&#xA;     *         call, i.e., the given attribute value had been a member of this &#xA;     *          attribute set. &#xA;     * &#xA;     * @throws  UnmodifiableSetException&#xA;     *     (unchecked exception) Thrown if this attribute set does not support &#xA;     *     the &lt;CODE>remove()&lt;/CODE> operation. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="remove">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attribute">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Attribute.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the specified attribute from this attribute set if  &#xA;     * present. If &lt;CODE>attribute&lt;/CODE> is null, then &#xA;     * &lt;CODE>remove()&lt;/CODE> does nothing and returns &lt;tt>false&lt;/tt>. &#xA;     *&#xA;     * @param  attribute Attribute value to be removed from this attribute set.&#xA;     *&#xA;     * @return  &lt;tt>true&lt;/tt> if this attribute set changed as a result of the&#xA;     *         call, i.e., the given attribute value had been a member of this &#xA;     *          attribute set. &#xA;     * &#xA;     * @throws  UnmodifiableSetException&#xA;     *     (unchecked exception) Thrown if this attribute set does not support &#xA;     *     the &lt;CODE>remove()&lt;/CODE> operation. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="containsKey">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="category">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if this attribute set contains an &#xA;     * attribute for the specified category.&#xA;     *&#xA;     * @param  category whose presence in this attribute set is&#xA;     *            to be tested.&#xA;     *&#xA;     * @return  &lt;tt>true&lt;/tt> if this attribute set contains an attribute &#xA;     *         value for the specified category.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="containsValue">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attribute">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Attribute.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if this attribute set contains the given  &#xA;     * attribute value.&#xA;     *&#xA;     * @param  attribute  Attribute value whose presence in this&#xA;     * attribute set is to be tested.&#xA;     *&#xA;     * @return  &lt;tt>true&lt;/tt> if this attribute set contains the given &#xA;     *      attribute  value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addAll">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds all of the elements in the specified set to this attribute.&#xA;     * The outcome is the same as if the =&#xA;     * {@link #add(Attribute) &lt;CODE>add(Attribute)&lt;/CODE>} &#xA;     * operation had been applied to this attribute set successively with each &#xA;     * element from the specified set.&#xA;     * The behavior of the &lt;CODE>addAll(AttributeSet)&lt;/CODE>&#xA;     * operation is unspecified if the specified set is modified while&#xA;     * the operation is in progress.&#xA;     * &lt;P>&#xA;     * If the &lt;CODE>addAll(AttributeSet)&lt;/CODE> operation throws an exception,&#xA;     * the effect on this attribute set's state is implementation dependent;&#xA;     * elements from the specified set before the point of the exception may&#xA;     * or may not have been added to this attribute set. &#xA;     *&#xA;     * @param  attributes  whose elements are to be added to this attribute &#xA;     *            set.&#xA;     *&#xA;     * @return  &lt;tt>true&lt;/tt> if this attribute set changed as a result of the&#xA;     *          call.&#xA;     * &#xA;     * @throws  UnmodifiableSetException&#xA;     *     (Unchecked exception) Thrown if this attribute set does not support &#xA;     *     the &lt;tt>addAll(AttributeSet)&lt;/tt> method. &#xA;     * @throws  NullPointerException&#xA;     *     (Unchecked exception) Thrown if some element in the specified &#xA;     *     set is null.&#xA;     *&#xA;     * @see #add(Attribute)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="size">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of attributes in this attribute set. If this&#xA;     * attribute set contains more than &lt;tt>Integer.MAX_VALUE&lt;/tt> elements,&#xA;     * returns  &lt;tt>Integer.MAX_VALUE&lt;/tt>.&#xA;     *&#xA;     * @return  The number of attributes in this attribute set.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="toArray">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Attribute.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of the attributes contained in this set.&#xA;     * @return the Attributes contained in this set as an array, zero length&#xA;     * if the AttributeSet is empty.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="clear">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes all attributes from this attribute set.&#xA;     *&#xA;     * @throws  UnmodifiableSetException&#xA;     *   (unchecked exception) Thrown if this attribute set does not support &#xA;     *     the &lt;CODE>clear()&lt;/CODE> operation. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isEmpty">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns true if this attribute set contains no attributes.&#xA;     *&#xA;     * @return true if this attribute set contains no attributes.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Compares the specified object with this attribute set for equality. &#xA;     * Returns &lt;tt>true&lt;/tt> if the given object is also an attribute set and &#xA;     * the two attribute sets contain the same attribute category-attribute &#xA;     * value mappings. This ensures that the &#xA;     * &lt;tt>equals()&lt;/tt> method works properly across different  &#xA;     * implementations of the AttributeSet interface. &#xA;     *&#xA;     * @param  object to be compared for equality with this attribute set.&#xA;     *&#xA;     * @return  &lt;tt>true&lt;/tt> if the specified object is equal to this &#xA;     *       attribute   set.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the hash code value for this attribute set. The hash code of an &#xA;     * attribute set is defined to be the sum of the hash codes of each entry  &#xA;     * in the AttributeSet. &#xA;     * This ensures that &lt;tt>t1.equals(t2)&lt;/tt> implies that &#xA;     * &lt;tt>t1.hashCode()==t2.hashCode()&lt;/tt> for any two attribute sets &#xA;     * &lt;tt>t1&lt;/tt> and &lt;tt>t2&lt;/tt>, as required by the general contract of &#xA;     * {@link java.lang.Object#hashCode() &lt;CODE>Object.hashCode()&lt;/CODE>}. &#xA;     *&#xA;     * @return  The hash code value for this attribute set.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Interface AttributeSet specifies the interface for a set of printing &#xA; * attributes. A printing attribute is an object whose class implements &#xA; * interface {@link Attribute Attribute}. &#xA; * &lt;P>&#xA; * An attribute set contains a group of &lt;I>attribute values,&lt;/I>&#xA; * where duplicate values are not allowed in the set.&#xA; * Furthermore, each value in an attribute set is  &#xA; * a member of some &lt;I>category,&lt;/I> and at most one value in any particular &#xA; * category is allowed in the set. For an attribute set, the values are {@link &#xA; * Attribute Attribute} objects, and the categories are {@link java.lang.Class &#xA; * Class} objects. An attribute's category is the class (or interface) at the &#xA; * root of the class hierarchy for that kind of attribute. Note that an &#xA; * attribute object's category may be a superclass of the attribute object's &#xA; * class rather than the attribute object's class itself. An attribute&#xA; * object's &#xA; * category is determined by calling the {@link Attribute#getCategory() &#xA; * &lt;CODE>getCategory()&lt;/CODE>} method defined in interface {@link Attribute &#xA; * Attribute}. &#xA; * &lt;P>&#xA; * The interfaces of an AttributeSet resemble those of the Java Collections&#xA; * API's java.util.Map interface, but is more restrictive in the types&#xA; * it will accept, and combines keys and values into an Attribute.&#xA; * &lt;P>&#xA; * Attribute sets are used in several places in the Print Service API. In &#xA; * each context, only certain kinds of attributes are allowed to appear in the &#xA; * attribute set, as determined by the tagging interfaces which the attribute &#xA; * class implements -- {@link DocAttribute DocAttribute}, {@link &#xA; * PrintRequestAttribute PrintRequestAttribute}, {@link PrintJobAttribute &#xA; * PrintJobAttribute}, and {@link PrintServiceAttribute&#xA; * PrintServiceAttribute}. &#xA; * There are four specializations of an attribute set that are restricted to &#xA; * contain just one of the four kinds of attribute -- {@link DocAttributeSet &#xA; * DocAttributeSet}, {@link PrintRequestAttributeSet&#xA; * PrintRequestAttributeSet}, &#xA; * {@link PrintJobAttributeSet PrintJobAttributeSet}, and {@link &#xA; * PrintServiceAttributeSet PrintServiceAttributeSet}, respectively. Note that &#xA; * many attribute classes implement more than one tagging interface and so may &#xA; * appear in more than one context. &#xA; * &lt;UL>&#xA; * &lt;LI>&#xA; * A {@link DocAttributeSet DocAttributeSet}, containing {@link DocAttribute &#xA; * DocAttribute}s, specifies the characteristics of an individual doc and the &#xA; * print job settings to be applied to an individual doc. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * A {@link PrintRequestAttributeSet PrintRequestAttributeSet}, containing &#xA; * {@link PrintRequestAttribute PrintRequestAttribute}s, specifies the&#xA; * settings &#xA; * to be applied to a whole print job and to all the docs in the print job. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * A {@link PrintJobAttributeSet PrintJobAttributeSet}, containing {@link &#xA; * PrintJobAttribute PrintJobAttribute}s, reports the status of a print job. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * A {@link PrintServiceAttributeSet PrintServiceAttributeSet}, containing &#xA; * {@link PrintServiceAttribute PrintServiceAttribute}s, reports the status of&#xA; *  a Print Service instance. &#xA; * &lt;/UL>&#xA; * &lt;P>&#xA; * In some contexts, the client is only allowed to examine an attribute set's &#xA; * contents but not change them (the set is read-only). In other places, the &#xA; * client is allowed both to examine and to change an attribute set's contents &#xA; * (the set is read-write). For a read-only attribute set, calling a mutating &#xA; * operation throws an UnmodifiableSetException. &#xA; * &lt;P>&#xA; * The Print Service API provides one implementation of interface &#xA; * AttributeSet, class {@link HashAttributeSet HashAttributeSet}.&#xA; * A client can use class {@link &#xA; * HashAttributeSet HashAttributeSet} or provide its own implementation of &#xA; * interface AttributeSet. The Print Service API also provides &#xA; * implementations of interface AttributeSet's subinterfaces -- classes {@link &#xA; * HashDocAttributeSet HashDocAttributeSet},&#xA; * {@link HashPrintRequestAttributeSet &#xA; * HashPrintRequestAttributeSet}, {@link HashPrintJobAttributeSet &#xA; * HashPrintJobAttributeSet}, and {@link HashPrintServiceAttributeSet &#xA; * HashPrintServiceAttributeSet}. &#xA; * &lt;P>&#xA; *&#xA; * @author  Alan Kaminsky&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
