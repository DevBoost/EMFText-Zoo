<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="PrinterStateReasons.java">
  <comments>/*&#xA; * @(#)PrinterStateReasons.java&#x9;1.9 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>print</namespaces>
  <namespaces>attribute</namespaces>
  <namespaces>standard</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/util/AbstractSet.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../java/util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/util/NoSuchElementException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/util/HashMap.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../java/util/Set.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Attribute.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../PrintServiceAttribute.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="PrinterStateReasons">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="3731791085163619457"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="PrinterStateReasons">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Construct a new, empty printer state reasons attribute; the underlying &#xA;     * hash map has the default initial capacity and load factor. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="PrinterStateReasons">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="initialCapacity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * super a new, empty printer state reasons attribute; the underlying &#xA;     * hash map has the given initial capacity and the default load factor. &#xA;     *&#xA;     * @param  initialCapacity  Initial capacity.&#xA;     *&#xA;     * @throws IllegalArgumentException if the initial capacity is less &#xA;     *     than zero.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="PrinterStateReasons">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="initialCapacity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="loadFactor">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Construct a new, empty printer state reasons attribute; the underlying &#xA;     * hash map has the given initial capacity and load factor. &#xA;     *&#xA;     * @param  initialCapacity  Initial capacity.&#xA;     * @param  loadFactor       Load factor.&#xA;     *&#xA;     * @throws IllegalArgumentException if the initial capacity is less &#xA;     *     than zero.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="PrinterStateReasons">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ForEachLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.1/@next">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Map$Entry.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.1/@next">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Map$Entry.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </arguments>
          </expression>
        </statement>
        <next name="e">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Map</namespaces>
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="PrinterStateReason.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="Severity.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Interface" href="../../../../java/util/Map$Entry.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </next>
        <collection xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Map.class.xmi#//@classifiers.0/@members.11"/>
          </next>
        </collection>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="map">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="PrinterStateReason.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="Severity.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../../../../java/util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Construct a new printer state reasons attribute that contains the same &#xA;     * {@link PrinterStateReason PrinterStateReason}-to-{@link Severity &#xA;     * Severity} mappings as the given map. The underlying hash map's initial &#xA;     * capacity and load factor are as specified in the superclass constructor &#xA;     * {@link java.util.HashMap#HashMap(java.util.Map) &#xA;     * &lt;CODE>HashMap(Map)&lt;/CODE>}. &#xA;     *&#xA;     * @param  map  Map to copy.&#xA;     *&#xA;     * @exception  NullPointerException&#xA;     *     (unchecked exception) Thrown if &lt;CODE>map&lt;/CODE> is null or if any &#xA;     *     key or value in &lt;CODE>map&lt;/CODE> is null. &#xA;     * @throws  ClassCastException&#xA;     *     (unchecked exception) Thrown if any key in &lt;CODE>map&lt;/CODE> is not &#xA;     *   an instance of class {@link PrinterStateReason PrinterStateReason} or &#xA;     *     if any value in &lt;CODE>map&lt;/CODE> is not an instance of class &#xA;     *     {@link Severity Severity}. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="put">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Severity.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="reason">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="PrinterStateReason.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="severity">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Severity.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds the given printer state reason to this printer state reasons &#xA;     * attribute, associating it with the given severity level. If this  &#xA;     * printer state reasons attribute previously contained a mapping for the  &#xA;     * given printer state reason, the old value is replaced. &#xA;     *&#xA;     * @param  reason    Printer state reason. This must be an instance of&#xA;     *                    class {@link PrinterStateReason PrinterStateReason}.&#xA;     * @param  severity  Severity of the printer state reason. This must be&#xA;     *                      an instance of class {@link Severity Severity}.&#xA;     *&#xA;     * @return  Previous severity associated with the given printer state&#xA;     *          reason, or &lt;tt>null&lt;/tt> if the given printer state reason was &#xA;     *          not present. &#xA;     * &#xA;     * @throws  NullPointerException&#xA;     *     (unchecked exception) Thrown if &lt;CODE>reason&lt;/CODE> is null or &#xA;     *     &lt;CODE>severity&lt;/CODE> is null. &#xA;     * @throws  ClassCastException&#xA;     *     (unchecked exception) Thrown if &lt;CODE>reason&lt;/CODE> is not an &#xA;     *   instance of class {@link PrinterStateReason PrinterStateReason} or if &#xA;     *     &lt;CODE>severity&lt;/CODE> is not an instance of class {@link Severity &#xA;     *     Severity}. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="reason is null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="severity is null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../java/util/HashMap.class.xmi#//@classifiers.0/@members.31"/>
            <arguments xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="PrinterStateReason.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
            </arguments>
            <arguments xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="Severity.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
            </arguments>
          </next>
          <self xsi:type="literals:Super"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCategory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:ExtendsTypeArgument">
            <extendTypes xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../Attribute.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </extendTypes>
          </typeArguments>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the printing attribute class which is to be used as the &quot;category&quot; &#xA;     * for this printing attribute value.&#xA;     * &lt;P>&#xA;     * For class PrinterStateReasons, the &#xA;     * category is class PrinterStateReasons itself. &#xA;     *&#xA;     * @return  Printing attribute class (category), an instance of class&#xA;     *          {@link java.lang.Class java.lang.Class}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
          <next xsi:type="references:ReflectiveClassReference"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the name of the category of which this attribute value is an &#xA;     * instance. &#xA;     * &lt;P>&#xA;     * For class PrinterStateReasons, the&#xA;     * category name is &lt;CODE>&quot;printer-state-reasons&quot;&lt;/CODE>. &#xA;     *&#xA;     * @return  Attribute category name.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:StringReference" value="printer-state-reasons"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="printerStateReasonSet">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="PrinterStateReason.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Set.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="severity">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Severity.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtain an unmodifiable set view of the individual printer state reason &#xA;     * attributes at the given severity level in this PrinterStateReasons &#xA;     * attribute. Each element in the set view is a {@link PrinterStateReason &#xA;     * PrinterStateReason} object. The only elements in the set view are the &#xA;     * {@link PrinterStateReason PrinterStateReason} objects that map to the &#xA;     * given severity value. The set view is backed by this&#xA;     * PrinterStateReasons attribute, so changes to this PrinterStateReasons&#xA;     * attribute are reflected  in the set view.&#xA;     * The set view does not support element insertion or &#xA;     * removal. The set view's iterator does not support element removal. &#xA;     *&#xA;     * @param  severity  Severity level.&#xA;     *&#xA;     * @return  Set view of the individual {@link PrinterStateReason&#xA;     *          PrinterStateReason} attributes at the given {@link Severity &#xA;     *          Severity} level. &#xA;     *&#xA;     * @exception  NullPointerException&#xA;     *     (unchecked exception) Thrown if &lt;CODE>severity&lt;/CODE> is null.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="severity is null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.9"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
          <arguments xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../java/util/HashMap.class.xmi#//@classifiers.0/@members.52"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="PrinterStateReasonSet">
      <members xsi:type="members:Field" name="mySeverity">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Severity.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="myEntrySet">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../java/util/Set.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Constructor" name="PrinterStateReasonSet">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.0"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.2/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.2/@parameters.1"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="severity">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Severity.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="entrySet">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../../java/util/Set.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
      </members>
      <members xsi:type="members:ClassMethod" name="size">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="result">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="iter">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.9/@members.4"/>
          </variable>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.3/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:PrefixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.3/@statements.0/@variable"/>
                <operator xsi:type="operators:PlusPlus"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.3/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.3/@statements.0/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="iterator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.10"/>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Set.class.xmi#//@classifiers.0/@members.3"/>
              </next>
            </arguments>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="PrinterStateReason.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Class" href="../../../../java/util/AbstractSet.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="PrinterStateReasonSetIterator">
      <members xsi:type="members:Field" name="mySeverity">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Severity.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="myIterator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="myEntry">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>Map</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../java/util/Map$Entry.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Constructor" name="PrinterStateReasonSetIterator">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.0"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.3/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.3/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.10/@members.4"/>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="severity">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Severity.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="iterator">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
      </members>
      <members xsi:type="members:ClassMethod" name="goToNext">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.2"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:NullLiteral"/>
          </expression>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.2"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>Map</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../java/util/Map$Entry.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </child>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.2"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:NullLiteral"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="Severity.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.2">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Map$Entry.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </child>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.0"/>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.2"/>
              <children xsi:type="literals:NullLiteral"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </children>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="hasNext">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.2"/>
            <children xsi:type="literals:NullLiteral"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="next">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/util/NoSuchElementException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.2"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="result">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.2">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Map$Entry.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.10/@members.4"/>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@members.6/@statements.1/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="remove">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Class PrinterStateReasons is a printing attribute class, a set of&#xA; * enumeration values, that provides additional information about the&#xA; * printer's current state, i.e., information that augments the value of the&#xA; * printer's {@link PrinterState PrinterState} attribute. &#xA; * &lt;P>&#xA; * Instances of {@link PrinterStateReason PrinterStateReason} do not appear in&#xA; *  a Print Service's attribute set directly. Rather, a PrinterStateReasons &#xA; * attribute appears in the Print Service's attribute set. The &#xA; * PrinterStateReasons attribute contains zero, one, or more than one {@link &#xA; * PrinterStateReason PrinterStateReason} objects which pertain to the Print &#xA; * Service's status, and each {@link PrinterStateReason PrinterStateReason} &#xA; * object is associated with a {@link Severity Severity} level of REPORT &#xA; *  (least severe), WARNING, or ERROR (most severe). The printer adds a {@link &#xA; * PrinterStateReason PrinterStateReason} object to the Print Service's &#xA; * PrinterStateReasons attribute when the corresponding condition becomes true &#xA; * of the printer, and the printer removes the {@link PrinterStateReason &#xA; * PrinterStateReason} object again when the corresponding condition becomes &#xA; * false, regardless of whether the Print Service's overall&#xA; * {@link PrinterState PrinterState} also changed. &#xA; * &lt;P>&#xA; * Class PrinterStateReasons inherits its implementation from class {@link &#xA; * java.util.HashMap java.util.HashMap}. Each entry in the map consists of a &#xA; * {@link PrinterStateReason PrinterStateReason} object (key) mapping to a &#xA; * {@link Severity Severity} object (value):&#xA; * &lt;P>&#xA; * Unlike most printing attributes which are immutable once constructed, class &#xA; * PrinterStateReasons is designed to be mutable; you can add {@link &#xA; * PrinterStateReason PrinterStateReason} objects to an existing &#xA; * PrinterStateReasons object and remove them again. However, like class &#xA; *  {@link java.util.HashMap java.util.HashMap}, class PrinterStateReasons is&#xA; * bot multiple thread safe. If a PrinterStateReasons object will be used by &#xA; * multiple threads, be sure to synchronize its operations (e.g., using a &#xA; * synchronized map view obtained from class {@link java.util.Collections &#xA; * java.util.Collections}). &#xA; * &lt;P>&#xA; * &lt;B>IPP Compatibility:&lt;/B> The string values returned by each individual &#xA; * {@link PrinterStateReason PrinterStateReason} object's and the associated&#xA; * {@link Severity Severity} object's &lt;CODE>toString()&lt;/CODE> methods,&#xA; * concatenated &#xA; * together with a hyphen (&lt;CODE>&quot;-&quot;&lt;/CODE>) in between, gives the IPP keyword &#xA; * value. The category name returned by &lt;CODE>getName()&lt;/CODE> gives the IPP &#xA; * attribute name. &#xA; * &lt;P>&#xA; *&#xA; * @author  Alan Kaminsky&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../PrintServiceAttribute.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <typeArguments xsi:type="generics:QualifiedTypeArgument">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="PrinterStateReason.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </typeArguments>
        <typeArguments xsi:type="generics:QualifiedTypeArgument">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Severity.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </typeArguments>
        <target xsi:type="classifiers:Class" href="../../../../java/util/HashMap.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
