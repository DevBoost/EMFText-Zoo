<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="MultipleDocumentHandling.java">
  <comments>/*&#xA; * @(#)MultipleDocumentHandling.java&#x9;1.9 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>print</namespaces>
  <namespaces>attribute</namespaces>
  <namespaces>standard</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Attribute.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Class" href="../EnumSyntax.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../PrintRequestAttribute.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../PrintJobAttribute.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="MultipleDocumentHandling">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="8098326460746413466"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SINGLE_DOCUMENT">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Single document -- see above for &lt;A HREF=&quot;#sdfi&quot;>further &#xA;     * information&lt;/A>. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SEPARATE_DOCUMENTS_UNCOLLATED_COPIES">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Separate documents uncollated copies -- see above for&#xA;     * &lt;A HREF=&quot;#sducfi&quot;>further information&lt;/A>. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SEPARATE_DOCUMENTS_COLLATED_COPIES">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Separate documents collated copies -- see above for&#xA;     * &lt;A HREF=&quot;#sdccfi&quot;>further information&lt;/A>. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SINGLE_DOCUMENT_NEW_SHEET">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Single document new sheet -- see above for&#xA;     * &lt;A HREF=&quot;#sdnsfi&quot;>further information&lt;/A>. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="MultipleDocumentHandling">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Construct a new multiple document handling enumeration value with the &#xA;     * given integer value. &#xA;     *&#xA;     * @param  value  Integer value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="myStringTable">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="references:StringReference" value="single-document"/>
          <initialValues xsi:type="references:StringReference" value="separate-documents-uncollated-copies"/>
          <initialValues xsi:type="references:StringReference" value="separate-documents-collated-copies"/>
          <initialValues xsi:type="references:StringReference" value="single-document-new-sheet"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="myEnumValueTable">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getStringTable">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns the string table for class MultipleDocumentHandling.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.5"/>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEnumValueTable">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../EnumSyntax.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns the enumeration value table for class MultipleDocumentHandling.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../EnumSyntax.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../EnumSyntax.class.xmi#//@classifiers.0/@members.4"/>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCategory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:ExtendsTypeArgument">
            <extendTypes xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../Attribute.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </extendTypes>
          </typeArguments>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the printing attribute class which is to be used as the &quot;category&quot; &#xA;     * for this printing attribute value.&#xA;     * &lt;P>&#xA;     * For class MultipleDocumentHandling and any vendor-defined subclasses, &#xA;     * the category is class MultipleDocumentHandling itself. &#xA;     *&#xA;     * @return  Printing attribute class (category), an instance of class&#xA;     *          {@link java.lang.Class java.lang.Class}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
          <next xsi:type="references:ReflectiveClassReference"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the name of the category of which this attribute value is an &#xA;     * instance. &#xA;     * &lt;P>&#xA;     * For class MultipleDocumentHandling and any vendor-defined subclasses, &#xA;     * the category name is &lt;CODE>&quot;multiple-document-handling&quot;&lt;/CODE>.&#xA;     *&#xA;     * @return  Attribute category name.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:StringReference" value="multiple-document-handling"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Class MultipleDocumentHandling is a printing attribute class, an enumeration, &#xA; * that controls finishing operations and the placement of one or more &#xA; * print-stream pages into impressions and onto media sheets. When the value of &#xA; * the {@link Copies Copies} attribute exceeds 1, MultipleDocumentHandling also &#xA; * controls the order in which the copies that result from processing the &#xA; * documents are produced. This attribute is relevant only for a multidoc print &#xA; * job consisting of two or more individual docs. &#xA; * &lt;P>&#xA; * Briefly, MultipleDocumentHandling determines the relationship between the &#xA; * multiple input (electronic) documents fed into a multidoc print job and the &#xA; * output (physical) document or documents produced by the multidoc print job. &#xA; * There are two possibilities: &#xA; * &lt;UL>&#xA; * &lt;LI>&#xA; * The multiple input documents are combined into a single output document. &#xA; * Finishing operations ({@link Finishings Finishings}),&#xA; * are performed on this single output &#xA; * document. The {@link Copies Copies} attribute tells how many copies of this &#xA; * single output document to produce. The MultipleDocumentHandling values &#xA; * SINGLE_DOCUMENT and SINGLE_DOCUMENT_NEW_SHEET specify two variations of &#xA; * this  possibility. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * The multiple input documents remain separate output documents. Finishing &#xA; * operations ({@link Finishings Finishings}),&#xA; * are performed on each output document &#xA; * separately. The {@link Copies Copies} attribute tells how many copies of each &#xA; * separate output document to produce. The MultipleDocumentHandling values &#xA; * SEPARATE_DOCUMENTS_UNCOLLATED_COPIES and SEPARATE_DOCUMENTS_COLLATED_COPIES &#xA; * specify two variations of this possibility. &#xA; * &lt;/UL>&#xA; * &lt;P>&#xA; * In the detailed explanations below, if &quot;&lt;CODE>a&lt;/CODE>&quot; represents an &#xA; * instance of document data, then the result of processing the data in&#xA; * document &quot;&lt;CODE>a&lt;/CODE>&quot; is a sequence of media sheets represented by &#xA; * &quot;&lt;CODE>a(*)&lt;/CODE>&quot;. &#xA; * &lt;P>&#xA; * The standard MultipleDocumentHandling values are:&#xA; * &lt;UL>&#xA; * &lt;LI>&#xA; * &lt;A NAME=&quot;sdfi&quot;>{@link #SINGLE_DOCUMENT &#xA; * &lt;B>&lt;CODE>SINGLE_DOCUMENT&lt;/CODE>&lt;/B>}&lt;/A>. If a print job has multiple &#xA; * documents -- say, the document data is called &lt;CODE>a&lt;/CODE> and &#xA; * &lt;CODE>b&lt;/CODE> -- then the result of processing all the document data &#xA; * (&lt;CODE>a&lt;/CODE> and then &lt;CODE>b&lt;/CODE>) must be treated as a single sequence &#xA; * of media sheets for finishing operations; that is, finishing would be &#xA; * performed on the concatenation of the sequences &lt;CODE>a(*),b(*)&lt;/CODE>. The &#xA; * printer must not force the data in each document instance to be formatted &#xA; * onto a new print-stream page, nor to start a new impression on a new media &#xA; * sheet. If more than one copy is made, the ordering of the sets of media &#xA; * sheets resulting from processing the document data must be &#xA; * &lt;CODE>a(*),b(*),a(*),b(*),...&lt;/CODE>, and the printer object must force &#xA; * each copy (&lt;CODE>a(*),b(*)&lt;/CODE>) to start on a new media sheet. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * &lt;A NAME=&quot;sducfi&quot;>{@link #SEPARATE_DOCUMENTS_UNCOLLATED_COPIES &#xA; * &lt;B>&lt;CODE>SEPARATE_DOCUMENTS_UNCOLLATED_COPIES&lt;/CODE>&lt;/B>}&lt;/A>. If a print job &#xA; * has multiple documents -- say, the document data is called &lt;CODE>a&lt;/CODE> and &#xA; * &lt;CODE>b&lt;/CODE> -- then the result of processing the data in each document &#xA; * instance must be treated as a single sequence of media sheets for finishing &#xA; * operations; that is, the sets &lt;CODE>a(*)&lt;/CODE> and &lt;CODE>b(*)&lt;/CODE> would &#xA; * each be finished separately. The printer must force each copy of the result &#xA; * of processing the data in a single document to start on a new media sheet. &#xA; * If more than one copy is made, the ordering of the sets of media sheets &#xA; * resulting from processing the document data must be &#xA; * &lt;CODE>a(*),a(*),...,b(*),b(*)...&lt;/CODE>. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * &lt;A NAME=&quot;sdccfi&quot;>{@link #SEPARATE_DOCUMENTS_COLLATED_COPIES &#xA; * &lt;B>&lt;CODE>SEPARATE_DOCUMENTS_COLLATED_COPIES&lt;/CODE>&lt;/B>}&lt;/A>. If a print job &#xA; * has multiple documents -- say, the document data is called &lt;CODE>a&lt;/CODE> and &#xA; * &lt;CODE>b&lt;/CODE> -- then the result of processing the data in each document &#xA; * instance must be treated as a single sequence of media sheets for finishing &#xA; * operations; that is, the sets &lt;CODE>a(*)&lt;/CODE> and &lt;CODE>b(*)&lt;/CODE> would &#xA; * each be finished separately. The printer must force each copy of the result &#xA; * of processing the data in a single document to start on a new media sheet. &#xA; * If more than one copy is made, the ordering of the sets of media sheets &#xA; * resulting from processing the document data must be &#xA; * &lt;CODE>a(*),b(*),a(*),b(*),...&lt;/CODE>. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * &lt;A NAME=&quot;sdnsfi&quot;>{@link #SINGLE_DOCUMENT_NEW_SHEET &#xA; * &lt;B>&lt;CODE>SINGLE_DOCUMENT_NEW_SHEET&lt;/CODE>&lt;/B>}&lt;/A>. Same as SINGLE_DOCUMENT, &#xA; * except that the printer must ensure that the first impression of each &#xA; * document instance in the job is placed on a new media sheet. This value &#xA; * allows multiple documents to be stapled together with a single staple where &#xA; * each document starts on a new sheet. &#xA; * &lt;/UL>&#xA; * &lt;P>&#xA; * SINGLE_DOCUMENT is the same as SEPARATE_DOCUMENTS_COLLATED_COPIES with &#xA; * respect to ordering of print-stream pages, but not media sheet generation, &#xA; * since SINGLE_DOCUMENT will put the first page of the next document on the &#xA; * back side of a sheet if an odd number of pages have been produced so far  &#xA; * for the job, while SEPARATE_DOCUMENTS_COLLATED_COPIES always forces the &#xA; * next document or document copy on to a new sheet.&#xA; * &lt;P>&#xA; * In addition, if a {@link Finishings Finishings} attribute of &#xA; * {@link Finishings#STAPLE &lt;CODE>STAPLE&lt;/CODE>} is specified, then: &#xA; * &lt;UL>&#xA; * &lt;LI>&#xA; * With SINGLE_DOCUMENT, documents &lt;CODE>a&lt;/CODE> and &lt;CODE>b&lt;/CODE> are  &#xA; * stapled together as a single document with no regard to new sheets. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * With SINGLE_DOCUMENT_NEW_SHEET, documents &lt;CODE>a&lt;/CODE> and &lt;CODE>b&lt;/CODE> &#xA; * are stapled together as a single document, but document &lt;CODE>b&lt;/CODE> &#xA; * starts on a new sheet. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * With SEPARATE_DOCUMENTS_UNCOLLATED_COPIES and &#xA; * SEPARATE_DOCUMENTS_COLLATED_COPIES, documents &lt;CODE>a&lt;/CODE> and &#xA; * &lt;CODE>b&lt;/CODE> are stapled separately. &#xA; * &lt;/UL>&#xA; * &lt;P>&#xA; * &lt;I>Note:&lt;/I> None of these values provide means to produce uncollated &#xA; * sheets within a document, i.e., where multiple copies of sheet &lt;I>n&lt;/I>&#xA; * are produced before sheet &lt;I>n&lt;/I>+1 of the same document.&#xA; * To specify that, see the {@link SheetCollate SheetCollate} attribute. &#xA; * &lt;P>&#xA; * &lt;B>IPP Compatibility:&lt;/B> The category name returned by &#xA; * &lt;CODE>getName()&lt;/CODE> is the IPP attribute name.  The enumeration's &#xA; * integer value is the IPP enum value.  The &lt;code>toString()&lt;/code> method &#xA; * returns the IPP string representation of the attribute value.&#xA; * &lt;P>&#xA; *&#xA; * @see  Copies&#xA; * @see  Finishings&#xA; * @see  NumberUp&#xA; * @see  PageRanges&#xA; * @see  SheetCollate&#xA; * @see  Sides&#xA; *&#xA; * @author  David Mendenhall&#xA; * @author  Alan Kaminsky&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../PrintRequestAttribute.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../PrintJobAttribute.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../EnumSyntax.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
