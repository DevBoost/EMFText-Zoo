<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="NumberUp.java">
  <comments>/*&#xA; * @(#)NumberUp.java&#x9;1.7 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>print</namespaces>
  <namespaces>attribute</namespaces>
  <namespaces>standard</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Attribute.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Class" href="../IntegerSyntax.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../DocAttribute.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../PrintRequestAttribute.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../PrintJobAttribute.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="NumberUp">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="3040436486786527811"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="NumberUp">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../java/lang/Integer.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
          </arguments>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Construct a new number up attribute with the given integer value. &#xA;     *&#xA;     * @param  value  Integer value.&#xA;     *&#xA;     * @exception  IllegalArgumentException&#xA;     *   (Unchecked exception) Thrown if &lt;CODE>value&lt;/CODE> is less than 1.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns whether this number up attribute is equivalent to the passed in &#xA;     * object. To be equivalent, all of the following conditions must be true: &#xA;     * &lt;OL TYPE=1>&#xA;     * &lt;LI>&#xA;     * &lt;CODE>object&lt;/CODE> is not null.&#xA;     * &lt;LI>&#xA;     * &lt;CODE>object&lt;/CODE> is an instance of class NumberUp.&#xA;     * &lt;LI>&#xA;     * This number up attribute's value and &lt;CODE>object&lt;/CODE>'s value are &#xA;     * equal. &#xA;     * &lt;/OL>&#xA;     *&#xA;     * @param  object  Object to compare to.&#xA;     *&#xA;     * @return  True if &lt;CODE>object&lt;/CODE> is equivalent to this number up&#xA;     *          attribute, false otherwise. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../IntegerSyntax.class.xmi#//@classifiers.0/@members.5"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
              </next>
              <self xsi:type="literals:Super"/>
            </children>
            <children xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0"/>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
            </children>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCategory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:ExtendsTypeArgument">
            <extendTypes xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../Attribute.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </extendTypes>
          </typeArguments>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the printing attribute class which is to be used as the &quot;category&quot; &#xA;     * for this printing attribute value.&#xA;     * &lt;P>&#xA;     * For class NumberUp, the category is class NumberUp itself. &#xA;     *&#xA;     * @return  Printing attribute class (category), an instance of class&#xA;     *          {@link java.lang.Class java.lang.Class}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
          <next xsi:type="references:ReflectiveClassReference"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the name of the category of which this attribute value is an &#xA;     * instance. &#xA;     * &lt;P>&#xA;     * For class NumberUp, the category name is &lt;CODE>&quot;number-up&quot;&lt;/CODE>. &#xA;     *&#xA;     * @return  Attribute category name.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:StringReference" value="number-up"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Class NumberUp is an integer valued printing attribute class that specifies &#xA; * the number of print-stream pages to impose upon a single side of an &#xA; * instance of a selected medium. That is, if the NumberUp value is &lt;I>n,&lt;/I>&#xA; * the printer must place &lt;I>n&lt;/I> print-stream pages on a single side of&#xA; * an instance of the &#xA; * selected medium. To accomplish this, the printer may add some sort of &#xA; * translation, scaling, or rotation. This attribute primarily controls the &#xA; * translation, scaling and rotation of print-stream pages. &#xA; * &lt;P>&#xA; * The effect of a NumberUp attribute on a multidoc print job (a job with &#xA; * multiple documents) depends on whether all the docs have the same number up &#xA; * values specified or whether different docs have different number up values &#xA; * specified, and on the (perhaps defaulted) value of the {@link &#xA; * MultipleDocumentHandling MultipleDocumentHandling} attribute. &#xA; * &lt;UL>&#xA; * &lt;LI>&#xA; * If all the docs have the same number up value &lt;I>n&lt;/I> specified, then any &#xA; * value of {@link MultipleDocumentHandling MultipleDocumentHandling} makes &#xA; * sense, and the printer's processing depends on the {@link &#xA; * MultipleDocumentHandling MultipleDocumentHandling} value: &#xA; * &lt;UL>&#xA; * &lt;LI>&#xA; * SINGLE_DOCUMENT -- All the input docs will be combined together into one &#xA; * output document. Each media impression will consist of &lt;I>n&lt;/I>m&#xA; *  print-stream pages from the output document. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * SINGLE_DOCUMENT_NEW_SHEET -- All the input docs will be combined together &#xA; * into one output document. Each media impression will consist of &lt;I>n&lt;/I> &#xA; * print-stream pages from the output document. However, the first impression of &#xA; * each input doc will always start on a new media sheet; this means the last &#xA; * impression of an input doc may have fewer than &lt;I>n&lt;/I> print-stream pages&#xA; *  on it. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- The input docs will remain separate. &#xA; * Each media impression will consist of &lt;I>n&lt;/I> print-stream pages from the &#xA; * input doc. Since the input docs are separate, the first impression of each &#xA; * input doc will always start on a new media sheet; this means the last &#xA; * impression of an input doc may have fewer than &lt;I>n&lt;/I> print-stream pages on &#xA; * it. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * SEPARATE_DOCUMENTS_COLLATED_COPIES -- The input docs will remain separate. &#xA; * Each media impression will consist of &lt;I>n&lt;/I> print-stream pages from the &#xA; * input doc. Since the input docs are separate, the first impression of each &#xA; * input doc will always start on a new media sheet; this means the last &#xA; * impression of an input doc may have fewer than &lt;I>n&lt;/I> print-stream pages&#xA; * on it. &#xA; * &lt;/UL> &#xA; * &lt;UL>&#xA; * &lt;LI>&#xA; * SINGLE_DOCUMENT -- All the input docs will be combined together into one &#xA; * output document. Each media impression will consist of &lt;I>n&lt;SUB>i&lt;/SUB>&lt;/I> &#xA; * print-stream pages from the output document, where &lt;I>i&lt;/I> is the number of &#xA; * the input doc corresponding to that point in the output document. When the &#xA; * next input doc has a different number up value from the previous input doc, &#xA; * the first print-stream page of the next input doc goes at the start of the &#xA; * next media impression, possibly leaving fewer than the full number of &#xA; * print-stream pages on the previous media impression. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * SINGLE_DOCUMENT_NEW_SHEET -- All the input docs will be combined together &#xA; * into one output document. Each media impression will consist of &lt;I>n&lt;/I> &#xA; * print-stream pages from the output document. However, the first impression of &#xA; * each input doc will always start on a new media sheet; this means the last &#xA; * impression of an input doc may have fewer than &lt;I>n&lt;/I> print-stream pages&#xA; * on it. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- The input docs will remain separate. &#xA; * For input doc &lt;I>i,&lt;/I> each media impression will consist of &#xA; * &lt;I>n&lt;SUB>i&lt;/SUB>&lt;/I> print-stream pages from the input doc. Since the input &#xA; * docs are separate, the first impression of each input doc will always start &#xA; * on a new media sheet; this means the last impression of an input doc may have &#xA; * fewer than &lt;I>n&lt;SUB>i&lt;/SUB>&lt;/I> print-stream pages on it. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * SEPARATE_DOCUMENTS_COLLATED_COPIES -- The input docs will remain separate. &#xA; * For input doc &lt;I>i,&lt;/I> each media impression will consist of &#xA; * &lt;I>n&lt;SUB>i&lt;/SUB>&lt;/I> print-stream pages from the input doc. Since the input &#xA; * docs are separate, the first impression of each input doc will always start &#xA; * on a new media sheet; this means the last impression of an input doc may  &#xA; * have fewer than &lt;I>n&lt;SUB>i&lt;/SUB>&lt;/I> print-stream pages on it. &#xA; * &lt;/UL> &#xA; * &lt;/UL>&#xA; * &lt;B>IPP Compatibility:&lt;/B> The integer value gives the IPP integer value.  &#xA; * The category name returned by &lt;CODE>getName()&lt;/CODE> gives the IPP  &#xA; * attribute name. &#xA; * &lt;P>&#xA; *&#xA; * @author  Alan Kaminsky&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../DocAttribute.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../PrintRequestAttribute.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../PrintJobAttribute.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../IntegerSyntax.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
