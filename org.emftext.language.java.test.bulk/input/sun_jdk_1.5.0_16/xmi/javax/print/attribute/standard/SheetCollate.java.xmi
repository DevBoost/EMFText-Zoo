<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="SheetCollate.java">
  <comments>/*&#xA; * @(#)SheetCollate.java&#x9;1.7 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>print</namespaces>
  <namespaces>attribute</namespaces>
  <namespaces>standard</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Attribute.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Class" href="../EnumSyntax.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../DocAttribute.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../PrintRequestAttribute.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../PrintJobAttribute.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="SheetCollate">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="7080587914259873003"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="UNCOLLATED">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sheets within a document appear in uncollated order when multiple  &#xA;     * copies are printed. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="COLLATED">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sheets within a document appear in collated order when multiple copies &#xA;     * are printed. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="SheetCollate">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Construct a new sheet collate enumeration value with the given integer &#xA;     * value. &#xA;     *&#xA;     * @param  value  Integer value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="myStringTable">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="references:StringReference" value="uncollated"/>
          <initialValues xsi:type="references:StringReference" value="collated"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="myEnumValueTable">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getStringTable">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns the string table for class SheetCollate.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEnumValueTable">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../EnumSyntax.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns the enumeration value table for class SheetCollate.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCategory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:ExtendsTypeArgument">
            <extendTypes xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../Attribute.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </extendTypes>
          </typeArguments>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the printing attribute class which is to be used as the &quot;category&quot; &#xA;     * for this printing attribute value.&#xA;     * &lt;P>&#xA;     * For class SheetCollate, the category is class SheetCollate itself. &#xA;     *&#xA;     * @return  Printing attribute class (category), an instance of class&#xA;     *          {@link java.lang.Class java.lang.Class}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
          <next xsi:type="references:ReflectiveClassReference"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the name of the category of which this attribute value is an &#xA;     * instance. &#xA;     * &lt;P>&#xA;     * For class SheetCollate, the category name is &lt;CODE>&quot;sheet-collate&quot;&lt;/CODE>. &#xA;     *&#xA;     * @return  Attribute category name.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:StringReference" value="sheet-collate"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Class SheetCollate is a printing attribute class, an enumeration, that &#xA; * specifies whether or not the media sheets of each copy of each printed &#xA; * document in a job are to be in sequence, when multiple copies of the document &#xA; * are specified by the {@link Copies Copies} attribute. When SheetCollate is &#xA; * COLLATED, each copy of each document is printed with the print-stream sheets &#xA; * in sequence. When SheetCollate is UNCOLLATED, each print-stream sheet is &#xA; * printed a number of times equal to the value of the {@link Copies Copies} &#xA; * attribute in succession. For example, suppose a document produces two media &#xA; * sheets as output, {@link Copies Copies} is 6, and SheetCollate is UNCOLLATED; &#xA; * in this case six copies of the first media sheet are printed followed by &#xA; * six copies of the second media sheet. &#xA; * &lt;P>&#xA; * Whether the effect of sheet collation is achieved by placing copies of a &#xA; * document in multiple output bins or in the same output bin with &#xA; * implementation defined document separation is implementation dependent. &#xA; * Also whether it is achieved by making multiple passes over the job or by  &#xA; * using an output sorter is implementation dependent. &#xA; * &lt;P>&#xA; * If a printer does not support the SheetCollate attribute (meaning the client &#xA; * cannot specify any particular sheet collation), the printer must behave as &#xA; * though SheetCollate were always set to COLLATED. &#xA; * &lt;P>&#xA; * The SheetCollate attribute interacts with the {@link MultipleDocumentHandling &#xA; * MultipleDocumentHandling} attribute. The {@link MultipleDocumentHandling &#xA; * MultipleDocumentHandling} attribute describes the collation of entire &#xA; * documents, and the SheetCollate attribute describes the semantics of &#xA; * collating individual pages within a document. &#xA; * &lt;P>&#xA; * The effect of a SheetCollate attribute on a multidoc print job (a job with &#xA; * multiple documents) depends on whether all the docs have the same sheet &#xA; * collation specified or whether different docs have different sheet &#xA; * collations specified, and on the (perhaps defaulted) value of the {@link &#xA; * MultipleDocumentHandling MultipleDocumentHandling} attribute. &#xA; * &lt;UL>&#xA; * &lt;LI>&#xA; * If all the docs have the same sheet collation specified, then the following &#xA; * combinations of SheetCollate and {@link MultipleDocumentHandling &#xA; * MultipleDocumentHandling} are permitted, and the printer reports an error &#xA; * when the job is submitted if any other combination is specified: &#xA; * &lt;UL>&#xA; * &lt;LI>&#xA; * SheetCollate = COLLATED, {@link MultipleDocumentHandling &#xA; * MultipleDocumentHandling} = SINGLE_DOCUMENT -- All the input docs will be &#xA; * combined into one output document. Multiple copies of the output document &#xA; * will be produced with pages in collated order, i.e. pages 1, 2, 3, . . .,&#xA; * 1, 2, 3, . . . &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * SheetCollate = COLLATED, {@link MultipleDocumentHandling &#xA; * MultipleDocumentHandling} = SINGLE_DOCUMENT_NEW_SHEET -- All the input docs &#xA; * will be combined into one output document, and the first impression of each &#xA; * input doc will always start on a new media sheet. Multiple copies of the &#xA; * output document will be produced with pages in collated order, i.e. pages&#xA; * 1, 2, 3, . . ., 1, 2, 3, . . . &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * SheetCollate = COLLATED, {@link MultipleDocumentHandling &#xA; * MultipleDocumentHandling} = SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- Each &#xA; * input doc will remain a separate output document. Multiple copies of each &#xA; * output document (call them A, B, . . .) will be produced with each document's &#xA; * pages in collated order, but the documents themselves in uncollated order, &#xA; * i.e. pages A1, A2, A3, . . ., A1, A2, A3, . . ., B1, B2, B3, . . ., B1, B2, &#xA; * B3, . . . &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * SheetCollate = COLLATED, {@link MultipleDocumentHandling &#xA; * MultipleDocumentHandling} = SEPARATE_DOCUMENTS_COLLATED_COPIES -- Each input &#xA; * doc will remain a separate output document. Multiple copies of each output &#xA; * document (call them A, B, . . .) will be produced with each document's pages &#xA; * in collated order, with the documents themselves also in collated order, i.e. &#xA; * pages A1, A2, A3, . . ., B1, B2, B3, . . ., A1, A2, A3, . . ., B1, B2, B3,&#xA; * . . . &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * SheetCollate = UNCOLLATED, {@link MultipleDocumentHandling &#xA; * MultipleDocumentHandling} = SINGLE_DOCUMENT -- All the input docs will be &#xA; * combined into one output document. Multiple copies of the output document &#xA; * will be produced with pages in uncollated order, i.e. pages 1, 1, . . .,&#xA; * 2, 2, . . ., 3, 3, . . . &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * SheetCollate = UNCOLLATED, {@link MultipleDocumentHandling &#xA; * MultipleDocumentHandling} = SINGLE_DOCUMENT_NEW_SHEET -- All the input docs &#xA; * will be combined into one output document, and the first impression of each &#xA; * input doc will always start on a new media sheet. Multiple copies of the &#xA; * output document will be produced with pages in uncollated order, i.e. pages&#xA; * 1, 1, . . ., 2, 2, . . ., 3, 3, . . . &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * SheetCollate = UNCOLLATED, {@link MultipleDocumentHandling &#xA; * MultipleDocumentHandling} = SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- Each &#xA; * input doc will remain a separate output document. Multiple copies of each &#xA; * output document (call them A, B, . . .) will be produced with each document's &#xA; * pages in uncollated order, with the documents themselves also in uncollated &#xA; * order, i.e. pages A1, A1, . . ., A2, A2, . . ., A3, A3, . . ., B1, B1, . . ., &#xA; * B2, B2, . . ., B3, B3, . . . &#xA; * &lt;/UL> &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * If different docs have different sheet collations specified, then only one &#xA; * value of {@link MultipleDocumentHandling MultipleDocumentHandling} is &#xA; * permitted, and the printer reports an error when the job is submitted if any &#xA; * other value is specified: &#xA; * &lt;UL>&#xA; * &lt;LI>&#xA; * {@link MultipleDocumentHandling MultipleDocumentHandling} = &#xA; * SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- Each input doc will remain a separate &#xA; * output document. Multiple copies of each output document (call them A, B,&#xA; * . . .) will be produced with each document's pages in collated or uncollated &#xA; * order as the corresponding input doc's SheetCollate attribute specifies, and &#xA; * with the documents themselves in uncollated order. If document A had &#xA; * SheetCollate = UNCOLLATED and document B had SheetCollate = COLLATED, the &#xA; * following pages would be produced: A1, A1, . . ., A2, A2, . . ., A3, A3,&#xA; * . . ., B1, B2, B3, . . ., B1, B2, B3, . . . &#xA; * &lt;/UL>&#xA; * &lt;/UL>&#xA; * &lt;P>&#xA; * &lt;B>IPP Compatibility:&lt;/B> SheetCollate is not an IPP attribute at present.&#xA; * &lt;P>&#xA; *&#xA; * @see  MultipleDocumentHandling&#xA; *&#xA; * @author  Alan Kaminsky&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../DocAttribute.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../PrintRequestAttribute.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../PrintJobAttribute.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../EnumSyntax.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
