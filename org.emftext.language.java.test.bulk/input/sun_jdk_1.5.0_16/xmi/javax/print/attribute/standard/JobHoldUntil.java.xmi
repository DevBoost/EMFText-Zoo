<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="JobHoldUntil.java">
  <comments>/*&#xA; * @(#)JobHoldUntil.java&#x9;1.7 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>print</namespaces>
  <namespaces>attribute</namespaces>
  <namespaces>standard</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/util/Date.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Attribute.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Class" href="../DateTimeSyntax.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../PrintRequestAttribute.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../PrintJobAttribute.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="JobHoldUntil">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="1664471048860415024"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="JobHoldUntil">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dateTime">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/util/Date.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Construct a new job hold until date-time attribute with the given&#xA;     * {@link java.util.Date Date} value. &#xA;     *&#xA;     * @param  dateTime  {@link java.util.Date Date} value.&#xA;     *&#xA;     * @exception  NullPointerException&#xA;     *     (unchecked exception) Thrown if &lt;CODE>dateTime&lt;/CODE> is null.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns whether this job hold until attribute is equivalent to the  &#xA;     * passed in object. To be equivalent, all of the following conditions &#xA;     * must be true: &#xA;     * &lt;OL TYPE=1>&#xA;     * &lt;LI>&#xA;     * &lt;CODE>object&lt;/CODE> is not null.&#xA;     * &lt;LI>&#xA;     * &lt;CODE>object&lt;/CODE> is an instance of class JobHoldUntil.&#xA;     * &lt;LI>&#xA;     * This job hold until attribute's {@link java.util.Date Date} value and &#xA;     * &lt;CODE>object&lt;/CODE>'s {@link java.util.Date Date} value are equal. &#xA;     * &lt;/OL>&#xA;     *&#xA;     * @param  object  Object to compare to.&#xA;     *&#xA;     * @return  True if &lt;CODE>object&lt;/CODE> is equivalent to this job hold&#xA;     *          until attribute, false otherwise. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../DateTimeSyntax.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
              </next>
              <self xsi:type="literals:Super"/>
            </children>
            <children xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0"/>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
            </children>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCategory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:ExtendsTypeArgument">
            <extendTypes xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../Attribute.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </extendTypes>
          </typeArguments>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the printing attribute class which is to be used as the &quot;category&quot; &#xA;     * for this printing attribute value.&#xA;     * &lt;P>&#xA;     * For class JobHoldUntil, the category is class JobHoldUntil itself.&#xA;     *&#xA;     * @return  Printing attribute class (category), an instance of class&#xA;     *          {@link java.lang.Class java.lang.Class}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
          <next xsi:type="references:ReflectiveClassReference"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the name of the category of which this attribute value is an &#xA;     * instance. &#xA;     * &lt;P>&#xA;     * For class JobHoldUntil, the category name is &lt;CODE>&quot;job-hold-until&quot;&lt;/CODE>. &#xA;     *&#xA;     * @return  Attribute category name.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:StringReference" value="job-hold-until"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Class JobHoldUntil is a printing attribute class, a date-time attribute, that &#xA; * specifies the exact date and time at which the job must become a candidate &#xA; * for printing. &#xA; * &lt;P>&#xA; * If the value of this attribute specifies a date-time that is in the future, &#xA; * the printer should add the {@link JobStateReason JobStateReason} value of &#xA; * JOB_HOLD_UNTIL_SPECIFIED to the job's {@link JobStateReasons JobStateReasons} &#xA; * attribute, must move the job to the PENDING_HELD state, and must not schedule &#xA; * the job for printing until the specified date-time arrives. &#xA; * &lt;P>&#xA; * When the specified date-time arrives, the printer must remove the {@link &#xA; * JobStateReason JobStateReason} value of JOB_HOLD_UNTIL_SPECIFIED from the &#xA; * job's {@link JobStateReasons JobStateReasons} attribute, if present. If there &#xA; * are no other job state reasons that keep the job in the PENDING_HELD state, &#xA; * the printer must consider the job as a candidate for processing by moving the &#xA; * job to the PENDING state. &#xA; * &lt;P>&#xA; * If the specified date-time has already passed, the job must be a candidate &#xA; * for processing immediately. Thus, one way to make the job immediately become &#xA; * a candidate for processing is to specify a JobHoldUntil attribute constructed &#xA; * like this (denoting a date-time of January 1, 1970, 00:00:00 GMT): &#xA; * &lt;PRE>&#xA; *     JobHoldUntil immediately = new JobHoldUntil (new Date (0L));&#xA; * &lt;/PRE>&#xA; * &lt;P>&#xA; * If the client does not supply this attribute in a Print Request and the &#xA; * printer supports this attribute, the printer must use its &#xA; * (implementation-dependent) default JobHoldUntil value at job submission time &#xA; * (unlike most job template attributes that are used if necessary at job &#xA; * processing time). &#xA; * &lt;P>&#xA; * To construct a JobHoldUntil attribute from separate values of the year, &#xA; * month, day, hour, minute, and so on, use a {@link java.util.Calendar &#xA; * Calendar} object to construct a {@link java.util.Date Date} object, then use &#xA; * the {@link java.util.Date Date} object to construct the JobHoldUntil &#xA; * attribute. To convert a JobHoldUntil attribute to separate values of the &#xA; * year, month, day, hour, minute, and so on, create a {@link java.util.Calendar &#xA; * Calendar} object and set it to the {@link java.util.Date Date} from the &#xA; * JobHoldUntil attribute. &#xA; * &lt;P>&#xA; * &lt;B>IPP Compatibility:&lt;/B> Although IPP supports a &quot;job-hold-until&quot; attribute &#xA; * specified as a keyword, IPP does not at this time support a &quot;job-hold-until&quot; &#xA; * attribute specified as a date and time. However, the date and time can be &#xA; * converted to one of the standard IPP keywords with some loss of precision; &#xA; * for example, a JobHoldUntil value with today's date and 9:00pm local time &#xA; * might be converted to the standard IPP keyword &quot;night&quot;. The category name &#xA; * returned by &lt;CODE>getName()&lt;/CODE> gives the IPP attribute name. &#xA; * &lt;P>&#xA; *&#xA; * @author  Alan Kaminsky&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../PrintRequestAttribute.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../PrintJobAttribute.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../DateTimeSyntax.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
