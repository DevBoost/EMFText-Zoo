<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="DocPrintJob.java">
  <comments>/*&#xA; * @(#)DocPrintJob.java&#x9;1.10 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>print</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="attribute/AttributeSet.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="attribute/PrintJobAttributeSet.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="attribute/PrintRequestAttributeSet.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>event</namespaces>
    <classifier xsi:type="classifiers:Interface" href="event/PrintJobAttributeListener.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>event</namespaces>
    <classifier xsi:type="classifiers:Interface" href="event/PrintJobListener.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <classifier xsi:type="classifiers:Class" href="PrintException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="DocPrintJob">
    <members xsi:type="members:InterfaceMethod" name="getPrintService">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="PrintService.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines the {@link PrintService} object to which this print job &#xA;     * object is bound. &#xA;     *&#xA;     * @return  &lt;code>PrintService&lt;/code> object.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="attribute/PrintJobAttributeSet.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Obtains this Print Job's set of printing attributes.&#xA;     * The returned attribute set object is unmodifiable. &#xA;     * The returned attribute set object is a &quot;snapshot&quot; of this Print Job's&#xA;     * attribute set at the time of the {@link #getAttributes()} method&#xA;     * call; that is, the returned attribute set's object's contents will&#xA;     * not be updated if this Print Job's attribute set's contents change&#xA;     * in the future. To detect changes in attribute values, call&#xA;     * &lt;code>getAttributes()&lt;/code> again and compare the new attribute&#xA;     * set to the previous attribute set; alternatively, register a&#xA;     * listener for print job events.&#xA;     * The returned value may be an empty set but should not be null.&#xA;     * @return the print job attributes&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addPrintJobListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/PrintJobListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Registers a listener for event occurring during this print job.&#xA;     * If listener is null, no exception is thrown and no action is&#xA;     * performed.&#xA;     * If listener is already registered, it will be registered again.&#xA;     * @see #removePrintJobListener&#xA;     *&#xA;     * @param listener  The object implementing the listener interface&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removePrintJobListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/PrintJobListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes a listener from this print job.&#xA;     * This method performs no function, nor does it throw an exception,&#xA;     * if the listener specified by the argument was not previously added&#xA;     * to this component. If listener is null, no exception is thrown and&#xA;     * no action is performed. If a listener was registered more than once&#xA;     * only one of the registrations will be removed.&#xA;     * @see #addPrintJobListener&#xA;     * &#xA;     * @param listener  The object implementing the listener interface&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addPrintJobAttributeListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/PrintJobAttributeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="attribute/PrintJobAttributeSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Registers a listener for changes in the specified attributes.&#xA;     * If listener is null, no exception is thrown and no action is&#xA;     * performed.&#xA;     * To determine the attribute updates that may be reported by this job,&#xA;     * a client can call &lt;code>getAttributes()/&lt;code> and identify the&#xA;     * subset that are interesting and likely to be reported to the&#xA;     * listener. Clients expecting to be updated about changes in a&#xA;     * specific job attribute should verify it is in that set, but&#xA;     * updates about an attribute will be made only if it changes and this&#xA;     * is detected by the job. Also updates may be subject to batching&#xA;     * by the job. To minimise overhead in print job processing it is&#xA;     * recommended to listen on only that subset of attributes which&#xA;     * are likely to change.&#xA;     * If the specified set is empty no attribute updates will be reported&#xA;     * to the listener.&#xA;     * If the attribute set is null, then this means to listen on all&#xA;     * dynamic attributes that the job supports. This may result in no&#xA;     * update notifications if a job can not report any attribute updates.&#xA;     * &#xA;     * If listener is already registered, it will be registered again.&#xA;     * @see #removePrintJobAttributeListener&#xA;     *&#xA;     * @param listener  The object implementing the listener interface&#xA;     * @param attributes The attributes to listen on, or null to mean&#xA;     * all attributes that can change, as determined by the job.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removePrintJobAttributeListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/PrintJobAttributeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes an attribute listener from this print job.&#xA;     * This method performs no function, nor does it throw an exception,&#xA;     * if the listener specified by the argument was not previously added&#xA;     * to this component. If the listener is null, no exception is thrown&#xA;     * and no action is performed.&#xA;     * If a listener is registered more than once, even for a different&#xA;     * set of attributes, no guarantee is made which listener is removed.&#xA;     * @see #addPrintJobAttributeListener&#xA;     *&#xA;     * @param listener  The object implementing the listener interface&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="print">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="doc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Doc.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="attribute/PrintRequestAttributeSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="PrintException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Prints a document with the specified job attributes.&#xA;     * This method should only be called once for a given print job.&#xA;     * Calling it again will not result in a new job being spooled to&#xA;     * the printer. The service implementation will define policy&#xA;     * for service interruption and recovery.&#xA;     * When the print method returns, printing may not yet have completed as&#xA;     * printing may happen asynchronously, perhaps in a different thread.&#xA;     * Application clients which  want to monitor the success or failure&#xA;     * should register a PrintJobListener.&#xA;     * &lt;p>&#xA;     * Print service implementors should close any print data streams (ie&#xA;     * Reader or InputStream implementations) that they obtain&#xA;     * from the client doc. Robust clients may still wish to verify this.&#xA;     * An exception is always generated if a &lt;code>DocFlavor&lt;/code> cannot&#xA;     * be printed.&#xA;     *&#xA;     * @param doc&#x9;The document to be printed. If must be a flavor&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;supported by this PrintJob.&#xA;     *&#xA;     * @param attributes The job attributes to be applied to this print job.&#xA;     *&#x9;      If this parameter is null then the default attributes are used.&#xA;     * @throws PrintException The exception additionally may implement &#xA;     * an interface that more precisely describes the cause of the&#xA;     * exception&#xA;     * &lt;ul>&#xA;     * &lt;li>FlavorException.&#xA;     *&#x9;If the document has a flavor not supported by this print job.&#xA;     * &lt;li>AttributeException.&#xA;     *&#x9;If one or more of the attributes are not valid for this print job.&#xA;     * &lt;/ul>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *&#xA; * This interface represents a print job that can print a specified&#xA; * document with a set of job attributes.  An object implementing&#xA; * this interface is obtained from a print service.&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
