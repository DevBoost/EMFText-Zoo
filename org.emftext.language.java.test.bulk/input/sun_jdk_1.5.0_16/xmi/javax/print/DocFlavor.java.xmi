<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="DocFlavor.java">
  <comments>/*&#xA; * @(#)DocFlavor.java&#x9;1.17 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>print</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/io/ObjectInputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../java/io/ObjectOutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../java/io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../java/util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="DocFlavor">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="4512080796965449721"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="hostEncoding">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A String representing the host operating system encoding.&#xA;     * This will follow the conventions documented in&#xA;     * &lt;a href=&quot;http://ietf.org/rfc/rfc2278.txt&quot;>&#xA;     * &lt;i>RFC&amp;nbsp;2278:&amp;nbsp;IANA Charset Registration Procedures&lt;/i>&lt;/a>&#xA;     * except where historical names are returned for compatibility with&#xA;     * previous versions of the Java platform.&#xA;     * The value returned from method is valid only for the VM which&#xA;     * returns it, for use in a DocFlavor.&#xA;     * This is the charset for all the &quot;HOST&quot; pre-defined DocFlavors in&#xA;     * the executing VM.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../java/security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                    <arguments xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <namespaces>sun</namespaces>
                        <namespaces>security</namespaces>
                        <namespaces>action</namespaces>
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../sun/security/action/GetPropertyAction.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:StringReference" value="file.encoding"/>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../java/security/AccessController.class.xmi#//@classifiers.0"/>
                </next>
              </next>
            </child>
          </value>
        </expression>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="myMimeType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="MimeType.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * MIME type.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="myClassName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Representation class name. &#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="myStringValue">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * String value for this doc flavor. Computed when needed and cached. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Constructor" name="DocFlavor">
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="MimeType.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mimeType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="className">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new doc flavor object from the given MIME type and &#xA;     * representation class name. The given MIME type is converted into &#xA;     * canonical form and stored internally.&#xA;     *&#xA;     * @param  mimeType   MIME media type string.&#xA;     * @param  className  Fully-qualified representation class name.&#xA;     *&#xA;     * @exception  NullPointerException&#xA;     *     (unchecked exception) Thrown if &lt;CODE>mimeType&lt;/CODE> is null or &#xA;     *     &lt;CODE>className&lt;/CODE> is null. &#xA;     * @exception  IllegalArgumentException&#xA;     *     (unchecked exception) Thrown if &lt;CODE>mimeType&lt;/CODE> does not &#xA;     *     obey the syntax for a MIME media type string. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getMimeType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns this doc flavor object's MIME type string based on the  &#xA;     * canonical form. Each parameter value is enclosed in quotes. &#xA;     * @return the mime type&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="MimeType.class.xmi#//@classifiers.0/@members.11"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMediaType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns this doc flavor object's media type (from the MIME type). &#xA;     * @return the media type&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="MimeType.class.xmi#//@classifiers.0/@members.12"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMediaSubtype">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns this doc flavor object's media subtype (from the MIME type). &#xA;     * @return the media sub-type&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="MimeType.class.xmi#//@classifiers.0/@members.13"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getParameter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="paramName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>String&lt;/code> representing a MIME&#xA;     * parameter.&#xA;     * Mime types may include parameters which are usually optional.&#xA;     * The charset for text types is a commonly useful example.&#xA;     * This convenience method will return the value of the specified&#xA;     * parameter if one was specified in the mime type for this flavor.&#xA;     * &lt;p>&#xA;     * @param paramName the name of the paramater. This name is internally&#xA;     * converted to the canonical lower case format before performing&#xA;     * the match.&#xA;     * @return String representing a mime parameter, or&#xA;     * null if that parameter is not in the mime type string.&#xA;     * @exception throws NullPointerException if paramName is null.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../java/util/Map.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../java/lang/String.class.xmi#//@classifiers.0/@members.68"/>
                  </next>
                </arguments>
              </next>
              <target xsi:type="members:ClassMethod" href="MimeType.class.xmi#//@classifiers.0/@members.14"/>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getRepresentationClassName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of this doc flavor object's representation class. &#xA;     * @return the name of the representation class.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Converts this &lt;code>DocFlavor&lt;/code> to a string.&#xA;     *&#xA;     * @return  MIME type string based on the canonical form. Each parameter &#xA;     *          value is enclosed in quotes. &#xA;     *          A &quot;class=&quot; parameter is appended to the&#xA;     *          MIME type string to indicate the representation class name. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.15"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a hash code for this doc flavor object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/lang/String.class.xmi#//@classifiers.0/@members.44"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines if this doc flavor object is equal to the given object.&#xA;     * The two are equal if the given object is not null, is an instance&#xA;     * of &lt;code>DocFlavor&lt;/code>, has a MIME type equivalent to this doc &#xA;     * flavor object's MIME type (that is, the MIME types have the same media &#xA;     * type, media subtype, and parameters), and has the same representation &#xA;     * class name as this doc flavor object. Thus, if two doc flavor objects' &#xA;     * MIME types are the same except for comments, they are considered equal. &#xA;     * However, two doc flavor objects with MIME types of &quot;text/plain&quot; and &#xA;     * &quot;text/plain; charset=US-ASCII&quot; are not considered equal, even though&#xA;     * they represent the same media type (because the default character&#xA;     * set for plain text is US-ASCII). &#xA;     *&#xA;     * @param  obj  Object to test.&#xA;     *&#xA;     * @return  True if this doc flavor object equals &lt;CODE>obj&lt;/CODE>, false&#xA;     *          otherwise. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:InstanceOfExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
          </children>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.15"/>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
                </expression>
              </arguments>
            </next>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStringValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns this doc flavor object's string value. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                <children xsi:type="references:StringReference" value="; class=&quot;"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                <children xsi:type="references:StringReference" value="&quot;"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/io/ObjectOutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Write the instance to a stream (ie serialize the object).&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.17"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.14"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="MimeType.class.xmi#//@classifiers.0/@members.11"/>
              </next>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="readObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/io/ObjectInputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Reconstitute an instance from a stream (that is, deserialize it).&#xA;     *&#xA;     * @serialData&#xA;     * The serialised form of a DocFlavor is the String naming the&#xA;     * representation class followed by the String representing the canonical&#xA;     * form of the mime type.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../java/io/ObjectInputStream.class.xmi#//@classifiers.0/@members.19"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="MimeType.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../java/io/ObjectInputStream.class.xmi#//@classifiers.0/@members.16"/>
                </next>
              </child>
            </arguments>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="BYTE_ARRAY">
      <members xsi:type="members:Field" name="serialVersionUID">
        <initialValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalLongLiteral" decimalValue="9065578006593857475"/>
        </initialValue>
        <typeReference xsi:type="types:Long"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Constructor" name="BYTE_ARRAY">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@members.1/@parameters.0"/>
            <arguments xsi:type="references:StringReference" value="[B"/>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="mimeType">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Constructs a new doc flavor with the given MIME type and a print &#xA;    &#x9; * data representation class name of &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte array). &#xA;    &#x9; *&#xA;    &#x9; * @param  mimeType   MIME media type string.&#xA;    &#x9; *&#xA;    &#x9; * @exception  NullPointerException&#xA;    &#x9; *     (unchecked exception) Thrown if &lt;CODE>mimeType&lt;/CODE> is null. &#xA;    &#x9; * @exception  IllegalArgumentException&#xA;    &#x9; *     (unchecked exception) Thrown if &lt;CODE>mimeType&lt;/CODE> does not &#xA;    &#x9; *     obey the syntax for a MIME media type string. &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_HOST">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="text/plain; charset="/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;text/plain&quot;&lt;/CODE>,&#xA;&#x9; * encoded in the host platform encoding.&#xA;&#x9; * See {@link DocFlavor#hostEncoding &lt;CODE>hostEncoding&lt;/CODE>}&#xA;    &#x9; * Print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_UTF_8">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=utf-8"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/plain; charset=utf-8&quot;&lt;/CODE>, &#xA;    &#x9; * print data representation class name = &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte &#xA;    &#x9; * array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_UTF_16">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=utf-16"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/plain; charset=utf-16&quot;&lt;/CODE>,&#xA;    &#x9; * print data representation class name = &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte &#xA;    &#x9; * array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_UTF_16BE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=utf-16be"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/plain; charset=utf-16be&quot;&lt;/CODE>&#xA;&#x9; * (big-endian byte ordering), &#xA;    &#x9; * print data representation class name = &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte &#xA;    &#x9; * array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_UTF_16LE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=utf-16le"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/plain; charset=utf-16le&quot;&lt;/CODE>&#xA;&#x9; * (little-endian byte ordering), &#xA;    &#x9; * print data representation class name = &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte &#xA;    &#x9; * array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_US_ASCII">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=us-ascii"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/plain; charset=us-ascii&quot;&lt;/CODE>,&#xA;&#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_HOST">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="text/html; charset="/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;text/html&quot;&lt;/CODE>,&#xA;&#x9; * encoded in the host platform encoding.&#xA;&#x9; * See {@link DocFlavor#hostEncoding &lt;CODE>hostEncoding&lt;/CODE>}&#xA;    &#x9; * Print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_UTF_8">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=utf-8"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/html; charset=utf-8&quot;&lt;/CODE>, &#xA;    &#x9; * print data representation class name = &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte &#xA;    &#x9; * array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_UTF_16">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=utf-16"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/html; charset=utf-16&quot;&lt;/CODE>,&#xA;    &#x9; * print data representation class name = &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte &#xA;    &#x9; * array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_UTF_16BE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=utf-16be"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/html; charset=utf-16be&quot;&lt;/CODE>&#xA;&#x9; * (big-endian byte ordering), &#xA;    &#x9; * print data representation class name = &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte &#xA;    &#x9; * array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_UTF_16LE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=utf-16le"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/html; charset=utf-16le&quot;&lt;/CODE>&#xA;&#x9; * (little-endian byte ordering), &#xA;    &#x9; * print data representation class name = &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte &#xA;    &#x9; * array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_US_ASCII">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=us-ascii"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/html; charset=us-ascii&quot;&lt;/CODE>,&#xA;&#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PDF">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="application/pdf"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;application/pdf&quot;&lt;/CODE>, print &#xA;    &#x9; * data representation class name = &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="POSTSCRIPT">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="application/postscript"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;application/postscript&quot;&lt;/CODE>, &#xA;    &#x9; * print data representation class name = &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte &#xA;    &#x9; * array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PCL">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="application/vnd.hp-PCL"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;application/vnd.hp-PCL&quot;&lt;/CODE>, &#xA;    &#x9; * print data representation class name = &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte &#xA;    &#x9; * array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="GIF">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="image/gif"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;image/gif&quot;&lt;/CODE>, print data &#xA;    &#x9; * representation class name = &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="JPEG">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="image/jpeg"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;image/jpeg&quot;&lt;/CODE>, print data &#xA;    &#x9; * representation class name = &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PNG">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="image/png"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;image/png&quot;&lt;/CODE>, print data &#xA;    &#x9; * representation class name = &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="AUTOSENSE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.18"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="application/octet-stream"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.18"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;application/octet-stream&quot;&lt;/CODE>, &#xA;    &#x9; * print data representation class name = &lt;CODE>&quot;[B&quot;&lt;/CODE> (byte &#xA;    &#x9; * array). The client must determine that data described &#xA;&#x9; * using this DocFlavor is valid for the printer.&#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Class DocFlavor.BYTE_ARRAY provides predefined static constant&#xA;     * DocFlavor objects for example doc flavors using a byte array&#xA;     * (&lt;CODE>byte[]&lt;/CODE>) as the print data representation class. &#xA;     * &lt;P>&#xA;     *&#xA;     * @author  Alan Kaminsky&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="INPUT_STREAM">
      <members xsi:type="members:Field" name="serialVersionUID">
        <initialValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalLongLiteral" decimalValue="7045842700749194127"/>
        </initialValue>
        <typeReference xsi:type="types:Long"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Constructor" name="INPUT_STREAM">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@members.1/@parameters.0"/>
            <arguments xsi:type="references:StringReference" value="java.io.InputStream"/>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="mimeType">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Constructs a new doc flavor with the given MIME type and a print  &#xA;    &#x9; * data representation class name of&#xA;&#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; *&#xA;    &#x9; * @param  mimeType   MIME media type string.&#xA;    &#x9; *&#xA;    &#x9; * @exception  NullPointerException&#xA;    &#x9; *     (unchecked exception) Thrown if &lt;CODE>mimeType&lt;/CODE> is null. &#xA;    &#x9; * @exception  IllegalArgumentException&#xA;    &#x9; *     (unchecked exception) Thrown if &lt;CODE>mimeType&lt;/CODE> does not &#xA;    &#x9; *     obey the syntax for a MIME media type string. &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_HOST">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="text/plain; charset="/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;text/plain&quot;&lt;/CODE>,&#xA;&#x9; * encoded in the host platform encoding.&#xA;&#x9; * See {@link DocFlavor#hostEncoding &lt;CODE>hostEncoding&lt;/CODE>}&#xA;    &#x9; * Print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_UTF_8">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=utf-8"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/plain; charset=utf-8&quot;&lt;/CODE>, &#xA;    &#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_UTF_16">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=utf-16"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/plain; charset=utf-16&quot;&lt;/CODE>,&#xA;    &#x9; * print data representation class name =&#xA;         * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_UTF_16BE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=utf-16be"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/plain; charset=utf-16be&quot;&lt;/CODE>&#xA;&#x9; * (big-endian byte ordering), &#xA;    &#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_UTF_16LE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=utf-16le"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/plain; charset=utf-16le&quot;&lt;/CODE>&#xA;&#x9; * (little-endian byte ordering), &#xA;    &#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_US_ASCII">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=us-ascii"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/plain; charset=us-ascii&quot;&lt;/CODE>,&#xA;&#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_HOST">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="text/html; charset="/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;text/html&quot;&lt;/CODE>,&#xA;&#x9; * encoded in the host platform encoding.&#xA;&#x9; * See {@link DocFlavor#hostEncoding &lt;CODE>hostEncoding&lt;/CODE>}&#xA;    &#x9; * Print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_UTF_8">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=utf-8"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/html; charset=utf-8&quot;&lt;/CODE>, &#xA;    &#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_UTF_16">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=utf-16"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/html; charset=utf-16&quot;&lt;/CODE>,&#xA;    &#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_UTF_16BE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=utf-16be"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/html; charset=utf-16be&quot;&lt;/CODE>&#xA;&#x9; * (big-endian byte ordering), &#xA;    &#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_UTF_16LE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=utf-16le"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/html; charset=utf-16le&quot;&lt;/CODE>&#xA;&#x9; * (little-endian byte ordering), &#xA;    &#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_US_ASCII">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=us-ascii"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/html; charset=us-ascii&quot;&lt;/CODE>,&#xA;&#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PDF">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="application/pdf"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;application/pdf&quot;&lt;/CODE>, print &#xA;    &#x9; * data representation class name = &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> &#xA;    &#x9; * (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="POSTSCRIPT">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="application/postscript"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;application/postscript&quot;&lt;/CODE>, &#xA;    &#x9; * print data representation class name = &#xA;    &#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PCL">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="application/vnd.hp-PCL"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;application/vnd.hp-PCL&quot;&lt;/CODE>, &#xA;    &#x9; * print data representation class name = &#xA;    &#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="GIF">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="image/gif"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;image/gif&quot;&lt;/CODE>, print data &#xA;    &#x9; * representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="JPEG">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="image/jpeg"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;image/jpeg&quot;&lt;/CODE>, print data &#xA;    &#x9; * representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PNG">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="image/png"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;image/png&quot;&lt;/CODE>, print data &#xA;    &#x9; * representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="AUTOSENSE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.19"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="application/octet-stream"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;application/octet-stream&quot;&lt;/CODE>, &#xA;    &#x9; * print data representation class name = &#xA;    &#x9; * &lt;CODE>&quot;java.io.InputStream&quot;&lt;/CODE> (byte stream).&#xA;&#x9; * The client must determine that data described  &#xA;&#x9; * using this DocFlavor is valid for the printer.&#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Class DocFlavor.INPUT_STREAM provides predefined static constant &#xA;     * DocFlavor objects for example doc flavors using a byte stream ({@link &#xA;     * java.io.InputStream &lt;CODE>java.io.InputStream&lt;/CODE>}) as the print  &#xA;     * data representation class. &#xA;     * &lt;P>&#xA;     *&#xA;     * @author  Alan Kaminsky&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="URL">
      <members xsi:type="members:Constructor" name="URL">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.0/@parameters.0"/>
            <arguments xsi:type="references:StringReference" value="java.net.URL"/>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="mimeType">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Constructs a new doc flavor with the given MIME type and a print  &#xA;    &#x9; * data representation class name of &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE>. &#xA;    &#x9; *&#xA;    &#x9; * @param  mimeType   MIME media type string.&#xA;    &#x9; *&#xA;    &#x9; * @exception  NullPointerException&#xA;    &#x9; *     (unchecked exception) Thrown if &lt;CODE>mimeType&lt;/CODE> is null. &#xA;    &#x9; * @exception  IllegalArgumentException&#xA;    &#x9; *     (unchecked exception) Thrown if &lt;CODE>mimeType&lt;/CODE> does not &#xA;    &#x9; *     obey the syntax for a MIME media type string. &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_HOST">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="text/plain; charset="/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;text/plain&quot;&lt;/CODE>,&#xA;&#x9; * encoded in the host platform encoding.&#xA;&#x9; * See {@link DocFlavor#hostEncoding &lt;CODE>hostEncoding&lt;/CODE>}&#xA;    &#x9; * Print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_UTF_8">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=utf-8"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/plain; charset=utf-8&quot;&lt;/CODE>, &#xA;    &#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_UTF_16">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=utf-16"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/plain; charset=utf-16&quot;&lt;/CODE>,&#xA;    &#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>java.net.URL&quot;&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_UTF_16BE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=utf-16be"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/plain; charset=utf-16be&quot;&lt;/CODE>&#xA;&#x9; * (big-endian byte ordering), &#xA;    &#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_UTF_16LE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=utf-16le"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/plain; charset=utf-16le&quot;&lt;/CODE>&#xA;&#x9; * (little-endian byte ordering), &#xA;    &#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN_US_ASCII">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=us-ascii"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/plain; charset=us-ascii&quot;&lt;/CODE>,&#xA;&#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_HOST">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="text/html; charset="/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;text/html&quot;&lt;/CODE>,&#xA;&#x9; * encoded in the host platform encoding.&#xA;&#x9; * See {@link DocFlavor#hostEncoding &lt;CODE>hostEncoding&lt;/CODE>}&#xA;    &#x9; * Print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_UTF_8">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=utf-8"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/html; charset=utf-8&quot;&lt;/CODE>, &#xA;    &#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_UTF_16">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=utf-16"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/html; charset=utf-16&quot;&lt;/CODE>,&#xA;    &#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_UTF_16BE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=utf-16be"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/html; charset=utf-16be&quot;&lt;/CODE>&#xA;&#x9; * (big-endian byte ordering), &#xA;    &#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_UTF_16LE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=utf-16le"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/html; charset=utf-16le&quot;&lt;/CODE>&#xA;&#x9; * (little-endian byte ordering), &#xA;    &#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML_US_ASCII">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=us-ascii"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;text/html; charset=us-ascii&quot;&lt;/CODE>,&#xA;&#x9; * print data representation class name =&#xA;&#x9; * &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE> (byte stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PDF">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="application/pdf"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;application/pdf&quot;&lt;/CODE>, print &#xA;    &#x9; * data representation class name = &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE>.&#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="POSTSCRIPT">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="application/postscript"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;application/postscript&quot;&lt;/CODE>, &#xA;    &#x9; * print data representation class name = &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE>.&#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PCL">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="application/vnd.hp-PCL"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;application/vnd.hp-PCL&quot;&lt;/CODE>, &#xA;    &#x9; * print data representation class name = &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE>.&#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="GIF">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="image/gif"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;image/gif&quot;&lt;/CODE>, print data &#xA;    &#x9; * representation class name = &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE>.&#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="JPEG">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="image/jpeg"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;image/jpeg&quot;&lt;/CODE>, print data &#xA;    &#x9; * representation class name = &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE>.&#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PNG">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="image/png"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;image/png&quot;&lt;/CODE>, print data &#xA;    &#x9; * representation class name = &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE>.&#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="AUTOSENSE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.20"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="application/octet-stream"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type =&#xA;&#x9; * &lt;CODE>&quot;application/octet-stream&quot;&lt;/CODE>, &#xA;    &#x9; * print data representation class name = &lt;CODE>&quot;java.net.URL&quot;&lt;/CODE>.&#xA;&#x9; *  The client must determine that data described &#xA;&#x9; * using this DocFlavor is valid for the printer.&#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Class DocFlavor.URL provides predefined static constant DocFlavor&#xA;     * objects.&#xA;     * For example doc flavors using a Uniform Resource Locator ({@link &#xA;     * java.net.URL &lt;CODE>java.net.URL&lt;/CODE>}) as the print data&#xA;     * representation  class. &#xA;     * &lt;P>&#xA;     *&#xA;     * @author  Alan Kaminsky&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="CHAR_ARRAY">
      <members xsi:type="members:Field" name="serialVersionUID">
        <initialValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalLongLiteral" decimalValue="8720590903724405128"/>
        </initialValue>
        <typeReference xsi:type="types:Long"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Constructor" name="CHAR_ARRAY">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.1/@parameters.0"/>
            <arguments xsi:type="references:StringReference" value="[C"/>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="mimeType">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Constructs a new doc flavor with the given MIME type and a print  &#xA;    &#x9; * data representation class name of&#xA;&#x9; * &lt;CODE>&quot;[C&quot;&lt;/CODE> (character array). &#xA;    &#x9; *&#xA;    &#x9; * @param  mimeType  MIME media type string. If it is a text media&#xA;    &#x9; *                      type, it is assumed to contain a&#xA;    &#x9; *                      &lt;CODE>&quot;charset=utf-16&quot;&lt;/CODE> parameter.&#xA;    &#x9; *&#xA;    &#x9; * @exception  NullPointerException&#xA;    &#x9; *     (unchecked exception) Thrown if &lt;CODE>mimeType&lt;/CODE> is null. &#xA;    &#x9; * @exception  IllegalArgumentException&#xA;    &#x9; *     (unchecked exception) Thrown if &lt;CODE>mimeType&lt;/CODE> does not &#xA;    &#x9; *     obey the syntax for a MIME media type string. &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.21"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=utf-16"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.21"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;text/plain; &#xA;    &#x9; * charset=utf-16&quot;&lt;/CODE>, print data representation class name = &#xA;    &#x9; * &lt;CODE>&quot;[C&quot;&lt;/CODE> (character array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.21"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=utf-16"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.21"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;text/html; &#xA;    &#x9; * charset=utf-16&quot;&lt;/CODE>, print data representation class name = &#xA;    &#x9; * &lt;CODE>&quot;[C&quot;&lt;/CODE> (character array). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Class DocFlavor.CHAR_ARRAY provides predefined static constant  &#xA;     * DocFlavor objects for example doc flavors using a character array &#xA;     * (&lt;CODE>char[]&lt;/CODE>) as the print data representation class. As such, &#xA;     * the character set is Unicode. &#xA;     * &lt;P>&#xA;     *&#xA;     * @author  Alan Kaminsky&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="STRING">
      <members xsi:type="members:Field" name="serialVersionUID">
        <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="4414407504887034035"/>
        <typeReference xsi:type="types:Long"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Constructor" name="STRING">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.1/@parameters.0"/>
            <arguments xsi:type="references:StringReference" value="java.lang.String"/>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="mimeType">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Constructs a new doc flavor with the given MIME type and a print  &#xA;    &#x9; * data representation class name of &lt;CODE>&quot;java.lang.String&quot;&lt;/CODE>.&#xA;    &#x9; *&#xA;    &#x9; * @param  mimeType  MIME media type string. If it is a text media&#xA;    &#x9; *                      type, it is assumed to contain a&#xA;    &#x9; *                      &lt;CODE>&quot;charset=utf-16&quot;&lt;/CODE> parameter.&#xA;    &#x9; *&#xA;    &#x9; * @exception  NullPointerException&#xA;    &#x9; *     (unchecked exception) Thrown if &lt;CODE>mimeType&lt;/CODE> is null. &#xA;    &#x9; * @exception  IllegalArgumentException&#xA;    &#x9; *     (unchecked exception) Thrown if &lt;CODE>mimeType&lt;/CODE> does not &#xA;    &#x9; *     obey the syntax for a MIME media type string. &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.22"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=utf-16"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.22"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;text/plain; &#xA;    &#x9; * charset=utf-16&quot;&lt;/CODE>, print data representation class name = &#xA;    &#x9; * &lt;CODE>&quot;java.lang.String&quot;&lt;/CODE>. &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.22"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=utf-16"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.22"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;text/html; &#xA;    &#x9; * charset=utf-16&quot;&lt;/CODE>, print data representation class name = &#xA;    &#x9; * &lt;CODE>&quot;java.lang.String&quot;&lt;/CODE>. &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Class DocFlavor.STRING provides predefined static constant DocFlavor &#xA;     * objects for example doc flavors using a string ({@link java.lang.String &#xA;     * &lt;CODE>java.lang.String&lt;/CODE>}) as the print data representation class. &#xA;     * As such, the character set is Unicode. &#xA;     * &lt;P>&#xA;     *&#xA;     * @author  Alan Kaminsky&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="READER">
      <members xsi:type="members:Field" name="serialVersionUID">
        <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="7100295812579351567"/>
        <typeReference xsi:type="types:Long"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Constructor" name="READER">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@members.1/@parameters.0"/>
            <arguments xsi:type="references:StringReference" value="java.io.Reader"/>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="mimeType">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Constructs a new doc flavor with the given MIME type and a print  &#xA;    &#x9; * data representation class name of\&#xA;&#x9; * &lt;CODE>&quot;java.io.Reader&quot;&lt;/CODE> (character stream). &#xA;    &#x9; *&#xA;    &#x9; * @param  mimeType  MIME media type string. If it is a text media&#xA;    &#x9; *                      type, it is assumed to contain a&#xA;    &#x9; *                      &lt;CODE>&quot;charset=utf-16&quot;&lt;/CODE> parameter.&#xA;    &#x9; *&#xA;    &#x9; * @exception  NullPointerException&#xA;    &#x9; *     (unchecked exception) Thrown if &lt;CODE>mimeType&lt;/CODE> is null. &#xA;    &#x9; * @exception  IllegalArgumentException&#xA;    &#x9; *     (unchecked exception) Thrown if &lt;CODE>mimeType&lt;/CODE> does not &#xA;    &#x9; *     obey the syntax for a MIME media type string. &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="TEXT_PLAIN">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.23"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/plain; charset=utf-16"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.23"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;text/plain; &#xA;    &#x9; * charset=utf-16&quot;&lt;/CODE>, print data representation class name = &#xA;    &#x9; * &lt;CODE>&quot;java.io.Reader&quot;&lt;/CODE> (character stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TEXT_HTML">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.23"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="text/html; charset=utf-16"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.23"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Doc flavor with MIME type = &lt;CODE>&quot;text/html; &#xA;    &#x9; * charset=utf-16&quot;&lt;/CODE>, print data representation class name = &#xA;    &#x9; * &lt;CODE>&quot;java.io.Reader&quot;&lt;/CODE> (character stream). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Class DocFlavor.READER provides predefined static constant DocFlavor &#xA;     * objects for example doc flavors using a character stream ({@link &#xA;     * java.io.Reader &lt;CODE>java.io.Reader&lt;/CODE>}) as the print data &#xA;     * representation class. As such, the character set is Unicode. &#xA;     * &lt;P>&#xA;     *&#xA;     * @author  Alan Kaminsky&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="SERVICE_FORMATTED">
      <members xsi:type="members:Field" name="serialVersionUID">
        <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="6181337766266637256"/>
        <typeReference xsi:type="types:Long"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Constructor" name="SERVICE_FORMATTED">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:StringReference" value="application/x-java-jvm-local-objectref"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@members.1/@parameters.0"/>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="className">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Constructs a new doc flavor with a MIME type of &#xA;    &#x9; * &lt;CODE>&quot;application/x-java-jvm-local-objectref&quot;&lt;/CODE> indicating &#xA;    &#x9; * service formatted print data and the given print data  &#xA;    &#x9; * representation class name. &#xA;    &#x9; *&#xA;    &#x9; * @param  className  Fully-qualified representation class name.&#xA;    &#x9; *&#xA;    &#x9; * @exception  NullPointerException&#xA;    &#x9; *     (unchecked exception) Thrown if &lt;CODE>className&lt;/CODE> is &#xA;    &#x9; *     null. &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="RENDERABLE_IMAGE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.24"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="java.awt.image.renderable.RenderableImage"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.24"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Service formatted print data doc flavor with print data &#xA;    &#x9; * representation class name = &#xA;    &#x9; * &lt;CODE>&quot;java.awt.image.renderable.RenderableImage&quot;&lt;/CODE>&#xA;&#x9; * (renderable image object). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PRINTABLE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.24"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="java.awt.print.Printable"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.24"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Service formatted print data doc flavor with print data &#xA;    &#x9; * representation class name = &lt;CODE>&quot;java.awt.print.Printable&quot;&lt;/CODE> &#xA;    &#x9; * (printable object). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PAGEABLE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.24"/>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="java.awt.print.Pageable"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.24"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;    &#x9; * Service formatted print data doc flavor with print data &#xA;    &#x9; * representation class name = &lt;CODE>&quot;java.awt.print.Pageable&quot;&lt;/CODE> &#xA;    &#x9; * (pageable object). &#xA;    &#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Class DocFlavor.SERVICE_FORMATTED provides predefined static constant &#xA;     * DocFlavor objects for example doc flavors for service formatted print &#xA;     * data. &#xA;     * &lt;P>&#xA;     *&#xA;     * @author  Alan Kaminsky&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </extends>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Class &lt;code>DocFlavor&lt;/code> encapsulates an object that specifies the &#xA; * format in which print data is supplied to a {@link DocPrintJob}.&#xA; * &quot;Doc&quot; is a short, easy-to-pronounce term that means &quot;a piece of print data.&quot;&#xA; * The print data format, or &quot;doc flavor&quot;, consists of two things: &#xA; * &lt;UL>&#xA; * &lt;LI>&#xA; * &lt;B>MIME type.&lt;/B> This is a Multipurpose Internet Mail Extensions (MIME) &#xA; * media type (as defined in &lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2045.txt&quot;>RFC &#xA; * 2045&lt;/A> and &lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2046.txt&quot;>RFC 2046&lt;/A>)&#xA; * that specifies how the print data is to be interpreted.&#xA; * The charset of text data should be the IANA MIME-preferred name, or its&#xA; * canonical name if no preferred name is specified. Additionally a few&#xA; * historical names supported by earlier versions of the Java platform may&#xA; * be recognized.&#xA; * See &lt;a href=&quot;../../java/lang/package-summary.html#charenc&quot;>&#xA; * character encodings&lt;/a> for more information on the character encodings&#xA; * supported on the Java platform.&#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * &lt;B>Representation class name.&lt;/B> This specifies the fully-qualified name of &#xA; * the class of the object from which the actual print data comes, as returned &#xA; * by the {@link java.lang.Class#getName() &lt;CODE>Class.getName()&lt;/CODE>} method. &#xA; * (Thus the class name for &lt;CODE>byte[]&lt;/CODE> is &lt;CODE>&quot;[B&quot;&lt;/CODE>, for &#xA; * &lt;CODE>char[]&lt;/CODE> it is &lt;CODE>&quot;[C&quot;&lt;/CODE>.) &#xA; * &lt;/UL>&#xA; * &lt;P>&#xA; * A &lt;code>DocPrintJob&lt;/code> obtains its print data by means of interface &#xA; * {@link Doc Doc}. A &lt;code>Doc&lt;/code> object lets the &lt;code>DocPrintJob&lt;/code>&#xA; * determine the doc flavor the client can supply.  A &lt;code>Doc&lt;/code> object &#xA; * also lets the &lt;code>DocPrintJob&lt;/code> obtain an instance of the doc flavor's &#xA; * representation class, from which the &lt;code>DocPrintJob&lt;/code> then obtains &#xA; * the actual print data. &#xA; * &lt;P>&#xA; * &lt;HR>&#xA; * &lt;H3>Client Formatted Print Data&lt;/H3>&#xA; * There are two broad categories of print data, client formatted print data  &#xA; * and service formatted print data. &#xA; * &lt;P>&#xA; * For &lt;B>client formatted print data&lt;/B>, the client determines or knows the &#xA; * print data format.&#xA; * For example the client may have a JPEG encoded image, a URL for&#xA; * HTML code, or a disk file containing plain text in some encoding, &#xA; * possibly obtained from an external source, and&#xA; * requires a way to describe the data format to the print service.&#xA; * &lt;p>&#xA; * The doc flavor's representation class is a conduit for the JPS&#xA; * &lt;code>DocPrintJob&lt;/code> to obtain a sequence of characters or&#xA; * bytes from the client. The &#xA; * doc flavor's MIME type is one of the standard media types telling how to &#xA; * interpret the sequence of characters or bytes. For a list of standard media &#xA; * types, see the Internet Assigned Numbers Authority's (IANA's) &lt;A &#xA; * HREF=&quot;http://www.isi.edu/in-notes/iana/assignments/media-types/&quot;>Media Types &#xA; * Directory&lt;/A>. Interface {@link Doc Doc} provides two utility operations, &#xA; * {@link Doc#getReaderForText() getReaderForText} and &#xA; * {@link Doc#getStreamForBytes() getStreamForBytes()}, to help a &#xA; * &lt;code>Doc&lt;/code> object's client extract client formatted print data. &#xA; * &lt;P>&#xA; * For client formatted print data, the print data representation class is &#xA; * typically one of the following (although other representation classes are &#xA; * permitted): &#xA; * &lt;UL>&#xA; * &lt;LI>&#xA; * Character array (&lt;CODE>char[]&lt;/CODE>) -- The print data consists of the &#xA; * Unicde characters in the array.&#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * &lt;code>String&lt;/code>  --  &#xA; * The print data consists of the Unicode characters in the string.&#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * Character stream ({@link java.io.Reader java.io.Reader})&#xA; * -- The print data consists of the Unicode characters read from the stream&#xA; * up to the end-of-stream.&#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * Byte array (&lt;CODE>byte[]&lt;/CODE>) -- The print data consists of the bytes in &#xA; * the array. The bytes are encoded in the character set specified by the doc &#xA; * flavor's MIME type. If the MIME type does not specify a character set, the &#xA; * default character set is US-ASCII. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * Byte stream ({@link java.io.InputStream java.io.InputStream}) -- &#xA; * The print data consists of the bytes read from the stream up to the &#xA; * end-of-stream. The bytes are encoded in the character set specified by the &#xA; * doc flavor's MIME type. If the MIME type does not specify a character set, &#xA; * the default character set is US-ASCII. &#xA;&#xA; * &lt;LI>&#xA; * Uniform Resource Locator ({@link java.net.URL URL})&#xA; * -- The print data consists of the bytes read from the URL location.&#xA; * The bytes are encoded in the character set specified by the doc flavor's&#xA; * MIME type. If the MIME type does not specify a character set, the default&#xA; * character set is US-ASCII. &#xA; * &lt;P>&#xA; * When the representation class is a URL, the print service itself accesses&#xA; * and downloads the document directly from its URL address, without involving&#xA; * the client. The service may be some form of network print service which&#xA; * is executing in a different environment.&#xA; * This means you should not use a URL print data flavor to print a &#xA; * document at a restricted URL that the client can see but the printer cannot &#xA; * see. This also means you should not use a URL print data flavor to print a &#xA; * document stored in a local file that is not available at a URL&#xA; * accessible independently of the client.&#xA; * For example, a file that is not served up by an HTTP server or FTP server.&#xA; * To print such documents, let the client open an input stream on the URL&#xA; * or file and use an input stream data flavor.&#xA; * &lt;/UL>&#xA; * &lt;p>&#xA; * &lt;HR>&#xA; * &lt;h3>Default and Platform Encodings&lt;/h3>&#xA; * &lt;P>&#xA; * For byte print data where the doc flavor's MIME type does not include a &#xA; * &lt;CODE>charset&lt;/CODE> parameter, the Java Print Service instance assumes the &#xA; * US-ASCII character set by default. This is in accordance with&#xA; * &lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2046.txt&quot;>RFC 2046&lt;/A>, which says the &#xA; * default character set is US-ASCII. Note that US-ASCII is a subset of&#xA; * UTF-8, so in the future this may be widened if a future RFC endorses&#xA; * UTF-8 as the default in a compatible manner.&#xA; * &lt;p>&#xA; * Also note that this is different than the behaviour of the Java runtime &#xA; * when interpreting a stream of bytes as text data. That assumes the&#xA; * default encoding for the user's locale. Thus, when spooling a file in local&#xA; * encoding to a Java Print Service it is important to correctly specify&#xA; * the encoding. Developers working in the English locales should&#xA; * be particularly conscious of this, as their platform encoding corresponds&#xA; * to the default mime charset. By this coincidence that particular&#xA; * case may work without specifying the encoding of platform data.&#xA; * &lt;p>&#xA; * Every instance of the Java virtual machine has a default character encoding&#xA; * determined during virtual-machine startup and typically depends upon the&#xA; * locale and charset being used by the underlying operating system. &#xA; * In a distributed environment there is no gurantee that two VM's share&#xA; * the same default encoding. Thus clients which want to stream platform&#xA; * encoded text data from the host platform to a Java Print Service instance&#xA; * must explicitly declare the charset and not rely on defaults.&#xA; * &lt;p>&#xA; * The preferred form is the official IANA primary name for an encoding.&#xA; * Applications which stream text data should always specify the charset&#xA; * in the mime type, which necessitates obtaining the encoding of the host&#xA; * platform for data (eg files) stored in that platform's encoding.&#xA; * A CharSet which corresponds to this and is suitable for use in a&#xA; * mime-type for a DocFlavor can be obtained&#xA; * from {@link DocFlavor#hostEncoding &lt;CODE>DocFlavor.hostEncoding&lt;/CODE>}&#xA; * This may not always be the primary IANA name but is guaranteed to be&#xA; * understood by this VM.&#xA; * For common flavors, the pre-defined *HOST DocFlavors may be used.&#xA; * &lt;p>&#xA; * &lt;p>&#xA; * See &lt;a href=&quot;../../java/lang/package-summary.html#charenc&quot;>&#xA; * character encodings&lt;/a> for more information on the character encodings&#xA; * supported on the Java platform.&#xA; * &lt;p>&#xA; * &lt;HR>&#xA; * &lt;h3>Recommended DocFlavors&lt;/h3>&#xA; * &lt;P>&#xA; * The Java Print Service API does not define any mandatorily supported&#xA; * DocFlavors.&#xA; * However, here are some examples of MIME types that a Java Print Service&#xA; * instance might support for client formatted print data.&#xA; * Nested classes inside class DocFlavor declare predefined static &#xA; * constant DocFlavor objects for these example doc flavors; class DocFlavor's &#xA; * constructor can be used to create an arbitrary doc flavor. &#xA; * &lt;UL>&#xA; * &lt;LI>Preformatted text&#xA; * &lt;P>&#xA; * &lt;TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY=&quot;MIME-Types and their descriptions&quot;>&#xA; * &lt;TR>&#xA; *  &lt;TH>MIME-Type&lt;/TH>&lt;TH>Description&lt;/TH>&#xA; * &lt;/TR>&#xA; * &lt;TR>&#xA; * &lt;TD>&lt;CODE>&quot;text/plain&quot;&lt;/CODE>&lt;/TD>&#xA; * &lt;TD>Plain text in the default character set (US-ASCII)&lt;/TD>&#xA; * &lt;/TR>&#xA; * &lt;TR>&#xA; * &lt;TD>&lt;CODE>&quot;text/plain; charset=&lt;I>xxx&lt;/I>&quot;&lt;/CODE>&lt;/TD>&#xA; * &lt;TD>Plain text in character set &lt;I>xxx&lt;/I>&lt;/TD>&#xA; * &lt;/TR>&#xA; * &lt;TR>&#xA; * &lt;TD>&lt;CODE>&quot;text/html&quot;&lt;/CODE>&lt;/TD>&#xA; * &lt;TD>HyperText Markup Language in the default character set (US-ASCII)&lt;/TD>&#xA; * &lt;/TR>&#xA; * &lt;TR>&#xA; * &lt;TD>&lt;CODE>&quot;text/html; charset=&lt;I>xxx&lt;/I>&quot;&lt;/CODE>&lt;/TD>&#xA; * &lt;TD>HyperText Markup Language in character set &lt;I>xxx&lt;/I>&lt;/TD>&#xA; * &lt;/TR>&#xA; * &lt;/TABLE>&#xA; * &lt;P>&#xA; * In general, preformatted text print data is provided either in a character&#xA; * oriented representation class (character array, String, Reader) or in a&#xA; * byte oriented representation class (byte array, InputStream, URL).&#xA; * &lt;P>&#xA; *  &lt;LI>Preformatted page description language (PDL) documents&#xA; *&lt;P>&#xA; * &lt;TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY=&quot;MIME-Types and their descriptions&quot;>&#xA; * &lt;TR>&#xA; *  &lt;TH>MIME-Type&lt;/TH>&lt;TH>Description&lt;/TH>&#xA; * &lt;/TR>&#xA; *&lt;TR>&#xA; * &lt;TD>&lt;CODE>&quot;application/pdf&quot;&lt;/CODE>&lt;/TD>&#xA; * &lt;TD>Portable Document Format document&lt;/TD>&#xA; * &lt;/TR>&#xA; * &lt;TR>&#xA; * &lt;TD>&lt;CODE>&quot;application/postscript&quot;&lt;/CODE>&lt;/TD>&#xA; * &lt;TD>PostScript document&lt;/TD>&#xA; * &lt;/TR>&#xA; * &lt;TR>&#xA; * &lt;TD>&lt;CODE>&quot;application/vnd.hp-PCL&quot;&lt;/CODE>&lt;/TD>&#xA; * &lt;TD>Printer Control Language document&lt;/TD>&#xA; * &lt;/TR>&#xA; * &lt;/TABLE>&#xA; * &lt;P>&#xA; * In general, preformatted PDL print data is provided in a byte oriented&#xA; * representation class (byte array, InputStream, URL).&#xA; * &lt;P>&#xA; *  &lt;LI>Preformatted images&#xA; *&lt;P>&#xA; * &lt;TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY=&quot;MIME-Types and their descriptions&quot;>&#xA; * &lt;TR>&#xA; *  &lt;TH>MIME-Type&lt;/TH>&lt;TH>Description&lt;/TH>&#xA; * &lt;/TR>&#xA; * &#xA; * &lt;TR>&#xA; * &lt;TD>&lt;CODE>&quot;image/gif&quot;&lt;/CODE>&lt;/TD>&#xA; * &lt;TD>Graphics Interchange Format image&lt;/TD>&#xA; * &lt;/TR>&#xA; * &lt;TR>&#xA; * &lt;TD>&lt;CODE>&quot;image/jpeg&quot;&lt;/CODE>&lt;/TD>&#xA; * &lt;TD>Joint Photographic Experts Group image&lt;/TD>&#xA; * &lt;/TR>&#xA; * &lt;TR>&#xA; * &lt;TD>&lt;CODE>&quot;image/png&quot;&lt;/CODE>&lt;/TD>&#xA; * &lt;TD>Portable Network Graphics image&lt;/TD>&#xA; * &lt;/TR>&#xA; * &lt;/TABLE>&#xA; * &lt;P>&#xA; * In general, preformatted image print data is provided in a byte oriented&#xA; * representation class (byte array, InputStream, URL).&#xA; * &lt;P>&#xA; *  &lt;LI>Preformatted autosense print data&#xA; *   &lt;P>&#xA; * &lt;TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY=&quot;MIME-Types and their descriptions&quot;>&#xA; * &lt;TR>&#xA; *  &lt;TH>MIME-Type&lt;/TH>&lt;TH>Description&lt;/TH>&#xA; * &lt;/TR>&#xA; * &#xA; * &lt;TR>&#xA; * &lt;TD>&lt;CODE>&quot;application/octet-stream&quot;&lt;/CODE>&lt;/TD>&#xA; * &lt;TD>The print data format is unspecified (just an octet stream)&lt;/TD>&#xA; * &lt;/TABLE>&#xA; * &lt;P>&#xA; * The printer decides how to interpret the print data; the way this&#xA; * &quot;autosensing&quot; works is implementation dependent. In general, preformatted&#xA; * autosense print data is provided in a byte oriented representation class&#xA; * (byte array, InputStream, URL).&#xA; * &#xA; * &lt;P>&#xA; * &lt;HR>&#xA; * &lt;H3>Service Formatted Print Data&lt;/H3>&#xA; * &lt;P>&#xA; * For &lt;B>service formatted print data&lt;/B>, the Java Print Service instance &#xA; * determines the print data format. The doc flavor's representation class &#xA; * denotes an interface whose methods the &lt;code>DocPrintJob&lt;/code> invokes to&#xA; * determine the content to be printed -- such as a renderable image&#xA; * interface or a Java 2 printable interface.&#xA; * The doc flavor's MIME type is the special value &#xA; * &lt;CODE>&quot;application/x-java-jvm-local-objectref&quot;&lt;/CODE> indicating the client &#xA; * will supply a reference to a Java object that implements the interface&#xA; * named as the representation class.&#xA; * This MIME type is just a placeholder; what's &#xA; * important is the print data representation class. &#xA; * &lt;P>&#xA; * For service formatted print data, the print data representation class is &#xA; * typically one of the following (although other representation classes are &#xA; * permitted). Nested classes inside class DocFlavor declare predefined static &#xA; * constant DocFlavor objects for these example doc flavors; class DocFlavor's &#xA; * constructor can be used to create an arbitrary doc flavor. &#xA; * &lt;UL>&#xA; * &lt;LI>&#xA; * Renderable image object -- The client supplies an object that implements &#xA; * interface &#xA; * {@link java.awt.image.renderable.RenderableImage RenderableImage}. The &#xA; * printer calls methods&#xA; * in that interface to obtain the image to be printed. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * Printable object -- The client supplies an object that implements interface &#xA; * {@link java.awt.print.Printable Printable}.&#xA; * The printer calls methods in that interface to obtain the pages to be&#xA; * printed, one by one.&#xA; * For each page, the printer supplies a graphics context, and whatever the&#xA; * client draws in that graphics context gets printed. &#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * Pageable object -- The client supplies an object that implements interface &#xA; * {@link java.awt.print.Pageable Pageable}. The printer calls &#xA; * methods in that interface to obtain the pages to be printed, one by one.&#xA; * For each page, the printer supplies a graphics context, and whatever&#xA; * the client draws in that graphics context gets printed. &#xA; * &lt;/UL>&#xA; * &lt;P>&#xA; * &lt;HR>&#xA; * &lt;P>&#xA; * &lt;HR>&#xA; * &lt;H3>Pre-defined Doc Flavors&lt;/H3>&#xA; * A Java Print Service instance is not &lt;B>&lt;I>required&lt;/I>&lt;/B> to support the &#xA; * following print data formats and print data representation classes.  In &#xA; * fact, a developer using this class should &lt;b>never&lt;/b> assume that a&#xA; * particular print service supports the document types corresponding to&#xA; * these pre-defined doc flavors.  Always query the print service&#xA; * to determine what doc flavors it supports.  However, &#xA; * developers who have print services that support these doc flavors are&#xA; * encouraged to refer to the predefined singleton instances created here.&#xA; * &lt;UL>&#xA; * &lt;LI>&#xA; * Plain text print data provided through a byte stream. Specifically, the &#xA; * following doc flavors are recommended to be supported: &#xA; * &lt;BR>&amp;#183;&amp;nbsp;&amp;nbsp;&#xA; * &lt;CODE>(&quot;text/plain&quot;, &quot;java.io.InputStream&quot;)&lt;/CODE>&#xA; * &lt;BR>&amp;#183;&amp;nbsp;&amp;nbsp;&#xA; * &lt;CODE>(&quot;text/plain; charset=us-ascii&quot;, &quot;java.io.InputStream&quot;)&lt;/CODE>&#xA; * &lt;BR>&amp;#183;&amp;nbsp;&amp;nbsp;&#xA; * &lt;CODE>(&quot;text/plain; charset=utf-8&quot;, &quot;java.io.InputStream&quot;)&lt;/CODE>&#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * Renderable image objects. Specifically, the following doc flavor is&#xA; * recommended to be supported: &#xA; * &lt;BR>&amp;#183;&amp;nbsp;&amp;nbsp;&#xA; * &lt;CODE>(&quot;application/x-java-jvm-local-objectref&quot;, &quot;java.awt.image.renderable.RenderableImage&quot;)&lt;/CODE>&#xA; * &lt;/UL>&#xA; * &lt;P>&#xA; * A Java Print Service instance is allowed to support any other doc flavors&#xA; * (or none) in addition to the above mandatory ones, at the implementation's&#xA; * choice. &#xA; * &lt;P>&#xA; * Support for the above doc flavors is desirable so a printing client can rely &#xA; * on being able to print on any JPS printer, regardless of which doc flavors &#xA; * the printer supports. If the printer doesn't support the client's preferred &#xA; * doc flavor, the client can at least print plain text, or the client can &#xA; * convert its data to a renderable image and print the image. &#xA; * &lt;P>&#xA; * Furthermore, every Java Print Service instance must fulfill these &#xA; * requirements for processing plain text print data: &#xA; * &lt;UL>&#xA; * &lt;LI>&#xA; * The character pair carriage return-line feed (CR-LF) means&#xA; * &quot;go to column 1 of the next line.&quot; &#xA; * &lt;LI>&#xA; * A carriage return (CR) character standing by itself means&#xA; * &quot;go to column 1 of the next line.&quot; &#xA; * &lt;LI>&#xA; * A line feed (CR) character standing by itself means&#xA; * &quot;go to column 1 of the next line.&quot; &#xA; * &lt;LI>&#xA; * &lt;/UL>&#xA; * &lt;P>&#xA; * The client must itself perform all plain text print data formatting not &#xA; * addressed by the above requirements. &#xA; * &lt;P>&#xA; * &lt;H3>Design Rationale&lt;/H3>&#xA; * &lt;P>&#xA; * Class DocFlavor in package javax.print.data is similar to class &#xA; * {@link java.awt.datatransfer.DataFlavor DataFlavor}. Class &#xA; * &lt;code>DataFlavor&lt;/code>&#xA; * is not used in the Java Print Service (JPS) API &#xA; * for three reasons which are all rooted in allowing the JPS API to be&#xA; * shared by other print services APIs which may need to run on Java profiles&#xA; * which do not include all of the Java 2 Standard Edition.&#xA; * &lt;OL TYPE=1>&#xA; * &lt;LI>&#xA; * The JPS API is designed to be used in Java profiles which do not support&#xA; * AWT.&#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * The implementation of class &lt;code>java.awt.datatransfer.DataFlavor&lt;/code>&#xA; * does not guarantee that equivalent data flavors will have the same&#xA; * serialized representation. DocFlavor does, and can be used in services&#xA; * which need this.&#xA; * &lt;P>&#xA; * &lt;LI>&#xA; * The implementation of class &lt;code>java.awt.datatransfer.DataFlavor&lt;/code>&#xA; * includes a human presentable name as part of the serialized representation.&#xA; * This is not appropriate as part of a service matching constraint.&#xA; * &lt;/OL>&#xA; * &lt;P>&#xA; * Class DocFlavor's serialized representation uses the following &#xA; * canonical form of a MIME type string. Thus, two doc flavors with MIME types &#xA; * that are not identical but that are equivalent (that have the same&#xA; * canonical form) may be considered equal. &#xA; * &lt;UL>&#xA; * &lt;LI> The media type, media subtype, and parameters are retained, but all&#xA; *      comments and whitespace characters are discarded. &#xA; * &lt;LI> The media type, media subtype, and parameter names are converted to &#xA; *      lowercase.&#xA; * &lt;LI> The parameter values retain their original case, except a charset &#xA; *      parameter value for a text media type is converted to lowercase. &#xA; * &lt;LI> Quote characters surrounding parameter values are removed.&#xA; * &lt;LI> Quoting backslash characters inside parameter values are removed.&#xA; * &lt;LI> The parameters are arranged in ascending order of parameter name. &#xA; * &lt;/UL>&#xA; * &lt;P>&#xA; * Class DocFlavor's serialized representation also contains the&#xA; * fully-qualified class &lt;I>name&lt;/I> of the representation class&#xA; * (a String object), rather than the representation class itself&#xA; * (a Class object). This allows a client to examine the doc flavors a&#xA; * Java Print Service instance supports without having &#xA; * to load the representation classes, which may be problematic for &#xA; * limited-resource clients. &#xA; * &lt;P>&#xA; *&#xA; * @author  Alan Kaminsky&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../java/io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../java/lang/Cloneable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
