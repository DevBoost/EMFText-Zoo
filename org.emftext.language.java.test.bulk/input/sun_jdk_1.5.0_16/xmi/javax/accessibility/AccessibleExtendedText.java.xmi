<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="AccessibleExtendedText.java">
  <comments>/*&#xA; * @(#)AccessibleExtendedText.java&#x9;1.2 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>accessibility</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>text</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="AccessibleExtendedText">
    <members xsi:type="members:Field" name="LINE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constant used to indicate that the part of the text that should be&#xA;     * retrieved is a line of text.&#xA;     *&#xA;     * @see #getAtIndex&#xA;     * @see #getAfterIndex&#xA;     * @see #getBeforeIndex&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ATTRIBUTE_RUN">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="5"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// BugID: 4849720</comments>
        <comments>/**&#xA;     * Constant used to indicate that the part of the text that should be&#xA;     * retrieved is contiguous text with the same text attributes.&#xA;     *&#xA;     * @see #getAtIndex&#xA;     * @see #getAfterIndex&#xA;     * @see #getBeforeIndex&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTextRange">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="startIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="endIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// BugID: 4849720</comments>
        <comments>/**&#xA;     * Returns the text between two indices&#xA;     *&#xA;     * @param startIndex the start index in the text&#xA;     * @param endIndex the end index in the text&#xA;     * @return the text string if the indices are valid.&#xA;     * Otherwise, null is returned.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTextSequenceAt">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="AccessibleTextSequence.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="part">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the AccessibleTextSequence at a given index.&#xA;     *&#xA;     * @param part the CHARACTER, WORD, SENTENCE, LINE or ATTRIBUTE_RUN to     &#xA;     * retrieve&#xA;     * @param index an index within the text&#xA;     * @return an AccessibleTextSequence specifying the text if part and index&#xA;     * are valid.  Otherwise, null is returned.&#xA;     *&#xA;     * @see AccessibleText.CHARACTER&#xA;     * @see AccessibleText.WORK&#xA;     * @see AccessibleText.SENTENCE&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTextSequenceAfter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="AccessibleTextSequence.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="part">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the AccessibleTextSequence after a given index.&#xA;     *&#xA;     * @param part the CHARACTER, WORD, SENTENCE, LINE or ATTRIBUTE_RUN to&#xA;     * retrieve&#xA;     * @param index an index within the text&#xA;     * @return an AccessibleTextSequence specifying the text if part and index&#xA;     * are valid.  Otherwise, null is returned.&#xA;     *&#xA;     * @see AccessibleText.CHARACTER&#xA;     * @see AccessibleText.WORK&#xA;     * @see AccessibleText.SENTENCE&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTextSequenceBefore">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="AccessibleTextSequence.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="part">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the AccessibleTextSequence before a given index.&#xA;     *&#xA;     * @param part the CHARACTER, WORD, SENTENCE, LINE or ATTRIBUTE_RUN to&#xA;     * retrieve&#xA;     * @param index an index within the text&#xA;     * @return an AccessibleTextSequence specifying the text if part and index&#xA;     * are valid.  Otherwise, null is returned.&#xA;     *&#xA;     * @see AccessibleText.CHARACTER&#xA;     * @see AccessibleText.WORK&#xA;     * @see AccessibleText.SENTENCE&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTextBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="startIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="endIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the bounding rectangle of the text between two indices.&#xA;     *&#xA;     * @param startIndex the start index in the text&#xA;     * @param endIndex the end index in the text&#xA;     * @return the bounding rectangle of the text if the indices are valid.&#xA;     * Otherwise, null is returned.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;P>The AccessibleExtendedText interface contains additional methods&#xA; * not provided by the AccessibleText interface&#xA; *  &#xA; * Applications can determine if an object supports the AccessibleExtendedText&#xA; * interface by first obtaining its AccessibleContext (see {@link Accessible})&#xA; * and then calling the {@link AccessibleContext#getAccessibleText} method of&#xA; * AccessibleContext.  If the return value is an instance of&#xA; * AccessibleExtendedText, the object supports this interface.&#xA; *&#xA; * @see Accessible&#xA; * @see Accessible#getAccessibleContext&#xA; * @see AccessibleContext&#xA; * @see AccessibleContext#getAccessibleText&#xA; * @see AccessibleText.AccessibleTextChunk&#xA; *&#xA; * @version      1.2 12/19/03&#xA; * @author       Peter Korn&#xA; * @author       Lynn Monsanto&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
