<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="AccessibleComponent.java">
  <comments>/*&#xA; * @(#)AccessibleComponent.java&#x9;1.16 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>accessibility</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="AccessibleComponent">
    <members xsi:type="members:InterfaceMethod" name="getBackground">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the background color of this object.&#xA;     *&#xA;     * @return the background color, if supported, of the object; &#xA;     * otherwise, null&#xA;     * @see #setBackground&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setBackground">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the background color of this object.&#xA;     *&#xA;     * @param c the new Color for the background&#xA;     * @see #setBackground&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getForeground">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the foreground color of this object.&#xA;     *&#xA;     * @return the foreground color, if supported, of the object; &#xA;     * otherwise, null&#xA;     * @see #setForeground&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setForeground">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the foreground color of this object.&#xA;     *&#xA;     * @param c the new Color for the foreground&#xA;     * @see #getForeground&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCursor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/awt/Cursor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the Cursor of this object.&#xA;     *&#xA;     * @return the Cursor, if supported, of the object; otherwise, null&#xA;     * @see #setCursor&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setCursor">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cursor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Cursor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the Cursor of this object.&#xA;     *&#xA;     * @param cursor  the new Cursor for the object&#xA;     * @see #getCursor&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFont">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/awt/Font.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the Font of this object.&#xA;     *&#xA;     * @return the Font,if supported, for the object; otherwise, null&#xA;     * @see #setFont&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setFont">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="f">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Font.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the Font of this object.&#xA;     *&#xA;     * @param f the new Font for the object&#xA;     * @see #getFont&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFontMetrics">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/awt/FontMetrics.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="f">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Font.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the FontMetrics of this object.&#xA;     *&#xA;     * @param f the Font&#xA;     * @return the FontMetrics, if supported, the object; otherwise, null&#xA;     * @see #getFont&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isEnabled">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines if the object is enabled.  Objects that are enabled&#xA;     * will also have the AccessibleState.ENABLED state set in their&#xA;     * AccessibleStateSets.&#xA;     *&#xA;     * @return true if object is enabled; otherwise, false&#xA;     * @see #setEnabled&#xA;     * @see AccessibleContext#getAccessibleStateSet&#xA;     * @see AccessibleState#ENABLED&#xA;     * @see AccessibleStateSet&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setEnabled">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the enabled state of the object.&#xA;     *&#xA;     * @param b if true, enables this object; otherwise, disables it &#xA;     * @see #isEnabled&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isVisible">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines if the object is visible.  Note: this means that the&#xA;     * object intends to be visible; however, it may not be&#xA;     * showing on the screen because one of the objects that this object&#xA;     * is contained by is currently not visible.  To determine if an object is&#xA;     * showing on the screen, use isShowing().&#xA;     * &lt;p>Objects that are visible will also have the &#xA;     * AccessibleState.VISIBLE state set in their AccessibleStateSets.&#xA;     *&#xA;     * @return true if object is visible; otherwise, false&#xA;     * @see #setVisible&#xA;     * @see AccessibleContext#getAccessibleStateSet&#xA;     * @see AccessibleState#VISIBLE&#xA;     * @see AccessibleStateSet&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setVisible">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the visible state of the object.&#xA;     *&#xA;     * @param b if true, shows this object; otherwise, hides it &#xA;     * @see #isVisible&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isShowing">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines if the object is showing.  This is determined by checking&#xA;     * the visibility of the object and its ancestors.&#xA;     * Note: this&#xA;     * will return true even if the object is obscured by another (for example,&#xA;     * it is underneath a menu that was pulled down).&#xA;     *&#xA;     * @return true if object is showing; otherwise, false&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="contains">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Point.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Checks whether the specified point is within this object's bounds,&#xA;     * where the point's x and y coordinates are defined to be relative to the&#xA;     * coordinate system of the object. &#xA;     *&#xA;     * @param p the Point relative to the coordinate system of the object&#xA;     * @return true if object contains Point; otherwise false&#xA;     * @see #getBounds&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLocationOnScreen">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/awt/Point.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the location of the object on the screen.&#xA;     *&#xA;     * @return the location of the object on screen; null if this object&#xA;     * is not on the screen&#xA;     * @see #getBounds&#xA;     * @see #getLocation&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLocation">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/awt/Point.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Gets the location of the object relative to the parent in the form &#xA;     * of a point specifying the object's top-left corner in the screen's &#xA;     * coordinate space.&#xA;     *&#xA;     * @return An instance of Point representing the top-left corner of the &#xA;     * object's bounds in the coordinate space of the screen; null if&#xA;     * this object or its parent are not on the screen&#xA;     * @see #getBounds&#xA;     * @see #getLocationOnScreen&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setLocation">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Point.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets the location of the object relative to the parent.&#xA;     * @param p the new position for the top-left corner&#xA;     * @see #getLocation&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Gets the bounds of this object in the form of a Rectangle object. &#xA;     * The bounds specify this object's width, height, and location&#xA;     * relative to its parent. &#xA;     *&#xA;     * @return A rectangle indicating this component's bounds; null if &#xA;     * this object is not on the screen.&#xA;     * @see #contains&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setBounds">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="r">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets the bounds of this object in the form of a Rectangle object. &#xA;     * The bounds specify this object's width, height, and location&#xA;     * relative to its parent.&#xA;     *&#x9;&#xA;     * @param r rectangle indicating this component's bounds&#xA;     * @see #getBounds&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSize">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../java/awt/Dimension.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the size of this object in the form of a Dimension object. &#xA;     * The height field of the Dimension object contains this object's&#xA;     * height, and the width field of the Dimension object contains this &#xA;     * object's width. &#xA;     *&#xA;     * @return A Dimension object that indicates the size of this component; &#xA;     * null if this object is not on the screen&#xA;     * @see #setSize&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSize">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="d">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Dimension.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Resizes this object so that it has width and height. &#xA;     *&#x9;&#xA;     * @param d The dimension specifying the new size of the object. &#xA;     * @see #getSize&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAccessibleAt">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Accessible.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../java/awt/Point.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Accessible child, if one exists, contained at the local &#xA;     * coordinate Point.&#xA;     *&#xA;     * @param p The point relative to the coordinate system of this object.&#xA;     * @return the Accessible, if it exists, at the specified location; &#xA;     * otherwise null&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isFocusTraversable">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns whether this object can accept focus or not.   Objects that &#xA;     * can accept focus will also have the AccessibleState.FOCUSABLE state &#xA;     * set in their AccessibleStateSets.&#xA;     *&#xA;     * @return true if object can accept focus; otherwise false&#xA;     * @see AccessibleContext#getAccessibleStateSet&#xA;     * @see AccessibleState#FOCUSABLE&#xA;     * @see AccessibleState#FOCUSED&#xA;     * @see AccessibleStateSet&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="requestFocus">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Requests focus for this object.  If this object cannot accept focus,&#xA;     * nothing will happen.  Otherwise, the object will attempt to take&#xA;     * focus.&#xA;     * @see #isFocusTraversable&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addFocusListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/awt/event/FocusListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds the specified focus listener to receive focus events from this &#xA;     * component. &#xA;     *&#xA;     * @param l the focus listener&#xA;     * @see #removeFocusListener&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeFocusListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../java/awt/event/FocusListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the specified focus listener so it no longer receives focus &#xA;     * events from this component.&#xA;     *&#xA;     * @param l the focus listener&#xA;     * @see #addFocusListener&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The AccessibleComponent interface should be supported by any object &#xA; * that is rendered on the screen.  This interface provides the standard &#xA; * mechanism for an assistive technology to determine and set the &#xA; * graphical representation of an object.  Applications can determine&#xA; * if an object supports the AccessibleComponent interface by first&#xA; * obtaining its AccessibleContext &#xA; * and then calling the&#xA; * {@link AccessibleContext#getAccessibleComponent} method.&#xA; * If the return value is not null, the object supports this interface.&#xA; *&#xA; * @see Accessible&#xA; * @see Accessible#getAccessibleContext&#xA; * @see AccessibleContext&#xA; * @see AccessibleContext#getAccessibleComponent&#xA; *&#xA; * @version     1.7 10/05/99 14:00:28&#xA; * @author&#x9;Peter Korn&#xA; * @author&#x9;Hans Muller&#xA; * @author      Willie Walker&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
