<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ValueHandler.java">
  <comments>/*&#xA; * @(#)ValueHandler.java&#x9;1.14 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <comments>/*&#xA; * Licensed Materials - Property of IBM&#xA; * RMI-IIOP v1.0&#xA; * Copyright IBM Corp. 1998 1999  All Rights Reserved&#xA; *&#xA; * US Government Users Restricted Rights - Use, duplication or&#xA; * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>rmi</namespaces>
  <namespaces>CORBA</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="ValueHandler">
    <members xsi:type="members:InterfaceMethod" name="writeValue">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Writes a value to the stream using Java semantics.&#xA;     * @param out the stream to write the value to.&#xA;     * @param value the value to be written to the stream.&#xA;     **/</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <namespaces>portable</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../org/omg/CORBA/portable/OutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Reads a value from the stream using Java semantics.&#xA;     * @param in the stream to read the value from.&#xA;     * @param offset the current position in the input stream.&#xA;     * @param clz the type of the value to be read in.&#xA;     * @param repositoryID the RepositoryId of the value to be read in.&#xA;     * @param sender the sending context runtime codebase.&#xA;     * @return the value read from the stream.&#xA;     **/</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="in">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <namespaces>portable</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../org/omg/CORBA/portable/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clz">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>lang</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="repositoryID">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sender">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>SendingContext</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../org/omg/SendingContext/RunTime.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRMIRepositoryID">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Returns the CORBA RepositoryId for the given Java class.&#xA;     * @param clz a Java class.&#xA;     * @return the CORBA RepositoryId for the class.&#xA;     **/</comments>
        <namespaces>java</namespaces>
        <namespaces>lang</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clz">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>lang</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isCustomMarshaled">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Indicates whether the given class performs custom or&#xA;     * default marshaling.&#xA;     * @param clz the class to test for custom marshaling.&#xA;     * @return &lt;code>true&lt;/code> if the class performs custom marshaling, &lt;code>false&lt;/code>&#xA;     * if it does not.&#xA;     **/</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clz">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>lang</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRunTimeCodeBase">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Returns the CodeBase for this ValueHandler.  This is used by&#xA;     * the ORB runtime.  The server sends the service context containing&#xA;     * the IOR for this CodeBase on the first GIOP reply.  The client&#xA;     * does the same on the first GIOP request.&#xA;     * @return the SendingContext.CodeBase of this ValueHandler.&#xA;     **/</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>SendingContext</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../org/omg/SendingContext/RunTime.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeReplace">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * If the value contains a &lt;code>writeReplace&lt;/code> method then the result&#xA;     * is returned.  Otherwise, the value itself is returned.&#xA;     * @param value the value to be marshaled.&#xA;     * @return the true value to marshal on the wire.&#xA;     **/</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Defines methods which allow serialization of Java objects&#xA; * to and from GIOP streams.&#xA; **/</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
