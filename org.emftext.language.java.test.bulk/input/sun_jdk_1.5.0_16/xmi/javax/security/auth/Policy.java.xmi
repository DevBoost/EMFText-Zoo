<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../../java.ecore#/0 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Policy.java">
  <comments>/*&#xA; * @(#)Policy.java&#x9;1.50 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>security</namespaces>
  <namespaces>auth</namespaces>
  <classifiers xsi:type="classifiers:Class" name="Policy">
    <members xsi:type="members:Field" name="policy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="contextClassLoader">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                    <arguments xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <namespaces>java</namespaces>
                        <namespaces>security</namespaces>
                        <classifierReferences>
                          <target xsi:type="classifiers:Interface" href="../../../java/security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <anonymousClass>
                        <members xsi:type="members:ClassMethod" name="run">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <annotationsAndModifiers xsi:type="modifiers:Public"/>
                          <statements xsi:type="statements:Return">
                            <returnValue xsi:type="references:IdentifierReference">
                              <next xsi:type="references:MethodCall">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Thread.class.xmi#//@classifiers.0/@members.76"/>
                                </next>
                                <target xsi:type="members:ClassMethod" href="../../../java/lang/Thread.class.xmi#//@classifiers.0/@members.33"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="../../../java/lang/Thread.class.xmi#//@classifiers.0"/>
                            </returnValue>
                          </statements>
                        </members>
                      </anonymousClass>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
                </next>
              </next>
            </child>
          </value>
        </expression>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:EmptyMember"/>
    <members xsi:type="members:Constructor" name="Policy">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Sole constructor.  (For invocation by subclass constructors, typically&#xA;     * implicit.)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getPolicy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the installed Policy object.&#xA;     * This method first calls&#xA;     * &lt;code>SecurityManager.checkPermission&lt;/code> with the&#xA;     * &lt;code>AuthPermission(&quot;getPolicy&quot;)&lt;/code> permission&#xA;     * to ensure the caller has permission to get the Policy object.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @return the installed Policy.  The return value cannot be&#xA;     *&#x9;&#x9;&lt;code>null&lt;/code>.&#xA;     *&#xA;     * @exception java.lang.SecurityException if the current thread does not&#xA;     *&#x9;    have permission to get the Policy object.&#xA;     *&#xA;     * @see #setPolicy&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>java</namespaces>
            <namespaces>lang</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../java/lang/System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="AuthPermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="getPolicy"/>
              </arguments>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPolicyNoCheck">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * Returns the installed Policy object, skipping the security check.&#xA;     *&#xA;     * @return the installed Policy.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:SynchronizedBlock">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="policy_class">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="literals:NullLiteral"/>
                  </variable>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@statement/@statements.0/@statements.0/@statement/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../java/security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                              <arguments xsi:type="instantiations:NewConstructorCall">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <namespaces>java</namespaces>
                                  <namespaces>security</namespaces>
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Interface" href="../../../java/security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                                <anonymousClass>
                                  <members xsi:type="members:ClassMethod" name="run">
                                    <typeReference xsi:type="types:NamespaceClassifierReference">
                                      <classifierReferences>
                                        <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                                      </classifierReferences>
                                    </typeReference>
                                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                                    <statements xsi:type="statements:Return">
                                      <returnValue xsi:type="references:IdentifierReference">
                                        <next xsi:type="references:IdentifierReference">
                                          <next xsi:type="references:IdentifierReference">
                                            <next xsi:type="references:MethodCall">
                                              <target xsi:type="members:ClassMethod" href="../../../java/security/Security.class.xmi#//@classifiers.0/@members.22"/>
                                              <arguments xsi:type="references:StringReference" value="auth.policy.provider"/>
                                            </next>
                                            <target xsi:type="classifiers:Class" href="../../../java/security/Security.class.xmi#//@classifiers.0"/>
                                          </next>
                                        </next>
                                      </returnValue>
                                    </statements>
                                  </members>
                                </anonymousClass>
                              </arguments>
                            </next>
                            <target xsi:type="classifiers:Class" href="../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
                          </next>
                        </next>
                      </child>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@statement/@statements.0/@statements.0/@statement/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:StringReference" value="com.sun.security.auth.PolicyFile"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@statement/@statements.0/@statements.0/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                </statements>
                <statements xsi:type="statements:TryBlock">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="finalClass">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@statement/@statements.0/@statements.0/@statement/@statements.0/@variable"/>
                      <annotationsAndModifiers xsi:type="modifiers:Final"/>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0"/>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../java/security/AccessController.class.xmi#//@classifiers.0/@members.3"/>
                                <arguments xsi:type="instantiations:NewConstructorCall">
                                  <typeReference xsi:type="types:NamespaceClassifierReference">
                                    <namespaces>java</namespaces>
                                    <namespaces>security</namespaces>
                                    <classifierReferences>
                                      <target xsi:type="classifiers:Interface" href="../../../java/security/PrivilegedExceptionAction.class.xmi#//@classifiers.0"/>
                                    </classifierReferences>
                                  </typeReference>
                                  <anonymousClass>
                                    <members xsi:type="members:ClassMethod" name="run">
                                      <typeReference xsi:type="types:NamespaceClassifierReference">
                                        <classifierReferences>
                                          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                                        </classifierReferences>
                                      </typeReference>
                                      <exceptions>
                                        <classifierReferences>
                                          <target xsi:type="classifiers:Class" href="../../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
                                        </classifierReferences>
                                      </exceptions>
                                      <exceptions>
                                        <classifierReferences>
                                          <target xsi:type="classifiers:Class" href="../../../java/lang/InstantiationException.class.xmi#//@classifiers.0"/>
                                        </classifierReferences>
                                      </exceptions>
                                      <exceptions>
                                        <classifierReferences>
                                          <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalAccessException.class.xmi#//@classifiers.0"/>
                                        </classifierReferences>
                                      </exceptions>
                                      <annotationsAndModifiers xsi:type="modifiers:Public"/>
                                      <statements xsi:type="statements:Return">
                                        <returnValue xsi:type="references:IdentifierReference">
                                          <next xsi:type="references:MethodCall">
                                            <next xsi:type="references:MethodCall">
                                              <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.35"/>
                                            </next>
                                            <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.33"/>
                                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@statement/@statements.0/@statements.0/@statement/@statements.3/@statements.0/@variable"/>
                                            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                                          </next>
                                          <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
                                        </returnValue>
                                      </statements>
                                    </members>
                                  </anonymousClass>
                                </arguments>
                              </next>
                              <target xsi:type="classifiers:Class" href="../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
                            </next>
                          </next>
                        </child>
                      </value>
                    </expression>
                  </statements>
                  <catcheBlocks>
                    <statements xsi:type="statements:Throw">
                      <throwable xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../java/lang/SecurityException.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../../sun/security/util/ResourcesMgr.class.xmi#//@classifiers.0/@members.3"/>
                                  <arguments xsi:type="references:StringReference" value="unable to instantiate Subject-based policy"/>
                                </next>
                                <target xsi:type="classifiers:Class" href="../../../sun/security/util/ResourcesMgr.class.xmi#//@classifiers.0"/>
                              </next>
                            </next>
                          </next>
                        </arguments>
                      </throwable>
                    </statements>
                    <parameter name="e">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                    </parameter>
                  </catcheBlocks>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:ReflectiveClassReference"/>
            </lockProvider>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setPolicy">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="policy">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the system-wide Policy object. This method first calls&#xA;     * &lt;code>SecurityManager.checkPermission&lt;/code> with the&#xA;     * &lt;code>AuthPermission(&quot;setPolicy&quot;)&lt;/code>&#xA;     * permission to ensure the caller has permission to set the Policy.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @param policy the new system Policy object.&#xA;     *&#xA;     * @exception java.lang.SecurityException if the current thread does not&#xA;     *&#x9;&#x9;have permission to set the Policy.&#xA;     *&#xA;     * @see #getPolicy&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>java</namespaces>
            <namespaces>lang</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../java/lang/System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="AuthPermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="setPolicy"/>
              </arguments>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPermissions">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>security</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/security/PermissionCollection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="subject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>security</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieve the Permissions granted to the Principals associated with&#xA;     * the specified &lt;code>CodeSource&lt;/code>.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @param subject the &lt;code>Subject&lt;/code>&#xA;     *&#x9;&#x9;&#x9;whose associated Principals,&#xA;     *&#x9;&#x9;&#x9;in conjunction with the provided&#xA;     *&#x9;&#x9;&#x9;&lt;code>CodeSource&lt;/code>, determines the Permissions&#xA;     *&#x9;&#x9;&#x9;returned by this method.  This parameter&#xA;     *&#x9;&#x9;&#x9;may be &lt;code>null&lt;/code>. &lt;p>&#xA;     *&#xA;     * @param cs the code specified by its &lt;code>CodeSource&lt;/code>&#xA;     *&#x9;&#x9;&#x9;that determines, in conjunction with the provided&#xA;     *&#x9;&#x9;&#x9;&lt;code>Subject&lt;/code>, the Permissions&#xA;     *&#x9;&#x9;&#x9;returned by this method.  This parameter may be&#xA;     *&#x9;&#x9;&#x9;&lt;code>null&lt;/code>.&#xA;     *&#xA;     * @return the Collection of Permissions granted to all the&#xA;     *&#x9;&#x9;&#x9;&lt;code>Subject&lt;/code> and code specified in&#xA;     *&#x9;&#x9;&#x9;the provided &lt;i>subject&lt;/i> and &lt;i>cs&lt;/i>&#xA;     *&#x9;&#x9;&#x9;parameters.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="refresh">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Refresh and reload the Policy.&#xA;     *&#xA;     * &lt;p>This method causes this object to refresh/reload its current&#xA;     * Policy. This is implementation-dependent.&#xA;     * For example, if the Policy object is stored in&#xA;     * a file, calling &lt;code>refresh&lt;/code> will cause the file to be re-read.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @exception SecurityException if the caller does not have permission&#xA;     *&#x9;&#x9;&#x9;&#x9;to refresh the Policy.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
      <comments>/**&#xA; * &lt;p> This is an abstract class for representing the system policy for&#xA; * Subject-based authorization.  A subclass implementation&#xA; * of this class provides a means to specify a Subject-based&#xA; * access control &lt;code>Policy&lt;/code>.&#xA; *&#xA; * &lt;p> A &lt;code>Policy&lt;/code> object can be queried for the set of&#xA; * Permissions granted to code running as a &#xA; * &lt;code>Principal&lt;/code> in the following manner:&#xA; *&#xA; * &lt;pre>&#xA; *&#x9;policy = Policy.getPolicy();&#xA; *&#x9;PermissionCollection perms = policy.getPermissions(subject,&#xA; *&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;codeSource);&#xA; * &lt;/pre>&#xA; *&#xA; * The &lt;code>Policy&lt;/code> object consults the local policy and returns&#xA; * and appropriate &lt;code>Permissions&lt;/code> object with the&#xA; * Permissions granted to the Principals associated with the&#xA; * provided &lt;i>subject&lt;/i>, and granted to the code specified&#xA; * by the provided &lt;i>codeSource&lt;/i>.&#xA; *&#xA; * &lt;p> A &lt;code>Policy&lt;/code> contains the following information.&#xA; * Note that this example only represents the syntax for the default&#xA; * &lt;code>Policy&lt;/code> implementation. Subclass implementations of this class&#xA; * may implement alternative syntaxes and may retrieve the&#xA; * &lt;code>Policy&lt;/code> from any source such as files, databases,&#xA; * or servers.&#xA; *&#xA; * &lt;p> Each entry in the &lt;code>Policy&lt;/code> is represented as&#xA; * a &lt;b>&lt;i>grant&lt;/i>&lt;/b> entry.  Each &lt;b>&lt;i>grant&lt;/i>&lt;/b> entry&#xA; * specifies a codebase, code signers, and Principals triplet,&#xA; * as well as the Permissions granted to that triplet.&#xA; *&#xA; * &lt;pre>&#xA; *&#x9;grant CodeBase [&quot;URL&quot;], Signedby [&quot;signers&quot;],&#xA; *&#x9;      Principal [Principal_Class] &quot;Principal_Name&quot; {&#xA; *&#x9;    Permission Permission_Class [&quot;Target_Name&quot;]&#xA; *&#x9;&#x9;&#x9;&#x9;&#x9;[, &quot;Permission_Actions&quot;]&#xA; *&#x9;&#x9;&#x9;&#x9;&#x9;[, signedBy &quot;SignerName&quot;];&#xA; *&#x9;};&#xA; * &lt;/pre>&#xA; *&#xA; * The CodeBase and Signedby components of the triplet name/value pairs&#xA; * are optional.  If they are not present, then any any codebase will match,&#xA; * and any signer (including unsigned code) will match.&#xA; * For Example,&#xA; *&#xA; * &lt;pre>&#xA; *&#x9;grant CodeBase &quot;foo.com&quot;, Signedby &quot;foo&quot;,&#xA; *&#x9;      Principal com.sun.security.auth.SolarisPrincipal &quot;duke&quot; {&#xA; *&#x9;    permission java.io.FilePermission &quot;/home/duke&quot;, &quot;read, write&quot;;&#xA; *&#x9;};&#xA; * &lt;/pre>&#xA; *&#xA; * This &lt;b>&lt;i>grant&lt;/i>&lt;/b> entry specifies that code from &quot;foo.com&quot;,&#xA; * signed by &quot;foo', and running as a &lt;code>SolarisPrincipal&lt;/code> with the&#xA; * name, duke, has one &lt;code>Permission&lt;/code>.  This &lt;code>Permission&lt;/code>&#xA; * permits the executing code to read and write files in the directory,&#xA; * &quot;/home/duke&quot;.&#xA; *&#xA; * &lt;p> To &quot;run&quot; as a particular &lt;code>Principal&lt;/code>,&#xA; * code invokes the &lt;code>Subject.doAs(subject, ...)&lt;/code> method.&#xA; * After invoking that method, the code runs as all the Principals&#xA; * associated with the specified &lt;code>Subject&lt;/code>.&#xA; * Note that this &lt;code>Policy&lt;/code> (and the Permissions&#xA; * granted in this &lt;code>Policy&lt;/code>) only become effective&#xA; * after the call to &lt;code>Subject.doAs&lt;/code> has occurred.&#xA; *&#xA; * &lt;p> Multiple Principals may be listed within one &lt;b>&lt;i>grant&lt;/i>&lt;/b> entry.&#xA; * All the Principals in the grant entry must be associated with&#xA; * the &lt;code>Subject&lt;/code> provided to &lt;code>Subject.doAs&lt;/code>&#xA; * for that &lt;code>Subject&lt;/code> to be granted the specified Permissions.&#xA; *&#xA; * &lt;pre>&#xA; *&#x9;grant Principal com.sun.security.auth.SolarisPrincipal &quot;duke&quot;,&#xA; *&#x9;      Principal com.sun.security.auth.SolarisNumericUserPrincipal &quot;0&quot; {&#xA; *&#x9;    permission java.io.FilePermission &quot;/home/duke&quot;, &quot;read, write&quot;;&#xA; *&#x9;    permission java.net.SocketPermission &quot;duke.com&quot;, &quot;connect&quot;;&#xA; *&#x9;};&#xA; * &lt;/pre>&#xA; *&#xA; * This entry grants any code running as both &quot;duke&quot; and &quot;0&quot;&#xA; * permission to read and write files in duke's home directory,&#xA; * as well as permission to make socket connections to &quot;duke.com&quot;.&#xA; * &#xA; * &lt;p> Note that non Principal-based grant entries are not permitted&#xA; * in this &lt;code>Policy&lt;/code>.  Therefore, grant entries such as:&#xA; *&#xA; * &lt;pre>&#xA; *&#x9;grant CodeBase &quot;foo.com&quot;, Signedby &quot;foo&quot; {&#xA; *&#x9;    permission java.io.FilePermission &quot;/tmp/scratch&quot;, &quot;read, write&quot;;&#xA; *&#x9;};&#xA; * &lt;/pre>&#xA; *&#xA; * are rejected.  Such permission must be listed in the&#xA; * &lt;code>java.security.Policy&lt;/code>.&#xA; *&#xA; * &lt;p> The default &lt;code>Policy&lt;/code> implementation can be changed by&#xA; * setting the value of the &quot;auth.policy.provider&quot; security property&#xA; * (in the Java security properties file) to the fully qualified name of&#xA; * the desired &lt;code>Policy&lt;/code> implementation class.&#xA; * The Java security properties file is located in the file named&#xA; * &amp;lt;JAVA_HOME&amp;gt;/lib/security/java.security, where &amp;lt;JAVA_HOME&amp;gt;&#xA; * refers to the directory where the JDK was installed.&#xA; *&#xA; * @deprecated&#x9;as of JDK version 1.4 -- Replaced by java.security.Policy.&#xA; *&#x9;&#x9;java.security.Policy has a method:&#xA; * &lt;pre>&#xA; * &#x9;public PermissionCollection getPermissions&#xA; *  &#x9;    (java.security.ProtectionDomain pd)&#xA; * &#xA; * &lt;/pre>&#xA; * and ProtectionDomain has a constructor:&#xA; * &lt;pre>&#xA; *&#x9;public ProtectionDomain&#xA; *&#x9;    (CodeSource cs,&#xA; *&#x9;     PermissionCollection permissions,&#xA; *&#x9;     ClassLoader loader,&#xA; *&#x9;     Principal[] principals)&#xA; * &lt;/pre>&#xA; *&#xA; * These two APIs provide callers the means to query the&#xA; * Policy for Principal-based Permission entries.&#xA; *&#xA; *&#xA; * @version 1.50, 05/18/04&#xA; */</comments>
      <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Public"/>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
