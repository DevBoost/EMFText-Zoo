<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="CallbackHandler.java">
  <comments>/*&#xA; * @(#)CallbackHandler.java&#x9;1.17 04/06/28&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>security</namespaces>
  <namespaces>auth</namespaces>
  <namespaces>callback</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="CallbackHandler">
    <members xsi:type="members:InterfaceMethod" name="handle">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * &lt;p> Retrieve or display the information requested in the&#xA;     * provided Callbacks.&#xA;     *&#xA;     * &lt;p> The &lt;code>handle&lt;/code> method implementation checks the&#xA;     * instance(s) of the &lt;code>Callback&lt;/code> object(s) passed in&#xA;     * to retrieve or display the requested information.&#xA;     * The following example is provided to help demonstrate what an&#xA;     * &lt;code>handle&lt;/code> method implementation might look like.&#xA;     * This example code is for guidance only.  Many details,&#xA;     * including proper error handling, are left out for simplicity.&#xA;     *&#xA;     * &lt;pre>&#xA;     * public void handle(Callback[] callbacks)&#xA;     * throws IOException, UnsupportedCallbackException {&#xA;     *&#xA;     *&#x9; for (int i = 0; i &lt; callbacks.length; i++) {&#xA;     *&#x9;    if (callbacks[i] instanceof TextOutputCallback) {&#xA;     * &#xA;     *&#x9;&#x9;// display the message according to the specified type&#xA;     *&#x9;&#x9;TextOutputCallback toc = (TextOutputCallback)callbacks[i];&#xA;     *&#x9;&#x9;switch (toc.getMessageType()) {&#xA;     *&#x9;&#x9;case TextOutputCallback.INFORMATION:&#xA;     *&#x9;&#x9;    System.out.println(toc.getMessage());&#xA;     *&#x9;&#x9;    break;&#xA;     *&#x9;&#x9;case TextOutputCallback.ERROR:&#xA;     *&#x9;&#x9;    System.out.println(&quot;ERROR: &quot; + toc.getMessage());&#xA;     *&#x9;&#x9;    break;&#xA;     *&#x9;&#x9;case TextOutputCallback.WARNING:&#xA;     *&#x9;&#x9;    System.out.println(&quot;WARNING: &quot; + toc.getMessage());&#xA;     *&#x9;&#x9;    break;&#xA;     *&#x9;&#x9;default:&#xA;     *&#x9;&#x9;    throw new IOException(&quot;Unsupported message type: &quot; +&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;toc.getMessageType());&#xA;     *&#x9;&#x9;}&#xA;     *&#xA;     *&#x9;    } else if (callbacks[i] instanceof NameCallback) {&#xA;     * &#xA;     *&#x9;&#x9;// prompt the user for a username&#xA;     *&#x9;&#x9;NameCallback nc = (NameCallback)callbacks[i];&#xA;     * &#xA;     *&#x9;&#x9;// ignore the provided defaultName&#xA;     *&#x9;&#x9;System.err.print(nc.getPrompt());&#xA;     *&#x9;&#x9;System.err.flush();&#xA;     *&#x9;&#x9;nc.setName((new BufferedReader&#xA;     *&#x9;&#x9;&#x9;(new InputStreamReader(System.in))).readLine());&#xA;     *&#xA;     *&#x9;    } else if (callbacks[i] instanceof PasswordCallback) {&#xA;     * &#xA;     *&#x9;&#x9;// prompt the user for sensitive information&#xA;     *&#x9;&#x9;PasswordCallback pc = (PasswordCallback)callbacks[i];&#xA;     *&#x9;&#x9;System.err.print(pc.getPrompt());&#xA;     *&#x9;&#x9;System.err.flush();&#xA;     *&#x9;&#x9;pc.setPassword(readPassword(System.in));&#xA;     * &#xA;     *&#x9;    } else {&#xA;     *&#x9;&#x9;throw new UnsupportedCallbackException&#xA;     *&#x9;&#x9;&#x9;(callbacks[i], &quot;Unrecognized Callback&quot;);&#xA;     *&#x9;    }&#xA;     *&#x9; }&#xA;     * }&#xA;     *  &#xA;     * // Reads user password from given input stream.&#xA;     * private char[] readPassword(InputStream in) throws IOException {&#xA;     *    // insert code to read a user password from the input stream &#xA;     * }&#xA;     * &lt;/pre>&#xA;     *&#xA;     * @param callbacks an array of &lt;code>Callback&lt;/code> objects provided&#xA;     *&#x9;&#x9;by an underlying security service which contains&#xA;     *&#x9;&#x9;the information requested to be retrieved or displayed.&#xA;     *&#xA;     * @exception java.io.IOException if an input or output error occurs. &lt;p>&#xA;     *&#xA;     * @exception UnsupportedCallbackException if the implementation of this&#xA;     *&#x9;&#x9;method does not support one or more of the Callbacks&#xA;     *&#x9;&#x9;specified in the &lt;code>callbacks&lt;/code> parameter.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="callbacks">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Callback.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="UnsupportedCallbackException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p> An application implements a &lt;code>CallbackHandler&lt;/code> and passes&#xA; * it to underlying security services so that they may interact with&#xA; * the application to retrieve specific authentication data,&#xA; * such as usernames and passwords, or to display certain information,&#xA; * such as error and warning messages.&#xA; * &#xA; * &lt;p> CallbackHandlers are implemented in an application-dependent fashion.&#xA; * For example, implementations for an application with a graphical user &#xA; * interface (GUI) may pop up windows to prompt for requested information&#xA; * or to display error messages.  An implementation may also choose to obtain&#xA; * requested information from an alternate source without asking the end user.&#xA; *&#xA; * &lt;p> Underlying security services make requests for different types&#xA; * of information by passing individual Callbacks to the&#xA; * &lt;code>CallbackHandler&lt;/code>.  The &lt;code>CallbackHandler&lt;/code>&#xA; * implementation decides how to retrieve and display information&#xA; * depending on the Callbacks passed to it.  For example,&#xA; * if the underlying service needs a username and password to&#xA; * authenticate a user, it uses a &lt;code>NameCallback&lt;/code> and&#xA; * &lt;code>PasswordCallback&lt;/code>.  The &lt;code>CallbackHandler&lt;/code>&#xA; * can then choose to prompt for a username and password serially,&#xA; * or to prompt for both in a single window.&#xA; *&#xA; * &lt;p> A default &lt;code>CallbackHandler&lt;/code> class implementation&#xA; * may be specified in the &lt;i>auth.login.defaultCallbackHandler&lt;/i>&#xA; * security property.  The security property can be set&#xA; * in the Java security properties file located in the file named&#xA; * &amp;lt;JAVA_HOME&amp;gt;/lib/security/java.security, where &amp;lt;JAVA_HOME&amp;gt;&#xA; * refers to the directory where the JDK was installed.&#xA; *&#xA; * &lt;p> If the security property is set to the fully qualified name of a&#xA; * &lt;code>CallbackHandler&lt;/code> implementation class,&#xA; * then a &lt;code>LoginContext&lt;/code> will load the specified&#xA; * &lt;code>CallbackHandler&lt;/code> and pass it to the underlying LoginModules.&#xA; * The &lt;code>LoginContext&lt;/code> only loads the default handler&#xA; * if it was not provided one.&#xA; *&#xA; * &lt;p> All default handler implementations must provide a public&#xA; * zero-argument constructor.&#xA; *&#xA; * @version 1.17, 06/28/04&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
