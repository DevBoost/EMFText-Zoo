<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="LoginModule.java">
  <comments>/*&#xA; * @(#)LoginModule.java&#x9;1.53 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>security</namespaces>
  <namespaces>auth</namespaces>
  <namespaces>spi</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>security</namespaces>
    <namespaces>auth</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Subject.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>security</namespaces>
    <namespaces>auth</namespaces>
    <classifier xsi:type="classifiers:Class" href="../AuthPermission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>security</namespaces>
    <namespaces>auth</namespaces>
    <namespaces>callback</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>security</namespaces>
    <namespaces>auth</namespaces>
    <namespaces>login</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../java/util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="LoginModule">
    <members xsi:type="members:InterfaceMethod" name="initialize">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Initialize this LoginModule.&#xA;     *&#xA;     * &lt;p> This method is called by the &lt;code>LoginContext&lt;/code>&#xA;     * after this &lt;code>LoginModule&lt;/code> has been instantiated.&#xA;     * The purpose of this method is to initialize this&#xA;     * &lt;code>LoginModule&lt;/code> with the relevant information.&#xA;     * If this &lt;code>LoginModule&lt;/code> does not understand&#xA;     * any of the data stored in &lt;code>sharedState&lt;/code> or&#xA;     * &lt;code>options&lt;/code> parameters, they can be ignored.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @param subject the &lt;code>Subject&lt;/code> to be authenticated. &lt;p>&#xA;     *&#xA;     * @param callbackHandler a &lt;code>CallbackHandler&lt;/code> for communicating&#xA;     *&#x9;&#x9;&#x9;with the end user (prompting for usernames and&#xA;     *&#x9;&#x9;&#x9;passwords, for example). &lt;p>&#xA;     *&#xA;     * @param sharedState state shared with other configured LoginModules. &lt;p>&#xA;     *&#xA;     * @param options options specified in the login&#xA;     *&#x9;&#x9;&#x9;&lt;code>Configuration&lt;/code> for this particular&#xA;     *&#x9;&#x9;&#x9;&lt;code>LoginModule&lt;/code>.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="subject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="callbackHandler">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../callback/CallbackHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sharedState">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Interface" href="../../../../java/util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="options">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Interface" href="../../../../java/util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="login">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Method to authenticate a &lt;code>Subject&lt;/code> (phase 1).&#xA;     *&#xA;     * &lt;p> The implementation of this method authenticates&#xA;     * a &lt;code>Subject&lt;/code>.  For example, it may prompt for&#xA;     * &lt;code>Subject&lt;/code> information such&#xA;     * as a username and password and then attempt to verify the password.&#xA;     * This method saves the result of the authentication attempt&#xA;     * as private state within the LoginModule.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @exception LoginException if the authentication fails&#xA;     *&#xA;     * @return true if the authentication succeeded, or false if this&#xA;     *&#x9;&#x9;&#x9;&lt;code>LoginModule&lt;/code> should be ignored.&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../login/LoginException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="commit">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Method to commit the authentication process (phase 2).&#xA;     *&#xA;     * &lt;p> This method is called if the LoginContext's&#xA;     * overall authentication succeeded&#xA;     * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules&#xA;     * succeeded).&#xA;     *&#xA;     * &lt;p> If this LoginModule's own authentication attempt&#xA;     * succeeded (checked by retrieving the private state saved by the&#xA;     * &lt;code>login&lt;/code> method), then this method associates relevant&#xA;     * Principals and Credentials with the &lt;code>Subject&lt;/code> located in the&#xA;     * &lt;code>LoginModule&lt;/code>.  If this LoginModule's own&#xA;     * authentication attempted failed, then this method removes/destroys&#xA;     * any state that was originally saved.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @exception LoginException if the commit fails&#xA;     *&#xA;     * @return true if this method succeeded, or false if this&#xA;     *&#x9;&#x9;&#x9;&lt;code>LoginModule&lt;/code> should be ignored.&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../login/LoginException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="abort">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Method to abort the authentication process (phase 2).&#xA;     *&#xA;     * &lt;p> This method is called if the LoginContext's&#xA;     * overall authentication failed.&#xA;     * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules&#xA;     * did not succeed).&#xA;     *&#xA;     * &lt;p> If this LoginModule's own authentication attempt&#xA;     * succeeded (checked by retrieving the private state saved by the&#xA;     * &lt;code>login&lt;/code> method), then this method cleans up any state&#xA;     * that was originally saved.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @exception LoginException if the abort fails&#xA;     *&#xA;     * @return true if this method succeeded, or false if this&#xA;     *&#x9;&#x9;&#x9;&lt;code>LoginModule&lt;/code> should be ignored.&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../login/LoginException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="logout">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Method which logs out a &lt;code>Subject&lt;/code>.  &#xA;     *&#xA;     * &lt;p>An implementation of this method might remove/destroy a Subject's&#xA;     * Principals and Credentials.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @exception LoginException if the logout fails&#xA;     *&#xA;     * @return true if this method succeeded, or false if this&#xA;     *&#x9;&#x9;&#x9;&lt;code>LoginModule&lt;/code> should be ignored.&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../login/LoginException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p> &lt;code>LoginModule&lt;/code> describes the interface&#xA; * implemented by authentication technology providers.  LoginModules&#xA; * are plugged in under applications to provide a particular type of&#xA; * authentication.&#xA; *&#xA; * &lt;p> While applications write to the &lt;code>LoginContext&lt;/code> API,&#xA; * authentication technology providers implement the&#xA; * &lt;code>LoginModule&lt;/code> interface.&#xA; * A &lt;code>Configuration&lt;/code> specifies the LoginModule(s)&#xA; * to be used with a particular login application.  Therefore different&#xA; * LoginModules can be plugged in under the application without&#xA; * requiring any modifications to the application itself.&#xA; *&#xA; * &lt;p> The &lt;code>LoginContext&lt;/code> is responsible for reading the&#xA; * &lt;code>Configuration&lt;/code> and instantiating the appropriate&#xA; * LoginModules.  Each &lt;code>LoginModule&lt;/code> is initialized with&#xA; * a &lt;code>Subject&lt;/code>, a &lt;code>CallbackHandler&lt;/code>, shared&#xA; * &lt;code>LoginModule&lt;/code> state, and LoginModule-specific options.&#xA; * &#xA; * The &lt;code>Subject&lt;/code> represents the&#xA; * &lt;code>Subject&lt;/code> currently being authenticated and is updated&#xA; * with relevant Credentials if authentication succeeds.&#xA; * LoginModules use the &lt;code>CallbackHandler&lt;/code> to&#xA; * communicate with users.  The &lt;code>CallbackHandler&lt;/code> may be&#xA; * used to prompt for usernames and passwords, for example.&#xA; * Note that the &lt;code>CallbackHandler&lt;/code> may be null.  LoginModules&#xA; * which absolutely require a &lt;code>CallbackHandler&lt;/code> to authenticate&#xA; * the &lt;code>Subject&lt;/code> may throw a &lt;code>LoginException&lt;/code>.&#xA; * LoginModules optionally use the shared state to share information&#xA; * or data among themselves.&#xA; *&#xA; * &lt;p> The LoginModule-specific options represent the options&#xA; * configured for this &lt;code>LoginModule&lt;/code> by an administrator or user&#xA; * in the login &lt;code>Configuration&lt;/code>.&#xA; * The options are defined by the &lt;code>LoginModule&lt;/code> itself&#xA; * and control the behavior within it.  For example, a&#xA; * &lt;code>LoginModule&lt;/code> may define options to support debugging/testing&#xA; * capabilities.  Options are defined using a key-value syntax,&#xA; * such as &lt;i>debug=true&lt;/i>.  The &lt;code>LoginModule&lt;/code>&#xA; * stores the options as a &lt;code>Map&lt;/code> so that the values may&#xA; * be retrieved using the key.  Note that there is no limit to the number&#xA; * of options a &lt;code>LoginModule&lt;/code> chooses to define.&#xA; *&#xA; * &lt;p> The calling application sees the authentication process as a single&#xA; * operation.  However, the authentication process within the&#xA; * &lt;code>LoginModule&lt;/code> proceeds in two distinct phases.&#xA; * In the first phase, the LoginModule's&#xA; * &lt;code>login&lt;/code> method gets invoked by the LoginContext's&#xA; * &lt;code>login&lt;/code> method.  The &lt;code>login&lt;/code>&#xA; * method for the &lt;code>LoginModule&lt;/code> then performs&#xA; * the actual authentication (prompt for and verify a password for example)&#xA; * and saves its authentication status as private state&#xA; * information.  Once finished, the LoginModule's &lt;code>login&lt;/code>&#xA; * method either returns &lt;code>true&lt;/code> (if it succeeded) or&#xA; * &lt;code>false&lt;/code> (if it should be ignored), or throws a&#xA; * &lt;code>LoginException&lt;/code> to specify a failure.&#xA; * In the failure case, the &lt;code>LoginModule&lt;/code> must not retry the&#xA; * authentication or introduce delays.  The responsibility of such tasks&#xA; * belongs to the application.  If the application attempts to retry&#xA; * the authentication, the LoginModule's &lt;code>login&lt;/code> method will be&#xA; * called again.&#xA; *&#xA; * &lt;p> In the second phase, if the LoginContext's overall authentication&#xA; * succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL&#xA; * LoginModules succeeded), then the &lt;code>commit&lt;/code>&#xA; * method for the &lt;code>LoginModule&lt;/code> gets invoked.&#xA; * The &lt;code>commit&lt;/code> method for a &lt;code>LoginModule&lt;/code> checks its&#xA; * privately saved state to see if its own authentication succeeded.&#xA; * If the overall &lt;code>LoginContext&lt;/code> authentication succeeded&#xA; * and the LoginModule's own authentication succeeded, then the&#xA; * &lt;code>commit&lt;/code> method associates the relevant&#xA; * Principals (authenticated identities) and Credentials (authentication data&#xA; * such as cryptographic keys) with the &lt;code>Subject&lt;/code>&#xA; * located within the &lt;code>LoginModule&lt;/code>.&#xA; *&#xA; * &lt;p> If the LoginContext's overall authentication failed (the relevant&#xA; * REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules did not succeed),&#xA; * then the &lt;code>abort&lt;/code> method for each &lt;code>LoginModule&lt;/code>&#xA; * gets invoked.  In this case, the &lt;code>LoginModule&lt;/code> removes/destroys&#xA; * any authentication state originally saved.&#xA; *&#xA; * &lt;p> Logging out a &lt;code>Subject&lt;/code> involves only one phase.&#xA; * The &lt;code>LoginContext&lt;/code> invokes the LoginModule's &lt;code>logout&lt;/code>&#xA; * method.  The &lt;code>logout&lt;/code> method for the &lt;code>LoginModule&lt;/code>&#xA; * then performs the logout procedures, such as removing Principals or&#xA; * Credentials from the &lt;code>Subject&lt;/code> or logging session information.&#xA; *&#xA; * &lt;p> A &lt;code>LoginModule&lt;/code> implementation must have a constructor with&#xA; * no arguments.  This allows classes which load the &lt;code>LoginModule&lt;/code>&#xA; * to instantiate it.&#xA; *&#xA; * @version 1.53, 05/05/04&#xA; * @see javax.security.auth.login.LoginContext&#xA; * @see javax.security.auth.login.Configuration&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
