<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="Configuration.java">
  <comments>/*&#xA; * @(#)Configuration.java&#x9;1.57 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>security</namespaces>
  <namespaces>auth</namespaces>
  <namespaces>login</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>security</namespaces>
    <namespaces>auth</namespaces>
    <classifier xsi:type="classifiers:Class" href="../AuthPermission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/security/PrivilegedActionException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Configuration">
    <members xsi:type="members:Field" name="configuration">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="contextClassLoader">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../java/security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                    <arguments xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <namespaces>java</namespaces>
                        <namespaces>security</namespaces>
                        <classifierReferences>
                          <target xsi:type="classifiers:Interface" href="../../../../java/security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <anonymousClass>
                        <members xsi:type="members:ClassMethod" name="run">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <annotationsAndModifiers xsi:type="modifiers:Public"/>
                          <statements xsi:type="statements:Return">
                            <returnValue xsi:type="references:IdentifierReference">
                              <next xsi:type="references:MethodCall">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../../../java/lang/Thread.class.xmi#//@classifiers.0/@members.76"/>
                                </next>
                                <target xsi:type="members:ClassMethod" href="../../../../java/lang/Thread.class.xmi#//@classifiers.0/@members.33"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="../../../../java/lang/Thread.class.xmi#//@classifiers.0"/>
                            </returnValue>
                          </statements>
                        </members>
                      </anonymousClass>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
                </next>
              </next>
            </child>
          </value>
        </expression>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:EmptyMember"/>
    <members xsi:type="members:Constructor" name="Configuration">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Sole constructor.  (For invocation by subclass constructors, typically&#xA;     * implicit.)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getConfiguration">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the Login Configuration.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @return the login Configuration.  If a Configuration object was set&#xA;     *&#x9;&#x9;via the &lt;code>Configuration.setConfiguration&lt;/code> method,&#xA;     *&#x9;&#x9;then that object is returned.  Otherwise, a default&#xA;     *&#x9;&#x9;Configuration object is returned.&#xA;     *&#xA;     * @exception SecurityException if the caller does not have permission&#xA;     *&#x9;&#x9;&#x9;&#x9;to retrieve the Configuration.&#xA;     *&#xA;     * @see #setConfiguration&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../AuthPermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="getLoginConfiguration"/>
              </arguments>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="config_class">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="literals:NullLiteral"/>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                        <arguments xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <namespaces>java</namespaces>
                            <namespaces>security</namespaces>
                            <classifierReferences>
                              <target xsi:type="classifiers:Interface" href="../../../../java/security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <anonymousClass>
                            <members xsi:type="members:ClassMethod" name="run">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences>
                                  <target xsi:type="classifiers:Class" href="../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                                </classifierReferences>
                              </typeReference>
                              <annotationsAndModifiers xsi:type="modifiers:Public"/>
                              <statements xsi:type="statements:Return">
                                <returnValue xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:IdentifierReference">
                                    <next xsi:type="references:IdentifierReference">
                                      <next xsi:type="references:MethodCall">
                                        <target xsi:type="members:ClassMethod" href="../../../../java/security/Security.class.xmi#//@classifiers.0/@members.22"/>
                                        <arguments xsi:type="references:StringReference" value="login.configuration.provider"/>
                                      </next>
                                      <target xsi:type="classifiers:Class" href="../../../../java/security/Security.class.xmi#//@classifiers.0"/>
                                    </next>
                                  </next>
                                </returnValue>
                              </statements>
                            </members>
                          </anonymousClass>
                        </arguments>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
                    </next>
                  </next>
                </child>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:StringReference" value="com.sun.security.auth.login.ConfigFile"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="finalClass">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.0/@variable"/>
                <annotationsAndModifiers xsi:type="modifiers:Final"/>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../java/security/AccessController.class.xmi#//@classifiers.0/@members.3"/>
                          <arguments xsi:type="instantiations:NewConstructorCall">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <namespaces>java</namespaces>
                              <namespaces>security</namespaces>
                              <classifierReferences>
                                <target xsi:type="classifiers:Interface" href="../../../../java/security/PrivilegedExceptionAction.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <anonymousClass>
                              <members xsi:type="members:ClassMethod" name="run">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                                <exceptions>
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../../../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </exceptions>
                                <exceptions>
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../../../../java/lang/InstantiationException.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </exceptions>
                                <exceptions>
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../../../../java/lang/IllegalAccessException.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </exceptions>
                                <annotationsAndModifiers xsi:type="modifiers:Public"/>
                                <statements xsi:type="statements:Return">
                                  <returnValue xsi:type="references:IdentifierReference">
                                    <next xsi:type="references:MethodCall">
                                      <next xsi:type="references:MethodCall">
                                        <target xsi:type="members:ClassMethod" href="../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.35"/>
                                      </next>
                                      <target xsi:type="members:ClassMethod" href="../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.33"/>
                                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.3/@statements.0/@variable"/>
                                      <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                                    </next>
                                    <target xsi:type="classifiers:Class" href="../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
                                  </returnValue>
                                </statements>
                              </members>
                            </anonymousClass>
                          </arguments>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
                      </next>
                    </next>
                  </child>
                </value>
              </expression>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="ee">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.3/@catcheBlocks.0/@parameter">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/security/PrivilegedActionException.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Throw">
                    <throwable xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../java/lang/SecurityException.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../java/lang/SecurityException.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.12"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.3/@catcheBlocks.0/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.11"/>
                            </next>
                          </arguments>
                        </next>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:StringReference" value="Configuration error:"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.3/@catcheBlocks.0/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.9"/>
                              </next>
                              <target xsi:type="members:ClassMethod" href="../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.11"/>
                            </next>
                          </children>
                          <children xsi:type="references:StringReference" value="&#xA;"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                      </child>
                    </throwable>
                  </statements>
                </statement>
                <condition xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/lang/InstantiationException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.3/@catcheBlocks.0/@statements.0/@variable"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:Throw">
                    <throwable xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../java/lang/SecurityException.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../java/lang/SecurityException.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.12"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.3/@catcheBlocks.0/@statements.0/@variable"/>
                        </next>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:StringReference" value="Configuration error: "/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.3/@catcheBlocks.0/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.13"/>
                            </next>
                          </children>
                          <children xsi:type="references:StringReference" value="&#xA;"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                      </child>
                    </throwable>
                  </statements>
                </elseStatement>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/security/PrivilegedActionException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setConfiguration">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="configuration">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the Login &lt;code>Configuration&lt;/code>.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @param configuration the new &lt;code>Configuration&lt;/code>&#xA;     *&#xA;     * @exception SecurityException if the current thread does not have&#xA;     *&#x9;&#x9;&#x9;Permission to set the &lt;code>Configuration&lt;/code>.&#xA;     *&#xA;     * @see #getConfiguration&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../AuthPermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="setLoginConfiguration"/>
              </arguments>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAppConfigurationEntry">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="AppConfigurationEntry.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieve the AppConfigurationEntries for the specified &lt;i>name&lt;/i>&#xA;     * from this Configuration.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @param name the name used to index the Configuration.&#xA;     * &#xA;     * @return an array of AppConfigurationEntries for the specified &lt;i>name&lt;/i>&#xA;     *&#x9;&#x9;from this Configuration, or null if there are no entries&#xA;     *&#x9;&#x9;for the specified &lt;i>name&lt;/i>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="refresh">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Refresh and reload the Configuration.&#xA;     *&#xA;     * &lt;p> This method causes this Configuration object to refresh/reload its&#xA;     * contents in an implementation-dependent manner.&#xA;     * For example, if this Configuration object stores its entries in a file,&#xA;     * calling &lt;code>refresh&lt;/code> may cause the file to be re-read.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @exception SecurityException if the caller does not have permission&#xA;     *&#x9;&#x9;&#x9;&#x9;to refresh its Configuration.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p> This is an abstract class for representing the configuration of&#xA; * LoginModules under an application.  The &lt;code>Configuration&lt;/code> specifies&#xA; * which LoginModules should be used for a particular application, and in what&#xA; * order the LoginModules should be invoked.&#xA; * This abstract class needs to be subclassed to provide an implementation&#xA; * which reads and loads the actual &lt;code>Configuration&lt;/code>.&#xA; *&#xA; * &lt;p> A login configuration contains the following information.&#xA; * Note that this example only represents the default syntax for the&#xA; * &lt;code>Configuration&lt;/code>.  Subclass implementations of this class&#xA; * may implement alternative syntaxes and may retrieve the&#xA; * &lt;code>Configuration&lt;/code> from any source such as files, databases,&#xA; * or servers.&#xA; *&#xA; * &lt;pre>&#xA; *      Name {&#xA; *&#x9;      ModuleClass  Flag    ModuleOptions;&#xA; *&#x9;      ModuleClass  Flag    ModuleOptions;&#xA; *&#x9;      ModuleClass  Flag    ModuleOptions;&#xA; *      };&#xA; *      Name {&#xA; *&#x9;      ModuleClass  Flag    ModuleOptions;&#xA; *&#x9;      ModuleClass  Flag    ModuleOptions;&#xA; *      };&#xA; *      other {&#xA; *&#x9;      ModuleClass  Flag    ModuleOptions;&#xA; *&#x9;      ModuleClass  Flag    ModuleOptions;&#xA; *      };&#xA; * &lt;/pre>&#xA; *&#xA; * &lt;p> Each entry in the &lt;code>Configuration&lt;/code> is indexed via an&#xA; * application name, &lt;i>Name&lt;/i>, and contains a list of&#xA; * LoginModules configured for that application.  Each &lt;code>LoginModule&lt;/code>&#xA; * is specified via its fully qualified class name.&#xA; * Authentication proceeds down the module list in the exact order specified.&#xA; * If an application does not have specific entry,&#xA; * it defaults to the specific entry for &quot;&lt;i>other&lt;/i>&quot;.&#xA; *&#xA; * &lt;p> The &lt;i>Flag&lt;/i> value controls the overall behavior as authentication&#xA; * proceeds down the stack.  The following represents a description of the&#xA; * valid values for &lt;i>Flag&lt;/i> and their respective semantics:&#xA; *&#xA; * &lt;pre>&#xA; *      1) Required     - The &lt;code>LoginModule&lt;/code> is required to succeed.&#xA; *&#x9;&#x9;&#x9;If it succeeds or fails, authentication still continues&#xA; *&#x9;&#x9;&#x9;to proceed down the &lt;code>LoginModule&lt;/code> list.&#xA; *&#xA; *      2) Requisite    - The &lt;code>LoginModule&lt;/code> is required to succeed.&#xA; *&#x9;&#x9;&#x9;If it succeeds, authentication continues down the&#xA; *&#x9;&#x9;&#x9;&lt;code>LoginModule&lt;/code> list.  If it fails,&#xA; *&#x9;&#x9;&#x9;control immediately returns to the application&#xA; *&#x9;&#x9;&#x9;(authentication does not proceed down the&#xA; *&#x9;&#x9;&#x9;&lt;code>LoginModule&lt;/code> list).&#xA; *&#xA; *      3) Sufficient   - The &lt;code>LoginModule&lt;/code> is not required to&#xA; *&#x9;&#x9;&#x9;succeed.  If it does succeed, control immediately&#xA; *&#x9;&#x9;&#x9;returns to the application (authentication does not&#xA; *&#x9;&#x9;&#x9;proceed down the &lt;code>LoginModule&lt;/code> list).&#xA; *&#x9;&#x9;&#x9;If it fails, authentication continues down the&#xA; *&#x9;&#x9;&#x9;&lt;code>LoginModule&lt;/code> list.&#xA; *&#xA; *      4) Optional     - The &lt;code>LoginModule&lt;/code> is not required to&#xA; *&#x9;&#x9;&#x9;succeed.  If it succeeds or fails,&#xA; *&#x9;&#x9;&#x9;authentication still continues to proceed down the&#xA; *&#x9;&#x9;&#x9;&lt;code>LoginModule&lt;/code> list.&#xA; * &lt;/pre>&#xA; *&#xA; * &lt;p> The overall authentication succeeds only if all &lt;i>Required&lt;/i> and&#xA; * &lt;i>Requisite&lt;/i> LoginModules succeed.  If a &lt;i>Sufficient&lt;/i>&#xA; * &lt;code>LoginModule&lt;/code> is configured and succeeds,&#xA; * then only the &lt;i>Required&lt;/i> and &lt;i>Requisite&lt;/i> LoginModules prior to &#xA; * that &lt;i>Sufficient&lt;/i> &lt;code>LoginModule&lt;/code> need to have succeeded for&#xA; * the overall authentication to succeed. If no &lt;i>Required&lt;/i> or&#xA; * &lt;i>Requisite&lt;/i> LoginModules are configured for an application,&#xA; * then at least one &lt;i>Sufficient&lt;/i> or &lt;i>Optional&lt;/i>&#xA; * &lt;code>LoginModule&lt;/code> must succeed.&#xA; *&#xA; * &lt;p> &lt;i>ModuleOptions&lt;/i> is a space separated list of&#xA; * &lt;code>LoginModule&lt;/code>-specific values which are passed directly to&#xA; * the underlying LoginModules.  Options are defined by the&#xA; * &lt;code>LoginModule&lt;/code> itself, and control the behavior within it.&#xA; * For example, a &lt;code>LoginModule&lt;/code> may define options to support&#xA; * debugging/testing capabilities.  The correct way to specify options in the&#xA; * &lt;code>Configuration&lt;/code> is by using the following key-value pairing:&#xA; * &lt;i>debug=&quot;true&quot;&lt;/i>.  The key and value should be separated by an&#xA; * 'equals' symbol, and the value should be surrounded by double quotes.&#xA; * If a String in the form, ${system.property}, occurs in the value,&#xA; * it will be expanded to the value of the system property.&#xA; * Note that there is no limit to the number of&#xA; * options a &lt;code>LoginModule&lt;/code> may define.&#xA; *&#xA; * &lt;p> The following represents an example &lt;code>Configuration&lt;/code> entry&#xA; * based on the syntax above:&#xA; *&#xA; * &lt;pre>&#xA; * Login {&#xA; *   com.sun.security.auth.module.UnixLoginModule required;&#xA; *   com.sun.security.auth.module.Krb5LoginModule optional&#xA; *                   useTicketCache=&quot;true&quot;&#xA; *                   ticketCache=&quot;${user.home}${/}tickets&quot;;&#xA; * };&#xA; * &lt;/pre>&#xA; *&#xA; * &lt;p> This &lt;code>Configuration&lt;/code> specifies that an application named,&#xA; * &quot;Login&quot;, requires users to first authenticate to the&#xA; * &lt;i>com.sun.security.auth.module.UnixLoginModule&lt;/i>, which is&#xA; * required to succeed.  Even if the &lt;i>UnixLoginModule&lt;/i>&#xA; * authentication fails, the&#xA; * &lt;i>com.sun.security.auth.module.Krb5LoginModule&lt;/i>&#xA; * still gets invoked.  This helps hide the source of failure.&#xA; * Since the &lt;i>Krb5LoginModule&lt;/i> is &lt;i>Optional&lt;/i>, the overall&#xA; * authentication succeeds only if the &lt;i>UnixLoginModule&lt;/i>&#xA; * (&lt;i>Required&lt;/i>) succeeds.&#xA; *&#xA; * &lt;p> Also note that the LoginModule-specific options,&#xA; * &lt;i>useTicketCache=&quot;true&quot;&lt;/i> and&#xA; * &lt;i>ticketCache=${user.home}${/}tickets&quot;&lt;/i>,&#xA; * are passed to the &lt;i>Krb5LoginModule&lt;/i>.&#xA; * These options instruct the &lt;i>Krb5LoginModule&lt;/i> to&#xA; * use the ticket cache at the specified location.&#xA; * The system properties, &lt;i>user.home&lt;/i> and &lt;i>/&lt;/i>&#xA; * (file.separator), are expanded to their respective values.&#xA; *&#xA; * &lt;p> The default Configuration implementation can be changed by setting the&#xA; * value of the &quot;login.configuration.provider&quot; security property (in the Java&#xA; * security properties file) to the fully qualified name of&#xA; * the desired Configuration implementation class.&#xA; * The Java security properties file is located in the file named&#xA; * &amp;lt;JAVA_HOME&amp;gt;/lib/security/java.security, where &amp;lt;JAVA_HOME&amp;gt;&#xA; * refers to the directory where the JDK was installed.&#xA; *&#xA; * @version 1.57, 12/19/03&#xA; * @see javax.security.auth.login.LoginContext&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
