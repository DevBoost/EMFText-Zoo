<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="SaslClient.java">
  <comments>/*&#xA; * @(#)SaslClient.java&#x9;1.14 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>security</namespaces>
  <namespaces>sasl</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="SaslClient">
    <members xsi:type="members:InterfaceMethod" name="getMechanismName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the IANA-registered mechanism name of this SASL client.&#xA;     * (e.g. &quot;CRAM-MD5&quot;, &quot;GSSAPI&quot;).&#xA;     * @return A non-null string representing the IANA-registered mechanism name.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hasInitialResponse">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines whether this mechanism has an optional initial response.&#xA;     * If true, caller should call &lt;tt>evaluateChallenge()&lt;/tt> with an&#xA;     * empty array to get the initial response.&#xA;     *&#xA;     * @return true if this mechanism has an initial response.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="evaluateChallenge">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="challenge">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Evaluates the challenge data and generates a response.&#xA;     * If a challenge is received from the server during the authentication &#xA;     * process, this method is called to prepare an appropriate next &#xA;     * response to submit to the server.&#xA;     *&#xA;     * @param challenge The non-null challenge sent from the server.&#xA;     * The challenge array may have zero length. &#xA;     *&#xA;     * @return The possibly null reponse to send to the server.&#xA;     * It is null if the challenge accompanied a &quot;SUCCESS&quot; status and the challenge&#xA;     * only contains data for the client to update its state and no response&#xA;     * needs to be sent to the server. The response is a zero-length byte &#xA;     * array if the client is to send a response with no data. &#xA;     * @exception SaslException If an error occurred while processing&#xA;     * the challenge or generating a response.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isComplete">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Determines whether the authentication exchange has completed.&#xA;      * This method may be called at any time, but typically, it&#xA;      * will not be called until the caller has received indication&#xA;      * from the server&#xA;      * (in a protocol-specific manner) that the exchange has completed. &#xA;      *&#xA;      * @return true if the authentication exchange has completed; false otherwise.&#xA;      */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="unwrap">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="incoming">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Unwraps a byte array received from the server.&#xA;     * This method can be called only after the authentication exchange has&#xA;     * completed (i.e., when &lt;tt>isComplete()&lt;/tt> returns true) and only if&#xA;     * the authentication exchange has negotiated integrity and/or privacy &#xA;     * as the quality of protection; otherwise, an &#xA;     * &lt;tt>IllegalStateException&lt;/tt> is thrown.&#xA;     *&lt;p>&#xA;     * &lt;tt>incoming&lt;/tt> is the contents of the SASL buffer as defined in RFC 2222&#xA;     * without the leading four octet field that represents the length.&#xA;     * &lt;tt>offset&lt;/tt> and &lt;tt>len&lt;/tt> specify the portion of &lt;tt>incoming&lt;/tt>&#xA;     * to use.&#xA;     *&#xA;     * @param incoming A non-null byte array containing the encoded bytes&#xA;     * &#x9;&#x9;      from the server.&#xA;     * @param offset The starting position at &lt;tt>incoming&lt;/tt> of the bytes to use.&#xA;     * @param len The number of bytes from &lt;tt>incoming&lt;/tt> to use.&#xA;     * @return A non-null byte array containing the decoded bytes.&#xA;     * @exception SaslException if &lt;tt>incoming&lt;/tt> cannot be successfully &#xA;     * unwrapped.&#xA;     * @exception IllegalStateException if the authentication exchange has &#xA;     * not completed, or  if the negotiated quality of protection &#xA;     * has neither integrity nor privacy.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="wrap">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="outgoing">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Wraps a byte array to be sent to the server.&#xA;     * This method can be called only after the authentication exchange has&#xA;     * completed (i.e., when &lt;tt>isComplete()&lt;/tt> returns true) and only if&#xA;     * the authentication exchange has negotiated integrity and/or privacy &#xA;     * as the quality of protection; otherwise, an &#xA;     * &lt;tt>IllegalStateException&lt;/tt> is thrown.&#xA;     *&lt;p>&#xA;     * The result of this method will make up the contents of the SASL buffer &#xA;     * as defined in RFC 2222 without the leading four octet field that &#xA;     * represents the length.&#xA;     * &lt;tt>offset&lt;/tt> and &lt;tt>len&lt;/tt> specify the portion of &lt;tt>outgoing&lt;/tt>&#xA;     * to use.&#xA;     *&#xA;     * @param outgoing A non-null byte array containing the bytes to encode.&#xA;     * @param offset The starting position at &lt;tt>outgoing&lt;/tt> of the bytes to use.&#xA;     * @param len The number of bytes from &lt;tt>outgoing&lt;/tt> to use.&#xA;     * @return A non-null byte array containing the encoded bytes.&#xA;     * @exception SaslException if &lt;tt>outgoing&lt;/tt> cannot be successfully &#xA;     * wrapped.&#xA;     * @exception IllegalStateException if the authentication exchange has &#xA;     * not completed, or if the negotiated quality of protection &#xA;     * has neither integrity nor privacy.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNegotiatedProperty">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="propName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the negotiated property.&#xA;     * This method can be called only after the authentication exchange has&#xA;     * completed (i.e., when &lt;tt>isComplete()&lt;/tt> returns true); otherwise, an&#xA;     * &lt;tt>IllegalStateException&lt;/tt> is thrown.&#xA;     * &#xA;     * @param propName The non-null property name.&#xA;     * @return The value of the negotiated property. If null, the property was&#xA;     * not negotiated or is not applicable to this mechanism.&#xA;     * @exception IllegalStateException if this authentication exchange &#xA;     * has not completed&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="dispose">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Disposes of any system resources or security-sensitive information&#xA;      * the SaslClient might be using. Invoking this method invalidates&#xA;      * the SaslClient instance. This method is idempotent.&#xA;      * @throws SaslException If a problem was encountered while disposing&#xA;      * the resources.&#xA;      */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Performs SASL authentication as a client.&#xA; *&lt;p>&#xA; * A protocol library such as one for LDAP gets an instance of this&#xA; * class in order to perform authentication defined by a specific SASL&#xA; * mechanism. Invoking methods on the &lt;tt>SaslClient&lt;/tt> instance&#xA; * process challenges and create responses according to the SASL&#xA; * mechanism implemented by the &lt;tt>SaslClient&lt;/tt>.&#xA; * As the authentication proceeds, the instance&#xA; * encapsulates the state of a SASL client's authentication exchange. &#xA; *&lt;p>&#xA; * Here's an example of how an LDAP library might use a &lt;tt>SaslClient&lt;/tt>.&#xA; * It first gets an instance of a &lt;tt>SaslClient&lt;/tt>:&#xA; *&lt;blockquote>&lt;pre>&#xA; * SaslClient sc = Sasl.createSaslClient(mechanisms,&#xA; *     authorizationId, protocol, serverName, props, callbackHandler);&#xA; *&lt;/pre>&lt;/blockquote>&#xA; * It can then proceed to use the client for authentication.&#xA; * For example, an LDAP library might use the client as follows:&#xA; *&lt;blockquote>&lt;pre>&#xA; * // Get initial response and send to server&#xA; * byte[] response = (sc.hasInitialResponse() ? sc.evaluateChallenge(new byte[0]) :&#xA; *     null);&#xA; * LdapResult res = ldap.sendBindRequest(dn, sc.getName(), response);&#xA; * while (!sc.isComplete() &amp;&amp; &#xA; *     (res.status == SASL_BIND_IN_PROGRESS || res.status == SUCCESS)) {&#xA; *     response = sc.evaluateChallenge(res.getBytes());&#xA; *     if (res.status == SUCCESS) {&#xA; *         // we're done; don't expect to send another BIND&#xA; *         if (response != null) {&#xA; * &#x9;       throw new SaslException(&#xA; * &#x9;           &quot;Protocol error: attempting to send response after completion&quot;);&#xA; * &#x9;   }&#xA; *         break;&#xA; *     }&#xA; *     res = ldap.sendBindRequest(dn, sc.getName(), response);&#xA; * }&#xA; * if (sc.isComplete() &amp;&amp; res.status == SUCCESS) {&#xA; *    String qop = (String) sc.getNegotiatedProperty(Sasl.QOP);&#xA; *    if (qop != null &#xA; *        &amp;&amp; (qop.equalsIgnoreCase(&quot;auth-int&quot;) &#xA; *            || qop.equalsIgnoreCase(&quot;auth-conf&quot;))) {&#xA; *&#xA; *      // Use SaslClient.wrap() and SaslClient.unwrap() for future&#xA; *      // communication with server&#xA; *&#x9;ldap.in = new SecureInputStream(sc, ldap.in);&#xA; *&#x9;ldap.out = new SecureOutputStream(sc, ldap.out);&#xA; *    }&#xA; * }&#xA; *&lt;/pre>&lt;/blockquote>&#xA; *&#xA; * If the mechanism has an initial response, the library invokes&#xA; * &lt;tt>evaluateChallenge()&lt;/tt> with an empty&#xA; * challenge and to get initial response.&#xA; * Protocols such as IMAP4, which do not include an initial response with&#xA; * their first authentication command to the server, initiates the&#xA; * authentication without first calling &lt;tt>hasInitialResponse()&lt;/tt> &#xA; * or &lt;tt>evaluateChallenge()&lt;/tt>.&#xA; * When the server responds to the command, it sends an initial challenge.&#xA; * For a SASL mechanism in which the client sends data first, the server should&#xA; * have issued a challenge with no data. This will then result in a call&#xA; * (on the client) to &lt;tt>evaluateChallenge()&lt;/tt> with an empty challenge.&#xA; *&#xA; * @since 1.5&#xA; *&#xA; * @see Sasl&#xA; * @see SaslClientFactory&#xA; *&#xA; * @author Rosanna Lee&#xA; * @author Rob Weltman&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
