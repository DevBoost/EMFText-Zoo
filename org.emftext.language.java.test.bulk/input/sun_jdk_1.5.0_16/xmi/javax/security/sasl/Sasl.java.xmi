<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../java.ecore#/17" name="Sasl.java">
  <comments>/*&#xA; * @(#)Sasl.java&#x9;1.21 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>security</namespaces>
  <namespaces>sasl</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>security</namespaces>
    <namespaces>auth</namespaces>
    <namespaces>callback</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../auth/callback/CallbackHandler.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Iterator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Set.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/HashSet.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Collections.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/security/Provider.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/security/Security.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Sasl">
    <members xsi:type="members:Constructor" name="Sasl">
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Cannot create one of these</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="QOP">
      <initialValue xsi:type="references:StringReference" value="javax.security.sasl.qop"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The name of a property that specifies the quality-of-protection to use.&#xA;     * The property contains a comma-separated, ordered list&#xA;     * of quality-of-protection values that the&#xA;     * client or server is willing to support.  A qop value is one of&#xA;     * &lt;ul>&#xA;     * &lt;li>&lt;tt>&quot;auth&quot;&lt;/tt> - authentication only&lt;/li>&#xA;     * &lt;li>&lt;tt>&quot;auth-int&quot;&lt;/tt> - authentication plus integrity protection&lt;/li>&#xA;     * &lt;li>&lt;tt>&quot;auth-conf&quot;&lt;/tt> - authentication plus integrity and confidentiality&#xA;     * protection&lt;/li>&#xA;     * &lt;/ul>&#xA;     *&#xA;     * The order of the list specifies the preference order of the client or&#xA;     * server. If this property is absent, the default qop is &lt;tt>&quot;auth&quot;&lt;/tt>.&#xA;     * The value of this constant is &lt;tt>&quot;javax.security.sasl.qop&quot;&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="STRENGTH">
      <initialValue xsi:type="references:StringReference" value="javax.security.sasl.strength"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The name of a property that specifies the cipher strength to use.&#xA;     * The property contains a comma-separated, ordered list&#xA;     * of cipher strength values that&#xA;     * the client or server is willing to support. A strength value is one of&#xA;     * &lt;ul>&#xA;     * &lt;li>&lt;tt>&quot;low&quot;&lt;/tt>&lt;/li>&#xA;     * &lt;li>&lt;tt>&quot;medium&quot;&lt;/tt>&lt;/li>&#xA;     * &lt;li>&lt;tt>&quot;high&quot;&lt;/tt>&lt;/li>&#xA;     * &lt;/ul>&#xA;     * The order of the list specifies the preference order of the client or&#xA;     * server.  An implementation should allow configuration of the meaning&#xA;     * of these values.  An application may use the Java Cryptography&#xA;     * Extension (JCE) with JCE-aware mechanisms to control the selection of&#xA;     *cipher suites that match the strength values.&#xA;     * &lt;BR>&#xA;     * If this property is absent, the default strength is &#xA;     * &lt;tt>&quot;high,medium,low&quot;&lt;/tt>.&#xA;     * The value of this constant is &lt;tt>&quot;javax.security.sasl.strength&quot;&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SERVER_AUTH">
      <initialValue xsi:type="references:StringReference" value="javax.security.sasl.server.authentication"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The name of a property that specifies whether the&#xA;     * server must authenticate to the client. The property contains &#xA;     * &lt;tt>&quot;true&quot;&lt;/tt> if the server must&#xA;     * authenticate the to client; &lt;tt>&quot;false&quot;&lt;/tt> otherwise.&#xA;     * The default is &lt;tt>&quot;false&quot;&lt;/tt>.&#xA;     * &lt;br>The value of this constant is&#xA;     * &lt;tt>&quot;javax.security.sasl.server.authentication&quot;&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MAX_BUFFER">
      <initialValue xsi:type="references:StringReference" value="javax.security.sasl.maxbuffer"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The name of a property that specifies the maximum size of the receive&#xA;     * buffer in bytes of &lt;tt>SaslClient&lt;/tt>/&lt;tt>SaslServer&lt;/tt>.&#xA;     * The property contains the string representation of an integer.&#xA;     * &lt;br>If this property is absent, the default size&#xA;     * is defined by the mechanism.&#xA;     * &lt;br>The value of this constant is &lt;tt>&quot;javax.security.sasl.maxbuffer&quot;&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="RAW_SEND_SIZE">
      <initialValue xsi:type="references:StringReference" value="javax.security.sasl.rawsendsize"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The name of a property that specifies the maximum size of the raw send&#xA;     * buffer in bytes of &lt;tt>SaslClient&lt;/tt>/&lt;tt>SaslServer&lt;/tt>.&#xA;     * The property contains the string representation of an integer.&#xA;     * The value of this property is negotiated between the client and server&#xA;     * during the authentication exchange.&#xA;     * &lt;br>The value of this constant is &lt;tt>&quot;javax.security.sasl.rawsendsize&quot;&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="REUSE">
      <initialValue xsi:type="references:StringReference" value="javax.security.sasl.reuse"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The name of a property that specifies whether to reuse previously&#xA;     * authenticated session information. The property contains &quot;true&quot; if the&#xA;     * mechanism implementation may attempt to reuse previously authenticated&#xA;     * session information; it contains &quot;false&quot; if the implementation must&#xA;     * not reuse previously authenticated session information.  A setting of&#xA;     * &quot;true&quot; serves only as a hint: it does not necessarily entail actual&#xA;     * reuse because reuse might not be possible due to a number of reasons,&#xA;     * including, but not limited to, lack of mechanism support for reuse,&#xA;     * expiration of reusable information, and the peer's refusal to support&#xA;     * reuse.&#xA;     *&#xA;     * The property's default value is &quot;false&quot;.  The value of this constant&#xA;     * is &quot;javax.security.sasl.reuse&quot;.&#xA;     *&#xA;     * Note that all other parameters and properties required to create a&#xA;     * SASL client/server instance must be provided regardless of whether&#xA;     * this property has been supplied. That is, you cannot supply any less&#xA;     * information in anticipation of reuse.&#xA;     * &#xA;     * Mechanism implementations that support reuse might allow customization&#xA;     * of its implementation, for factors such as cache size, timeouts, and&#xA;     * criteria for reuseability. Such customizations are&#xA;     * implementation-dependent.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="POLICY_NOPLAINTEXT">
      <initialValue xsi:type="references:StringReference" value="javax.security.sasl.policy.noplaintext"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The name of a property that specifies&#xA;     * whether mechanisms susceptible to simple plain passive attacks (e.g.,&#xA;     * &quot;PLAIN&quot;) are not permitted. The property&#xA;     * contains &lt;tt>&quot;true&quot;&lt;/tt> if such mechanisms are not permitted;&#xA;     * &lt;tt>&quot;false&quot;&lt;/tt> if such mechanisms are permitted.&#xA;     * The default is &lt;tt>&quot;false&quot;&lt;/tt>.&#xA;     * &lt;br>The value of this constant is &#xA;     * &lt;tt>&quot;javax.security.sasl.policy.noplaintext&quot;&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="POLICY_NOACTIVE">
      <initialValue xsi:type="references:StringReference" value="javax.security.sasl.policy.noactive"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The name of a property that specifies whether&#xA;     * mechanisms susceptible to active (non-dictionary) attacks&#xA;     * are not permitted.&#xA;     * The property contains &lt;tt>&quot;true&quot;&lt;/tt> &#xA;     * if mechanisms susceptible to active attacks&#xA;     * are not permitted; &lt;tt>&quot;false&quot;&lt;/tt> if such mechanisms are permitted.&#xA;     * The default is &lt;tt>&quot;false&quot;&lt;/tt>.&#xA;     * &lt;br>The value of this constant is &#xA;     * &lt;tt>&quot;javax.security.sasl.policy.noactive&quot;&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="POLICY_NODICTIONARY">
      <initialValue xsi:type="references:StringReference" value="javax.security.sasl.policy.nodictionary"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The name of a property that specifies whether&#xA;     * mechanisms susceptible to passive dictionary attacks are not permitted.&#xA;     * The property contains &lt;tt>&quot;true&quot;&lt;/tt>&#xA;     * if mechanisms susceptible to dictionary attacks are not permitted;&#xA;     * &lt;tt>&quot;false&quot;&lt;/tt> if such mechanisms are permitted.&#xA;     * The default is &lt;tt>&quot;false&quot;&lt;/tt>.&#xA;     *&lt;br>&#xA;     * The value of this constant is &#xA;     * &lt;tt>&quot;javax.security.sasl.policy.nodictionary&quot;&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="POLICY_NOANONYMOUS">
      <initialValue xsi:type="references:StringReference" value="javax.security.sasl.policy.noanonymous"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The name of a property that specifies whether mechanisms that accept&#xA;     * anonymous login are not permitted. The property contains &lt;tt>&quot;true&quot;&lt;/tt> &#xA;     * if mechanisms that accept anonymous login are not permitted; &#xA;     * &lt;tt>&quot;false&quot;&lt;/tt>&#xA;     * if such mechanisms are permitted. The default is &lt;tt>&quot;false&quot;&lt;/tt>.&#xA;     *&lt;br>&#xA;     * The value of this constant is &#xA;     * &lt;tt>&quot;javax.security.sasl.policy.noanonymous&quot;&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="POLICY_FORWARD_SECRECY">
      <initialValue xsi:type="references:StringReference" value="javax.security.sasl.policy.forward"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;      * The name of a property that specifies whether mechanisms that implement&#xA;      * forward secrecy between sessions are required. Forward secrecy&#xA;      * means that breaking into one session will not automatically&#xA;      * provide information for breaking into future sessions. &#xA;      * The property&#xA;      * contains &lt;tt>&quot;true&quot;&lt;/tt> if mechanisms that implement forward secrecy &#xA;      * between sessions are required; &lt;tt>&quot;false&quot;&lt;/tt> if such mechanisms &#xA;      * are not required. The default is &lt;tt>&quot;false&quot;&lt;/tt>.&#xA;      *&lt;br>&#xA;      * The value of this constant is &#xA;      * &lt;tt>&quot;javax.security.sasl.policy.forward&quot;&lt;/tt>.&#xA;      */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="POLICY_PASS_CREDENTIALS">
      <initialValue xsi:type="references:StringReference" value="javax.security.sasl.policy.credentials"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The name of a property that specifies whether&#xA;     * mechanisms that pass client credentials are required. The property&#xA;     * contains &lt;tt>&quot;true&quot;&lt;/tt> if mechanisms that pass&#xA;     * client credentials are required; &lt;tt>&quot;false&quot;&lt;/tt>&#xA;     * if such mechanisms are not required. The default is &lt;tt>&quot;false&quot;&lt;/tt>.&#xA;     *&lt;br>&#xA;     * The value of this constant is &#xA;     * &lt;tt>&quot;javax.security.sasl.policy.credentials&quot;&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="createSaslClient">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="SaslClient.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mechanisms">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="authorizationId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="protocol">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="serverName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="props">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cbh">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../auth/callback/CallbackHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a &lt;tt>SaslClient&lt;/tt> using the parameters supplied.&#xA;     *&#xA;     * This method uses the &#xA;&lt;a href=&quot;http://java.sun.com/j2se/1.4/docs/guide/security/CryptoSpec.html#Provider&quot;>JCA Security Provider Framework&lt;/a>, described in the &#xA;     * &quot;Java Cryptography Architecture API Specification &amp; Reference&quot;, for&#xA;     * locating and selecting a &lt;tt>SaslClient&lt;/tt> implementation.&#xA;     *&#xA;     * First, it &#xA;     * obtains an ordered list of &lt;tt>SaslClientFactory&lt;/tt> instances from&#xA;     * the registered security providers for the &quot;SaslClientFactory&quot; service&#xA;     * and the specified SASL mechanism(s). It then invokes&#xA;     * &lt;tt>createSaslClient()&lt;/tt> on each factory instance on the list&#xA;     * until one produces a non-null &lt;tt>SaslClient&lt;/tt> instance. It returns&#xA;     * the non-null &lt;tt>SaslClient&lt;/tt> instance, or null if the search fails&#xA;     * to produce a non-null &lt;tt>SaslClient&lt;/tt> instance.&#xA;     *&lt;p>&#xA;     * A security provider for SaslClientFactory registers with the&#xA;     * JCA Security Provider Framework keys of the form &lt;br>&#xA;     * &lt;tt>SaslClientFactory.&lt;em>mechanism_name&lt;/em>&lt;/tt>&#xA;     * &lt;br>&#xA;     * and values that are class names of implementations of &#xA;     * &lt;tt>javax.security.sasl.SaslClientFactory&lt;/tt>.&#xA;     *&#xA;     * For example, a provider that contains a factory class,&#xA;     * &lt;tt>com.wiz.sasl.digest.ClientFactory&lt;/tt>, that supports the&#xA;     * &quot;DIGEST-MD5&quot; mechanism would register the following entry with the JCA:&#xA;     * &lt;tt>SaslClientFactory.DIGEST-MD5 com.wiz.sasl.digest.ClientFactory&lt;/tt>&#xA;     *&lt;p>&#xA;     * See the&#xA;     * &quot;Java Cryptography Architecture API Specification &amp; Reference&quot; &#xA;     * for information about how to install and configure security service&#xA;     *  providers.&#xA;     *&#xA;     * @param mechanisms The non-null list of mechanism names to try. Each is the&#xA;     * IANA-registered name of a SASL mechanism. (e.g. &quot;GSSAPI&quot;, &quot;CRAM-MD5&quot;).&#xA;     * @param authorizationId The possibly null protocol-dependent &#xA;     * identification to be used for authorization.&#xA;     * If null or empty, the server derives an authorization &#xA;     * ID from the client's authentication credentials.&#xA;     * When the SASL authentication completes successfully, &#xA;     * the specified entity is granted access. &#xA;     *&#xA;     * @param protocol The non-null string name of the protocol for which&#xA;     * the authentication is being performed (e.g., &quot;ldap&quot;).&#xA;     *&#xA;     * @param serverName The non-null fully-qualified host name of the server&#xA;     * to authenticate to.&#xA;     *&#xA;     * @param props The possibly null set of properties used to&#xA;     * select the SASL mechanism and to configure the authentication&#xA;     * exchange of the selected mechanism.&#xA;     * For example, if &lt;tt>props&lt;/tt> contains the &#xA;     * &lt;code>Sasl.POLICY_NOPLAINTEXT&lt;/code> property with the value &#xA;     * &lt;tt>&quot;true&quot;&lt;/tt>, then the selected&#xA;     * SASL mechanism must not be susceptible to simple plain passive attacks.&#xA;     * In addition to the standard properties declared in this class, &#xA;     * other, possibly mechanism-specific, properties can be included. &#xA;     * Properties not relevant to the selected mechanism are ignored.&#xA;     *&#xA;     * @param cbh The possibly null callback handler to used by the SASL&#xA;     * mechanisms to get further information from the application/library&#xA;     * to complete the authentication. For example, a SASL mechanism might&#xA;     * require the authentication ID, password and realm from the caller.&#xA;     * The authentication ID is requested by using a &lt;tt>NameCallback&lt;/tt>.&#xA;     * The password is requested by using a &lt;tt>PasswordCallback&lt;/tt>.&#xA;     * The realm is requested by using a &lt;tt>RealmChoiceCallback&lt;/tt> if there is a list&#xA;     * of realms to choose from, and by using a &lt;tt>RealmCallback&lt;/tt> if&#xA;     * the realm must be entered. &#xA;     *&#xA;     *@return A possibly null &lt;tt>SaslClient&lt;/tt> created using the parameters&#xA;     * supplied. If null, cannot find a &lt;tt>SaslClientFactory&lt;/tt>&#xA;     * that will produce one.&#xA;     *@exception SaslException If cannot create a &lt;tt>SaslClient&lt;/tt> because&#xA;     * of an error.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="mech">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="SaslClient.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="fac">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="SaslClientFactory.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="className">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="mechName">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/NullPointerException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:StringReference" value="Mechanism name cannot be null"/>
                </throwable>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.4/@init"/>
                    </arraySelectors>
                  </value>
                </expression>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Continue"/>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.3/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </condition>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="mechFilter">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="SaslClientFactory."/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.3/@variable"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="provs">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/security/Provider.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/security/Security.class.xmi#//@classifiers.0/@members.15"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.4/@statement/@statements.1/@variable"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../java/security/Security.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.2/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.4/@statement/@statements.2/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/util/Properties.class.xmi#//@classifiers.0/@members.15"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.4/@statement/@statements.1/@variable"/>
                    </next>
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.4/@statement/@statements.3/@init"/>
                    </arraySelectors>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Continue">
                    <comments>// Case is ignored</comments>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.2/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="SaslClientFactory.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.4/@statement/@statements.2/@variable">
                        <arraySelectors>
                          <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.4/@statement/@statements.3/@init"/>
                        </arraySelectors>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.2/@variable"/>
                    </child>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="SaslClientFactory.class.xmi#//@classifiers.0/@members.0"/>
                          <arguments xsi:type="arrays:ArrayInstantiationByValues">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <arrayDimensionsBefore/>
                            <arrayInitializer>
                              <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
                                <arraySelectors>
                                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.4/@init"/>
                                </arraySelectors>
                              </initialValues>
                            </arrayInitializer>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.2"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.3"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.4"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.5"/>
                        </next>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable"/>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.4/@statement/@statements.2/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.4/@statement/@statements.3/@init"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.4/@statement/@statements.2/@variable">
                  <next xsi:type="references:IdentifierReference"/>
                </children>
                <relationOperators xsi:type="operators:LessThan"/>
              </children>
            </condition>
            <init xsi:type="variables:LocalVariable" name="j">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.4/@statement/@statements.3/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.4/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.4/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="loadFactory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/security/Provider.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="className">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="cl">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <comments>/*  &#xA;&#x9;     * Load the implementation class with the same class loader&#xA;&#x9;     * that was used to load the provider.&#xA;&#x9;     * In order to get the class loader of a class, the&#xA;&#x9;     * caller's class loader must be the same as or an ancestor of&#xA;&#x9;     * the class loader being returned. Otherwise, the caller must&#xA;&#x9;     * have &quot;getClassLoader&quot; permission, or a SecurityException&#xA;&#x9;     * will be thrown.&#xA;&#x9;     */</comments>
                <target xsi:type="classifiers:Class" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.46"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="implClass">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@statements.1/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
                <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@statements.0/@variable"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.35"/>
            </next>
          </returnValue>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Cannot load class "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@catcheBlocks.0/@parameter"/>
            </throwable>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Cannot instantiate class "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@catcheBlocks.1/@parameter"/>
            </throwable>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/InstantiationException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Cannot access class "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@catcheBlocks.2/@parameter"/>
            </throwable>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/IllegalAccessException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Cannot access class "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@catcheBlocks.3/@parameter"/>
            </throwable>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/SecurityException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createSaslServer">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="SaslServer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mechanism">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="protocol">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="serverName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="props">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Interface" href="../../../java/util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cbh">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>javax</namespaces>
          <namespaces>security</namespaces>
          <namespaces>auth</namespaces>
          <namespaces>callback</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../auth/callback/CallbackHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a &lt;tt>SaslServer&lt;/tt> for the specified mechanism. &#xA;     *&#xA;     * This method uses the &#xA;&lt;a href=&quot;http://java.sun.com/j2se/1.4/docs/guide/security/CryptoSpec.html#Provider&quot;>JCA Security Provider Framework&lt;/a>, &#xA;     * described in the &#xA;     * &quot;Java Cryptography Architecture API Specification &amp; Reference&quot;, for&#xA;     * locating and selecting a &lt;tt>SaslServer&lt;/tt> implementation.&#xA;     *&#xA;     * First, it &#xA;     * obtains an ordered list of &lt;tt>SaslServerFactory&lt;/tt> instances from&#xA;     * the registered security providers for the &quot;SaslServerFactory&quot; service&#xA;     * and the specified mechanism. It then invokes&#xA;     * &lt;tt>createSaslServer()&lt;/tt> on each factory instance on the list&#xA;     * until one produces a non-null &lt;tt>SaslServer&lt;/tt> instance. It returns&#xA;     * the non-null &lt;tt>SaslServer&lt;/tt> instance, or null if the search fails&#xA;     * to produce a non-null &lt;tt>SaslServer&lt;/tt> instance.&#xA;     *&lt;p>&#xA;     * A security provider for SaslServerFactory registers with the&#xA;     * JCA Security Provider Framework keys of the form &lt;br>&#xA;     * &lt;tt>SaslServerFactory.&lt;em>mechanism_name&lt;/em>&lt;/tt>&#xA;     * &lt;br>&#xA;     * and values that are class names of implementations of &#xA;     * &lt;tt>javax.security.sasl.SaslServerFactory&lt;/tt>.&#xA;     *&#xA;     * For example, a provider that contains a factory class,&#xA;     * &lt;tt>com.wiz.sasl.digest.ServerFactory&lt;/tt>, that supports the&#xA;     * &quot;DIGEST-MD5&quot; mechanism would register the following entry with the JCA:&#xA;     * &lt;tt>SaslServerFactory.DIGEST-MD5  com.wiz.sasl.digest.ServerFactory&lt;/tt>&#xA;     *&lt;p>&#xA;     * See the&#xA;     * &quot;Java Cryptography Architecture API Specification &amp; Reference&quot; &#xA;     * for information about how to install and configure security &#xA;     * service providers.&#xA;     *&#xA;     * @param mechanism The non-null mechanism name. It must be an&#xA;     * IANA-registered name of a SASL mechanism. (e.g. &quot;GSSAPI&quot;, &quot;CRAM-MD5&quot;).&#xA;     * @param protocol The non-null string name of the protocol for which&#xA;     * the authentication is being performed (e.g., &quot;ldap&quot;).&#xA;     * @param serverName The non-null fully qualified host name of the server.&#xA;     * @param props The possibly null set of properties used to&#xA;     * select the SASL mechanism and to configure the authentication&#xA;     * exchange of the selected mechanism.&#xA;     * For example, if &lt;tt>props&lt;/tt> contains the &#xA;     * &lt;code>Sasl.POLICY_NOPLAINTEXT&lt;/code> property with the value &#xA;     * &lt;tt>&quot;true&quot;&lt;/tt>, then the selected&#xA;     * SASL mechanism must not be susceptible to simple plain passive attacks.&#xA;     * In addition to the standard properties declared in this class, &#xA;     * other, possibly mechanism-specific, properties can be included. &#xA;     * Properties not relevant to the selected mechanism are ignored.&#xA;     *&#xA;     * @param cbh The possibly null callback handler to used by the SASL&#xA;     * mechanisms to get further information from the application/library&#xA;     * to complete the authentication. For example, a SASL mechanism might&#xA;     * require the authentication ID, password and realm from the caller.&#xA;     * The authentication ID is requested by using a &lt;tt>NameCallback&lt;/tt>.&#xA;     * The password is requested by using a &lt;tt>PasswordCallback&lt;/tt>.&#xA;     * The realm is requested by using a &lt;tt>RealmChoiceCallback&lt;/tt> if there is a list&#xA;     * of realms to choose from, and by using a &lt;tt>RealmCallback&lt;/tt> if&#xA;     * the realm must be entered. &#xA;     *&#xA;     *@return A possibly null &lt;tt>SaslServer&lt;/tt> created using the parameters&#xA;     * supplied. If null, cannot find a &lt;tt>SaslServerFactory&lt;/tt>&#xA;     * that will produce one.&#xA;     *@exception SaslException If cannot create a &lt;tt>SaslServer&lt;/tt> because&#xA;     * of an error.&#xA;     **/</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="mech">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="SaslServer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="fac">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="SaslServerFactory.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="className">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Mechanism name cannot be null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:NullLiteral"/>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </condition>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="mechFilter">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="SaslServerFactory."/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="provs">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/security/Provider.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/security/Security.class.xmi#//@classifiers.0/@members.15"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.4/@variable"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../java/security/Security.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/util/Properties.class.xmi#//@classifiers.0/@members.15"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.4/@variable"/>
                </next>
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.6/@init"/>
                </arraySelectors>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="Provider does not support "/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.4/@variable"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </throwable>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.2/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="SaslServerFactory.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.6/@init"/>
                    </arraySelectors>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.2/@variable"/>
                </child>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="SaslServerFactory.class.xmi#//@classifiers.0/@members.0"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.2"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.3"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.4"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.1/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.6/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@variable">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
        </condition>
        <init xsi:type="variables:LocalVariable" name="j">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.6/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getSaslClientFactories">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="SaslClientFactory.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets an enumeration of known factories for producing &lt;tt>SaslClient&lt;/tt>.&#xA;     * This method uses the same algorithm for locating factories as&#xA;     * &lt;tt>createSaslClient()&lt;/tt>.&#xA;     * @return A non-null enumeration of known factories for producing&#xA;     * &lt;tt>SaslClient&lt;/tt>.&#xA;     * @see #createSaslClient&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="facs">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../java/util/Set.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
            <arguments xsi:type="references:StringReference" value="SaslClientFactory"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="iter">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../java/util/Iterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../java/util/Set.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </initialValue>
          <annotationsAndModifiers xsi:type="modifiers:Final"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="SaslClientFactory.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <anonymousClass>
            <members xsi:type="members:ClassMethod" name="hasMoreElements">
              <typeReference xsi:type="types:Boolean"/>
              <annotationsAndModifiers xsi:type="modifiers:Public"/>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </returnValue>
              </statements>
            </members>
            <members xsi:type="members:ClassMethod" name="nextElement">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="SaslClientFactory.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <annotationsAndModifiers xsi:type="modifiers:Public"/>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="SaslClientFactory.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </child>
                </returnValue>
              </statements>
            </members>
          </anonymousClass>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getSaslServerFactories">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="SaslServerFactory.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets an enumeration of known factories for producing &lt;tt>SaslServer&lt;/tt>.&#xA;     * This method uses the same algorithm for locating factories as&#xA;     * &lt;tt>createSaslServer()&lt;/tt>.&#xA;     * @return A non-null enumeration of known factories for producing&#xA;     * &lt;tt>SaslServer&lt;/tt>.&#xA;     * @see #createSaslServer&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="facs">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../java/util/Set.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
            <arguments xsi:type="references:StringReference" value="SaslServerFactory"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="iter">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../java/util/Iterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../java/util/Set.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </initialValue>
          <annotationsAndModifiers xsi:type="modifiers:Final"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="SaslServerFactory.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <anonymousClass>
            <members xsi:type="members:ClassMethod" name="hasMoreElements">
              <typeReference xsi:type="types:Boolean"/>
              <annotationsAndModifiers xsi:type="modifiers:Public"/>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </returnValue>
              </statements>
            </members>
            <members xsi:type="members:ClassMethod" name="nextElement">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="SaslServerFactory.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <annotationsAndModifiers xsi:type="modifiers:Public"/>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="SaslServerFactory.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </child>
                </returnValue>
              </statements>
            </members>
          </anonymousClass>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFactories">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/util/Set.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="serviceName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/util/HashSet.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/util/HashSet.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.43"/>
                <arguments xsi:type="references:StringReference" value="."/>
              </next>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="providers">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/security/Provider.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/security/Security.class.xmi#//@classifiers.0/@members.13"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../java/security/Security.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="classes">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/util/HashSet.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/util/HashSet.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="fac">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.3/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/util/HashSet.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <comments>// Check the keys for each provider.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="currentKey">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@statement/@statements.1/@init">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </child>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <comments>// We should skip the currentKey if it contains a </comments>
                    <comments>// whitespace. The reason is: such an entry in the</comments>
                    <comments>// provider property contains attributes for the</comments>
                    <comments>// implementation of an algorithm. We are only interested</comments>
                    <comments>// in entries which lead to the implementation</comments>
                    <comments>// classes.</comments>
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="className">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.2/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../java/util/Properties.class.xmi#//@classifiers.0/@members.15"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@statement/@statements.1/@statement/@statements.0/@variable"/>
                            </next>
                            <arraySelectors>
                              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@init"/>
                            </arraySelectors>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.3/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../java/util/HashSet.class.xmi#//@classifiers.0/@members.12"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@statement/@statements.1/@statement/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                              </next>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:TryBlock">
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="expressions:AssignmentExpression">
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.4/@variable"/>
                                <assignmentOperator xsi:type="operators:Assignment"/>
                                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.2/@variable">
                                    <arraySelectors>
                                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@init"/>
                                    </arraySelectors>
                                  </arguments>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@statement/@statements.1/@statement/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                                </value>
                              </expression>
                            </statements>
                            <statements xsi:type="statements:Condition">
                              <statement xsi:type="statements:Block">
                                <statements xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable">
                                    <next xsi:type="references:MethodCall">
                                      <target xsi:type="members:ClassMethod" href="../../../java/util/HashSet.class.xmi#//@classifiers.0/@members.12"/>
                                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.4/@variable"/>
                                    </next>
                                  </expression>
                                </statements>
                              </statement>
                              <condition xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:NotEqual"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.4/@variable"/>
                                <children xsi:type="literals:NullLiteral"/>
                              </condition>
                            </statements>
                            <catcheBlocks>
                              <parameter name="ignore">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                              </parameter>
                            </catcheBlocks>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Negate"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.3/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../java/util/HashSet.class.xmi#//@classifiers.0/@members.11"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@statement/@statements.1/@statement/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                            </next>
                          </child>
                        </condition>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@statement/@statements.1/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.49"/>
                          <arguments xsi:type="references:StringReference" value=" "/>
                        </next>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@statement/@statements.1/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/String.class.xmi#//@classifiers.0/@members.42"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
                  </next>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@statement/@statements.1/@init">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </condition>
            <init xsi:type="variables:LocalVariable" name="e">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.2/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.20"/>
                </next>
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@init"/>
                </arraySelectors>
              </initialValue>
            </init>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.2/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../java/util/Collections.class.xmi#//@classifiers.0/@members.41"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../java/util/Collections.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A static class for creating SASL clients and servers.&#xA; *&lt;p>&#xA; * This class defines the policy of how to locate, load, and instantiate&#xA; * SASL clients and servers. &#xA; *&lt;p>&#xA; * For example, an application or library gets a SASL client by doing&#xA; * something like:&#xA; *&lt;blockquote>&lt;pre>&#xA; * SaslClient sc = Sasl.createSaslClient(mechanisms,&#xA; *     authorizationId, protocol, serverName, props, callbackHandler);&#xA; *&lt;/pre>&lt;/blockquote>&#xA; * It can then proceed to use the instance to create an authentication connection.&#xA; *&lt;p>&#xA; * Similarly, a server gets a SASL server by using code that looks as follows:&#xA; *&lt;blockquote>&lt;pre>&#xA; * SaslServer ss = Sasl.createSaslServer(mechanism,&#xA; *     protocol, serverName, props, callbackHandler);&#xA; *&lt;/pre>&lt;/blockquote>&#xA; * &#xA; * @since 1.5&#xA; *&#xA; * @author Rosanna Lee&#xA; * @author Rob Weltman&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
