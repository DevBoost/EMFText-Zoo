<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="SaslServer.java">
  <comments>/*&#xA; * @(#)SaslServer.java&#x9;1.13 04/02/03&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>javax</namespaces>
  <namespaces>security</namespaces>
  <namespaces>sasl</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="SaslServer">
    <members xsi:type="members:InterfaceMethod" name="getMechanismName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the IANA-registered mechanism name of this SASL server.&#xA;     * (e.g. &quot;CRAM-MD5&quot;, &quot;GSSAPI&quot;).&#xA;     * @return A non-null string representing the IANA-registered mechanism name.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="evaluateResponse">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="response">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Evaluates the response data and generates a challenge.&#xA;     *&#xA;     * If a response is received from the client during the authentication &#xA;     * process, this method is called to prepare an appropriate next &#xA;     * challenge to submit to the client. The challenge is null if the &#xA;     * authentication has succeeded and no more challenge data is to be sent &#xA;     * to the client. It is non-null if the authentication must be continued &#xA;     * by sending a challenge to the client, or if the authentication has &#xA;     * succeeded but challenge data needs to be processed by the client. &#xA;     * &lt;tt>isComplete()&lt;/tt> should be called &#xA;     * after each call to &lt;tt>evaluateResponse()&lt;/tt>,to determine if any further &#xA;     * response is needed from the client. &#xA;     *&#xA;     * @param response The non-null (but possibly empty) response sent&#xA;     * by the client.&#xA;     *&#xA;     * @return The possibly null challenge to send to the client.&#xA;     * It is null if the authentication has succeeded and there is&#xA;     * no more challenge data to be sent to the client.&#xA;     * @exception SaslException If an error occurred while processing&#xA;     * the response or generating a challenge.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isComplete">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Determines whether the authentication exchange has completed.&#xA;      * This method is typically called after each invocation of &#xA;      * &lt;tt>evaluateResponse()&lt;/tt> to determine whether the &#xA;      * authentication has completed successfully or should be continued. &#xA;      * @return true if the authentication exchange has completed; false otherwise.&#xA;      */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAuthorizationID">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reports the authorization ID in effect for the client of this&#xA;     * session. &#xA;     * This method can only be called if isComplete() returns true. &#xA;     * @return The authorization ID of the client.&#xA;     * @exception IllegalStateException if this authentication session has not completed&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="unwrap">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="incoming">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Unwraps a byte array received from the client.&#xA;     * This method can be called only after the authentication exchange has&#xA;     * completed (i.e., when &lt;tt>isComplete()&lt;/tt> returns true) and only if&#xA;     * the authentication exchange has negotiated integrity and/or privacy &#xA;     * as the quality of protection; otherwise, &#xA;     * an &lt;tt>IllegalStateException&lt;/tt> is thrown.&#xA;     *&lt;p>&#xA;     * &lt;tt>incoming&lt;/tt> is the contents of the SASL buffer as defined in RFC 2222&#xA;     * without the leading four octet field that represents the length.&#xA;     * &lt;tt>offset&lt;/tt> and &lt;tt>len&lt;/tt> specify the portion of &lt;tt>incoming&lt;/tt>&#xA;     * to use.&#xA;     *&#xA;     * @param incoming A non-null byte array containing the encoded bytes&#xA;     * &#x9;&#x9;      from the client.&#xA;     * @param offset The starting position at &lt;tt>incoming&lt;/tt> of the bytes to use.&#xA;     * @param len The number of bytes from &lt;tt>incoming&lt;/tt> to use.&#xA;     * @return A non-null byte array containing the decoded bytes.&#xA;     * @exception SaslException if &lt;tt>incoming&lt;/tt> cannot be successfully &#xA;     * unwrapped.&#xA;     * @exception IllegalStateException if the authentication exchange has &#xA;     * not completed, or if the negotiated quality of protection &#xA;     * has neither integrity nor privacy&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="wrap">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="outgoing">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Wraps a byte array to be sent to the client.&#xA;     * This method can be called only after the authentication exchange has&#xA;     * completed (i.e., when &lt;tt>isComplete()&lt;/tt> returns true) and only if&#xA;     * the authentication exchange has negotiated integrity and/or privacy &#xA;     * as the quality of protection; otherwise, a &lt;tt>SaslException&lt;/tt> is thrown.&#xA;     *&lt;p>&#xA;     * The result of this method&#xA;     * will make up the contents of the SASL buffer as defined in RFC 2222&#xA;     * without the leading four octet field that represents the length.&#xA;     * &lt;tt>offset&lt;/tt> and &lt;tt>len&lt;/tt> specify the portion of &lt;tt>outgoing&lt;/tt>&#xA;     * to use.&#xA;     *&#xA;     * @param outgoing A non-null byte array containing the bytes to encode.&#xA;     * @param offset The starting position at &lt;tt>outgoing&lt;/tt> of the bytes to use.&#xA;     * @param len The number of bytes from &lt;tt>outgoing&lt;/tt> to use.&#xA;     * @return A non-null byte array containing the encoded bytes.&#xA;     * @exception SaslException if &lt;tt>outgoing&lt;/tt> cannot be successfully &#xA;     * wrapped.&#xA;     * @exception IllegalStateException if the authentication exchange has &#xA;     * not completed, or if the negotiated quality of protection has &#xA;     * neither integrity nor privacy.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNegotiatedProperty">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="propName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the negotiated property.&#xA;     * This method can be called only after the authentication exchange has&#xA;     * completed (i.e., when &lt;tt>isComplete()&lt;/tt> returns true); otherwise, an&#xA;     * &lt;tt>IllegalStateException&lt;/tt> is thrown.&#xA;     * &#xA;     * @param propName the property&#xA;     * @return The value of the negotiated property. If null, the property was&#xA;     * not negotiated or is not applicable to this mechanism.&#xA;     * @exception IllegalStateException if this authentication exchange has not completed&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="dispose">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SaslException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Disposes of any system resources or security-sensitive information&#xA;      * the SaslServer might be using. Invoking this method invalidates&#xA;      * the SaslServer instance. This method is idempotent.&#xA;      * @throws SaslException If a problem was encountered while disposing&#xA;      * the resources.&#xA;      */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Performs SASL authentication as a server.&#xA; *&lt;p>&#xA; * A server such an LDAP server gets an instance of this&#xA; * class in order to perform authentication defined by a specific SASL&#xA; * mechanism. Invoking methods on the &lt;tt>SaslServer&lt;/tt> instance&#xA; * generates challenges according to the SASL&#xA; * mechanism implemented by the &lt;tt>SaslServer&lt;/tt>.&#xA; * As the authentication proceeds, the instance&#xA; * encapsulates the state of a SASL server's authentication exchange. &#xA; *&lt;p>&#xA; * Here's an example of how an LDAP server might use a &lt;tt>SaslServer&lt;/tt>.&#xA; * It first gets an instance of a &lt;tt>SaslServer&lt;/tt> for the SASL mechanism&#xA; * requested by the client:&#xA; *&lt;blockquote>&lt;pre>&#xA; * SaslServer ss = Sasl.createSaslServer(mechanism,&#xA; *     &quot;ldap&quot;, myFQDN, props, callbackHandler);&#xA; *&lt;/pre>&lt;/blockquote>&#xA; * It can then proceed to use the server for authentication.&#xA; * For example, suppose the LDAP server received an LDAP BIND request&#xA; * containing the name of the SASL mechanism and an (optional) initial&#xA; * response. It then might use the server as follows:&#xA; *&lt;blockquote>&lt;pre>&#xA; * while (!ss.isComplete()) {&#xA; *     try {&#xA; *         byte[] challenge = ss.evaluateResponse(response);&#xA; *         if (ss.isComplete()) {&#xA; *             status = ldap.sendBindResponse(mechanism, challenge, SUCCESS);&#xA; *         } else {&#xA; *             status = ldap.sendBindResponse(mechanism, challenge, &#xA;&#x9;           SASL_BIND_IN_PROGRESS);&#xA; *             response = ldap.readBindRequest();&#xA; *         }&#xA; *     } catch (SaslException e) {&#xA; * &#x9;    status = ldap.sendErrorResponse(e);&#xA; * &#x9;    break;&#xA; *     }&#xA; * }&#xA; * if (ss.isComplete() &amp;&amp; status == SUCCESS) {&#xA; *    String qop = (String) sc.getNegotiatedProperty(Sasl.QOP);&#xA; *    if (qop != null &#xA; *        &amp;&amp; (qop.equalsIgnoreCase(&quot;auth-int&quot;) &#xA; *            || qop.equalsIgnoreCase(&quot;auth-conf&quot;))) {&#xA; *&#xA; *      // Use SaslServer.wrap() and SaslServer.unwrap() for future&#xA; *      // communication with client&#xA; *&#x9;ldap.in = new SecureInputStream(ss, ldap.in);&#xA; *&#x9;ldap.out = new SecureOutputStream(ss, ldap.out);&#xA; *    }&#xA; * }&#xA; *&lt;/pre>&lt;/blockquote>&#xA; *&#xA; * @since 1.5&#xA; *&#xA; * @see Sasl&#xA; * @see SaslServerFactory&#xA; *&#xA; * @author Rosanna Lee&#xA; * @author Rob Weltman&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
