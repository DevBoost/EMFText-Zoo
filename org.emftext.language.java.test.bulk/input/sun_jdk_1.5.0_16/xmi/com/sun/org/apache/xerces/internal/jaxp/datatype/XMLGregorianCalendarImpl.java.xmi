<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../../../../../java.ecore#/17" name="XMLGregorianCalendarImpl.java">
  <comments>// $Id: XMLGregorianCalendarImpl.java,v 1.11 2004/07/07 06:16:15 jsuttor Exp $</comments>
  <comments>/*&#xA; * @(#)XMLGregorianCalendarImpl.java&#x9;1.4 04/07/26&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xerces</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>jaxp</namespaces>
  <namespaces>datatype</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>math</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>math</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../java/util/TimeZone.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../java/util/SimpleTimeZone.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../java/util/Date.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../java/util/Locale.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/XMLConstants.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>datatype</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>datatype</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/Duration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>datatype</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>namespace</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/namespace/QName.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../util/DatatypeMessageFormatter.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="XMLGregorianCalendarImpl">
    <members xsi:type="members:Field" name="eon">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Eon of this &lt;code>XMLGregorianCalendar&lt;/code>.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="year">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Year of this &lt;code>XMLGregorianCalendar&lt;/code>.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="month">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Month of this &lt;code>XMLGregorianCalendar&lt;/code>.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="day">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Day of this &lt;code>XMLGregorianCalendar&lt;/code>.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="timezone">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Timezone of this &lt;code>XMLGregorianCalendar&lt;/code> in minutes.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="hour">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Hour of this &lt;code>XMLGregorianCalendar&lt;/code>.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="minute">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Minute of this &lt;code>XMLGregorianCalendar&lt;/code>.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="second">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Second of this &lt;code>XMLGregorianCalendar&lt;/code>.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fractionalSecond">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Fractional second of this &lt;code>XMLGregorianCalendar&lt;/code>.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="BILLION">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="1000000000"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Constant to represent a billion.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="PURE_GREGORIAN_CHANGE">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Date.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../../../../../../../../java/lang/Long.class.xmi#//@classifiers.0/@members.0"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </arguments>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Date.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     *   &lt;p>Obtain a pure Gregorian Calendar by calling&#xA;     *   GregorianCalendar.setChange(PURE_GREGORIAN_CHANGE). &lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="YEAR">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Year index for MIN_ and MAX_FIELD_VALUES.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MONTH">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Month index for MIN_ and MAX_FIELD_VALUES.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DAY">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Day index for MIN_ and MAX_FIELD_VALUES.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="HOUR">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Hour index for MIN_ and MAX_FIELD_VALUES.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MINUTE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Minute index for MIN_ and MAX_FIELD_VALUES.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SECOND">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="5"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Second index for MIN_ and MAX_FIELD_VALUES.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MILLISECOND">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Second index for MIN_ and MAX_FIELD_VALUES.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="TIMEZONE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="7"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Timezone index for MIN_ and MAX_FIELD_VALUES&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MIN_FIELD_VALUE">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <comments>//timezone</comments>
          <initialValues xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
          </initialValues>
          <initialValues xsi:type="references:IdentifierReference">
            <comments>//Year field can be smaller than this,</comments>
            <comments>// only constraint on integer value of year. </comments>
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="0">
            <comments>//day of month</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="0">
            <comments>//hour</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="0">
            <comments>//minute</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="0">
            <comments>//second</comments>
          </initialValues>
          <initialValues xsi:type="expressions:MultiplicativeExpression">
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction">
                <comments>//millisecond</comments>
              </operators>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="14"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="60"/>
            <multiplicativeOperators xsi:type="operators:Multiplication"/>
          </initialValues>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsAfter/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Minimum field values indexed by YEAR..TIMEZONE.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MAX_FIELD_VALUE">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <comments>//timezone</comments>
          <initialValues xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
          </initialValues>
          <initialValues xsi:type="references:IdentifierReference">
            <comments>// Year field can be bigger than this, </comments>
            <comments>// only constraint on integer value of year.</comments>
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.11"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="31"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="23">
            <comments>//day of month                         </comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="59">
            <comments>//hour</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="60">
            <comments>//minute</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="999">
            <comments>//second (leap second allows for 60)</comments>
          </initialValues>
          <initialValues xsi:type="expressions:MultiplicativeExpression">
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="14">
              <comments>//millisecond</comments>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="60"/>
            <multiplicativeOperators xsi:type="operators:Multiplication"/>
          </initialValues>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsAfter/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Maximum field values indexed by YEAR..TIMEZONE.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="FIELD_NAME">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="references:StringReference" value="Year"/>
          <initialValues xsi:type="references:StringReference" value="Month"/>
          <initialValues xsi:type="references:StringReference" value="Day"/>
          <initialValues xsi:type="references:StringReference" value="Hour"/>
          <initialValues xsi:type="references:StringReference" value="Minute"/>
          <initialValues xsi:type="references:StringReference" value="Second"/>
          <initialValues xsi:type="references:StringReference" value="Millisecond"/>
          <initialValues xsi:type="references:StringReference" value="Timezone"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsAfter/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * field names indexed by YEAR..TIMEZONE.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Stream Unique Identifier.&lt;/p>&#xA;     * &#xA;     * &lt;p>TODO: Serialization should use the XML string representation as&#xA;     * the serialization format to ensure future compatibility.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="LEAP_YEAR_DEFAULT">
      <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
        <comments>// timezone</comments>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="400"/>
        <arguments xsi:type="references:IdentifierReference">
          <comments>//year</comments>
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.0"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
        </arguments>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1">
          <comments>//month</comments>
        </arguments>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0">
          <comments>// day</comments>
        </arguments>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0">
          <comments>// hour</comments>
        </arguments>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0">
          <comments>// minute</comments>
        </arguments>
        <arguments xsi:type="references:IdentifierReference">
          <comments>// second</comments>
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
        </arguments>
        <arguments xsi:type="references:IdentifierReference">
          <comments>// milliseconds</comments>
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
        </arguments>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Use as a template for default field values when &#xA;     * converting to a {@link GregorianCalendar}, set to a leap &#xA;     * year date of January 1, 0400 at midnight.&lt;/p>&#xA;     * &#xA;     * &lt;p>Fields that are optional for an &lt;code>xsd:dateTime&lt;/code> instances are defaulted to not being set to any value.&#xA;     * &lt;code>XMLGregorianCalendar&lt;/code> fields millisecond, fractional second and timezone return the value indicating&#xA;     * that the field is not set, {@link DatatypeConstants#FIELD_UNDEFINED} for millisecond and timezone&#xA;     * and &lt;code>null&lt;/code> for fractional second.&lt;/p>&#xA;     * &#xA;     * @see #toGregorianCalendar(TimeZone, Locale, XMLGregorianCalendar)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="XMLGregorianCalendarImpl">
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="format">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// compute format string for this lexical representation.</comments>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lexRep">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="NOT_FOUND">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </initialValue>
          <annotationsAndModifiers xsi:type="modifiers:Final"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lexRepLength">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// current parser needs a format string,</comments>
        <comments>// use following heuristics to figure out what xml schema date/time</comments>
        <comments>// datatype this lexical string could represent.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                <comments>// found Date Time separater, must be xsd:DateTime</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="%Y-%M-%DT%h:%m:%s"/>
                <children xsi:type="references:StringReference" value="%z"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.45"/>
              <arguments xsi:type="literals:CharacterLiteral" value="84"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.2/@variable"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                  <comments>// found &quot;:&quot;, must be xsd:Time</comments>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="%h:%m:%s"/>
                  <children xsi:type="references:StringReference" value="%z"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.3/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
              <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                </next>
              </children>
              <children xsi:type="literals:CharacterLiteral" value="58"/>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <comments>// check for GDay || GMonth || GMonthDay</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                        <comments>// GDAY</comments>
                        <comments>// Fix 4971612: invalid SCCS macro substitution in data string</comments>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:StringReference" value="---%D"/>
                        <children xsi:type="references:StringReference" value="%z"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.3/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                    <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.1/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      </next>
                    </children>
                    <children xsi:type="literals:CharacterLiteral" value="45"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                          <comments>// GMonth</comments>
                          <comments>// Fix 4971612: invalid SCCS macro substitution in data string</comments>
                        </child>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:StringReference" value="--%M--%z"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.3/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                      <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                    </children>
                    <children xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.1/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="5"/>
                        </next>
                      </children>
                      <children xsi:type="literals:CharacterLiteral" value="45"/>
                    </children>
                    <children xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.1/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                        </next>
                      </children>
                      <children xsi:type="literals:CharacterLiteral" value="45"/>
                    </children>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                          <comments>// GMonthDay or invalid lexicalRepresentation</comments>
                        </child>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:StringReference" value="--%M-%D"/>
                          <children xsi:type="references:StringReference" value="%z"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </value>
                      </expression>
                    </statements>
                  </elseStatement>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.1/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.42"/>
                <arguments xsi:type="references:StringReference" value="--"/>
              </next>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="countSeparator">
                  <typeReference xsi:type="types:Int">
                    <comments>// check for Date || GYear | GYearMonth</comments>
                  </typeReference>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="timezoneOffset">
                  <typeReference xsi:type="types:Int">
                    <comments>// start at index 1 to skip potential negative sign for year.</comments>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.45"/>
                      <arguments xsi:type="literals:CharacterLiteral" value="58"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.3/@variable">
                        <comments>// found timezone, strip it off for distinguishing</comments>
                        <comments>// between Date, GYear and GYearMonth so possible</comments>
                        <comments>// negative sign in timezone is not mistaken as</comments>
                        <comments>// a separator.</comments>
                      </child>
                      <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                      <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.4/@elseStatement/@elseStatement/@elseStatement/@statements.1/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.2/@variable"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ForLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.4/@elseStatement/@elseStatement/@elseStatement/@statements.0/@variable"/>
                          <operator xsi:type="operators:PlusPlus"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.1/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.4/@elseStatement/@elseStatement/@elseStatement/@statements.3/@init"/>
                        </next>
                      </children>
                      <children xsi:type="literals:CharacterLiteral" value="45"/>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.4/@elseStatement/@elseStatement/@elseStatement/@statements.3/@init"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.3/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <init xsi:type="variables:LocalVariable" name="i">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </init>
                <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.4/@elseStatement/@elseStatement/@elseStatement/@statements.3/@init"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </updates>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                        <comments>// GYear</comments>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:StringReference" value="%Y"/>
                        <children xsi:type="references:StringReference" value="%z"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.4/@elseStatement/@elseStatement/@elseStatement/@statements.0/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                          <comments>// GYearMonth</comments>
                        </child>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:StringReference" value="%Y-%M"/>
                          <children xsi:type="references:StringReference" value="%z"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </value>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.4/@elseStatement/@elseStatement/@elseStatement/@statements.0/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                          <comments>// Date or invalid lexicalRepresentation</comments>
                          <comments>// Fix 4971612: invalid SCCS macro substitution in data string</comments>
                        </child>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:StringReference" value="%Y-%M-%D"/>
                          <children xsi:type="references:StringReference" value="%z"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </value>
                      </expression>
                    </statements>
                  </elseStatement>
                </elseStatement>
              </statements>
            </elseStatement>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.94"/>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.94"/>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.1/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.5/@variable">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.7"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// check for validity</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <comments>//&quot;\&quot;&quot; + lexicalRepresentation + &quot;\&quot; is not a valid representation of an XML Gregorian Calendar value.&quot;</comments>
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../util/DatatypeMessageFormatter.class.xmi#//@classifiers.0/@members.2"/>
                  <arguments xsi:type="literals:NullLiteral"/>
                  <arguments xsi:type="references:StringReference" value="InvalidXGCRepresentation"/>
                  <arguments xsi:type="arrays:ArrayInstantiationByValues">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arrayDimensionsBefore/>
                    <arrayInitializer>
                      <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
                    </arrayInitializer>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../util/DatatypeMessageFormatter.class.xmi#//@classifiers.0"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.73"/>
        </condition>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lexicalRepresentation">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// Constructors</comments>
        <comments>/**&#xA;     * Constructs a new XMLGregorianCalendar object.&#xA;     * &#xA;     * String parsing documented by {@link #parse(String)}.&#xA;     * &#xA;     * Returns a non-null valid XMLGregorianCalendar object that holds the &#xA;     * value indicated by the lexicalRepresentation parameter.&#xA;     *&#xA;     * @param lexicalRepresentation&#xA;     *      Lexical representation of one the eight&#xA;     *      XML Schema date/time datatypes.&#xA;     * @throws IllegalArgumentException&#xA;     *      If the given string does not conform as documented in &#xA;     *      {@link #parse(String)}.&#xA;     * @throws NullPointerException&#xA;     *      If the given string is null.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="XMLGregorianCalendarImpl">
      <comments>// field initializers already do the correct initialization.</comments>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Create an instance with all date/time datatype fields set to &#xA;     * {@link DatatypeConstants#FIELD_UNDEFINED} or null respectively.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="XMLGregorianCalendarImpl">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.48">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.59">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.4"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.5"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.6"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.7"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// check for validity</comments>
        <statement xsi:type="statements:Block">
          <comments>/**&#xA;                String yearString = &quot;null&quot;;&#xA;                if (year != null) {&#xA;                    yearString = year.toString();&#xA;                }&#xA;                String fractionalSecondString = &quot;null&quot;;&#xA;                if (fractionalSecond != null) {&#xA;                    fractionalSecondString = fractionalSecond.toString();&#xA;                }&#xA;             &#xA;                throw new IllegalArgumentException(&#xA;                    &quot;year = &quot; + yearString&#xA;                    + &quot;, month = &quot; + month&#xA;                    + &quot;, day = &quot; + day&#xA;                    + &quot;, hour = &quot; + hour&#xA;                    + &quot;, minute = &quot; + minute&#xA;                    + &quot;, second = &quot; + second&#xA;                    + &quot;, fractionalSecond = &quot; + fractionalSecondString&#xA;                    + &quot;, timezone = &quot; + timezone&#xA;                    + &quot;, is not a valid representation of an XML Gregorian Calendar value.&quot;&#xA;                );&#xA;                */</comments>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../util/DatatypeMessageFormatter.class.xmi#//@classifiers.0/@members.2"/>
                  <arguments xsi:type="literals:NullLiteral"/>
                  <arguments xsi:type="references:StringReference" value="InvalidXGCValue-fractional"/>
                  <arguments xsi:type="arrays:ArrayInstantiationByValues">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arrayDimensionsBefore/>
                    <arrayInitializer>
                      <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
                      <initialValues xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.1"/>
                      </initialValues>
                      <initialValues xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.2"/>
                      </initialValues>
                      <initialValues xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.3"/>
                      </initialValues>
                      <initialValues xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.4"/>
                      </initialValues>
                      <initialValues xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.5"/>
                      </initialValues>
                      <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.6"/>
                      <initialValues xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.7"/>
                      </initialValues>
                    </arrayInitializer>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../util/DatatypeMessageFormatter.class.xmi#//@classifiers.0"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.73"/>
        </condition>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="year">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="month">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="day">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hour">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minute">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="second">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fractionalSecond">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timezone">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * &lt;p>Private constructor allowing for complete value spaces allowed by &#xA;     * W3C XML Schema 1.0 recommendation for xsd:dateTime and related &#xA;     * builtin datatypes. Note that &lt;code>year&lt;/code> parameter supports&#xA;     * arbitrarily large numbers and fractionalSecond has infinite &#xA;     * precision.&lt;/p>&#xA;     * &#xA;     * @param year of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param month of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param day of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param hour of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param minute of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param second of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param fractionalSecond of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param timezone of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="XMLGregorianCalendarImpl">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.4"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.5"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.7"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.92">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.6"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <comments>/*&#xA;                throw new IllegalArgumentException(&#xA;                    &quot;year = &quot; + year&#xA;                    + &quot;, month = &quot; + month&#xA;                    + &quot;, day = &quot; + day&#xA;                    + &quot;, hour = &quot; + hour&#xA;                    + &quot;, minute = &quot; + minute&#xA;                    + &quot;, second = &quot; + second&#xA;                    + &quot;, millisecond = &quot; + millisecond&#xA;                    + &quot;, timezone = &quot; + timezone&#xA;                    + &quot;, is not a valid representation of an XML Gregorian Calendar value.&quot;&#xA;                    );&#xA;                 */</comments>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../util/DatatypeMessageFormatter.class.xmi#//@classifiers.0/@members.2"/>
                  <arguments xsi:type="literals:NullLiteral"/>
                  <arguments xsi:type="references:StringReference" value="InvalidXGCValue-milli"/>
                  <arguments xsi:type="arrays:ArrayInstantiationByValues">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arrayDimensionsBefore/>
                    <arrayInitializer>
                      <initialValues xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
                      </initialValues>
                      <initialValues xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.1"/>
                      </initialValues>
                      <initialValues xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.2"/>
                      </initialValues>
                      <initialValues xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.3"/>
                      </initialValues>
                      <initialValues xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.4"/>
                      </initialValues>
                      <initialValues xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.5"/>
                      </initialValues>
                      <initialValues xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.6"/>
                      </initialValues>
                      <initialValues xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.7"/>
                      </initialValues>
                    </arrayInitializer>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../util/DatatypeMessageFormatter.class.xmi#//@classifiers.0"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.73"/>
        </condition>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="year">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="month">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="day">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hour">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minute">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="second">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="millisecond">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timezone">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Private constructor of value spaces that a&#xA;     * &lt;code>java.util.GregorianCalendar&lt;/code> instance would need to convert to an&#xA;     * &lt;code>XMLGregorianCalendar&lt;/code> instance.&lt;/p>&#xA;     *    &#xA;     * &lt;p>&lt;code>XMLGregorianCalendar eon&lt;/code> and &#xA;     * &lt;code>fractionalSecond&lt;/code> are set to &lt;code>null&lt;/code>&lt;/p>&#xA;     *&#xA;     * @param year of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param month of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param day of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param hour of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param minute of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param second of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param millisecond of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param timezone of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="XMLGregorianCalendarImpl">
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="year">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.96"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.1"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@variable"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.96"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@variable"/>
          </next>
          <self xsi:type="literals:This"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.96"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
          <self xsi:type="literals:This">
            <comments>// Calendar.MONTH is zero based, XSD Date datatype's month field starts</comments>
            <comments>// with JANUARY as 1.</comments>
          </self>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.96"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.6"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </arguments>
          </next>
          <self xsi:type="literals:This"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.60">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.96"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.12"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.96"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.13"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.96"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.96"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </arguments>
          </next>
          <self xsi:type="literals:This"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="offsetInMinutes">
          <typeReference xsi:type="types:Int">
            <comments>// Calendar ZONE_OFFSET and DST_OFFSET fields are in milliseconds.</comments>
          </typeReference>
          <initialValue xsi:type="expressions:MultiplicativeExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.96"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.16"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.96"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.17"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="60"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1000"/>
                <multiplicativeOperators xsi:type="operators:Multiplication"/>
              </expression>
            </children>
            <multiplicativeOperators xsi:type="operators:Division"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.6/@variable"/>
          </next>
          <self xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;&#x9; * &lt;p>Convert a &lt;code>java.util.GregorianCalendar&lt;/code> to XML Schema 1.0 &#xA;&#x9; * representation.&lt;/p>&#xA;&#x9; *&#xA;&#x9; * &lt;table border=&quot;2&quot; rules=&quot;all&quot; cellpadding=&quot;2&quot;>&#xA;&#x9; *   &lt;thead>&#xA;&#x9; *     &lt;tr>&#xA;&#x9; *       &lt;th align=&quot;center&quot; colspan=&quot;2&quot;>&#xA;&#x9; *          Field by Field Conversion from&#xA;&#x9; *          &lt;code>java.util.GregorianCalendar&lt;/code> to this class &#xA;&#x9; *       &lt;/th>&#xA;&#x9; *     &lt;/tr>&#xA;&#x9; *   &lt;/thead>&#xA;&#x9; *   &lt;tbody>&#xA;&#x9; *     &lt;tr>&#xA;&#x9; *        &lt;th>&lt;code>javax.xml.datatype.XMLGregorianCalendar&lt;/code> field&lt;/th>&#xA;&#x9; *        &lt;th>&lt;code>java.util.GregorianCalendar&lt;/code> field&lt;/th>&#xA;&#x9; *     &lt;/tr>&#xA;&#x9; *     &lt;tr>&#xA;&#x9; *       &lt;th>{@link #setYear(int)}&lt;/th>&#xA;&#x9; *       &lt;th>&lt;code>ERA == GregorianCalendar.BC ? -YEAR : YEAR&lt;/code>&lt;/th>&#xA;&#x9; *     &lt;/tr>&#xA;&#x9; *     &lt;tr>&#xA;&#x9; *       &lt;th>{@link #setMonth(int)}&lt;/th>&#xA;&#x9; *       &lt;th>&lt;code>MONTH + 1&lt;/code>&lt;/th>&#xA;&#x9; *     &lt;/tr>&#xA;&#x9; *     &lt;tr>&#xA;&#x9; *       &lt;th>{@link #setDay(int)}&lt;/th>&#xA;&#x9; *       &lt;th>&lt;code>DAY_OF_MONTH&lt;/code>&lt;/th>&#xA;&#x9; *     &lt;/tr>&#xA;&#x9; *     &lt;tr>&#xA;&#x9; *       &lt;th>{@link #setTime(int,int,int, BigDecimal)}&lt;/th>&#xA;&#x9; *       &lt;th>&lt;code>HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND&lt;/code>&lt;/th>&#xA;&#x9; *     &lt;/tr>&#xA;&#x9; *     &lt;tr>&#xA;&#x9; *       &lt;th>{@link #setTimezone(int)}&lt;i>*&lt;/i>&lt;/th>&#xA;&#x9; *       &lt;th>&lt;code>(ZONE_OFFSET + DST_OFFSET) / (60*1000)&lt;/code>&lt;br/>&#xA;&#x9; *       &lt;i>(in minutes)&lt;/i>&#xA;&#x9; *       &lt;/th>&#xA;&#x9; *     &lt;/tr>&#xA;&#x9; *   &lt;/tbody>&#xA;&#x9; * &lt;/table>&#xA;&#x9; * &lt;p>&lt;i>*&lt;/i>conversion loss of information. It is not possible to represent &#xA;&#x9; * a &lt;code>java.util.GregorianCalendar&lt;/code> daylight savings timezone id in the &#xA;&#x9; * XML Schema 1.0 date/time datatype representation.&lt;/p>&#xA;&#x9; * &#xA;&#x9; * &lt;p>To compute the return value's &lt;code>TimeZone&lt;/code> field,&#xA;&#x9; * &lt;ul>&#xA;&#x9; * &lt;li>when &lt;code>this.getTimezone() != DatatypeConstants.FIELD_UNDEFINED&lt;/code>,&#xA;&#x9; * create a &lt;code>java.util.TimeZone&lt;/code> with a custom timezone id &#xA;&#x9; * using the &lt;code>this.getTimezone()&lt;/code>.&lt;/li>&#xA;&#x9; * &lt;li>else use the &lt;code>GregorianCalendar&lt;/code> default timezone value &#xA;&#x9; * for the host is defined as specified by &#xA;&#x9; * &lt;code>java.util.TimeZone.getDefault()&lt;/code>.&lt;/li>&lt;/p>     &#xA;&#x9; *&#xA;&#x9; * @param cal &lt;code>java.util.GregorianCalendar&lt;/code> used to create &lt;code>XMLGregorianCalendar&lt;/code>&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="createDateTime">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="year">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="month">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="day">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hours">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minutes">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seconds">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fractionalSecond">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timezone">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Factories</comments>
        <comments>/**&#xA;     * &lt;p>Create a Java representation of XML Schema builtin datatype &lt;code>dateTime&lt;/code>.&#xA;     * All possible fields are specified for this factory method.&lt;/p>&#xA;     * &#xA;     * @param year represents both high-order eons and low-order year.&#xA;     * @param month of &lt;code>dateTime&lt;/code>&#xA;     * @param day of &lt;code>dateTime&lt;/code>&#xA;     * @param hours of &lt;code>dateTime&lt;/code>&#xA;     * @param minutes of &lt;code>dateTime&lt;/code>&#xA;     * @param seconds of &lt;code>dateTime&lt;/code>&#xA;     * @param fractionalSecond value of null indicates optional field is absent.&#xA;     * @param timezone offset in minutes. {@link DatatypeConstants#FIELD_UNDEFINED} indicates optional field is not set.&#xA;     * &#xA;     * @return &lt;code>XMLGregorianCalendar&lt;/code> created from parameter values.&#xA;     * &#xA;     * @see DatatypeConstants#FIELD_UNDEFINED&#xA;     *&#xA;     * @throws IllegalArgumentException if any parameter is outside value &#xA;     * constraints for the field as specified in &#xA;     * &lt;a href=&quot;#datetimefieldmapping&quot;>date/time field mapping table&lt;/a>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.4"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.5"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.6"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.7"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createDateTime">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="year">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="month">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="day">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hour">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minute">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="second">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Create a Java instance of XML Schema builtin datatype dateTime.&lt;/p>&#xA;     * &#xA;     * @param year represents both high-order eons and low-order year.&#xA;     * @param month of &lt;code>dateTime&lt;/code>&#xA;     * @param day of &lt;code>dateTime&lt;/code>&#xA;     * @param hour of &lt;code>dateTime&lt;/code>&#xA;     * @param minute of &lt;code>dateTime&lt;/code>&#xA;     * @param second of &lt;code>dateTime&lt;/code>&#xA;     *&#xA;     * @return &lt;code>XMLGregorianCalendar&lt;/code> created from parameter values.&#xA;     * &#xA;     * @throws IllegalArgumentException if any parameter is outside value constraints for the field as specified in &#xA;     *   &lt;a href=&quot;#datetimefieldmapping&quot;>date/time field mapping table&lt;/a>.&#xA;     * &#xA;     * @see DatatypeConstants#FIELD_UNDEFINED&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <comments>//timezone</comments>
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.4"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.5"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <comments>//millisecond</comments>
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createDateTime">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="year">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="month">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="day">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hours">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minutes">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seconds">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="milliseconds">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timezone">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Create a Java representation of XML Schema builtin datatype &lt;code>dateTime&lt;/code>.&#xA;     * All possible fields are specified for this factory method.&lt;/p>&#xA;     * &#xA;     * @param year represents low-order year.&#xA;     * @param month of &lt;code>dateTime&lt;/code>&#xA;     * @param day of &lt;code>dateTime&lt;/code>&#xA;     * @param hours of &lt;code>dateTime&lt;/code>&#xA;     * @param minutes of &lt;code>dateTime&lt;/code>&#xA;     * @param seconds of &lt;code>dateTime&lt;/code>&#xA;     * @param milliseconds of &lt;code>dateTime&lt;/code>. {@link DatatypeConstants#FIELD_UNDEFINED} indicates optional field is not set.&#xA;     * @param timezone offset in minutes. {@link DatatypeConstants#FIELD_UNDEFINED} indicates optional field is not set.&#xA;     *&#xA;     * @return &lt;code>XMLGregorianCalendar&lt;/code> created from parameter values.&#xA;     * &#xA;     * @throws IllegalArgumentException if any parameter is outside value constraints for the field as specified in &#xA;     *   &lt;a href=&quot;#datetimefieldmapping&quot;>date/time field mapping table&lt;/a>.&#xA;     * &#xA;     * @see DatatypeConstants#FIELD_UNDEFINED&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.4"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.5"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.6"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.7"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createDate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="year">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="month">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="day">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timezone">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Create a Java representation of XML Schema builtin datatype &lt;code>date&lt;/code> or &lt;code>g*&lt;/code>.&lt;/p>&#xA;     * &#xA;     * &lt;p>For example, an instance of &lt;code>gYear&lt;/code> can be created invoking this factory &#xA;     * with &lt;code>month&lt;/code> and &lt;code>day&lt;/code> parameters set to &#xA;     * {@link DatatypeConstants#FIELD_UNDEFINED}.&lt;/p>&#xA;     * &#xA;     * @param year of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param month of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param day of &lt;code>XMLGregorianCalendar&lt;/code> to be created.&#xA;     * @param timezone offset in minutes. {@link DatatypeConstants#FIELD_UNDEFINED} indicates optional field is not set.&#xA;     * &#xA;     * @return &lt;code>XMLGregorianCalendar&lt;/code> created from parameter values.&#xA;     * &#xA;     * @see DatatypeConstants#FIELD_UNDEFINED&#xA;     *&#xA;     * @throws IllegalArgumentException if any parameter is outside value &#xA;     * constraints for the field as specified in &#xA;     * &lt;a href=&quot;#datetimefieldmapping&quot;>date/time field mapping table&lt;/a>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <comments>// hour</comments>
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <comments>// minute</comments>
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <comments>// second</comments>
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.3">
            <comments>// millisecond</comments>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createTime">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hours">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minutes">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seconds">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timezone">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create a Java instance of XML Schema builtin datatype &lt;code>time&lt;/code>.&#xA;     * @param hours number of hours&#xA;     * @param minutes number of minutes&#xA;     * @param seconds number of seconds&#xA;     * @param timezone offset in minutes. {@link DatatypeConstants#FIELD_UNDEFINED} indicates optional field is not set.&#xA;     * &#xA;     * @return &lt;code>XMLGregorianCalendar&lt;/code> created from parameter values.&#xA;     * &#xA;     * @see DatatypeConstants#FIELD_UNDEFINED&#xA;     *&#xA;     * @throws IllegalArgumentException if any parameter is outside value &#xA;     * constraints for the field as specified in &#xA;     * &lt;a href=&quot;#datetimefieldmapping&quot;>date/time field mapping table&lt;/a>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <comments>// Year</comments>
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <comments>// Month</comments>
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0">
            <comments>// Day</comments>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.3">
            <comments>//Millisecond</comments>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createTime">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hours">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minutes">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seconds">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fractionalSecond">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timezone">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Create a Java instance of XML Schema builtin datatype time.&lt;/p>&#xA;     * &#xA;     * @param hours number of hours&#xA;     * @param minutes number of minutes&#xA;     * @param seconds number of seconds&#xA;     * @param fractionalSecond value of &lt;code>null&lt;/code> indicates that this optional field is not set.&#xA;     * @param timezone offset in minutes. {@link DatatypeConstants#FIELD_UNDEFINED} indicates optional field is not set.&#xA;     * &#xA;     * @return &lt;code>XMLGregorianCalendar&lt;/code> created from parameter values.&#xA;     * &#xA;     * @see DatatypeConstants#FIELD_UNDEFINED&#xA;     *&#xA;     * @throws IllegalArgumentException if any parameter is outside value &#xA;     * constraints for the field as specified in &#xA;     * &lt;a href=&quot;#datetimefieldmapping&quot;>date/time field mapping table&lt;/a>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="references:IdentifierReference">
            <comments>// Year</comments>
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <comments>// month</comments>
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0">
            <comments>// day</comments>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.4"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createTime">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hours">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minutes">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seconds">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="milliseconds">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timezone">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Create a Java instance of XML Schema builtin datatype time.&lt;/p>&#xA;     * &#xA;     * @param hours number of hours&#xA;     * @param minutes number of minutes&#xA;     * @param seconds number of seconds&#xA;     * @param milliseconds number of milliseconds&#xA;     * @param timezone offset in minutes. {@link DatatypeConstants#FIELD_UNDEFINED} indicates optional field is not set.&#xA;     * &#xA;     * @return &lt;code>XMLGregorianCalendar&lt;/code> created from parameter values.&#xA;     * &#xA;     * @see DatatypeConstants#FIELD_UNDEFINED&#xA;     *&#xA;     * @throws IllegalArgumentException if any parameter is outside value &#xA;     * constraints for the field as specified in &#xA;     * &lt;a href=&quot;#datetimefieldmapping&quot;>date/time field mapping table&lt;/a>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <comments>// year</comments>
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <comments>// month</comments>
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0">
            <comments>// day</comments>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.4"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEon">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Accessors</comments>
        <comments>/** &#xA;     * &lt;p>Return high order component for XML Schema 1.0 dateTime datatype field for &#xA;     * &lt;code>year&lt;/code>.&#xA;     * &lt;code>null&lt;/code> if this optional part of the year field is not defined.&lt;/p>&#xA;     * &#xA;     * &lt;p>Value constraints for this value are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-year&quot;>year field of date/time field mapping table&lt;/a>.&lt;/p>&#xA;     * @return eon of this &lt;code>XMLGregorianCalendar&lt;/code>. The value &#xA;     * returned is an integer multiple of 10^9.&#xA;     * &#xA;     * @see #getYear()&#xA;     * @see #getEonAndYear()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getYear">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * &lt;p>Return low order component for XML Schema 1.0 dateTime datatype field for &#xA;     * &lt;code>year&lt;/code> or {@link DatatypeConstants#FIELD_UNDEFINED}.&lt;/p>&#xA;     * &#xA;     * &lt;p>Value constraints for this value are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-year&quot;>year field of date/time field mapping table&lt;/a>.&lt;/p>&#xA;     * &#xA;     * @return year  of this &lt;code>XMLGregorianCalendar&lt;/code>.&#xA;     * &#xA;     * @see #getEon()&#xA;     * @see #getEonAndYear()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEonAndYear">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * &lt;p>Return XML Schema 1.0 dateTime datatype field for &#xA;     * &lt;code>year&lt;/code>.&lt;/p>&#xA;     * &#xA;     * &lt;p>Value constraints for this value are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-year&quot;>year field of date/time field mapping table&lt;/a>.&lt;/p>&#xA;     * &#xA;     * @return sum of &lt;code>eon&lt;/code> and &lt;code>BigInteger.valueOf(year)&lt;/code>&#xA;     * when both fields are defined. When only &lt;code>year&lt;/code> is defined, &#xA;     * return it. When both &lt;code>eon&lt;/code> and &lt;code>year&lt;/code> are not &#xA;     * defined, return &lt;code>null&lt;/code>.&#xA;     * &#xA;     * @see #getEon()&#xA;     * @see #getYear()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// both are defined</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.56"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
                    <arguments xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:Long"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// only year is defined</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:Long"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>// neither are defined</comments>
        <comments>// or only eon is defined which is not valid without a year </comments>
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMonth">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * &lt;p>Return number of month or {@link DatatypeConstants#FIELD_UNDEFINED}.&lt;/p>&#xA;     * &#xA;     * &lt;p>Value constraints for this value are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-month&quot;>month field of date/time field mapping table&lt;/a>.&lt;/p>&#xA;     * &#xA;     * @return year  of this &lt;code>XMLGregorianCalendar&lt;/code>.&#xA;     * &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDay">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Return day in month or {@link DatatypeConstants#FIELD_UNDEFINED}.&lt;/p>&#xA;     *&#xA;     * &lt;p>Value constraints for this value are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-day&quot;>day field of date/time field mapping table&lt;/a>.&lt;/p>&#xA;     * &#xA;     * @see #setDay(int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getTimezone">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Return timezone offset in minutes or &#xA;     * {@link DatatypeConstants#FIELD_UNDEFINED} if this optional field is not defined.&#xA;     *&#xA;     * &lt;p>Value constraints for this value are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-timezone&quot;>timezone field of date/time field mapping table&lt;/a>.&lt;/p>&#xA;     * &#xA;     * @see #setTimezone(int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getHour">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Return hours or {@link DatatypeConstants#FIELD_UNDEFINED}.&#xA;     * Returns {@link DatatypeConstants#FIELD_UNDEFINED} if this field is not defined.&#xA;     *&#xA;     * &lt;p>Value constraints for this value are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-hour&quot;>hour field of date/time field mapping table&lt;/a>.&lt;/p>&#xA;     * @see #setTime(int, int, int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMinute">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return minutes or {@link DatatypeConstants#FIELD_UNDEFINED}.&lt;\p>&#xA;     * Returns {@link DatatypeConstants#FIELD_UNDEFINED} if this field is not defined.&#xA;     *&#xA;     * &lt;p>Value constraints for this value are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-minute&quot;>minute field of date/time field mapping table&lt;/a>.&lt;/p>&#xA;     * @see #setTime(int, int, int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getSecond">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * &lt;p>Return seconds or {@link DatatypeConstants#FIELD_UNDEFINED}.&lt;\p>&#xA;     * &#xA;     * &lt;p>Returns {@link DatatypeConstants#FIELD_UNDEFINED} if this field is not defined.&#xA;     * When this field is not defined, the optional xs:dateTime &#xA;     * fractional seconds field, represented by &#xA;     * {@link #getFractionalSecond()} and {@link #getMillisecond()},&#xA;     * must not be defined.&lt;/p>&#xA;     * &#xA;     * &lt;p>Value constraints for this value are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-second&quot;>second field of date/time field mapping table&lt;/a>.&lt;/p>&#xA;     * &#xA;     * @return Second  of this &lt;code>XMLGregorianCalendar&lt;/code>.&#xA;     * &#xA;     * @see #getFractionalSecond()&#xA;     * @see #getMillisecond()&#xA;     * @see #setTime(int, int, int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getSeconds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * @return result of adding second and fractional second field&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.46"/>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Long"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@statements.1/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.48"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
              </next>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@statements.1/@variable"/>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMillisecond">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * &lt;p>Return millisecond precision of {@link #getFractionalSecond()}.&lt;\p>&#xA;     * &#xA;     * &lt;p>This method represents a convenience accessor to infinite&#xA;     * precision fractional second value returned by &#xA;     * {@link #getFractionalSecond()}. The returned value is the rounded &#xA;     * down to milliseconds value of &#xA;     * {@link #getFractionalSecond()}. When {@link #getFractionalSecond()} &#xA;     * returns &lt;code>null&lt;/code>, this method must return &#xA;     * {@link DatatypeConstants#FIELD_UNDEFINED}.&lt;/p>&#xA;     *&#xA;     * &lt;p>Value constraints for this value are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-second&quot;>second field of date/time field mapping table&lt;/a>.&lt;/p>&#xA;     * &#xA;     * @return Millisecond  of this &lt;code>XMLGregorianCalendar&lt;/code>.&#xA;     * &#xA;     * @see #getFractionalSecond()&#xA;     * @see #setTime(int, int, int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <comments>// TODO: Non-optimal solution for now.</comments>
            <comments>// Efficient implementation would only store as BigDecimal</comments>
            <comments>// when needed and millisecond otherwise.</comments>
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.100"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.84"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
              </next>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFractionalSecond">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * &lt;p>Return fractional seconds.&lt;/p>&#xA;     * &#xA;     * &lt;p>&lt;code>null&lt;/code> is returned when this optional field is not defined.&lt;/p>&#xA;     * &#xA;     * &lt;p>Value constraints are detailed in&#xA;     * &lt;a href=&quot;#datetimefield-second&quot;>second field of date/time field mapping table&lt;/a>.&lt;/p>&#xA;     * &#xA;     * &lt;p>This optional field can only have a defined value when the&#xA;     * xs:dateTime second field, represented by ({@link #getSecond()}, &#xA;     * does not return {@link DatatypeConstants#FIELD_UNDEFINED}).&lt;/p>&#xA;     *&#xA;     * @return fractional seconds  of this &lt;code>XMLGregorianCalendar&lt;/code>.&#xA;     * &#xA;     * @see #getSecond()&#xA;     * @see #setTime(int, int, int, BigDecimal)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setYear">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="year">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// setters</comments>
        <comments>/**&#xA;     * &lt;p>Set low and high order component of XSD &lt;code>dateTime&lt;/code> year field.&lt;/p>&#xA;     * &#xA;     * &lt;p>Unset this field by invoking the setter with a parameter value of &lt;code>null&lt;/code>.&lt;/p>&#xA;     *&#xA;     * @param year value constraints summarized in &lt;a href=&quot;#datetimefield-year&quot;>year field of date/time field mapping table&lt;/a>.     &#xA;     *&#xA;     * @throws IllegalArgumentException if &lt;code>year&lt;/code> parameter is &#xA;     * outside value constraints for the field as specified in &#xA;     * &lt;a href=&quot;#datetimefieldmapping&quot;>date/time field mapping table&lt;/a>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="temp">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.66"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@elseStatement/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.115"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.58"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@elseStatement/@statements.0/@variable"/>
                </next>
              </arguments>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setYear">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="year">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Set year of XSD &lt;code>dateTime&lt;/code> year field.&lt;/p>&#xA;     *&#xA;     * &lt;p>Unset this field by invoking the setter with a parameter value of &#xA;     * {@link DatatypeConstants#FIELD_UNDEFINED}.&lt;/p>&#xA;     *&#xA;     * &lt;p>Note: if the absolute value of the &lt;code>year&lt;/code> parameter &#xA;     * is less than 10^9, the eon component of the XSD year field is set to &#xA;     * &lt;code>null&lt;/code> by this method.&lt;/p>&#xA;     *&#xA;     * @param year value constraints are summarized in &lt;a href=&quot;#datetimefield-year&quot;>year field of date/time field mapping table&lt;/a>.&#xA;     *   If year is {@link DatatypeConstants#FIELD_UNDEFINED}, then eon is set to &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <self xsi:type="literals:This"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                  <self xsi:type="literals:This"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Math.class.xmi#//@classifiers.0/@members.29"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Math.class.xmi#//@classifiers.0"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.115"/>
              </next>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="theYear">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
                    <arguments xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:Long"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="remainder">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@elseStatement/@elseStatement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.66"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <self xsi:type="literals:This"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@elseStatement/@elseStatement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.115"/>
                  </next>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@elseStatement/@elseStatement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.58"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@elseStatement/@elseStatement/@statements.1/@variable"/>
                  </next>
                </arguments>
              </expression>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setEon">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="eon">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Set high order part of XSD &lt;code>dateTime&lt;/code> year field.&lt;/p>&#xA;     *&#xA;     * &lt;p>Unset this field by invoking the setter with a parameter value of &#xA;     * &lt;code>null&lt;/code>.&lt;/p>&#xA;     *&#xA;     * @param eon value constraints summarized in &lt;a href=&quot;#datetimefield-year&quot;>year field of date/time field mapping table&lt;/a>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <self xsi:type="literals:This">
                  <comments>// Treat ZERO as field being undefined.</comments>
                </self>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.106"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setMonth">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="month">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Set month.&lt;/p>&#xA;     *&#xA;     * &lt;p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.&lt;/p>&#xA;     *&#xA;     * @param month value constraints summarized in &lt;a href=&quot;#datetimefield-month&quot;>month field of date/time field mapping table&lt;/a>.&#xA;     *&#xA;     * @throws IllegalArgumentException if &lt;code>month&lt;/code> parameter is &#xA;     * outside value constraints for the field as specified in &#xA;     * &lt;a href=&quot;#datetimefieldmapping&quot;>date/time field mapping table&lt;/a>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.55">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setDay">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="day">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Set days in month.&lt;/p>&#xA;     *&#xA;     * &lt;p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.&lt;/p>&#xA;     *&#xA;     * @param day value constraints summarized in &lt;a href=&quot;#datetimefield-day&quot;>day field of date/time field mapping table&lt;/a>.&#xA;     *&#xA;     * @throws IllegalArgumentException if &lt;code>day&lt;/code> parameter is &#xA;     * outside value constraints for the field as specified in &#xA;     * &lt;a href=&quot;#datetimefieldmapping&quot;>date/time field mapping table&lt;/a>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.55">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setTimezone">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Set the number of minutes in the timezone offset.&lt;/p>&#xA;     *&#xA;     * &lt;p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.&lt;/p>&#xA;     *&#xA;     * @param offset value constraints summarized in &lt;a href=&quot;#datetimefield-timezone&quot;>&#xA;     *   timezone field of date/time field mapping table&lt;/a>.&#xA;     *&#xA;     * @throws IllegalArgumentException if &lt;code>offset&lt;/code> parameter is &#xA;     * outside value constraints for the field as specified in &#xA;     * &lt;a href=&quot;#datetimefieldmapping&quot;>date/time field mapping table&lt;/a>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.55">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setTime">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hour">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minute">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="second">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Set time as one unit.&lt;/p>&#xA;     *&#xA;     * @param hour value constraints are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-hour&quot;>hour field of date/time field mapping table&lt;/a>.&#xA;     * @param minute value constraints are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-minute&quot;>minute field of date/time field mapping table&lt;/a>.&#xA;     * @param second value constraints are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-second&quot;>second field of date/time field mapping table&lt;/a>.&#xA;     *&#xA;     * @see #setTime(int, int, int, BigDecimal)&#xA;     *&#xA;     * @throws IllegalArgumentException if any parameter is &#xA;     * outside value constraints for the field as specified in &#xA;     * &lt;a href=&quot;#datetimefieldmapping&quot;>date/time field mapping table&lt;/a>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.59">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.2"/>
          <arguments xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkFieldValueConstraint">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="field">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <comments>/**&#xA;            throw new IllegalArgumentException(&quot;invalid value &quot; + value +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;       &quot; for &quot; + FIELD_NAME[field] +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;       &quot; field&quot;);&#xA;             */</comments>
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../util/DatatypeMessageFormatter.class.xmi#//@classifiers.0/@members.2"/>
                  <arguments xsi:type="literals:NullLiteral"/>
                  <arguments xsi:type="references:StringReference" value="InvalidFieldValue"/>
                  <arguments xsi:type="arrays:ArrayInstantiationByValues">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arrayDimensionsBefore/>
                    <arrayInitializer>
                      <initialValues xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.1"/>
                      </initialValues>
                      <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21">
                        <arraySelectors>
                          <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0"/>
                        </arraySelectors>
                      </initialValues>
                    </arrayInitializer>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../util/DatatypeMessageFormatter.class.xmi#//@classifiers.0"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.1"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0"/>
                  </arraySelectors>
                </children>
                <relationOperators xsi:type="operators:LessThan"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.1"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </children>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.1"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20">
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0"/>
              </arraySelectors>
            </children>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setHour">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hour">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.55">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setMinute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minute">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.55">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setSecond">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="second">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.55">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setTime">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hour">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minute">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="second">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fractional">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Set time as one unit, including the optional infinite precison &#xA;     * fractional seconds.&lt;/p>&#xA;     *&#xA;     * @param hour value constraints are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-hour&quot;>hour field of date/time field mapping table&lt;/a>.&#xA;     * @param minute value constraints are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-minute&quot;>minute field of date/time field mapping table&lt;/a>.&#xA;     * @param second value constraints are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-second&quot;>second field of date/time field mapping table&lt;/a>.&#xA;     * @param fractional value of &lt;code>null&lt;/code> indicates this optional &#xA;     *                   field is not set.&#xA;     *&#xA;     * @throws IllegalArgumentException if any parameter is &#xA;     * outside value constraints for the field as specified in &#xA;     * &lt;a href=&quot;#datetimefieldmapping&quot;>date/time field mapping table&lt;/a>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.57">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.58">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.93">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59/@parameters.3"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setTime">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hour">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minute">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="second">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="millisecond">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Set time as one unit, including optional milliseconds.&lt;/p>&#xA;     *&#xA;     * @param hour value constraints are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-hour&quot;>hour field of date/time field mapping table&lt;/a>.&#xA;     * @param minute value constraints are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-minute&quot;>minute field of date/time field mapping table&lt;/a>.&#xA;     * @param second value constraints are summarized in &#xA;     * &lt;a href=&quot;#datetimefield-second&quot;>second field of date/time field mapping table&lt;/a>.&#xA;     * @param millisecond value of {@link DatatypeConstants#FIELD_UNDEFINED} indicates this &#xA;     *                    optional field is not set. &#xA;     *&#xA;     * @throws IllegalArgumentException if any parameter is &#xA;     * outside value constraints for the field as specified in &#xA;     * &lt;a href=&quot;#datetimefieldmapping&quot;>date/time field mapping table&lt;/a>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.57">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.58">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.92">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.3"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="compare">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="rhs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// comparisons</comments>
        <comments>/**&#xA;     * &lt;p>Compare two instances of W3C XML Schema 1.0 date/time datatypes &#xA;     * according to partial order relation defined in &#xA;     * &lt;a href=&quot;http://www.w3.org/TR/xmlschema-2/#dateTime-order&quot;>W3C XML Schema 1.0 Part 2, Section 3.2.7.3,&#xA;     * &lt;i>Order relation on dateTime&lt;/i>&lt;/a>.&lt;/p>&#xA;     *&#xA;     * &lt;p>&lt;code>xsd:dateTime&lt;/code> datatype field mapping to accessors of&#xA;     * this class are defined in&#xA;     * &lt;a href=&quot;#datetimefieldmapping&quot;>date/time field mapping table&lt;/a>.&lt;/p>&#xA;     * &#xA;     * @param rhs instance of &lt;code>XMLGregorianCalendar&lt;/code> to compare&#xA;     * &#xA;     * @return the relationship between &lt;code>lhs&lt;/code> and &lt;code>rhs&lt;/code> as &#xA;     *   {@link DatatypeConstants#LESSER},&#xA;     *   {@link DatatypeConstants#EQUAL},&#xA;     *   {@link DatatypeConstants#GREATER} or&#xA;     *   {@link DatatypeConstants#INDETERMINATE}.&#xA;     *&#xA;     * @throws NullPointerException if &lt;code>lhs&lt;/code> or &lt;code>rhs&lt;/code> &#xA;     * parameters are null. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lhs">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.15"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="P">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="Q">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <comments>// Optimization: </comments>
            <comments>// both instances are in same timezone or</comments>
            <comments>// both are FIELD_UNDEFINED. </comments>
            <comments>// Avoid costly normalization of timezone to 'Z' time.</comments>
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@variable">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@variable">
                  <comments>// Both instances have different timezones.</comments>
                  <comments>// Normalize to UTC time and compare.</comments>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.62"/>
                  </child>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.62"/>
                  </child>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable"/>
              </returnValue>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
              </children>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
              </children>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
              </children>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
              </children>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0"/>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@variable">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.62"/>
                        </child>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="MinQ">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <comments>// C. step 1</comments>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.63">
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.35"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.4/@elseStatement/@elseStatement/@statement/@statements.1/@variable"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@variable"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@variable"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.12"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="MaxQ">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <comments>// C. step 2</comments>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.63">
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.34"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.4/@elseStatement/@elseStatement/@statement/@statements.4/@variable"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@variable"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@variable"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <comments>// C. step 3</comments>
                    <returnValue xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.15"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                    </returnValue>
                  </statements>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
              </children>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <comments>// Q.getTimezone() != DatatypeConstants.FIELD_UNDEFINED</comments>
                <comments>// P has no timezone and Q does.</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0"/>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.63">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable">
                              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
                            </arguments>
                          </next>
                        </child>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="MaxP">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <comments>// D. step 1</comments>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.63">
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.34"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.4/@elseStatement/@elseStatement/@elseStatement/@statements.1/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@variable"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@variable"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.12"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="MinP">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <comments>// D. step 2</comments>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.63">
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.35"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.4/@elseStatement/@elseStatement/@elseStatement/@statements.4/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@variable"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@variable"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <comments>// D. step 3</comments>
                    <returnValue xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.15"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                    </returnValue>
                  </statements>
                </elseStatement>
              </statements>
            </elseStatement>
          </elseStatement>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="normalize">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Normalize this instance to UTC.&lt;/p>&#xA;     *&#xA;     * &lt;p>2000-03-04T23:00:00+03:00 normalizes to 2000-03-04T20:00:00Z&lt;/p>&#xA;     * &lt;p>Implements W3C XML Schema Part 2, Section 3.2.7.3 (A).&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="normalized">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.63">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// if timezone was undefined, leave it undefined</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.7"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// if milliseconds was undefined, leave it undefined</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.46"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="normalizeToTimezone">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timezone">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;&#x9; * &lt;p>Normalize this instance to UTC.&lt;/p>&#xA;&#x9; *&#xA;&#x9; * &lt;p>2000-03-04T23:00:00+03:00 normalizes to 2000-03-04T20:00:00Z&lt;/p>&#xA;&#x9; * &lt;p>Implements W3C XML Schema Part 2, Section 3.2.7.3 (A).&lt;/p>&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="minutes">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@parameters.0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.90"/>
              <self xsi:type="literals:This"/>
            </child>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@variable">
            <comments>// normalizing to UTC time negates the timezone offset before </comments>
            <comments>// addition.</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="d">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/Duration.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <comments>//seconds</comments>
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="DurationImpl.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
            </arguments>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0">
              <comments>// isPositive</comments>
            </arguments>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0">
              <comments>//years</comments>
            </arguments>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0">
              <comments>//months</comments>
            </arguments>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0">
              <comments>//days</comments>
            </arguments>
            <arguments xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@variable">
                  <comments>//hours</comments>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </child>
              <expressionIf xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@variable"/>
              </expressionIf>
              <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@variable"/>
            </arguments>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0">
              <comments>// absolute</comments>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.35"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.3/@variable"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@variable">
          <comments>// set to zulu UTC time.</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.7"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="internalCompare">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="P">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Q">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &#xA;     * &#xA;     *  &lt;p>Implements Step B from http://www.w3.org/TR/xmlschema-2/#dateTime-order &lt;/p>&#xA;     * @param P calendar instance with normalized timezone offset or &#xA;     *          having same timezone as Q&#xA;     * @param Q calendar instance with normalized timezone offset or &#xA;     *          having same timezone as P&#xA;     * &#xA;     * @return result of comparing P and Q, value of&#xA;     *   {@link DatatypeConstants#EQUAL},&#xA;     *   {@link DatatypeConstants#LESSER},&#xA;     *   {@link DatatypeConstants#GREATER} or &#xA;     *   {@link DatatypeConstants#INDETERMINATE}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:Int"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// compare Year.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable">
                <comments>// Eon field is only equal when null.</comments>
                <comments>// optimized case for comparing year not requiring eon field.</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.17"/>
                  </next>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.1">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.17"/>
                  </next>
                </arguments>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.13"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.16"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.16"/>
            </next>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.66">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.18"/>
                  </next>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.1">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.18"/>
                  </next>
                </arguments>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.13"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.19"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.19"/>
              </next>
            </arguments>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.13"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.20"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.20"/>
              </next>
            </arguments>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.13"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </arguments>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.13"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.23"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.23"/>
              </next>
            </arguments>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.13"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.24"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.24"/>
              </next>
            </arguments>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.13"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.67">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.26"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.26"/>
              </next>
            </arguments>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="compareField">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Pfield">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Qfield">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;p>Implement Step B from &#xA;     * http://www.w3.org/TR/xmlschema-2/#dateTime-order.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <comments>//fields are either equal in value or both undefined.</comments>
            <comments>// Step B. 1.1 AND optimized result of performing 1.1-1.4.</comments>
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.13"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <comments>// Step B. 1.2</comments>
                <returnValue xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </returnValue>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </children>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </children>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <comments>// Step B. 1.3-4.</comments>
                <returnValue xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ConditionalExpression">
                    <child xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </child>
                    <expressionIf xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.12"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                    </expressionIf>
                    <expressionElse xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.14"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                    </expressionElse>
                  </expression>
                </returnValue>
              </statements>
            </elseStatement>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="compareField">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Pfield">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Qfield">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.1"/>
                  <children xsi:type="literals:NullLiteral"/>
                </child>
                <expressionIf xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.13"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </expressionIf>
                <expressionElse xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </expressionElse>
              </expression>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.15"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.106"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.1"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="compareField">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Pfield">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Qfield">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <comments>// optimization. especially when both arguments are null.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.13"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.1"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.1"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.87"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.1"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Indicates whether parameter &lt;code>obj&lt;/code> is &quot;equal to&quot; this one.&lt;/p>&#xA;     * &#xA;     * @param obj to compare.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> when &lt;code>compare(this,(XMLGregorianCalendar)obj) == EQUAL.&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.61">
                  <arguments xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@parameters.0"/>
                  </arguments>
                </children>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.13"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </children>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Returns a hash code consistent with the definition of the equals method.&lt;/p>&#xA;     * &#xA;     * @return hash code of this object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="timezone">
          <typeReference xsi:type="types:Int">
            <comments>// Following two dates compare to EQUALS since in different timezones.</comments>
            <comments>// 2000-01-15T12:00:00-05:00 == 2000-01-15T13:00:00-04:00 &#x9;</comments>
            <comments>//</comments>
            <comments>// Must ensure both instances generate same hashcode by normalizing </comments>
            <comments>// this to UTC timezone.</comments>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.0/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="gc">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.63">
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
                </next>
                <self xsi:type="literals:This"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.0/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.2/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.17"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.2/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.19"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.2/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.20"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.2/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.2/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.23"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.2/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.24"/>
            </next>
          </children>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parse">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lexicalRepresentation">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Constructs a new XMLGregorianCalendar object by&#xA;     * parsing its lexical string representation as defined in &#xA;     * &lt;a href=&quot;http://www.w3.org/TR/xmlschema-2/#dateTime-order&quot;>XML Schema 1.0 Part 2, Section 3.2.[7-14].1,&#xA;     * &lt;i>Lexical Representation&lt;/i>.&lt;/a>&lt;/p>&#xA;     * &#xA;     * &lt;p>The string representation may not have any leading and trailing whitespaces.&lt;/p>&#xA;     * &#xA;     * &lt;p>The parsing is done field by field so that   &#xA;     * the following holds for any lexically correct string x:&lt;/p>&#xA;     * &lt;pre>&#xA;     * new XMLGregorianCalendar(x).toXMLFormat().equals(x)&#xA;     * &lt;/pre>&#xA;     * Except for the noted lexical/canonical representation mismatches&#xA;     * listed in &lt;a href=&quot;http://www.w3.org/2001/05/xmlschema-errata#e2-45&quot;>&#xA;     * XML Schema 1.0 errata, Section 3.2.7.2&lt;/a>.&#xA;     * &#xA;     * &lt;p>Returns a non-null valid XMLGregorianCalendar object that holds the value&#xA;     * indicated by the lexicalRepresentation parameter.&lt;/p>&#xA;     *&#xA;     * @param lexicalRepresentation Lexical representation of one the 8 XML Schema calendar datatypes.&#xA;     * &#xA;     * @return &lt;code>XMLGregorianCalendar&lt;/code> created from parsing &lt;code>lexicalRepresentation&lt;/code> parameter.&#xA;     * &#xA;     * @throws IllegalArgumentException&#xA;     *      If the given string does not conform to the aforementioned&#xA;     *      specification.&#xA;     * @throws NullPointerException&#xA;     *      If the given string is null.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toXMLFormat">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Return the lexical representation of &lt;code>this&lt;/code> instance. &#xA;     * The format is specified in &#xA;     * &lt;a href=&quot;http://www.w3.org/TR/xmlschema-2/#dateTime-order&quot;>XML Schema 1.0 Part 2, Section 3.2.[7-14].1,&#xA;     * &lt;i>Lexical Representation&lt;/i>&quot;.&lt;/a>&lt;/p>&#xA;     * &#xA;     * &lt;p>Specific target lexical representation format is determined by &#xA;     * {@link #getXMLSchemaType()}.&lt;/p>&#xA;     * &#xA;     * @return XML, as &lt;code>String&lt;/code>, representation of this &lt;code>XMLGregorianCalendar&lt;/code> &#xA;     * &#xA;     * @throws java.lang.IllegalStateException if the combination of set fields&#xA;     *    does not match one of the eight defined XML Schema builtin date/time datatypes. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="typekind">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/namespace/QName.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.72"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="formatString">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="%Y-%M-%DT%h:%m:%s"/>
                <children xsi:type="references:StringReference" value="%z"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.23"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@variable">
                  <comments>// Fix 4971612: invalid SCCS macro substitution in data string</comments>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="%Y-%M-%D"/>
                  <children xsi:type="references:StringReference" value="%z"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.25"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="%h:%m:%s"/>
                    <children xsi:type="references:StringReference" value="%z"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.24"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="--%M--%z"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.29"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </children>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@variable">
                        <comments>// Fix 4971612: invalid SCCS macro substitution in data string</comments>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:StringReference" value="---%D"/>
                        <children xsi:type="references:StringReference" value="%z"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.30"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:StringReference" value="%Y"/>
                          <children xsi:type="references:StringReference" value="%z"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </value>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable"/>
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.28"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                    </children>
                  </condition>
                  <elseStatement xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@variable">
                            <comments>// Fix 4971612: invalid SCCS macro substitution in data string</comments>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:StringReference" value="%Y-%M"/>
                            <children xsi:type="references:StringReference" value="%z"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                          </value>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable"/>
                      <children xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.26"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                      </children>
                    </condition>
                    <elseStatement xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:AssignmentExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@variable">
                              <comments>// Fix 4971612: invalid SCCS macro substitution in data string</comments>
                            </child>
                            <assignmentOperator xsi:type="operators:Assignment"/>
                            <value xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:StringReference" value="--%M-%D"/>
                              <children xsi:type="references:StringReference" value="%z"/>
                              <additiveOperators xsi:type="operators:Addition"/>
                            </value>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable"/>
                        <children xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.27"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                        </children>
                      </condition>
                    </elseStatement>
                  </elseStatement>
                </elseStatement>
              </elseStatement>
            </elseStatement>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.96">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getXMLSchemaType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/namespace/QName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Return the name of the XML Schema date/time type that this instance &#xA;     * maps to. Type is computed based on fields that are set.&lt;/p>&#xA;     *&#xA;     * &lt;table border=&quot;2&quot; rules=&quot;all&quot; cellpadding=&quot;2&quot;>&#xA;     *   &lt;thead>&#xA;     *     &lt;tr>&#xA;     *       &lt;th align=&quot;center&quot; colspan=&quot;7&quot;>&#xA;     *         Required fields for XML Schema 1.0 Date/Time Datatypes.&lt;br/>&#xA;     *         &lt;i>(timezone is optional for all date/time datatypes)&lt;/i>&#xA;     *       &lt;/th>&#xA;     *     &lt;/tr>&#xA;     *   &lt;/thead>&#xA;     *   &lt;tbody>&#xA;     *     &lt;tr>&#xA;     *       &lt;td>Datatype&lt;/td>&#xA;     *       &lt;td>year&lt;/td>&#xA;     *       &lt;td>month&lt;/td>&#xA;     *       &lt;td>day&lt;/td>&#xA;     *       &lt;td>hour&lt;/td>&#xA;     *       &lt;td>minute&lt;/td>&#xA;     *       &lt;td>second&lt;/td>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;td>{@link DatatypeConstants#DATETIME}&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;td>{@link DatatypeConstants#DATE}&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;td>{@link DatatypeConstants#TIME}&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;td>{@link DatatypeConstants#GYEARMONTH}&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;td>{@link DatatypeConstants#GMONTHDAY}&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;td>{@link DatatypeConstants#GYEAR}&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;td>{@link DatatypeConstants#GMONTH}&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;td>{@link DatatypeConstants#GDAY}&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>X&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *       &lt;td>&lt;/td>&#xA;     *     &lt;/tr>&#xA;     *   &lt;/tbody>&#xA;     * &lt;/table>&#xA;     * &#xA;     * @throws java.lang.IllegalStateException if the combination of set fields&#xA;     *    does not match one of the eight defined XML Schema builtin &#xA;     *    date/time datatypes.&#xA;     * @return One of the following class constants:&#xA;     *   {@link DatatypeConstants#DATETIME},&#xA;     *   {@link DatatypeConstants#TIME},&#xA;     *   {@link DatatypeConstants#DATE},&#xA;     *   {@link DatatypeConstants#GYEARMONTH},&#xA;     *   {@link DatatypeConstants#GMONTHDAY},&#xA;     *   {@link DatatypeConstants#GYEAR},&#xA;     *   {@link DatatypeConstants#GMONTH} or&#xA;     *   {@link DatatypeConstants#GDAY}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// DATETIME</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.23"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// DATE</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.25"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// TIME</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.24"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// GYEARMONTH</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.26"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// GMONTHDAY</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.27"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// GYEAR</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.28"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// GMONTH</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.29"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// GDAY</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.30"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
            </children>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Throw">
        <comments>// unknown</comments>
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalStateException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.44"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="#getXMLSchemaType() :"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../util/DatatypeMessageFormatter.class.xmi#//@classifiers.0/@members.2"/>
                <arguments xsi:type="literals:NullLiteral"/>
                <arguments xsi:type="references:StringReference" value="InvalidXGCFields"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../util/DatatypeMessageFormatter.class.xmi#//@classifiers.0"/>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isValid">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Validate instance by &lt;code>getXMLSchemaType()&lt;/code> constraints.&#xA;     * @return true if data values are valid.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// since setters do not allow for invalid values, </comments>
        <comments>// (except for exceptional case of year field of zero),</comments>
        <comments>// no need to check for anything except for constraints</comments>
        <comments>// between fields. </comments>
        <comments>//check if days in month is valid. Can be dependent on leap year.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="maxDays">
              <typeReference xsi:type="types:Int">
                <comments>// years could not be set</comments>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="years">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.0/@statement/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.85">
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.38"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.0/@statement/@statements.1/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.0/@statement/@statements.0/@variable">
                    <comments>// year is undefined, allow 29 days</comments>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="29"/>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.40"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.0/@statement/@statements.0/@variable"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.39"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// http://www.w3.org/2001/05/xmlschema-errata#e2-45</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.43"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Return">
                  <returnValue xsi:type="literals:BooleanLiteral"/>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.44"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </condition>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.42"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// XML Schema 1.0 specification defines year value of zero as</comments>
        <comments>// invalid. Allow this class to set year field to zero</comments>
        <comments>// since XML Schema 1.0 errata states that lexical zero will </comments>
        <comments>// be allowed in next version and treated as 1 B.C.E.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <comments>// optimize check.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="yearField">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="result">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.66">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.2/@elseStatement/@statements.0/@variable"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.15"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="literals:BooleanLiteral"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.2/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.13"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                  </children>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.2/@elseStatement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="add">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="duration">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/Duration.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Add &lt;code>duration&lt;/code> to this instance.&lt;\p>&#xA;     * &#xA;     * &lt;p>The computation is specified in&#xA;     * &lt;a href=&quot;http://www.w3.org/TR/xmlschema-2/#adding-durations-to-dateTimes&quot;>XML Schema 1.0 Part 2, Appendix E,&#xA;     * &lt;i>Adding durations to dateTimes&lt;/i>>&lt;/a>.&#xA;     * &lt;a href=&quot;#datetimefieldsmapping&quot;>date/time field mapping table&lt;/a>&#xA;     * defines the mapping from XML Schema 1.0 &lt;code>dateTime&lt;/code> fields &#xA;     * to this class' representation of those fields.&lt;/p>&#xA;     * &#xA;     * @param duration Duration to add to this &lt;code>XMLGregorianCalendar&lt;/code>.&#xA;     * &#xA;     * @throws NullPointerException  when &lt;code>duration&lt;/code> parameter is &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="fieldUndefined">
          <typeReference xsi:type="types:Boolean">
            <comments>/*&#xA;&#x9;&#x9; * Extracted from &#xA;&#x9;&#x9; * http://www.w3.org/TR/xmlschema-2/#adding-durations-to-dateTimes &#xA;&#x9;&#x9; * to ensure implemented properly. See spec for definitions of methods&#xA;&#x9;&#x9; * used in algorithm.&#xA;&#x9;&#x9; * &#xA;&#x9;&#x9; * Given a dateTime S and a duration D, specifies how to compute a &#xA;&#x9;&#x9; * dateTime E where E is the end of the time period with start S and &#xA;&#x9;&#x9; * duration D i.e. E = S + D.&#xA;&#x9;&#x9; * &#xA;&#x9;&#x9; * The following is the precise specification. &#xA;&#x9;&#x9; * These steps must be followed in the same order. &#xA;&#x9;&#x9; * If a field in D is not specified, it is treated as if it were zero.&#xA;&#x9;&#x9; * If a field in S is not specified, it is treated in the calculation &#xA;&#x9;&#x9; * as if it were the minimum allowed value in that field, however, &#xA;&#x9;&#x9; * after the calculation is concluded, the corresponding field in &#xA;&#x9;&#x9; * E is removed (set to unspecified).&#xA;&#x9;&#x9; * &#xA;&#x9;&#x9; * Months (may be modified additionally below)&#xA;&#x9;         *  temp := S[month] + D[month]&#xA;&#x9;         *  E[month] := modulo(temp, 1, 13)&#xA;&#x9;         *  carry := fQuotient(temp, 1, 13)&#xA;&#x9;&#x9; */</comments>
          </typeReference>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:BooleanLiteral"/>
              <initialValues xsi:type="literals:BooleanLiteral"/>
              <initialValues xsi:type="literals:BooleanLiteral"/>
              <initialValues xsi:type="literals:BooleanLiteral"/>
              <initialValues xsi:type="literals:BooleanLiteral"/>
              <initialValues xsi:type="literals:BooleanLiteral"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="signum">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/Duration.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="startMonth">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
                </arraySelectors>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.2/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dMonths">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.99">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/Duration.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.18"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.1/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="temp">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.56"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.4/@variable"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Long"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.2/@variable"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.5/@variable">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.115"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.76"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.58"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="carry">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.96"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.57"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.5/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.58"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="startYear">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>/* Years (may be modified additionally below)&#xA;&#x9;&#x9;  *  E[year] := S[year] + D[year] + carry&#xA;&#x9;&#x9;  */</comments>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.8/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.15"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.8/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dYears">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.99">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/Duration.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.17"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.1/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="endYear">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.8/@variable">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.56"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.7/@variable"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.56"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.10/@variable"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.48">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.11/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="startSeconds">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>/* Zone&#xA;&#x9;         *  E[zone] := S[zone]&#xA;&#x9;&#x9; * &#xA;&#x9;&#x9; * no-op since adding to this, not to a new end point.&#xA;&#x9;&#x9; */</comments>
              <comments>/* Seconds&#xA;&#x9;&#x9;  *  temp := S[second] + D[second]&#xA;&#x9;&#x9;  *  E[second] := modulo(temp, 60)&#xA;&#x9;&#x9;  *  carry := fQuotient(temp, 60)&#xA;&#x9;&#x9;  */</comments>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.13/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.44"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.13/@variable">
                <comments>// seconds + fractionalSeconds</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.45"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dSeconds">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// Duration seconds is SECONDS + FRACTIONALSECONDS.</comments>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DurationImpl.class.xmi#//@classifiers.0/@members.52"/>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/Duration.class.xmi#//@classifiers.0/@members.12"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.22"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                </child>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.1/@variable"/>
            </next>
            <target xsi:type="classifiers:Class" href="DurationImpl.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="tempBD">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.13/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.48"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.15/@variable"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="fQuotient">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.96"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.57"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.16/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.96"/>
                </next>
              </arguments>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="endSeconds">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.16/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.51"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.17/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.53"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83"/>
                </next>
              </arguments>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.7/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.17/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.96"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.58">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.18/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.100"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="tempFracSeconds">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.18/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.51"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
                    <arguments xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:Long"/>
                      <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.44"/>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                </arguments>
              </arguments>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.93">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.82">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.48"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.21/@variable"/>
                </next>
              </arguments>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.58">
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="59"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.7/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.7/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.58"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.16"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.44"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.58">
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.44"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </arguments>
                </expression>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.21/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.87"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81"/>
            </next>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.93">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.21/@variable"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="startMinutes">
          <typeReference xsi:type="types:Int">
            <comments>/* Minutes&#xA;&#x9;         *  temp := S[minute] + D[minute] + carry&#xA;&#x9;         *  E[minute] := modulo(temp, 60)&#xA;&#x9;         *  carry := fQuotient(temp, 60)&#xA;&#x9;&#x9; */</comments>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.43"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.23/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
                </arraySelectors>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.23/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dMinutes">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.99">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/Duration.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.21"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.1/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.5/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.56"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.7/@variable"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.56"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.25/@variable"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.23/@variable"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.57">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.5/@variable">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.115"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.76"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.78"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.7/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.96"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.57"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.5/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="startHours">
          <typeReference xsi:type="types:Int">
            <comments>/* Hours&#xA;&#x9;         *  temp := S[hour] + D[hour] + carry&#xA;&#x9;         *  E[hour] := modulo(temp, 24)&#xA;&#x9;         *  carry := fQuotient(temp, 24)&#xA;&#x9;&#x9; */</comments>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.42"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.29/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
                </arraySelectors>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.29/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dHours">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.99">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/Duration.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.20"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.1/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.5/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.56"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.7/@variable"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.56"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.31/@variable"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.29/@variable"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.5/@variable">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.115"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.76"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.7/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.96"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.57"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.5/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="tempDays">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>/* Days&#xA;&#x9;     *  if S[day] > maximumDayInMonthFor(E[year], E[month])&#xA;&#x9;     *       + tempDays := maximumDayInMonthFor(E[year], E[month])&#xA;&#x9;     *  else if S[day] &lt; 1&#xA;&#x9;     *       + tempDays := 1&#xA;&#x9;     *  else&#xA;&#x9;     *       + tempDays := S[day]&#xA;&#x9;     *  E[day] := tempDays + D[day] + carry&#xA;&#x9;     *  START LOOP&#xA;&#x9;     *       + IF E[day] &lt; 1&#xA;&#x9;     *             # E[day] := E[day] + &#xA;&#x9; &#x9; *                 maximumDayInMonthFor(E[year], E[month] - 1)&#xA;&#x9;     *             # carry := -1&#xA;&#x9;     *       + ELSE IF E[day] > maximumDayInMonthFor(E[year], E[month])&#xA;&#x9;     *             # E[day] := &#xA;&#x9; &#x9; *                    E[day] - maximumDayInMonthFor(E[year], E[month])&#xA;&#x9;     *             # carry := 1&#xA;&#x9;     *       + ELSE EXIT LOOP&#xA;&#x9;     *       + temp := E[month] + carry&#xA;&#x9;     *       + E[month] := modulo(temp, 1, 13)&#xA;&#x9;     *       + E[year] := E[year] + fQuotient(temp, 1, 13)&#xA;&#x9;     *       + GOTO START LOOP&#xA;&#x9;&#x9; */</comments>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="startDay">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.40"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.36/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
                </arraySelectors>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.36/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dDays">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.99">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/Duration.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.19"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.1/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="maxDayInMonth">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.85">
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.38"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.35/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.39/@variable"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.36/@variable"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.39/@variable"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.35/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.36/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.35/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.36/@variable"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                </value>
              </expression>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="endDays">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.35/@variable">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.56"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.7/@variable"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.56"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.38/@variable"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="monthCarry">
          <typeReference xsi:type="types:Int"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="intTemp">
          <typeReference xsi:type="types:Int"/>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="mdimf">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <comments>// calculate days in previous month, watch for month roll over</comments>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="literals:NullLiteral"/>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.44/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
                          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.85">
                            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.38"/>
                            <arguments xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.39"/>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </arguments>
                          </arguments>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                  <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.44/@statement/@statements.0/@statement/@statements.0/@variable">
                        <comments>// roll over to December of previous year</comments>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
                          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.85">
                            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.58"/>
                                <arguments xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
                                    <arguments xsi:type="expressions:CastExpression">
                                      <typeReference xsi:type="types:Long"/>
                                      <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                    </arguments>
                                  </next>
                                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                                </arguments>
                              </next>
                            </arguments>
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="12"/>
                          </arguments>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                      </value>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.41/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.41/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.56"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.44/@statement/@statements.0/@statement/@statements.0/@variable"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.42/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.41/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.106"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.16"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.41/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.41/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.56"/>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
                            <arguments xsi:type="expressions:UnaryExpression">
                              <operators xsi:type="operators:Subtraction"/>
                              <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.85">
                                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.38"/>
                                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39"/>
                              </child>
                            </arguments>
                          </next>
                          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                        </arguments>
                      </next>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.42/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.41/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.106"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.85">
                          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.38"/>
                          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39"/>
                        </arguments>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:Break"/>
              </elseStatement>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.43/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.39"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.42/@variable"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="endMonth">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.43/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </expression>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="13"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </expression>
                </children>
                <multiplicativeOperators xsi:type="operators:Remainder"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="quotient">
              <typeReference xsi:type="types:Int"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.44/@statement/@statements.2/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="13"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </expression>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.44/@statement/@statements.2/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.44/@statement/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <next xsi:type="references:MethodCall">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.100"/>
                      </next>
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.57"/>
                      <arguments xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.13"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.43/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </arguments>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.44/@statement/@statements.2/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.44/@statement/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:MultiplicativeExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.43/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </expression>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="13"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </expression>
                    </children>
                    <multiplicativeOperators xsi:type="operators:Division"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.44/@statement/@statements.2/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.44/@statement/@statements.2/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.48">
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.56"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.44/@statement/@statements.3/@variable"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.44/@statement/@statements.3/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.41/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.115"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// set fields that where undefined before this addition, back to undefined.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Switch">
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.57">
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.58">
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.93">
                      <arguments xsi:type="literals:NullLiteral"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
                </cases>
                <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.46/@init"/>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable">
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.46/@init"/>
              </arraySelectors>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.46/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          <relationOperators xsi:type="operators:LessThanOrEqual"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.46/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:Field" name="FOUR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="HUNDRED">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="FOUR_HUNDRED">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="400"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SIXTY">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="60"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="TWENTY_FOUR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="TWELVE">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.53"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="12"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DECIMAL_ZERO">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DECIMAL_ONE">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="1"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DECIMAL_SIXTY">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="60"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="daysInMonth">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="31">
            <comments>// XML Schema months start at 1.</comments>
          </initialValues>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="28"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="31"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="30"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="31"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="30"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="31"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="31"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="30"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="31"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="30"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="31"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsAfter/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="maximumDayInMonthFor">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="year">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="month">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.84">
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@parameters.1"/>
              </arraySelectors>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@parameters.1"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <comments>// is a leap year.</comments>
                <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="29"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.108"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.15"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.76"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77"/>
                </next>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.108"/>
                          <arguments xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.15"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                          </arguments>
                        </next>
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.76"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76"/>
                      </next>
                    </child>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.108"/>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.15"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                        </arguments>
                      </next>
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.76"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75"/>
                    </next>
                  </children>
                </expression>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.84">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@parameters.1"/>
                  </arraySelectors>
                </returnValue>
              </statements>
            </elseStatement>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="maximumDayInMonthFor">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="year">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="month">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.84">
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@parameters.1"/>
              </arraySelectors>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@parameters.1"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <comments>// is a leap year.</comments>
                <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="29"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:MultiplicativeExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@parameters.0"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="400"/>
                      <multiplicativeOperators xsi:type="operators:Remainder"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:MultiplicativeExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@parameters.0"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
                          <multiplicativeOperators xsi:type="operators:Remainder"/>
                        </expression>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:MultiplicativeExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@parameters.0"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                          <multiplicativeOperators xsi:type="operators:Remainder"/>
                        </expression>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </expression>
                  </children>
                </expression>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.84">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                    </position>
                  </arraySelectors>
                </returnValue>
              </statements>
            </elseStatement>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toGregorianCalendar">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>util</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Convert &lt;code>this&lt;/code> to &lt;code>java.util.GregorianCalendar&lt;/code>.&lt;/p>&#xA;     * &#xA;     * &lt;p>When &lt;code>this&lt;/code> instance has an undefined field, this&#xA;     * conversion relies on the &lt;code>java.util.GregorianCalendar&lt;/code> default &#xA;     * for its corresponding field. A notable difference between&#xA;     * XML Schema 1.0 date/time datatypes and &lt;code>java.util.GregorianCalendar&lt;/code>&#xA;     * is that Timezone value is optional for date/time datatypes and it is&#xA;     * a required field for &lt;code>java.util.GregorianCalendar&lt;/code>. See javadoc&#xA;     * for &lt;code>java.util.TimeZone.getDefault()&lt;/code> on how the default&#xA;     * is determined. To explicitly specify the &lt;code>TimeZone&lt;/code>&#xA;     * instance, see &#xA;     * {@link #toGregorianCalendar(TimeZone, Locale, XMLGregorianCalendar)}.&lt;/p>&#xA;     * &#xA;     * &lt;table border=&quot;2&quot; rules=&quot;all&quot; cellpadding=&quot;2&quot;>&#xA;     *   &lt;thead>&#xA;     *     &lt;tr>&#xA;     *       &lt;th align=&quot;center&quot; colspan=&quot;2&quot;>&#xA;     *          Field by Field Conversion from this class to &#xA;     *          &lt;code>java.util.GregorianCalendar&lt;/code>&#xA;     *       &lt;/th>&#xA;     *     &lt;/tr>&#xA;     *   &lt;/thead>&#xA;     *   &lt;tbody>&#xA;     *     &lt;tr>&#xA;     *        &lt;th>&lt;code>java.util.GregorianCalendar&lt;/code> field&lt;/th>&#xA;     *        &lt;th>&lt;code>javax.xml.datatype.XMLGregorianCalendar&lt;/code> field&lt;/th>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;th>&lt;code>ERA&lt;/code>&lt;/th>&#xA;     *       &lt;th>{@link #getEonAndYear()}&lt;code>.signum() &lt; 0 ? GregorianCalendar.BC : GregorianCalendar.AD&lt;/code>&lt;/th>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;th>&lt;code>YEAR&lt;/code>&lt;/th>&#xA;     *       &lt;th>{@link #getEonAndYear()}&lt;code>.abs().intValue()&lt;/code>&lt;i>*&lt;/i>&lt;/th>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;th>&lt;code>MONTH&lt;/code>&lt;/th>&#xA;     *       &lt;th>{@link #getMonth()}&lt;code> - 1&lt;/code>&lt;/th>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;th>&lt;code>DAY_OF_MONTH&lt;/code>&lt;/th>&#xA;     *       &lt;th>{@link #getDay()}&lt;/th>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;th>&lt;code>AM_PM&lt;/code>&lt;/th>&#xA;     *       &lt;th>{@link #getHour()} &lt; 12 : Calendar.AM : Calendar.PM&lt;/th>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;th>&lt;code>HOUR_OF_DAY&lt;/code>&lt;/th>&#xA;     *       &lt;th>{@link #getHour()}&lt;/th>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;th>&lt;code>MINUTE&lt;/code>&lt;/th>&#xA;     *       &lt;th>{@link #getMinute()}&lt;/th>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;th>&lt;code>SECOND&lt;/code>&lt;/th>&#xA;     *       &lt;th>{@link #getSecond()}&lt;/th>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;th>&lt;code>MILLISECOND&lt;/code>&lt;/th>&#xA;     *       &lt;th>get millisecond order from {@link #getFractionalSecond()}&lt;i>*&lt;/i> &lt;/th>&#xA;     *     &lt;/tr>&#xA;     *     &lt;tr>&#xA;     *       &lt;th>&lt;code>GregorianCalendar.setTimeZone(TimeZone)&lt;/code>&lt;/th>&#xA;     *       &lt;th>{@link #getTimezone()} formatted into Custom timezone id&lt;/th>&#xA;     *     &lt;/tr>&#xA;     *   &lt;/tbody>&#xA;     * &lt;/table>&#xA;     * &lt;i>*&lt;/i> designates possible loss of precision during the conversion due&#xA;     * to source datatype having higer precison than target datatype.&#xA;     * &#xA;     * &lt;p>To ensure consistency in conversion implementations, the new&#xA;     * &lt;code>GregorianCalendar&lt;/code> should be instantiated in following&#xA;     * manner.&#xA;     * &lt;ul>&#xA;     *   &lt;li>Using &lt;code>timeZone&lt;/code> value as defined above, create a new &#xA;     * &lt;code>java.util.GregorianCalendar(timeZone,Locale.getDefault())&lt;/code>.&#xA;     *   &lt;/li>&#xA;     *   &lt;li>Initialize all GregorianCalendar fields by calling {(@link GegorianCalendar#clear()}.&lt;/li>&#xA;     *   &lt;li>Obtain a pure Gregorian Calendar by invoking&#xA;     *   &lt;code>GregorianCalendar.setGregorianChange(&#xA;     *   new Date(Long.MIN_VALUE))&lt;/code>.&lt;/li>&#xA;     *   &lt;li>Its fields ERA, YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, &#xA;     *       MINUTE, SECOND and MILLISECOND are set using the method &#xA;     *       &lt;code>Calendar.set(int,int)&lt;/code>&lt;/li>&#xA;     * &lt;/ul>&#xA;     * &lt;/p>&#xA;     * &#xA;     * @see #toGregorianCalendar(java.util.TimeZone, java.util.Locale, XMLGregorianCalendar)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="DEFAULT_TIMEZONE_OFFSET">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </initialValue>
          <annotationsAndModifiers xsi:type="modifiers:Final"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="tz">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/TimeZone.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.89">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.1/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="locale">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Locale.class.xmi#//@classifiers.0/@members.35"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Locale.class.xmi#//@classifiers.0"/>
              </next>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.2/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.3/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.103"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0/@members.40"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="year">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// if year( and eon) are undefined, leave default Calendar values</comments>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="expressions:ConditionalExpression">
                  <child xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.7/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.75"/>
                      </next>
                    </children>
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Subtraction"/>
                      <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </children>
                  </child>
                  <expressionIf xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0"/>
                  </expressionIf>
                  <expressionElse xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0"/>
                  </expressionElse>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.7/@variable">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.115"/>
                    </next>
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.73"/>
                  </next>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.7/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// only set month if it is set</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable">
              <comments>// Calendar.MONTH is zero based while XMLGregorianCalendar month field is not.</comments>
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// only set day if it is set</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.6"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// only set hour if it is set</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.12"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// only set minute if it is set</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.13"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// only set second if it is set</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// only set millisend if it is set</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.46"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toGregorianCalendar">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timezone">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>util</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/TimeZone.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="aLocale">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>util</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Locale.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaults">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Convert &lt;code>this&lt;/code> along with provided parameters&#xA;     * to &lt;code>java.util.GregorianCalendar&lt;/code> instance.&lt;/p>&#xA;     * &#xA;     * &lt;p> Since XML Schema 1.0 date/time datetypes has no concept of&#xA;     * timezone ids or daylight savings timezone ids, this conversion operation&#xA;     * allows the user to explicitly specify one with&#xA;     * &lt;code>timezone&lt;/code> parameter.&lt;/p>&#xA;     * &#xA;     * &lt;p>To compute the return value's &lt;code>TimeZone&lt;/code> field,&#xA;     * &lt;ul>&#xA;     * &lt;li>when parameter &lt;code>timeZone&lt;/code> is non-null, &#xA;     * it is the timezone field.&lt;/li>&#xA;     * &lt;li>else when &lt;code>this.getTimezone() != DatatypeConstants.FIELD_UNDEFINED&lt;/code>,&#xA;     * create a &lt;code>java.util.TimeZone&lt;/code> with a custom timezone id &#xA;     * using the &lt;code>this.getTimezone()&lt;/code>.&lt;/li>&#xA;     * &lt;li>else when &lt;code>defaults.getTimezone() != DatatypeConstants.FIELD_UNDEFINED&lt;/code>, &#xA;     * create a &lt;code>java.util.TimeZone&lt;/code> with a custom timezone id &#xA;     * using &lt;code>defaults.getTimezone()&lt;/code>.&lt;/li>&#xA;     * &lt;li>else use the &lt;code>GregorianCalendar&lt;/code> default timezone value &#xA;     * for the host is definedas specified by &#xA;     * &lt;code>java.util.TimeZone.getDefault()&lt;/code>.&lt;/li>&lt;/p>&#xA;     * &#xA;     * &lt;p>To ensure consistency in conversion implementations, the new&#xA;     * &lt;code>GregorianCalendar&lt;/code> should be instantiated in following&#xA;     * manner.&#xA;     * &lt;ul>&#xA;     *   &lt;li>Create a new &lt;code>java.util.GregorianCalendar(TimeZone, &#xA;     *       Locale)&lt;/code> with TimeZone set as specified above and the&#xA;     *       &lt;code>Locale&lt;/code> parameter. &#xA;     *   &lt;/li>&#xA;     *   &lt;li>Initialize all GregorianCalendar fields by calling {(@link GegorianCalendar#clear()}.&lt;/li>&#xA;     *   &lt;li>Obtain a pure Gregorian Calendar by invoking&#xA;     *   &lt;code>GregorianCalendar.setGregorianChange(&#xA;     *   new Date(Long.MIN_VALUE))&lt;/code>.&lt;/li>&#xA;     *   &lt;li>Its fields ERA, YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, &#xA;     *       MINUTE, SECOND and MILLISECOND are set using the method &#xA;     *       &lt;code>Calendar.set(int,int)&lt;/code>&lt;/li>&#xA;     * &lt;/ul>&#xA;     * &#xA;     * @param timezone provide Timezone. &lt;code>null&lt;/code> is a legal value.&#xA;     * @param aLocale  provide explicit Locale. Use default GregorianCalendar locale if&#xA;     *                 value is &lt;code>null&lt;/code>.&#xA;     * @param defaults provide default field values to use when corresponding&#xA;     *                 field for this instance is DatatypeConstants.FIELD_UNDEFINED or null. &#xA;     *                 If &lt;code>defaults&lt;/code>is &lt;code>null&lt;/code> or a field&#xA;     *                 within the specified &lt;code>defaults&lt;/code> is undefined,&#xA;     *                 just use &lt;code>java.util.GregorianCalendar&lt;/code> defaults.&#xA;     * @return a java.util.GregorianCalendar conversion of this instance.&#xA;     *&#xA;     * @see #LEAP_YEAR_DEFAULT&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="tz">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/TimeZone.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="defaultZoneoffset">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.2/@statement/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.21"/>
                    </next>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.89">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.2/@statement/@statements.0/@variable"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.1/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.1"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Locale.class.xmi#//@classifiers.0/@members.35"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Locale.class.xmi#//@classifiers.0"/>
                  </next>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.1/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.1"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.103"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0/@members.40"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="year">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// if year( and eon) are undefined, leave default Calendar values</comments>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="expressions:ConditionalExpression">
                  <child xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.7/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.75"/>
                      </next>
                    </children>
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Subtraction"/>
                      <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </children>
                  </child>
                  <expressionIf xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0"/>
                  </expressionIf>
                  <expressionElse xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0"/>
                  </expressionElse>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.7/@variable">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.115"/>
                    </next>
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.73"/>
                  </next>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.7/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="defaultYear">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// use default if set</comments>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </expression>
                </child>
                <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.18"/>
                  </next>
                </expressionIf>
                <expressionElse xsi:type="literals:NullLiteral"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="expressions:ConditionalExpression">
                      <child xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.8/@elseStatement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.75"/>
                          </next>
                        </children>
                        <children xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Subtraction"/>
                          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        </children>
                      </child>
                      <expressionIf xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0/@members.0"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0"/>
                      </expressionIf>
                      <expressionElse xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0/@members.2"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/GregorianCalendar.class.xmi#//@classifiers.0"/>
                      </expressionElse>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.8/@elseStatement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.115"/>
                        </next>
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.73"/>
                      </next>
                    </arguments>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.8/@elseStatement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// only set month if it is set</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
              <comments>// Calendar.MONTH is zero based while XMLGregorianCalendar month field is not.</comments>
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="defaultMonth">
              <typeReference xsi:type="types:Int">
                <comments>// use default if set</comments>
              </typeReference>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </expression>
                </child>
                <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.19"/>
                  </next>
                </expressionIf>
                <expressionElse xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </expressionElse>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
                  <comments>// Calendar.MONTH is zero based while XMLGregorianCalendar month field is not.</comments>
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.2"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.9/@elseStatement/@statements.0/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.9/@elseStatement/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// only set day if it is set</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.6"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="defaultDay">
              <typeReference xsi:type="types:Int">
                <comments>// use default if set</comments>
              </typeReference>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </expression>
                </child>
                <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.20"/>
                  </next>
                </expressionIf>
                <expressionElse xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </expressionElse>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.6"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.10/@elseStatement/@statements.0/@variable"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.10/@elseStatement/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// only set hour if it is set</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.12"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="defaultHour">
              <typeReference xsi:type="types:Int">
                <comments>// use default if set</comments>
              </typeReference>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </expression>
                </child>
                <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                </expressionIf>
                <expressionElse xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </expressionElse>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.12"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.11/@elseStatement/@statements.0/@variable"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.11/@elseStatement/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// only set minute if it is set</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.13"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="defaultMinute">
              <typeReference xsi:type="types:Int">
                <comments>// use default if set</comments>
              </typeReference>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </expression>
                </child>
                <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.23"/>
                  </next>
                </expressionIf>
                <expressionElse xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </expressionElse>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.13"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.12/@elseStatement/@statements.0/@variable"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.12/@elseStatement/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// only set second if it is set</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="defaultSecond">
              <typeReference xsi:type="types:Int">
                <comments>// use default if set</comments>
              </typeReference>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </expression>
                </child>
                <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.24"/>
                  </next>
                </expressionIf>
                <expressionElse xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                </expressionElse>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.14"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.13/@elseStatement/@statements.0/@variable"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.13/@elseStatement/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// only set millisend if it is set</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.46"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="defaultFractionalSecond">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// use default if set</comments>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </expression>
                </child>
                <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.26"/>
                  </next>
                </expressionIf>
                <expressionElse xsi:type="literals:NullLiteral"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.99"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0/@members.15"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Calendar.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0/@members.25"/>
                      </next>
                    </arguments>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.14/@elseStatement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getTimeZone">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/TimeZone.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaultZoneoffset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Returns a &lt;code>java.util.TimeZone&lt;/code> for this class.&lt;/p>&#xA;     * &#xA;     * &lt;p>If timezone field is defined for this instance, &#xA;     * returns TimeZone initialized with custom timezone id&#xA;     * of zoneoffset. If timezone field is undefined, &#xA;     * try the defaultZoneoffset that was passed in. &#xA;     * If defaultZoneoffset is DatatypeConstants.FIELD_UNDEFINED, return&#xA;     * default timezone for this host.&#xA;     * (Same default as java.util.GregorianCalendar).&lt;/p>&#xA;     *&#xA;     * @param defaultZoneoffset default zoneoffset if this zoneoffset is &#xA;     * {@link DatatypeConstants#FIELD_UNDEFINED}.&#xA;     *&#xA;     * @return TimeZone for this.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/TimeZone.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="zoneoffset">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@parameters.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.1/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/TimeZone.class.xmi#//@classifiers.0/@members.37"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/TimeZone.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.1/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="sign">
              <typeReference xsi:type="types:Char">
                <comments>// zoneoffset is in minutes. Convert to custom timezone id format.</comments>
              </typeReference>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.1/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </child>
                <expressionIf xsi:type="literals:CharacterLiteral" value="45"/>
                <expressionElse xsi:type="literals:CharacterLiteral" value="43"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.1/@variable"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.3/@elseStatement/@statements.0/@variable"/>
              <children xsi:type="literals:CharacterLiteral" value="45"/>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="hour">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.1/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="60"/>
                <multiplicativeOperators xsi:type="operators:Division"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="minutes">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.1/@variable"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:MultiplicativeExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.3/@elseStatement/@statements.2/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="60"/>
                    <multiplicativeOperators xsi:type="operators:Multiplication"/>
                  </expression>
                </children>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="customTimezoneId">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// Javadoc for java.util.TimeZone documents max length</comments>
                  <comments>// for customTimezoneId is 8 when optional ':' is not used.</comments>
                  <comments>// Format is </comments>
                  <comments>// &quot;GMT&quot; ('-'|''+') (digit digit?) (digit digit)?</comments>
                  <comments>//                   hour          minutes</comments>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.3/@elseStatement/@statements.4/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                <arguments xsi:type="references:StringReference" value="GMT"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.3/@elseStatement/@statements.4/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.3/@elseStatement/@statements.0/@variable"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.3/@elseStatement/@statements.4/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.27"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.3/@elseStatement/@statements.2/@variable"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.3/@elseStatement/@statements.4/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.27"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.3/@elseStatement/@statements.3/@variable"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.3/@elseStatement/@statements.3/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/TimeZone.class.xmi#//@classifiers.0/@members.31"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.3/@elseStatement/@statements.4/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
                    </next>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/TimeZone.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="clone">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Creates and returns a copy of this object.&lt;/p>&#xA;     * &#xA;     * @return copy of this &lt;code>Object&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>// Both this.eon and this.fractionalSecond are instances</comments>
        <comments>// of immutable classes, so they do not need to be cloned.</comments>
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.38"/>
          <arguments xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </arguments>
          <arguments xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </arguments>
          <arguments xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <self xsi:type="literals:This"/>
          </arguments>
          <arguments xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <self xsi:type="literals:This"/>
          </arguments>
          <arguments xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            <self xsi:type="literals:This"/>
          </arguments>
          <arguments xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
            <self xsi:type="literals:This"/>
          </arguments>
          <arguments xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <self xsi:type="literals:This"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="clear">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Unset all fields to undefined.&lt;/p>&#xA;     *&#xA;     * &lt;p>Set all int fields to {@link DatatypeConstants#FIELD_UNDEFINED} and reference fields &#xA;     * to null.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <comments>// in minutes</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setMillisecond">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="millisecond">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.92/@parameters.0"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.55">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.92/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.83"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                </next>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:Long"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.92/@parameters.0"/>
                </arguments>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setFractionalSecond">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fractional">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../util/DatatypeMessageFormatter.class.xmi#//@classifiers.0/@members.2"/>
                      <arguments xsi:type="literals:NullLiteral"/>
                      <arguments xsi:type="references:StringReference" value="InvalidFractional"/>
                      <arguments xsi:type="arrays:ArrayInstantiationByValues">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arrayDimensionsBefore/>
                        <arrayInitializer>
                          <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.93/@parameters.0"/>
                        </arrayInitializer>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../util/DatatypeMessageFormatter.class.xmi#//@classifiers.0"/>
                  </arguments>
                </throwable>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.93/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.87"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81"/>
                    </next>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.93/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.87"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.82"/>
                    </next>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:GreaterThan"/>
                </expression>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.93/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.93/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="Parser">
      <members xsi:type="members:Field" name="format">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="flen">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="vlen">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="fidx">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="vidx">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Constructor" name="Parser">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.6/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.6/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.2"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.6/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.3"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.6/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </value>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="format">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:ClassMethod" name="parse">
        <typeReference xsi:type="types:Void"/>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * &lt;p>Parse a formated &lt;code>String&lt;/code> into an &lt;code>XMLGregorianCalendar&lt;/code>.&lt;/p>&#xA;         * &#xA;         * &lt;p>If &lt;code>String&lt;/code> is not formated as a legal &lt;code>XMLGregorianCalendar&lt;/code> value,&#xA;         * an &lt;code>IllegalArgumentException&lt;/code> is thrown.&lt;/p>&#xA;         * &#xA;         * @throws IllegalArgumentException If &lt;code>String&lt;/code> is not formated as a legal &lt;code>XMLGregorianCalendar&lt;/code> value.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="fch">
                <typeReference xsi:type="types:Char"/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                    <arguments xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.4"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </arguments>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.10">
                    <comments>// not a meta character</comments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.7/@statements.0/@statement/@statements.0/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Continue"/>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.7/@statements.0/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:CharacterLiteral" value="37"/>
              </condition>
            </statements>
            <statements xsi:type="statements:Switch">
              <comments>// seen meta character. we don't do error check against the format</comments>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.48">
                    <comments>// year</comments>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.12">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                    </arguments>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="literals:CharacterLiteral" value="89"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                    <comments>// month</comments>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.11">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                    </arguments>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="literals:CharacterLiteral" value="77"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
                    <comments>// days</comments>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.11">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                    </arguments>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="literals:CharacterLiteral" value="68"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
                    <comments>// hours</comments>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.11">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                    </arguments>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="literals:CharacterLiteral" value="104"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.57">
                    <comments>// minutes</comments>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.11">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                    </arguments>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="literals:CharacterLiteral" value="109"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.58">
                    <comments>// parse seconds.</comments>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.11">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                    </arguments>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.93">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.13"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.8"/>
                    <children xsi:type="literals:CharacterLiteral" value="46"/>
                  </condition>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="literals:CharacterLiteral" value="115"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="vch">
                    <typeReference xsi:type="types:Char">
                      <comments>// time zone. missing, 'Z', or [+-]nn:nn</comments>
                    </typeReference>
                    <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.8"/>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.7/@statements.0/@statement/@statements.2/@cases.6/@statements.0/@variable"/>
                    <children xsi:type="literals:CharacterLiteral" value="90"/>
                  </condition>
                  <elseStatement xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
                          <operator xsi:type="operators:PlusPlus"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="h">
                          <typeReference xsi:type="types:Int"/>
                          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.11">
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.10">
                          <arguments xsi:type="literals:CharacterLiteral" value="58"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="m">
                          <typeReference xsi:type="types:Int"/>
                          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.11">
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                          <arguments xsi:type="expressions:MultiplicativeExpression">
                            <children xsi:type="expressions:NestedExpression">
                              <expression xsi:type="expressions:AdditiveExpression">
                                <children xsi:type="expressions:MultiplicativeExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.7/@statements.0/@statement/@statements.2/@cases.6/@statements.1/@elseStatement/@statement/@statements.1/@variable"/>
                                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="60"/>
                                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                                </children>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.7/@statements.0/@statement/@statements.2/@cases.6/@statements.1/@elseStatement/@statement/@statements.3/@variable"/>
                                <additiveOperators xsi:type="operators:Addition"/>
                              </expression>
                            </children>
                            <children xsi:type="expressions:NestedExpression">
                              <expression xsi:type="expressions:ConditionalExpression">
                                <child xsi:type="expressions:EqualityExpression">
                                  <equalityOperators xsi:type="operators:Equal"/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.7/@statements.0/@statement/@statements.2/@cases.6/@statements.0/@variable"/>
                                  <children xsi:type="literals:CharacterLiteral" value="43"/>
                                </child>
                                <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                <expressionElse xsi:type="expressions:UnaryExpression">
                                  <operators xsi:type="operators:Subtraction"/>
                                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                </expressionElse>
                              </expression>
                            </children>
                            <multiplicativeOperators xsi:type="operators:Multiplication"/>
                          </arguments>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalOrExpression">
                      <children xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.7/@statements.0/@statement/@statements.2/@cases.6/@statements.0/@variable"/>
                        <children xsi:type="literals:CharacterLiteral" value="43"/>
                      </children>
                      <children xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.7/@statements.0/@statement/@statements.2/@cases.6/@statements.0/@variable"/>
                        <children xsi:type="literals:CharacterLiteral" value="45"/>
                      </children>
                    </condition>
                  </elseStatement>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="literals:CharacterLiteral" value="122"/>
              </cases>
              <cases xsi:type="statements:DefaultSwitchCase">
                <statements xsi:type="statements:Throw">
                  <comments>// illegal meta character. impossible.</comments>
                  <throwable xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/InternalError.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </throwable>
                </statements>
              </cases>
              <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                  <arguments xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.4"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </arguments>
                </next>
              </variable>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.4"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.2"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <comments>//,vidx);</comments>
            <statements xsi:type="statements:Throw">
              <comments>// some tokens are left in the input</comments>
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.1"/>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.3"/>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="peek">
        <typeReference xsi:type="types:Char"/>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Char"/>
                <child xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </child>
              </returnValue>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.3"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="read">
        <typeReference xsi:type="types:Char"/>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <comments>//,vidx);</comments>
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.1"/>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.3"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
              <arguments xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
                <operator xsi:type="operators:PlusPlus"/>
              </arguments>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="skip">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <comments>//,vidx-1);</comments>
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.1"/>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.9"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.10/@parameters.0"/>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="parseInt">
        <comments>//            } catch( NumberFormatException e ) {</comments>
        <comments>//                // if the value is too long for int, NumberFormatException is thrown</comments>
        <comments>//                throw new IllegalArgumentException(value,vstart);</comments>
        <comments>//            }</comments>
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="minDigits">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="maxDigits">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="vstart">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
          </variable>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
                <operator xsi:type="operators:PlusPlus"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.95">
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.8"/>
            </children>
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.11/@statements.0/@variable"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </expression>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.11/@parameters.1"/>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <comments>//,vidx);</comments>
            <statements xsi:type="statements:Throw">
              <comments>// we are expecting more digits</comments>
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.1"/>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.11/@statements.0/@variable"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </expression>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.11/@parameters.0"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <comments>// NumberFormatException is IllegalArgumentException            </comments>
          <comments>//           try {</comments>
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0/@members.19"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.56"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.11/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
                </next>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="parseBigInteger">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="minDigits">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="vstart">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// skip leading negative, if it exists</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
                <operator xsi:type="operators:PlusPlus"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.8"/>
            <children xsi:type="literals:CharacterLiteral" value="45"/>
          </condition>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
                <operator xsi:type="operators:PlusPlus"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.95">
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.8"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <comments>//,vidx);</comments>
            <statements xsi:type="statements:Throw">
              <comments>// we are expecting more digits</comments>
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.1"/>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.12/@statements.0/@variable"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </expression>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.12/@parameters.0"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.56"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.12/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
              </next>
            </arguments>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="parseBigDecimal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="vstart">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
                <operator xsi:type="operators:PlusPlus"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.8"/>
            <children xsi:type="literals:CharacterLiteral" value="46"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.1"/>
              </throwable>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
                <operator xsi:type="operators:PlusPlus"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.95">
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.94/@members.8"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.56"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.13/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@members.5"/>
              </next>
            </arguments>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="isDigit">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="literals:CharacterLiteral" value="48"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.95/@parameters.0"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.95/@parameters.0"/>
            <children xsi:type="literals:CharacterLiteral" value="57"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="format">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="format">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="buf">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="fidx">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <additionalLocalVariables name="flen">
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </initialValue>
          </additionalLocalVariables>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="fch">
              <typeReference xsi:type="types:Char"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                  <arguments xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.1/@variable"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </arguments>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.0/@variable">
                  <comments>// not a meta char</comments>
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.2/@statement/@statements.0/@variable"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Continue"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.2/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:CharacterLiteral" value="37"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Switch">
            <comments>// impossible</comments>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.98">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.0/@variable"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.38"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="89"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.97">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.0/@variable"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="77"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.97">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.0/@variable"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.40"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="68"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.97">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.0/@variable"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.42"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="104"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.97">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.0/@variable"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.43"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="109"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.97">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.0/@variable"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.44"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="frac">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.92"/>
                        </next>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.0/@variable">
                      <comments>//skip leading zero.</comments>
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.2/@statement/@statements.2/@cases.5/@statements.1/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.56"/>
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.2/@statement/@statements.2/@cases.5/@statements.1/@statement/@statements.0/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                              </next>
                            </arguments>
                          </next>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.47"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="115"/>
            </cases>
            <cases xsi:type="statements:NormalSwitchCase">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="offset">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                        <arguments xsi:type="literals:CharacterLiteral" value="90"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.2/@statement/@statements.2/@cases.6/@statements.0/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                              <arguments xsi:type="literals:CharacterLiteral" value="45"/>
                            </next>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:AssignmentExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.2/@statement/@statements.2/@cases.6/@statements.0/@variable"/>
                            <assignmentOperator xsi:type="operators:AssignmentMultiplication"/>
                            <value xsi:type="expressions:UnaryExpression">
                              <operators xsi:type="operators:Subtraction"/>
                              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            </value>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.2/@statement/@statements.2/@cases.6/@statements.0/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <relationOperators xsi:type="operators:LessThan"/>
                      </condition>
                      <elseStatement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                              <arguments xsi:type="literals:CharacterLiteral" value="43"/>
                            </next>
                          </expression>
                        </statements>
                      </elseStatement>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.97">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.0/@variable"/>
                        <arguments xsi:type="expressions:MultiplicativeExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.2/@statement/@statements.2/@cases.6/@statements.0/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="60"/>
                          <multiplicativeOperators xsi:type="operators:Division"/>
                        </arguments>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                          <arguments xsi:type="literals:CharacterLiteral" value="58"/>
                        </next>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.97">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.0/@variable"/>
                        <arguments xsi:type="expressions:MultiplicativeExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.2/@statement/@statements.2/@cases.6/@statements.0/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="60"/>
                          <multiplicativeOperators xsi:type="operators:Remainder"/>
                        </arguments>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.2/@statement/@statements.2/@cases.6/@statements.0/@variable"/>
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0/@members.16"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/DatatypeConstants.class.xmi#//@classifiers.0"/>
                    </children>
                  </condition>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Break"/>
              <condition xsi:type="literals:CharacterLiteral" value="122"/>
            </cases>
            <cases xsi:type="statements:DefaultSwitchCase">
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/InternalError.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </throwable>
              </statements>
            </cases>
            <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                <arguments xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.1/@variable"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </arguments>
              </next>
            </variable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.1/@variable"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.1/@variable/@additionalLocalVariables.0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="printNumber">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="number">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nDigits">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Prints an integer as a String. &#xA;     * &#xA;     * @param out&#xA;     *      The formatted string will be appended into this buffer.&#xA;     * @param number&#xA;     *      The integer to be printed. &#xA;     * @param nDigits&#xA;     *      The field will be printed by using at least this&#xA;     *      number of digits. For example, 5 will be printed as &quot;0005&quot;&#xA;     *      if nDigits==4. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.83"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@parameters.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
              <arguments xsi:type="literals:CharacterLiteral" value="48"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@statements.1/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </initialValue>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@statements.1/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@statements.0/@variable"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="printNumber">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="number">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nDigits">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Prints an BigInteger as a String. &#xA;     * &#xA;     * @param out&#xA;     *      The formatted string will be appended into this buffer.&#xA;     * @param number&#xA;     *      The integer to be printed. &#xA;     * @param nDigits&#xA;     *      The field will be printed by using at least this&#xA;     *      number of digits. For example, 5 will be printed as &quot;0005&quot;&#xA;     *      if nDigits==4. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@parameters.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.113"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
              <arguments xsi:type="literals:CharacterLiteral" value="48"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@statements.1/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </initialValue>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@statements.1/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@statements.0/@variable"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="sanitize">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Number.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="signum">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * Compute &lt;code>value*signum&lt;/code> where value==null is treated as&#xA;     * value==0.&#xA;     * @return non-null {@link BigInteger}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.15"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@parameters.1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@parameters.1"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </expression>
          </child>
          <expressionIf xsi:type="expressions:NestedExpression">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0/@members.74"/>
            </next>
            <expression xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@parameters.0"/>
            </expression>
          </expressionIf>
          <expressionElse xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/math/BigInteger.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@parameters.0"/>
          </expressionElse>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="reset">
      <comments>//PENDING : Implementation of reset method  </comments>
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &lt;p>&lt;code>reset()&lt;/code> is designed to allow the reuse of existing &#xA;     * &lt;code>XMLGregorianCalendar&lt;/code>s thus saving resources associated&#xA;     *  with the creation of new &lt;code>XMLGregorianCalendar&lt;/code>s.&lt;/p>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** &#xA; * &lt;p>Representation for W3C XML Schema 1.0 date/time datatypes.&#xA; * Specifically, these date/time datatypes are &#xA; * {@link DatatypeConstants#DATETIME dateTime},&#xA; * {@link DatatypeConstants#TIME time},&#xA; * {@link DatatypeConstants#DATE date},&#xA; * {@link DatatypeConstants#GYEARMONTH gYearMonth},&#xA; * {@link DatatypeConstants#GMONTHDAY gMonthDay},&#xA; * {@link DatatypeConstants#GYEAR gYear}, &#xA; * {@link DatatypeConstants#GMONTH gMonth} and&#xA; * {@link DatatypeConstants#GDAY gDay}&#xA; * defined in the XML Namespace&#xA; * &lt;code>&quot;http://www.w3.org/2001/XMLSchema&quot;&lt;/code>.&#xA; * These datatypes are normatively defined in &#xA; * &lt;a href=&quot;http://www.w3.org/TR/xmlschema-2/#dateTime&quot;>W3C XML Schema 1.0 Part 2, Section 3.2.7-14&lt;/a>.&lt;/p>&#xA; *&#xA; * &lt;p>The table below defines the mapping between XML Schema 1.0&#xA; * date/time datatype fields and this class' fields. It also summarizes&#xA; * the value constraints for the date and time fields defined in&#xA; * &lt;a href=&quot;http://www.w3.org/TR/xmlschema-2/#isoformats&quot;>W3C XML Schema 1.0 Part 2, Appendix D,&#xA; * &lt;i>ISO 8601 Date and Time Formats&lt;/i>&lt;/a>.&lt;/p>&#xA; * &#xA; * &lt;a name=&quot;datetimefieldsmapping&quot;/>&#xA; * &lt;table border=&quot;2&quot; rules=&quot;all&quot; cellpadding=&quot;2&quot;>&#xA; *   &lt;thead>&#xA; *     &lt;tr>&#xA; *       &lt;th align=&quot;center&quot; colspan=&quot;3&quot;>&#xA; *         Date/time datatype field mapping between XML Schema 1.0 and Java representation&#xA; *       &lt;/th>&#xA; *     &lt;/tr>&#xA; *   &lt;/thead>&#xA; *   &lt;tbody>&#xA; *     &lt;tr>&#xA; *       &lt;th>XML Schema 1.0&lt;br/>&#xA; *           datatype&lt;br/> &#xA; *            field&lt;/th>&#xA; *       &lt;th>Related&lt;br/>XMLGregorianCalendar&lt;br/>Accessor(s)&lt;/th>&#xA; *       &lt;th>Value Range&lt;/th>&#xA; *     &lt;/tr>&#xA; *     &lt;a name=&quot;datetimefield-year&quot;/>&#xA; *     &lt;tr>&#xA; *       &lt;td> year &lt;/td>&#xA; *       &lt;td> {@link #getYear()} + {@link #getEon()} or&lt;br/>&#xA; *            {@link #getEonAndYear}&#xA; *       &lt;/td>&#xA; *       &lt;td> &lt;code>getYear()&lt;/code> is a value between -(10^9-1) to (10^9)-1 &#xA; *            or {@link DatatypeConstants#FIELD_UNDEFINED}.&lt;br/>&#xA; *            {@link #getEon()} is high order year value in billion of years.&lt;br/>&#xA; *            &lt;code>getEon()&lt;/code> has values greater than or equal to (10^9) or less than or equal to -(10^9).&#xA; *            A value of null indicates field is undefined.&lt;/br>&#xA; *            Given that &lt;a href=&quot;http://www.w3.org/2001/05/xmlschema-errata#e2-63&quot;>XML Schema 1.0 errata&lt;/a> states that the year zero&#xA; *            will be a valid lexical value in a future version of XML Schema, &#xA; *            this class allows the year field to be set to zero. Otherwise,&#xA; *            the year field value is handled exactly as described&#xA; *            in the errata and [ISO-8601-1988]. Note that W3C XML Schema 1.0&#xA; *            validation does not allow for the year field to have a value of zero.&#xA; *            &lt;/td>&#xA; *     &lt;/tr>&#xA; *     &lt;a name=&quot;datetimefield-month&quot;/>&#xA; *     &lt;tr>&#xA; *       &lt;td> month &lt;/td>&#xA; *       &lt;td> {@link #getMonth()} &lt;/td>&#xA; *       &lt;td> 1 to 12 or {@link DatatypeConstants#FIELD_UNDEFINED} &lt;/td>&#xA; *     &lt;/tr>&#xA; *     &lt;a name=&quot;datetimefield-day&quot;/>&#xA; *     &lt;tr>&#xA; *       &lt;td> day &lt;/td>&#xA; *       &lt;td> {@link #getDay()} &lt;/td>&#xA; *       &lt;td> Independent of month, max range is 1 to 31 or {@link DatatypeConstants#FIELD_UNDEFINED}.&lt;br/>&#xA; *            The normative value constraint stated relative to month &#xA; *            field's value is in &lt;a href=&quot;http://www.w3.org/TR/xmlschema-2/#isoformats&quot;>W3C XML Schema 1.0 Part 2, Appendix D&lt;/a>.&#xA; *       &lt;/td> &#xA; *     &lt;/tr>&#xA; *     &lt;a name=&quot;datetimefield-hour&quot;/>&#xA; *     &lt;tr>&#xA; *       &lt;td> hour &lt;/td>&#xA; *       &lt;td> {@link #getHour()} &lt;/td>&#xA; *       &lt;td>&#xA; *         0 to 24 or {@link DatatypeConstants#FIELD_UNDEFINED}&#xA; *         &lt;a href=&quot;http://www.w3.org/2001/05/xmlschema-errata#e2-45&quot;>For a value of 24, the minute and second field must be zero.&lt;/a>&#xA; *       &lt;/td>&#xA; *     &lt;/tr>&#xA; *     &lt;a name=&quot;datetimefield-minute&quot;/>&#xA; *     &lt;tr>&#xA; *       &lt;td> minute &lt;/td>&#xA; *       &lt;td> {@link #getMinute()} &lt;/td>&#xA; *       &lt;td> 0 to 59 or {@link DatatypeConstants#FIELD_UNDEFINED} &lt;/td>&#xA; *     &lt;/tr>&#xA; *     &lt;a name=&quot;datetimefield-second&quot;/>&#xA; *     &lt;tr>&#xA; *       &lt;td>second&lt;/td>&#xA; *       &lt;td>&#xA; *         {@link #getSecond()} + {@link #getMillisecond()}/1000 or&lt;br/>&#xA; *         {@link #getSecond()} + {@link #getFractionalSecond()}&#xA; *       &lt;/td>&#xA; *       &lt;td>&#xA; *         {@link #getSecond()} from 0 to 60 or {@link DatatypeConstants#FIELD_UNDEFINED}.&lt;br/>&#xA; *         &lt;i>(Note: 60 only allowable for leap second.)&lt;/i>&lt;br/>&#xA; *         {@link #getFractionalSecond()} allows for infinite precision over the range from 0.0 to 1.0 when &#xA; *         the {@link #getSecond()} is defined.&lt;br/>&#xA; *         &lt;code>FractionalSecond&lt;/code> is optional and has a value of &lt;code>null&lt;/code> when it is undefined.&lt;br />&#xA; *            {@link #getMillisecond()} is the convenience &#xA; *            millisecond precision of value of {@link #getFractionalSecond()}.&#xA; *       &lt;/td>&#xA; *     &lt;/tr>&#xA; *     &lt;tr id=&quot;datetimefield-timezone&quot;>&#xA; *       &lt;td> timezone &lt;/td>&#xA; *       &lt;td> {@link #getTimezone()} &lt;/td>&#xA; *       &lt;td> Number of minutes or {@link DatatypeConstants#FIELD_UNDEFINED}.&#xA; *         Value range from -14 hours (-14 * 60 minutes) to 14 hours (14 * 60 minutes).&#xA; *       &lt;/td>&#xA; *     &lt;/tr>&#xA; *   &lt;/tbody>&#xA; *  &lt;/table>&#xA; *&#xA; * &lt;p>All maximum value space constraints listed for the fields in the table &#xA; * above are checked by factory methods, setter methods and parse methods of&#xA; * this class. &lt;code>IllegalArgumentException&lt;/code> is thrown when &#xA; * parameter's value is outside the maximum value constraint for the field.&#xA; * Validation checks, for example, whether days in month should be &#xA; * limited to 29, 30 or 31 days, that are dependent on the values of other &#xA; * fields are not checked by these methods. &#xA; * &lt;/p>&#xA; * &#xA; * &lt;p>The following operations are defined for this class:&#xA; * &lt;ul>&#xA; *   &lt;li>factory methods to create instances&lt;/li>&#xA; *   &lt;li>accessors/mutators for independent date/time fields&lt;/li>&#xA; *   &lt;li>conversion between this class and W3C XML Schema 1.0 lexical representation&lt;/li>&#xA; *   &lt;li>conversion between this class and &lt;code>java.util.GregorianCalendar&lt;/code>&lt;/li>&#xA; *   &lt;li>partial order relation comparator method, {@link #compare(XMLGregorianCalendar)}&lt;/li>&#xA; *   &lt;li>{@link #equals(Object)} defined relative to {@link #compare(XMLGregorianCalendar)}.&lt;/li>&#xA; *   &lt;li> addition operation with {@link javax.xml.datatype.Duration}. &#xA; * instance as defined in &lt;a href=&quot;http://www.w3.org/TR/xmlschema-2/#adding-durations-to-dateTimes&quot;>&#xA; * W3C XML Schema 1.0 Part 2, Appendix E, &lt;i>Adding durations to dateTimes&lt;/i>&lt;/a>.&lt;/li>&#xA; * &lt;/ul>&#xA; * &lt;/p>&#xA; * &#xA; * @author &lt;a href=&quot;mailto:Kohsuke.Kawaguchi@Sun.com&quot;>Kohsuke Kawaguchi&lt;/a>&#xA; * @author &lt;a href=&quot;mailto:Joseph.Fialli@Sun.com&quot;>Joseph Fialli&lt;/a>&#xA; * @version $Revision: 1.11 $, $Date: 2004/07/07 06:16:15 $    &#xA; * @see javax.xml.datatype.Duration&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../../../../../java/lang/Cloneable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/datatype/XMLGregorianCalendar.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
