<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../../../java.ecore#/16" name="NodeEditAS.java">
  <comments>/*&#xA; * Copyright (c) 2001 World Wide Web Consortium,&#xA; * (Massachusetts Institute of Technology, Institut National de&#xA; * Recherche en Informatique et en Automatique, Keio University). All&#xA; * Rights Reserved. This program is distributed under the W3C's Software&#xA; * Intellectual Property License. This program is distributed in the&#xA; * hope that it will be useful, but WITHOUT ANY WARRANTY; without even&#xA; * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR&#xA; * PURPOSE.&#xA; * See W3C License http://www.w3.org/Consortium/Legal/ for more details.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xerces</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>dom3</namespaces>
  <namespaces>as</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="NodeEditAS">
    <members xsi:type="members:Field" name="WF_CHECK">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ASCheckType</comments>
        <comments>/**&#xA;     * Check for well-formedness of this node.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NS_WF_CHECK">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Check for namespace well-formedness includes &lt;code>WF_CHECK&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="PARTIAL_VALIDITY_CHECK">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Checks for whether this node is partially valid. It includes &#xA;     * &lt;code>NS_WF_CHECK&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="STRICT_VALIDITY_CHECK">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Checks for strict validity of the node with respect to active AS which &#xA;     * by definition includes &lt;code>NS_WF_CHECK&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="canInsertBefore">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newChild">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="refChild">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines whether the &lt;code>insertBefore&lt;/code> operation from the &#xA;     * &lt;code>Node&lt;/code> interface would make this document invalid with &#xA;     * respect to the currently active AS. Describe &quot;valid&quot; when referring &#xA;     * to partially completed documents.&#xA;     * @param newChild &lt;code>Node&lt;/code> to be inserted.&#xA;     * @param refChild Reference &lt;code>Node&lt;/code>.&#xA;     * @return &lt;code>true&lt;/code> if no reason it can't be done; &#xA;     *   &lt;code>false&lt;/code> if it can't be done.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="canRemoveChild">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oldChild">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Has the same arguments as &lt;code>RemoveChild&lt;/code>.&#xA;     * @param oldChild &lt;code>Node&lt;/code> to be removed.&#xA;     * @return &lt;code>true&lt;/code> if no reason it can't be done; &#xA;     *   &lt;code>false&lt;/code> if it can't be done.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="canReplaceChild">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newChild">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oldChild">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Has the same arguments as &lt;code>ReplaceChild&lt;/code>.&#xA;     * @param newChild New &lt;code>Node&lt;/code>.&#xA;     * @param oldChild &lt;code>Node&lt;/code> to be replaced.&#xA;     * @return &lt;code>true&lt;/code> if no reason it can't be done; &#xA;     *   &lt;code>false&lt;/code> if it can't be done.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="canAppendChild">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newChild">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Has the same arguments as &lt;code>AppendChild&lt;/code>.&#xA;     * @param newChild &lt;code>Node&lt;/code> to be appended.&#xA;     * @return &lt;code>true&lt;/code> if no reason it can't be done; &#xA;     *   &lt;code>false&lt;/code> if it can't be done.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isNodeValid">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="deep">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="wFValidityCheckLevel">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMASException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines if the Node is valid relative to currently active AS. It &#xA;     * doesn't normalize before checking if the document is valid. To do so, &#xA;     * one would need to explicitly call a normalize method. &#xA;     * @param deep Setting the &lt;code>deep&lt;/code> flag on causes the &#xA;     *   &lt;code>isNodeValid&lt;/code> method to check for the whole subtree of &#xA;     *   the current node for validity. Setting it to &lt;code>false&lt;/code> &#xA;     *   only checks the current node and its immediate child nodes. The &#xA;     *   &lt;code>validate&lt;/code> method on the &lt;code>DocumentAS&lt;/code> &#xA;     *   interface, however, checks to determine whether the entire document &#xA;     *   is valid.&#xA;     * @param wFValidityCheckLevel Flag to tell at what level validity and &#xA;     *   well-formedness checking is done. &#xA;     * @return &lt;code>true&lt;/code> if the node is valid/well-formed in the &#xA;     *   current context and check level defined by &#xA;     *   &lt;code>wfValidityCheckLevel&lt;/code>, &lt;code>false&lt;/code> if not.&#xA;     * @exception DOMASException&#xA;     *   &lt;code>NO_AS_AVAILABLE&lt;/code>: Raised if the &#xA;     *   &lt;code>DocumentEditAS&lt;/code> related to this node does not have any &#xA;     *   active &lt;code>ASModel&lt;/code> and &lt;code>wfValidityCheckLevel&lt;/code> &#xA;     *   is set to &lt;code>PARTIAL&lt;/code> or &lt;code>STRICT_VALIDITY_CHECK&lt;/code>&#xA;     *   .&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * @deprecated&#xA; * This interface extends a &lt;code>Node&lt;/code> from  with additional methods &#xA; * for guided document editing. The expectation is that an instance of the &#xA; * &lt;code>DOMImplementationAS&lt;/code> interface can be obtained by using &#xA; * binding-specific casting methods on an instance of the &#xA; * &lt;code>DOMImplementation&lt;/code> interface when the DOM implementation &#xA; * supports the feature &quot;&lt;code>AS-DOC&lt;/code>&quot;.&#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2001/WD-DOM-Level-3-ASLS-20011025'>Document Object Model (DOM) Level 3 Abstract Schemas and Load&#xA;and Save Specification&lt;/a>.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
