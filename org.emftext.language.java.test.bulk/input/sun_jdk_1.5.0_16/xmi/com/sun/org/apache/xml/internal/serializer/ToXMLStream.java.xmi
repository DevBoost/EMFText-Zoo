<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16" name="ToXMLStream.java">
  <comments>/*&#xA; * Copyright 2001-2004 The Apache Software Foundation.&#xA; *&#xA; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#xA; * you may not use this file except in compliance with the License.&#xA; * You may obtain a copy of the License at&#xA; *&#xA; *     http://www.apache.org/licenses/LICENSE-2.0&#xA; *&#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <comments>/*&#xA; * $Id: ToXMLStream.java,v 1.13 2004/02/18 22:57:44 minchau Exp $&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>serializer</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>transform</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../javax/xml/transform/ErrorListener.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>transform</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../javax/xml/transform/Result.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>transform</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../javax/xml/transform/Transformer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>transform</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../javax/xml/transform/TransformerException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>res</namespaces>
    <classifier xsi:type="classifiers:Class" href="../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>res</namespaces>
    <classifier xsi:type="classifiers:Class" href="../res/XMLMessages.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ToXMLStream">
    <members xsi:type="members:Field" name="m_cdataTagOpen">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * remembers if we need to write out &quot;]]>&quot; to close the CDATA&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="m_xmlcharInfo">
      <initialValue xsi:type="references:IdentifierReference">
        <comments>//      new CharInfo(CharInfo.XML_ENTITIES_RESOURCE);</comments>
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="CharInfo.class.xmi#//@classifiers.0/@members.24"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="CharInfo.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <target xsi:type="classifiers:Class" href="CharInfo.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Method.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="Method.class.xmi#//@classifiers.0"/>
          </arguments>
        </next>
        <target xsi:type="classifiers:Class" href="CharInfo.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CharInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Map that tells which XML characters should have special treatment, and it&#xA;     *  provides character to entity name lookup.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Constructor" name="ToXMLStream">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.13"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.39"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <comments>// initialize namespaces</comments>
            <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.18"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NamespaceMappings.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </value>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Default constructor.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="CopyFrom">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xmlListener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Copy properties from another SerializerToXML.&#xA;     *&#xA;     * @param xmlListener non-null reference to a SerializerToXML object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.21"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.21"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="encoding">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// m_outputStream = xmlListener.m_outputStream;</comments>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.40"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.96"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.42"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.43"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.7"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.7"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.6"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.6"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.8"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.8"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.12"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.12"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.82"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.81"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.16"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.16"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.7"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.7"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.47"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.46"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.45"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.44"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.49"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.51"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.56"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.53"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.9"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.9"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.15"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.15"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.20"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.20"/>
            </next>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="startDocumentInternal">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of the beginning of a document.&#xA;     *&#xA;     * @throws org.xml.sax.SAXException Any SAX exception, possibly&#xA;     *            wrapping another exception.&#xA;     *&#xA;     * @throws org.xml.sax.SAXException&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.87"/>
              </next>
              <self xsi:type="literals:Super"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.0"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return"/>
            <condition xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.3"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.7"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.16"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="encoding">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Encodings.class.xmi#//@classifiers.0/@members.14"/>
                      <arguments xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.40"/>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="Encodings.class.xmi#//@classifiers.0"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="version">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.54"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.1/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="1.0"/>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.1/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="standalone">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.3/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:StringReference" value=" standalone=&quot;"/>
                        <children xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.51"/>
                        </children>
                        <children xsi:type="references:StringReference" value="&quot;"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.11"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.3/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:StringReference" value=""/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:TryBlock">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="writer">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <namespaces>java</namespaces>
                      <namespaces>io</namespaces>
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.21"/>
                    </initialValue>
                    <annotationsAndModifiers xsi:type="modifiers:Final"/>
                  </variable>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.5/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                      <arguments xsi:type="references:StringReference" value="&lt;?xml version=&quot;"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.5/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.1/@variable"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.5/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                      <arguments xsi:type="references:StringReference" value="&quot; encoding=&quot;"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.5/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.0/@variable"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.5/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.5"/>
                      <arguments xsi:type="literals:CharacterLiteral" value="34"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.5/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.3/@variable"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.5/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                      <arguments xsi:type="references:StringReference" value="?>"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.5/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.7"/>
                        <arguments xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.10"/>
                        </arguments>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <arguments xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.12"/>
                        </arguments>
                      </next>
                    </expression>
                  </statement>
                  <condition xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.12"/>
                  </condition>
                </statements>
                <catcheBlocks>
                  <statements xsi:type="statements:Throw">
                    <throwable xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.5/@statement/@statements.5/@catcheBlocks.0/@parameter"/>
                    </throwable>
                  </statements>
                  <parameter name="e">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </parameter>
                </catcheBlocks>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.43"/>
              </children>
              <children xsi:type="literals:BooleanLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.0"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="endDocument">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of the end of a document.&#xA;     *&#xA;     * @throws org.xml.sax.SAXException Any SAX exception, possibly&#xA;     *            wrapping another exception.&#xA;     *&#xA;     * @throws org.xml.sax.SAXException&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.89"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.31"/>
              </expression>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.1/@statement/@statements.0/@catcheBlocks.0/@parameter"/>
                </throwable>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.12"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.8"/>
            </child>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.26"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.82"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.19"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="startPreserving">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Starts a whitespace preserving section. All characters printed&#xA;     * within a preserving section are printed without indentation and&#xA;     * without consolidating multiple spaces. This is equivalent to&#xA;     * the &lt;tt>xml:space=&amp;quot;preserve&amp;quot;&lt;/tt> attribute. Only XML&#xA;     * and HTML serializers need to support this method.&#xA;     * &lt;p>&#xA;     * The contents of the whitespace preserving section will be delivered&#xA;     * through the regular &lt;tt>characters&lt;/tt> event.&#xA;     *&#xA;     * @throws org.xml.sax.SAXException&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <comments>// Not sure this is really what we want.  -sb</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../utils/BoolStack.class.xmi#//@classifiers.0/@members.7"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          </next>
          <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.6"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.7"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="endPreserving">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Ends a whitespace preserving section.&#xA;     *&#xA;     * @see #startPreserving&#xA;     *&#xA;     * @throws org.xml.sax.SAXException&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <comments>// Not sure this is really what we want.  -sb</comments>
            <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.7"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:ConditionalExpression">
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../utils/BoolStack.class.xmi#//@classifiers.0/@members.14"/>
              </next>
              <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.6"/>
            </child>
            <expressionIf xsi:type="literals:BooleanLiteral"/>
            <expressionElse xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../utils/BoolStack.class.xmi#//@classifiers.0/@members.8"/>
              </next>
              <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.6"/>
            </expressionElse>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="processingInstruction">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="data">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of a processing instruction.&#xA;     *&#xA;     * @param target The processing instruction target.&#xA;     * @param data The processing instruction data, or null if&#xA;     *        none was supplied.&#xA;     * @throws org.xml.sax.SAXException Any SAX exception, possibly&#xA;     *            wrapping another exception.&#xA;     *&#xA;     * @throws org.xml.sax.SAXException&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.3"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.89"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.53"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../javax/xml/transform/Result.class.xmi#//@classifiers.0/@members.0"/>
              </next>
              <target xsi:type="classifiers:Interface" href="../../../../../../../javax/xml/transform/Result.class.xmi#//@classifiers.0"/>
            </arguments>
          </next>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.52"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../javax/xml/transform/Result.class.xmi#//@classifiers.0/@members.1"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../../../../../../../javax/xml/transform/Result.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:TryBlock">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.79"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="ElemContext.class.xmi#//@classifiers.0/@members.9"/>
                        </next>
                        <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.22"/>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:BooleanLiteral"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="ElemContext.class.xmi#//@classifiers.0/@members.9"/>
                  </next>
                  <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.22"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.42"/>
                  </expression>
                </statement>
                <condition xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.83"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="writer">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>java</namespaces>
                    <namespaces>io</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.21"/>
                  </initialValue>
                  <annotationsAndModifiers xsi:type="modifiers:Final"/>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@statements.2/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                    <arguments xsi:type="references:StringReference" value="&lt;?"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@statements.2/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@statements.2/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.5"/>
                      <arguments xsi:type="literals:CharacterLiteral" value="32"/>
                    </next>
                  </expression>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                      </next>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <relationOperators xsi:type="operators:GreaterThan"/>
                  </children>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/Character.class.xmi#//@classifiers.0/@members.139"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          </next>
                        </arguments>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Character.class.xmi#//@classifiers.0"/>
                    </child>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="indexOfQLT">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.49"/>
                      <arguments xsi:type="references:StringReference" value="?>"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <comments>// See XSLT spec on error recovery of &quot;?>&quot; in PIs.</comments>
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@statements.2/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.56"/>
                                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@statements.6/@variable"/>
                              </next>
                            </arguments>
                          </next>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@statements.6/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                        <arguments xsi:type="references:StringReference" value="? >"/>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <comments>// add space between.</comments>
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@statements.2/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.55"/>
                                <arguments xsi:type="expressions:AdditiveExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@statements.6/@variable"/>
                                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                                  <additiveOperators xsi:type="operators:Addition"/>
                                </arguments>
                              </next>
                            </arguments>
                          </next>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@statements.6/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </expression>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                        </next>
                      </children>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@statements.6/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
                      </next>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@statements.2/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.5"/>
                    <arguments xsi:type="literals:CharacterLiteral" value="63"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@statements.2/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.5"/>
                    <arguments xsi:type="literals:CharacterLiteral" value="62"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <comments>// Always output a newline char if not inside of an</comments>
                <comments>// element. The whitespace is not significant in that</comments>
                <comments>// case.</comments>
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@statements.2/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.7"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.10"/>
                      </arguments>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.12"/>
                      </arguments>
                    </next>
                  </expression>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="ElemContext.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                    <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.22"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThanOrEqual"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="ToStream.class.xmi#//@classifiers.0/@members.16"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
              <catcheBlocks>
                <statements xsi:type="statements:Throw">
                  <throwable xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@elseStatement/@elseStatement/@statements.0/@catcheBlocks.0/@parameter"/>
                  </throwable>
                </statements>
                <parameter name="e">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </parameter>
              </catcheBlocks>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.84"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.19"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="entityReference">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notivication of a entityReference.&#xA;     *&#xA;     * @param name The name of the entity.&#xA;     *&#xA;     * @throws org.xml.sax.SAXException&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.79"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="ElemContext.class.xmi#//@classifiers.0/@members.9"/>
                </next>
                <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.22"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="ElemContext.class.xmi#//@classifiers.0/@members.9"/>
          </next>
          <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.22"/>
        </condition>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.42"/>
            </expression>
          </statement>
          <condition xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.83"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="writer">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>java</namespaces>
              <namespaces>io</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.21"/>
            </initialValue>
            <annotationsAndModifiers xsi:type="modifiers:Final"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.1/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.5"/>
              <arguments xsi:type="literals:CharacterLiteral" value="38"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.1/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.1/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.5"/>
              <arguments xsi:type="literals:CharacterLiteral" value="59"/>
            </next>
          </expression>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.1/@catcheBlocks.0/@parameter"/>
            </throwable>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.85"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.19"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addUniqueAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flags">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method is used to add an attribute to the currently open element. &#xA;     * The caller has guaranted that this attribute is unique, which means that it&#xA;     * not been seen before and will not be seen again.&#xA;     * &#xA;     * @param name the qualified name of the attribute&#xA;     * @param value the value of the attribute which can contain only&#xA;     * ASCII printable characters characters in the range 32 to 127 inclusive.&#xA;     * @param flags the bit values of this integer give optimization information.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="patchedName">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.29"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
                </initialValue>
                <annotationsAndModifiers xsi:type="modifiers:Final"/>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="writer">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>java</namespaces>
                  <namespaces>io</namespaces>
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.21"/>
                </initialValue>
                <annotationsAndModifiers xsi:type="modifiers:Final"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@statement/@statements.0/@statements.1/@variable">
                    <comments>// &quot;flags&quot; has indicated that the characters</comments>
                    <comments>// '>'  '&lt;'   '&amp;'  and '&quot;' are not in the value and</comments>
                    <comments>// m_htmlcharInfo has recorded that there are no other</comments>
                    <comments>// entities in the range 32 to 127 so we write out the</comments>
                    <comments>// value directly</comments>
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.5"/>
                      <arguments xsi:type="literals:CharacterLiteral" value="32"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@statement/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@statement/@statements.0/@statements.0/@variable"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@statement/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                      <arguments xsi:type="references:StringReference" value="=&quot;"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@statement/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@statement/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.5"/>
                      <arguments xsi:type="literals:CharacterLiteral" value="34"/>
                    </next>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AndExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2"/>
                      <children xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="ExtendedContentHandler.class.xmi#//@classifiers.0/@members.0"/>
                      </children>
                    </expression>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:GreaterThan"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="CharInfo.class.xmi#//@classifiers.0/@members.6"/>
                  </next>
                </children>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@statement/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.5"/>
                      <arguments xsi:type="literals:CharacterLiteral" value="32"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@statement/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@statement/@statements.0/@statements.0/@variable"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@statement/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.8"/>
                      <arguments xsi:type="references:StringReference" value="=&quot;"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.66"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@statement/@statements.0/@statements.1/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1"/>
                    <arguments xsi:type="references:SelfReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.40"/>
                      </next>
                      <self xsi:type="literals:This"/>
                    </arguments>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@statement/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/Writer.class.xmi#//@classifiers.0/@members.5"/>
                      <arguments xsi:type="literals:CharacterLiteral" value="34"/>
                    </next>
                  </expression>
                </statements>
              </elseStatement>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@statement/@statements.0/@catcheBlocks.0/@parameter"/>
                </throwable>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="ElemContext.class.xmi#//@classifiers.0/@members.9"/>
          </next>
          <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.22"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="uri">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="rawName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="prefixUsed">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.87"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.2"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.2">
                        <comments>// use a different raw name, with the prefix used in the</comments>
                        <comments>// generated namespace declaration</comments>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                        <children xsi:type="references:StringReference" value=":"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.2"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </children>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.2">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.42"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      </next>
                    </child>
                  </children>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.2">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="references:StringReference" value="xmlns"/>
                </next>
              </child>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.91"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.2"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.3"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.4"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="ElemContext.class.xmi#//@classifiers.0/@members.9"/>
          </next>
          <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.22"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="msg">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>/*&#xA;             * The startTag is closed, yet we are adding an attribute?&#xA;             *&#xA;             * Section: 7.1.3 Creating Attributes Adding an attribute to an&#xA;             * element after a PI (for example) has been added to it is an&#xA;             * error. The attributes can be ignored. The spec doesn't explicitly&#xA;             * say this is disallowed, as it does for child elements, but it&#xA;             * makes sense to have the same treatment.&#xA;             *&#xA;             * We choose to ignore the attribute which is added too late.&#xA;             */</comments>
                  <comments>// Generate a warning of the ignored attributes</comments>
                  <comments>// Create the warning message</comments>
                  <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../res/XMLMessages.class.xmi#//@classifiers.0/@members.8"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../res/XMLErrorResources.class.xmi#//@classifiers.0/@members.77"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
                  </arguments>
                  <arguments xsi:type="arrays:ArrayInstantiationByValues">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arrayDimensionsBefore/>
                    <arrayInitializer>
                      <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
                    </arrayInitializer>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../res/XMLMessages.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="tran">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <comments>// Prepare to issue the warning message</comments>
                    <target xsi:type="classifiers:Class" href="../../../../../../../javax/xml/transform/Transformer.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:SelfReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.71"/>
                  </next>
                  <self xsi:type="literals:Super"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="errHandler">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../../../../../javax/xml/transform/ErrorListener.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@elseStatement/@statements.1/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../javax/xml/transform/Transformer.class.xmi#//@classifiers.0/@members.13"/>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <comments>// Issue the warning message</comments>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@elseStatement/@statements.1/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../../javax/xml/transform/ErrorListener.class.xmi#//@classifiers.0/@members.0"/>
                    <arguments xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../../../../javax/xml/transform/TransformerException.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@elseStatement/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.20"/>
                      </arguments>
                    </arguments>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="literals:NullLiteral"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@elseStatement/@statements.1/@statements.1/@variable"/>
                </children>
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.20"/>
                  </children>
                  <children xsi:type="literals:NullLiteral"/>
                </children>
              </condition>
              <elseStatement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@elseStatement/@statements.0/@variable"/>
                    </next>
                    <target xsi:type="members:Field" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                </expression>
              </elseStatement>
            </statements>
            <catcheBlocks>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="endElement">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="elemName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * @see com.sun.org.apache.xml.internal.serializer.ExtendedContentHandler#endElement(String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.67"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="namespaceAfterStartElement">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="prefix">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="uri">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * From XSLTC&#xA;     * Related to startPrefixMapping ???&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// hack for XSLTC with finding URI for default namespace</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="prefix1">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SerializerBase.class.xmi#//@classifiers.0/@members.64"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="ElemContext.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                  <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.22"/>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference">
                    <comments>// the elements URI is not known yet, and it</comments>
                    <comments>// doesn't have a prefix, and we are currently</comments>
                    <comments>// setting the uri for prefix &quot;&quot;, so we have</comments>
                    <comments>// the uri for the element... lets remember it</comments>
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="ElemContext.class.xmi#//@classifiers.0/@members.4"/>
                    </next>
                    <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.22"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
                </next>
                <target xsi:type="members:Field" href="SerializerConstants.class.xmi#//@classifiers.0/@members.6"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ElemContext.class.xmi#//@classifiers.0/@members.4"/>
            </next>
            <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.22"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.70"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
          <arguments xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return"/>
    </members>
    <members xsi:type="members:ClassMethod" name="pushNamespace">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="prefix">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="uri">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * From XSLTC&#xA;     * Declare a prefix to point to a namespace URI. Inform SAX handler&#xA;     * if this is a new prefix mapping.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.69"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
            </statements>
          </statement>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="NamespaceMappings.class.xmi#//@classifiers.0/@members.11"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="ElemContext.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.22"/>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="SerializerBase.class.xmi#//@classifiers.0/@members.18"/>
          </condition>
        </statements>
        <catcheBlocks>
          <comments>// falls through</comments>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="reset">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Try's to reset the super class and reset this class for &#xA;     * re-use, so that you don't need to create a new serializer &#xA;     * (mostly for performance reasons).&#xA;     * &#xA;     * @return true if the class was successfuly reset.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="wasReset">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ToStream.class.xmi#//@classifiers.0/@members.94"/>
          </next>
          <self xsi:type="literals:Super"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="resetToXMLStream">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Reset all of the fields owned by ToStream class&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * @author Santiago Pericas-Geertsen&#xA; * @author G. Todd Miller &#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="ToStream.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
