<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16" name="DTMAxisTraverser.java">
  <comments>/*&#xA; * Copyright 1999-2004 The Apache Software Foundation.&#xA; *&#xA; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#xA; * you may not use this file except in compliance with the License.&#xA; * You may obtain a copy of the License at&#xA; *&#xA; *     http://www.apache.org/licenses/LICENSE-2.0&#xA; *&#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <comments>/*&#xA; * $Id: DTMAxisTraverser.java,v 1.4 2004/02/16 23:03:44 minchau Exp $&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>dtm</namespaces>
  <classifiers xsi:type="classifiers:Class" name="DTMAxisTraverser">
    <members xsi:type="members:ClassMethod" name="first">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * By the nature of the stateless traversal, the context node can not be&#xA;   * returned or the iteration will go into an infinate loop.  So to traverse &#xA;   * an axis, the first function must be used to get the first node.&#xA;   *&#xA;   * &lt;p>This method needs to be overloaded only by those axis that process&#xA;   * the self node. &lt;\p>&#xA;   *&#xA;   * @param context The context node of this traversal. This is the point&#xA;   * that the traversal starts from.&#xA;   * @return the first node in the traversal.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.2">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="first">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="extendedTypeID">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * By the nature of the stateless traversal, the context node can not be&#xA;   * returned or the iteration will go into an infinate loop.  So to traverse &#xA;   * an axis, the first function must be used to get the first node.&#xA;   *&#xA;   * &lt;p>This method needs to be overloaded only by those axis that process&#xA;   * the self node. &lt;\p>&#xA;   *&#xA;   * @param context The context node of this traversal. This is the point&#xA;   * of origin for the traversal -- its &quot;root node&quot; or starting point.&#xA;   * @param extendedTypeID The extended type ID that must match.&#xA;   *&#xA;   * @return the first node in the traversal.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.3">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="next">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="current">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Traverse to the next node after the current node.&#xA;   *&#xA;   * @param context The context node of this traversal. This is the point&#xA;   * of origin for the traversal -- its &quot;root node&quot; or starting point.&#xA;   * @param current The current node of the traversal. This is the last known&#xA;   * location in the traversal, typically the node-handle returned by the&#xA;   * previous traversal step. For the first traversal step, context&#xA;   * should be set equal to current. Note that in order to test whether&#xA;   * context is in the set, you must use the first() method instead.&#xA;   *&#xA;   * @return the next node in the iteration, or DTM.NULL.&#xA;   * @see first(int)&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="next">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="current">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="extendedTypeID">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Traverse to the next node after the current node that is matched&#xA;   * by the extended type ID.&#xA;   *&#xA;   * @param context The context node of this traversal. This is the point&#xA;   * of origin for the traversal -- its &quot;root node&quot; or starting point.&#xA;   * @param current The current node of the traversal. This is the last known&#xA;   * location in the traversal, typically the node-handle returned by the&#xA;   * previous traversal step. For the first traversal step, context&#xA;   * should be set equal to current. Note that in order to test whether&#xA;   * context is in the set, you must use the first() method instead.&#xA;   * @param extendedTypeID The extended type ID that must match.&#xA;   *&#xA;   * @return the next node in the iteration, or DTM.NULL.&#xA;   * @see first(int,int)&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A class that implements traverses DTMAxisTraverser interface can traverse&#xA; * a set of nodes, usually as defined by an XPath axis.  It is different from&#xA; * an iterator, because it does not need to hold state, and, in fact, must not&#xA; * hold any iteration-based state.  It is meant to be implemented as an inner&#xA; * class of a DTM, and returned by the getAxisTraverser(final int axis)&#xA; * function.&#xA; *&#xA; * &lt;p>A DTMAxisTraverser can probably not traverse a reverse axis in&#xA; * document order.&lt;/p>&#xA; *&#xA; * &lt;p>Typical usage:&lt;/p>&#xA; * &lt;pre>&lt;code>&#xA; * for(int nodeHandle=myTraverser.first(myContext);&#xA; *     nodeHandle!=DTM.NULL;&#xA; *     nodeHandle=myTraverser.next(myContext,nodeHandle))&#xA; * { ... processing for node indicated by nodeHandle goes here ... }&#xA; * &lt;/code>&lt;/pre>&#xA; *&#xA; * @author Scott Boag&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
