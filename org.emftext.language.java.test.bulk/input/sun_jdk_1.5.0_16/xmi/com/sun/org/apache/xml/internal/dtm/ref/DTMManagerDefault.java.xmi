<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../../../../../java.ecore#/17" name="DTMManagerDefault.java">
  <comments>/*&#xA; * Copyright 1999-2004 The Apache Software Foundation.&#xA; *&#xA; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#xA; * you may not use this file except in compliance with the License.&#xA; * You may obtain a copy of the License at&#xA; *&#xA; *     http://www.apache.org/licenses/LICENSE-2.0&#xA; *&#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <comments>/*&#xA; * $Id: DTMManagerDefault.java,v 1.51 2004/02/16 23:06:11 minchau Exp $&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>dtm</namespaces>
  <namespaces>ref</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>parsers</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/parsers/DocumentBuilder.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>parsers</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/parsers/DocumentBuilderFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>transform</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../../javax/xml/transform/Source.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>transform</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/transform/dom/DOMSource.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>transform</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/transform/sax/SAXSource.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>transform</namespaces>
    <namespaces>stream</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/transform/stream/StreamSource.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>dtm</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>dtm</namespaces>
    <classifier xsi:type="classifiers:Class" href="../DTMException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>dtm</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../DTMFilter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>dtm</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../DTMIterator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>dtm</namespaces>
    <classifier xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>dtm</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../DTMWSFilter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>dtm</namespaces>
    <namespaces>ref</namespaces>
    <namespaces>dom2dtm</namespaces>
    <classifier xsi:type="classifiers:Class" href="dom2dtm/DOM2DTM.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>dtm</namespaces>
    <namespaces>ref</namespaces>
    <namespaces>sax2dtm</namespaces>
    <classifier xsi:type="classifiers:Class" href="sax2dtm/SAX2DTM.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>dtm</namespaces>
    <namespaces>ref</namespaces>
    <namespaces>sax2dtm</namespaces>
    <classifier xsi:type="classifiers:Class" href="sax2dtm/SAX2RTFDTM.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>res</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>res</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../res/XMLMessages.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>utils</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../utils/PrefixResolver.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>utils</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../utils/SystemIDResolver.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>utils</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../utils/XMLReaderManager.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>utils</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../utils/XMLStringFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Document.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/InputSource.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/SAXNotSupportedException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <namespaces>helpers</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/helpers/XMLReaderFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="DTMManagerDefault">
    <members xsi:type="members:Field" name="DUMPTREE">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>//static final boolean JKESS_XNI_EXPERIMENT=true;</comments>
        <comments>/** Set this to true if you want a dump of the DTM after creation. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DEBUG">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Set this to true if you want a basic diagnostics. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="m_dtms">
      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="256"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsAfter/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Map from DTM identifier numbers to DTM objects that this manager manages.&#xA;   * One DTM may have several prefix numbers, if extended node indexing&#xA;   * is in use; in that case, m_dtm_offsets[] will used to control which&#xA;   * prefix maps to which section of the DTM.&#xA;   * &#xA;   * This array grows as necessary; see addDTM().&#xA;   * &#xA;   * This array grows as necessary; see addDTM(). Growth is uncommon... but&#xA;   * access needs to be blindingly fast since it's used in node addressing.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_dtm_offsets">
      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
        <typeReference xsi:type="types:Int"/>
        <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="256"/>
      </initialValue>
      <typeReference xsi:type="types:Int">
        <comments>/** Map from DTM identifier numbers to offsets. For small DTMs with a &#xA;   * single identifier, this will always be 0. In overflow addressing, where&#xA;   * additional identifiers are allocated to access nodes beyond the range of&#xA;   * a single Node Handle, this table is used to map the handle's node field&#xA;   * into the actual node identifier.&#xA;   * &#xA;   * This array grows as necessary; see addDTM().&#xA;   * &#xA;   * This array grows as necessary; see addDTM(). Growth is uncommon... but&#xA;   * access needs to be blindingly fast since it's used in node addressing.&#xA;   * (And at the moment, that includes accessing it from DTMDefaultBase,&#xA;   * which is why this is not Protected or Private.)&#xA;   */</comments>
      </typeReference>
      <arrayDimensionsAfter/>
    </members>
    <members xsi:type="members:Field" name="m_readerManager">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../utils/XMLReaderManager.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * The cache for XMLReader objects to be used if the user did not&#xA;   * supply an XMLReader for a SAXSource or supplied a StreamSource.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="addDTM">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized">
        <comments>/**&#xA;   * Add a DTM to the DTM table. This convenience call adds it as the &#xA;   * &quot;base DTM ID&quot;, with offset 0. The other version of addDTM should &#xA;   * be used if you want to add &quot;extended&quot; DTM IDs with nonzero offsets.&#xA;   *&#xA;   * @param dtm Should be a valid reference to a DTM.&#xA;   * @param id Integer DTM ID to be bound to this DTM&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addDTM">
      <comments>// The DTM should have been told who its manager was when we created it.</comments>
      <comments>// Do we need to allow for adopting DTMs _not_ created by this manager?</comments>
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized">
        <comments>/**&#xA;   * Add a DTM to the DTM table.&#xA;   *&#xA;   * @param dtm Should be a valid reference to a DTM.&#xA;   * @param id Integer DTM ID to be bound to this DTM.&#xA;   * @param offset Integer addressing offset. The internal DTM Node ID is&#xA;   * obtained by adding this offset to the node-number field of the &#xA;   * public DTM Handle. For the first DTM ID accessing each DTM, this is 0;&#xA;   * for overflow addressing it will be a multiple of 1&lt;&lt;IDENT_DTM_NODE_BITS.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <comments>//&quot;No more DTM IDs are available!&quot;);&#x9;&#x9;&#x9; </comments>
          <statements xsi:type="statements:Throw">
            <comments>// TODO: %REVIEW% Not really the right error message.</comments>
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../DTMException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../res/XMLMessages.class.xmi#//@classifiers.0/@members.8"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0/@members.20"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
                  </arguments>
                  <arguments xsi:type="literals:NullLiteral"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../res/XMLMessages.class.xmi#//@classifiers.0"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.8"/>
          </children>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldlen">
          <typeReference xsi:type="types:Int">
            <comments>// We used to just allocate the array size to IDENT_MAX_DTMS.</comments>
            <comments>// But we expect to increase that to 16 bits, and I'm not willing</comments>
            <comments>// to allocate that much space unless needed. We could use one of our</comments>
            <comments>// handy-dandy Fast*Vectors, but this will do for now.</comments>
            <comments>// %REVIEW%</comments>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
            <next xsi:type="references:IdentifierReference"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="newlen">
              <typeReference xsi:type="types:Int">
                <comments>// Various growth strategies are possible. I think we don't want </comments>
                <comments>// to over-allocate excessively, and I'm willing to reallocate</comments>
                <comments>// more often to get that. See also Fast*Vector classes.</comments>
                <comments>//</comments>
                <comments>// %REVIEW% Should throw a more diagnostic error if we go over the max...</comments>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Math.class.xmi#//@classifiers.0/@members.37"/>
                  <arguments xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="256"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </expression>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.8"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Math.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="new_m_dtms">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arrayDimensionsAfter/>
              <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.2/@statement/@statements.0/@variable"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.2/@statement/@statements.1/@variable"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.1/@variable"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.2/@statement/@statements.1/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="new_m_dtm_offsets">
              <typeReference xsi:type="types:Int"/>
              <arrayDimensionsAfter/>
              <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Int"/>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.2/@statement/@statements.0/@variable"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.2/@statement/@statements.4/@variable"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.1/@variable"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.2/@statement/@statements.4/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.1/@variable"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
          <relationOperators xsi:type="operators:LessThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
            <arraySelectors>
              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
            <arraySelectors>
              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../DTM.class.xmi#//@classifiers.0/@members.80"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFirstFreeDTMID">
      <comments>// count on addDTM() to throw exception if out of range</comments>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized">
        <comments>/**&#xA;   * Get the first free DTM ID available. %OPT% Linear search is inefficient!&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="n">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
            <next xsi:type="references:IdentifierReference"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@init"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="literals:NullLiteral"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@init"/>
                </arraySelectors>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:Field" name="m_expandedNameTable">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ExpandedNameTable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ExpandedNameTable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;   * The default table for exandedNameID lookups.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DTMManagerDefault">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Constructor DTMManagerDefault&#xA;   *&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getDTM">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="source">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../javax/xml/transform/Source.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="unique">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="whiteSpaceFilter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../DTMWSFilter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="incremental">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="doIndexing">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized">
        <comments>/**&#xA;   * Get an instance of a DTM, loaded with the content from the&#xA;   * specified source.  If the unique flag is true, a new instance will&#xA;   * always be returned.  Otherwise it is up to the DTMManager to return a&#xA;   * new instance or an instance that it already created and may be being used&#xA;   * by someone else.&#xA;   * &#xA;   * A bit of magic in this implementation: If the source is null, unique is true,&#xA;   * and incremental and doIndexing are both false, we return an instance of&#xA;   * SAX2RTFDTM, which see.&#xA;   * &#xA;   * (I think more parameters will need to be added for error handling, and entity&#xA;   * resolution, and more explicit control of the RTF situation).&#xA;   *&#xA;   * @param source the specification of the source object.&#xA;   * @param unique true if the returned DTM must be unique, probably because it&#xA;   * is going to be mutated.&#xA;   * @param whiteSpaceFilter Enables filtering of whitespace nodes, and may&#xA;   *                         be null.&#xA;   * @param incremental true if the DTM should be built incrementally, if&#xA;   *                    possible.&#xA;   * @param doIndexing true if the caller considers it worth it to use&#xA;   *                   indexing schemes.&#xA;   *&#xA;   * @return a non-null DTM reference.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="Starting "/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1"/>
                      <expressionIf xsi:type="references:StringReference" value="UNIQUE"/>
                      <expressionElse xsi:type="references:StringReference" value="shared"/>
                    </expression>
                  </children>
                  <children xsi:type="references:StringReference" value=" source: "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../../../../../javax/xml/transform/Source.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </children>
                  <additiveOperators xsi:type="operators:Addition"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </next>
              <target xsi:type="members:Field" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="literals:NullLiteral"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="xstringFactory">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../utils/XMLStringFactory.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.2"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dtmPos">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="documentID">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:ShiftExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@variable"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.5"/>
            </children>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="dtm">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="dom2dtm/DOM2DTM.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="dom2dtm/DOM2DTM.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/transform/dom/DOMSource.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.4"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@statement/@statements.0/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@variable"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Return">
            <comments>//      if (DUMPTREE)</comments>
            <comments>//      {</comments>
            <comments>//        dtm.dumpDTM();</comments>
            <comments>//      }</comments>
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@statement/@statements.0/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="literals:NullLiteral"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
            </expression>
          </children>
          <children xsi:type="expressions:InstanceOfExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/transform/dom/DOMSource.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="isSAXSource">
              <typeReference xsi:type="types:Boolean"/>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="literals:NullLiteral"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
                  </expression>
                </child>
                <expressionIf xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:InstanceOfExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/transform/sax/SAXSource.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
                  </expression>
                </expressionIf>
                <expressionElse xsi:type="literals:BooleanLiteral" value="true"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="isStreamSource">
              <typeReference xsi:type="types:Boolean"/>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="literals:NullLiteral"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
                  </expression>
                </child>
                <expressionIf xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:InstanceOfExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/transform/stream/StreamSource.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
                  </expression>
                </expressionIf>
                <expressionElse xsi:type="literals:BooleanLiteral"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="reader">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="literals:NullLiteral"/>
                </variable>
              </statements>
              <statements xsi:type="statements:TryBlock">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="xmlSource">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/InputSource.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="literals:NullLiteral"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="literals:NullLiteral"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
                        </value>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/transform/sax/SAXSource.class.xmi#//@classifiers.0/@members.12"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/transform/sax/SAXSource.class.xmi#//@classifiers.0"/>
                        </value>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="urlOfSource">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../../../org/xml/sax/InputSource.class.xmi#//@classifiers.0/@members.12"/>
                          </next>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:TryBlock">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.1/@elseStatement/@statements.2/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:IdentifierReference">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../utils/SystemIDResolver.class.xmi#//@classifiers.0/@members.7"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.1/@elseStatement/@statements.2/@variable"/>
                                </next>
                                <target xsi:type="classifiers:Class" href="../../utils/SystemIDResolver.class.xmi#//@classifiers.0"/>
                              </value>
                            </expression>
                          </statements>
                          <catcheBlocks>
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:IdentifierReference">
                                <comments>// %REVIEW% Is there a better way to send a warning?</comments>
                                <next xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                                    <arguments xsi:type="expressions:AdditiveExpression">
                                      <children xsi:type="references:StringReference" value="Can not absolutize URL: "/>
                                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.1/@elseStatement/@statements.2/@variable"/>
                                      <additiveOperators xsi:type="operators:Addition"/>
                                    </arguments>
                                  </next>
                                  <target xsi:type="members:Field" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.2"/>
                                </next>
                                <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                              </expression>
                            </statements>
                            <parameter name="e">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences>
                                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                                </classifierReferences>
                              </typeReference>
                            </parameter>
                          </catcheBlocks>
                        </statements>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../../../../../org/xml/sax/InputSource.class.xmi#//@classifiers.0/@members.11"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.1/@elseStatement/@statements.2/@variable"/>
                            </next>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="literals:NullLiteral"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.1/@elseStatement/@statements.2/@variable"/>
                      </condition>
                    </statements>
                  </elseStatement>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="dtm">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="sax2dtm/SAX2DTM.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <comments>/**************************************************************&#xA;          // EXPERIMENTAL 3/22/02&#xA;          else if(JKESS_XNI_EXPERIMENT &amp;&amp; m_incremental) {        &#x9;&#xA;            dtm = new XNI2DTM(this, source, documentID, whiteSpaceFilter,&#xA;                              xstringFactory, doIndexing);&#xA;          }&#xA;          **************************************************************/</comments>
                  <comments>// Create the basic SAX2DTM.</comments>
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable">
                          <comments>// Special case to support RTF construction into shared DTM.</comments>
                          <comments>// It should actually still work for other uses,</comments>
                          <comments>// but may be slightly deoptimized relative to the base</comments>
                          <comments>// to allow it to deal with carrying multiple documents.</comments>
                          <comments>//</comments>
                          <comments>// %REVIEW% This is a sloppy way to request this mode;</comments>
                          <comments>// we need to consider architectural improvements.</comments>
                        </child>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="sax2dtm/SAX2RTFDTM.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:SelfReference">
                            <self xsi:type="literals:This"/>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.4"/>
                        </value>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1"/>
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.3"/>
                    </children>
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.4"/>
                    </children>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="sax2dtm/SAX2DTM.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:SelfReference">
                            <self xsi:type="literals:This"/>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.4"/>
                        </value>
                      </expression>
                    </statements>
                  </elseStatement>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
                    <comments>// Go ahead and add the DTM to the lookup table.  This needs to be</comments>
                    <comments>// done before any parsing occurs. Note offset 0, since we've just</comments>
                    <comments>// created a new DTM.</comments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@variable"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="haveXercesParser">
                    <typeReference xsi:type="types:Boolean"/>
                    <initialValue xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="literals:NullLiteral"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable"/>
                        </expression>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <next xsi:type="references:MethodCall">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                                <arguments xsi:type="references:StringReference" value="com.sun.org.apache.xerces.internal.parsers.SAXParser"/>
                              </next>
                              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.44"/>
                            </next>
                            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
                          </next>
                        </expression>
                      </children>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <comments>// No matter what.  %REVIEW%</comments>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.3"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="literals:BooleanLiteral" value="true"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.5/@variable"/>
                </statements>
                <statements xsi:type="statements:Condition">
                  <comments>// If the reader is null, but they still requested an incremental</comments>
                  <comments>// build, then we still want to set up the IncrementalSAXSource stuff.</comments>
                  <comments>/* || ((null == reader) &amp;&amp; incremental) */</comments>
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="coParser">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Interface" href="IncrementalSAXSource.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <initialValue xsi:type="literals:NullLiteral"/>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:TryBlock">
                          <comments>// IncrementalSAXSource_Xerces to avoid threading.</comments>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.7/@statement/@statements.0/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Interface" href="IncrementalSAXSource.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                                <child xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:MethodCall">
                                    <next xsi:type="references:MethodCall">
                                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.35"/>
                                    </next>
                                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.32"/>
                                    <arguments xsi:type="references:StringReference" value="com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces"/>
                                  </next>
                                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
                                </child>
                              </value>
                            </expression>
                          </statements>
                          <catcheBlocks>
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.7/@statement/@statements.1/@statement/@statements.0/@catcheBlocks.0/@parameter">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.14"/>
                                </next>
                              </expression>
                            </statements>
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="expressions:AssignmentExpression">
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.7/@statement/@statements.0/@variable"/>
                                <assignmentOperator xsi:type="operators:Assignment"/>
                                <value xsi:type="literals:NullLiteral"/>
                              </expression>
                            </statements>
                            <parameter name="ex">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences>
                                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                                </classifierReferences>
                              </typeReference>
                            </parameter>
                          </catcheBlocks>
                        </statements>
                      </statement>
                      <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.5/@variable"/>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:Condition">
                          <comments>// Create a IncrementalSAXSource to run on the secondary thread.</comments>
                          <statement xsi:type="statements:Block">
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="expressions:AssignmentExpression">
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.7/@statement/@statements.0/@variable"/>
                                <assignmentOperator xsi:type="operators:Assignment"/>
                                <value xsi:type="instantiations:NewConstructorCall">
                                  <typeReference xsi:type="types:NamespaceClassifierReference">
                                    <classifierReferences>
                                      <target xsi:type="classifiers:Class" href="IncrementalSAXSource_Filter.class.xmi#//@classifiers.0"/>
                                    </classifierReferences>
                                  </typeReference>
                                </value>
                              </expression>
                            </statements>
                          </statement>
                          <condition xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="literals:NullLiteral"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable"/>
                          </condition>
                          <elseStatement xsi:type="statements:Block">
                            <statements xsi:type="statements:LocalVariableStatement">
                              <variable name="filter">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="IncrementalSAXSource_Filter.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                                <initialValue xsi:type="instantiations:NewConstructorCall">
                                  <typeReference xsi:type="types:NamespaceClassifierReference">
                                    <classifierReferences>
                                      <target xsi:type="classifiers:Class" href="IncrementalSAXSource_Filter.class.xmi#//@classifiers.0"/>
                                    </classifierReferences>
                                  </typeReference>
                                </initialValue>
                              </variable>
                            </statements>
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.7/@statement/@statements.2/@statement/@statements.0/@elseStatement/@statements.0/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="IncrementalSAXSource_Filter.class.xmi#//@classifiers.0/@members.17"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable"/>
                                </next>
                              </expression>
                            </statements>
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="expressions:AssignmentExpression">
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.7/@statement/@statements.0/@variable"/>
                                <assignmentOperator xsi:type="operators:Assignment"/>
                                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.7/@statement/@statements.2/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                              </expression>
                            </statements>
                          </elseStatement>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.7/@statement/@statements.0/@variable"/>
                        <children xsi:type="literals:NullLiteral"/>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable">
                        <comments>/**************************************************************&#xA;            // EXPERIMENTAL 3/22/02&#xA;            if (JKESS_XNI_EXPERIMENT &amp;&amp; m_incremental &amp;&amp;&#xA;                  dtm instanceof XNI2DTM &amp;&amp; &#xA;                  coParser instanceof IncrementalSAXSource_Xerces) {&#xA;                com.sun.org.apache.xerces.internal.xni.parser.XMLPullParserConfiguration xpc=&#xA;                      ((IncrementalSAXSource_Xerces)coParser)&#xA;                                           .getXNIParserConfiguration();&#xA;              if (xpc!=null) {&#xA;                // Bypass SAX; listen to the XNI stream&#xA;                ((XNI2DTM)dtm).setIncrementalXNISource(xpc);&#xA;              } else {&#xA;                  // Listen to the SAX stream (will fail, diagnostically...)&#xA;                dtm.setIncrementalSAXSource(coParser);&#xA;              }&#xA;            } else&#xA;            ***************************************************************/</comments>
                        <comments>// Have the DTM set itself up as IncrementalSAXSource's listener.</comments>
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="sax2dtm/SAX2DTM.class.xmi#//@classifiers.0/@members.38"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.7/@statement/@statements.0/@variable"/>
                        </next>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:Return">
                          <comments>// Then the user will construct it themselves.</comments>
                          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable"/>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="literals:NullLiteral"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.0/@variable"/>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0/@members.10"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable"/>
                            </next>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="literals:NullLiteral"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0/@members.11"/>
                          </next>
                        </children>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0/@members.6"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable"/>
                        </next>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:TryBlock">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.7/@statement/@statements.0/@variable">
                          <comments>// Launch parsing coroutine.  Launches a second thread,</comments>
                          <comments>// if we're using IncrementalSAXSource.filter().</comments>
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:InterfaceMethod" href="IncrementalSAXSource.class.xmi#//@classifiers.0/@members.4"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.0/@variable"/>
                          </next>
                        </expression>
                      </statements>
                      <catcheBlocks>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="sax2dtm/SAX2DTM.class.xmi#//@classifiers.0/@members.36"/>
                            </next>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:Throw">
                          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.7/@statement/@statements.7/@catcheBlocks.0/@parameter"/>
                        </statements>
                        <parameter name="re">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/RuntimeException.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                        </parameter>
                      </catcheBlocks>
                      <catcheBlocks>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="sax2dtm/SAX2DTM.class.xmi#//@classifiers.0/@members.36"/>
                            </next>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:Throw">
                          <throwable xsi:type="instantiations:NewConstructorCall">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <namespaces>com</namespaces>
                              <namespaces>sun</namespaces>
                              <namespaces>org</namespaces>
                              <namespaces>apache</namespaces>
                              <namespaces>xml</namespaces>
                              <namespaces>internal</namespaces>
                              <namespaces>utils</namespaces>
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../utils/WrappedRuntimeException.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.7/@statement/@statements.7/@catcheBlocks.1/@parameter"/>
                          </throwable>
                        </statements>
                        <parameter name="e">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                        </parameter>
                      </catcheBlocks>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.3"/>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.3"/>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:Return">
                          <comments>// Then the user will construct it themselves.</comments>
                          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable"/>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="literals:NullLiteral"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable"/>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable">
                        <comments>// not incremental</comments>
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0/@members.8"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable"/>
                        </next>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0/@members.6"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable"/>
                        </next>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0/@members.10"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable"/>
                            </next>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="literals:NullLiteral"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0/@members.11"/>
                          </next>
                        </children>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:TryBlock">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0/@members.3"/>
                            <arguments xsi:type="references:StringReference" value="http://xml.org/sax/properties/lexical-handler"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable"/>
                          </next>
                        </expression>
                      </statements>
                      <catcheBlocks>
                        <parameter name="e">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/SAXNotRecognizedException.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                        </parameter>
                      </catcheBlocks>
                      <catcheBlocks>
                        <parameter name="e">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/SAXNotSupportedException.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                        </parameter>
                      </catcheBlocks>
                    </statements>
                    <statements xsi:type="statements:TryBlock">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0/@members.12"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.0/@variable"/>
                          </next>
                        </expression>
                      </statements>
                      <catcheBlocks>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="sax2dtm/SAX2DTM.class.xmi#//@classifiers.0/@members.36"/>
                            </next>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:Throw">
                          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.7/@elseStatement/@statements.5/@catcheBlocks.0/@parameter"/>
                        </statements>
                        <parameter name="re">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/RuntimeException.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                        </parameter>
                      </catcheBlocks>
                      <catcheBlocks>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="sax2dtm/SAX2DTM.class.xmi#//@classifiers.0/@members.36"/>
                            </next>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:Throw">
                          <throwable xsi:type="instantiations:NewConstructorCall">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <namespaces>com</namespaces>
                              <namespaces>sun</namespaces>
                              <namespaces>org</namespaces>
                              <namespaces>apache</namespaces>
                              <namespaces>xml</namespaces>
                              <namespaces>internal</namespaces>
                              <namespaces>utils</namespaces>
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../utils/WrappedRuntimeException.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.7/@elseStatement/@statements.5/@catcheBlocks.1/@parameter"/>
                          </throwable>
                        </statements>
                        <parameter name="e">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                        </parameter>
                      </catcheBlocks>
                    </statements>
                  </elseStatement>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                            <arguments xsi:type="references:StringReference" value="Dumping SAX2DOM"/>
                          </next>
                          <target xsi:type="members:Field" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="DTMDefaultBase.class.xmi#//@classifiers.0/@members.43"/>
                          <arguments xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.2"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                          </arguments>
                        </next>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                </statements>
                <statements xsi:type="statements:Return">
                  <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.1/@statements.2/@variable"/>
                </statements>
                <finallyBlock>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.2/@statement/@statements.0/@variable"/>
                    </expression>
                  </statements>
                </finallyBlock>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@elseStatement/@statements.1/@variable"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <comments>//&quot;Not supported: &quot; + source);</comments>
              <statements xsi:type="statements:Throw">
                <comments>// It should have been handled by a derived class or the caller</comments>
                <comments>// made a mistake.</comments>
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../DTMException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../res/XMLMessages.class.xmi#//@classifiers.0/@members.8"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0/@members.21"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
                      </arguments>
                      <arguments xsi:type="arrays:ArrayInstantiationByValues">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arrayDimensionsBefore/>
                        <arrayInitializer>
                          <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
                        </arrayInitializer>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../res/XMLMessages.class.xmi#//@classifiers.0"/>
                  </arguments>
                </throwable>
              </statements>
            </elseStatement>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDTMHandleFromNode">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>w3c</namespaces>
          <namespaces>dom</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized">
        <comments>/**&#xA;   * Given a W3C DOM node, try and return a DTM handle.&#xA;   * Note: calling this may be non-optimal, and there is no guarantee that&#xA;   * the node will be found in any particular DTM.&#xA;   *&#xA;   * @param node Non-null reference to a DOM node.&#xA;   *&#xA;   * @return a valid DTM handle.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../res/XMLMessages.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../res/XMLMessages.class.xmi#//@classifiers.0"/>
            </arguments>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="literals:NullLiteral"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>//&quot;node must be non-null for getDTMHandleFromNode!&quot;);</comments>
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DTMNodeProxy.class.xmi#//@classifiers.0/@members.10"/>
            </next>
            <expression xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>com</namespaces>
                <namespaces>sun</namespaces>
                <namespaces>org</namespaces>
                <namespaces>apache</namespaces>
                <namespaces>xml</namespaces>
                <namespaces>internal</namespaces>
                <namespaces>dtm</namespaces>
                <namespaces>ref</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="DTMNodeProxy.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
            </expression>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>com</namespaces>
            <namespaces>sun</namespaces>
            <namespaces>org</namespaces>
            <namespaces>apache</namespaces>
            <namespaces>xml</namespaces>
            <namespaces>internal</namespaces>
            <namespaces>dtm</namespaces>
            <namespaces>ref</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="DTMNodeProxy.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="max">
              <typeReference xsi:type="types:Int">
                <comments>// Find the DOM2DTMs wrapped around this Document (if any)</comments>
                <comments>// and check whether they contain the Node in question.</comments>
                <comments>//</comments>
                <comments>// NOTE that since a DOM2DTM may represent a subtree rather</comments>
                <comments>// than a full document, we have to be prepared to check more</comments>
                <comments>// than one -- and there is no guarantee that we will find</comments>
                <comments>// one that contains ancestors or siblings of the node we're</comments>
                <comments>// seeking.</comments>
                <comments>//</comments>
                <comments>// %REVIEW% We could search for the one which contains this</comments>
                <comments>// node at the deepest level, and thus covers the widest</comments>
                <comments>// subtree, but that's going to entail additional work</comments>
                <comments>// checking more DTMs... and getHandleOfNode is not a</comments>
                <comments>// cheap operation in most implementations.</comments>
                <comments>//</comments>
                <comments>// TODO: %REVIEW% If overflow addressing, we may recheck a DTM</comments>
                <comments>// already examined. Ouch. But with the increased number of DTMs,</comments>
                <comments>// scanning back to check this is painful. </comments>
                <comments>// POSSIBLE SOLUTIONS: </comments>
                <comments>//   Generate a list of _unique_ DTM objects?</comments>
                <comments>//   Have each DTM cache last DOM node search?</comments>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:IdentifierReference"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="thisDTM">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.1/@init"/>
                    </arraySelectors>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="handle">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="expressions:NestedExpression">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="dom2dtm/DOM2DTM.class.xmi#//@classifiers.0/@members.19"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                        </next>
                        <expression xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="dom2dtm/DOM2DTM.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                        </expression>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Return">
                      <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.1/@statement/@statements.1/@statement/@statements.0/@variable"/>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.1/@statement/@statements.1/@statement/@statements.0/@variable"/>
                      <children xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                        </next>
                        <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                      </children>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="literals:NullLiteral"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:InstanceOfExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="dom2dtm/DOM2DTM.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                  </children>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.1/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.0/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.1/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="root">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// Not found; generate a new DTM.</comments>
                  <comments>//</comments>
                  <comments>// %REVIEW% Is this really desirable, or should we return null</comments>
                  <comments>// and make folks explicitly instantiate from a DOMSource? The</comments>
                  <comments>// latter is more work but gives the caller the opportunity to</comments>
                  <comments>// explicitly add the DTM to a DTMManager... and thus to know when</comments>
                  <comments>// it can be discarded again, which is something we need to pay much</comments>
                  <comments>// more attention to. (Especially since only DTMs which are assigned</comments>
                  <comments>// to a manager can use the overflow addressing scheme.)</comments>
                  <comments>//</comments>
                  <comments>// %BUG% If the source node was a DOM2DTM$defaultNamespaceDeclarationNode</comments>
                  <comments>// and the DTM wasn't registered with this DTMManager, we will create</comments>
                  <comments>// a new DTM and _still_ not be able to find the node (since it will</comments>
                  <comments>// be resynthesized). Another reason to push hard on making all DTMs</comments>
                  <comments>// be managed DTMs.</comments>
                  <comments>// Since the real root of our tree may be a DocumentFragment, we need to</comments>
                  <comments>// use getParent to find the root, instead of getOwnerDocument.  Otherwise</comments>
                  <comments>// DOM2DTM#getHandleOfNode will be very unhappy.</comments>
                  <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="p">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.21"/>
                      </next>
                    </children>
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                      <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
                    </children>
                  </expression>
                </child>
                <expressionIf xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/w3c/dom/Attr.class.xmi#//@classifiers.0/@members.4"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <namespaces>org</namespaces>
                      <namespaces>w3c</namespaces>
                      <namespaces>dom</namespaces>
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Attr.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.2/@variable"/>
                  </expression>
                </expressionIf>
                <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.2/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                </expressionElse>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.2/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.3/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.3/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <updates xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.3/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </value>
            </updates>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="dtm">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="dom2dtm/DOM2DTM.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="dom2dtm/DOM2DTM.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
                  <arguments xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <namespaces>javax</namespaces>
                      <namespaces>xml</namespaces>
                      <namespaces>transform</namespaces>
                      <namespaces>dom</namespaces>
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/transform/dom/DOMSource.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.2/@variable"/>
                  </arguments>
                  <arguments xsi:type="literals:BooleanLiteral"/>
                  <arguments xsi:type="literals:NullLiteral"/>
                  <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                  <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                </child>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="handle">
              <typeReference xsi:type="types:Int"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.6/@variable">
                    <comments>// Can't return the same node since it's unique to a specific DTM, </comments>
                    <comments>// but can return the equivalent node -- find the corresponding </comments>
                    <comments>// Document Element, then ask it for the xml: namespace decl.</comments>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.5/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="dom2dtm/DOM2DTM.class.xmi#//@classifiers.0/@members.19"/>
                      <arguments xsi:type="expressions:NestedExpression">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/w3c/dom/Attr.class.xmi#//@classifiers.0/@members.4"/>
                        </next>
                        <expression xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <namespaces>org</namespaces>
                            <namespaces>w3c</namespaces>
                            <namespaces>dom</namespaces>
                            <classifierReferences>
                              <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Attr.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                        </expression>
                      </arguments>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.6/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.5/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="dom2dtm/DOM2DTM.class.xmi#//@classifiers.0/@members.20"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.6/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.38"/>
                        </next>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.41"/>
                        </next>
                      </arguments>
                    </next>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>com</namespaces>
                <namespaces>sun</namespaces>
                <namespaces>org</namespaces>
                <namespaces>apache</namespaces>
                <namespaces>xml</namespaces>
                <namespaces>internal</namespaces>
                <namespaces>dtm</namespaces>
                <namespaces>ref</namespaces>
                <namespaces>dom2dtm</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="dom2dtm/DOM2DTMdefaultNamespaceDeclarationNode.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
            </condition>
            <elseStatement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.6/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="dom2dtm/DOM2DTM.class.xmi#//@classifiers.0/@members.19"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="dom2dtm/DOM2DTM.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.5/@variable"/>
                  </expression>
                </value>
              </expression>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/RuntimeException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../res/XMLMessages.class.xmi#//@classifiers.0/@members.8"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0/@members.23"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../res/XMLMessages.class.xmi#//@classifiers.0"/>
                </arguments>
              </throwable>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.6/@variable"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <comments>//&quot;Could not resolve the node to a handle!&quot;);</comments>
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@elseStatement/@statements.6/@variable"/>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getXMLReader">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inputSource">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../javax/xml/transform/Source.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized">
        <comments>/**&#xA;   * This method returns the SAX2 parser to use with the InputSource&#xA;   * obtained from this URI.&#xA;   * It may return null if any SAX2-conformant XML parser can be used,&#xA;   * or if getInputSource() will also return null. The parser must&#xA;   * be free for use (i.e., not currently in use for another parse().&#xA;   * After use of the parser is completed, the releaseXMLReader(XMLReader)&#xA;   * must be called.&#xA;   *&#xA;   * @param inputSource The value returned from the URIResolver.&#xA;   * @return  a SAX2 XMLReader to use to resolve the inputSource argument.&#xA;   *&#xA;   * @return non-null XMLReader reference ready to parse.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="reader">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/transform/sax/SAXSource.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
                </expression>
              </child>
              <expressionIf xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/transform/sax/SAXSource.class.xmi#//@classifiers.0/@members.7"/>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/transform/sax/SAXSource.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
                </expression>
              </expressionIf>
              <expressionElse xsi:type="literals:NullLiteral"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// If user did not supply a reader, ask for one from the reader manager</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../utils/XMLReaderManager.class.xmi#//@classifiers.0/@members.7"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../utils/XMLReaderManager.class.xmi#//@classifiers.0"/>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../utils/XMLReaderManager.class.xmi#//@classifiers.0/@members.8"/>
                  </next>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="literals:NullLiteral"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@statements.0/@variable"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@statements.0/@variable"/>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../DTMException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@catcheBlocks.0/@parameter">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0/@members.6"/>
                </next>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@catcheBlocks.0/@parameter"/>
            </throwable>
          </statements>
          <parameter name="se">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="releaseXMLReader">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="reader">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized">
        <comments>/**&#xA;   * Indicates that the XMLReader object is no longer in use for the transform.&#xA;   *&#xA;   * Note that the getXMLReader method may return an XMLReader that was&#xA;   * specified on the SAXSource object by the application code.  Such a&#xA;   * reader should still be passed to releaseXMLReader, but the reader manager&#xA;   * will only re-use XMLReaders that it created.&#xA;   *&#xA;   * @param reader The XMLReader to be released.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../utils/XMLReaderManager.class.xmi#//@classifiers.0/@members.9"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDTM">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized">
        <comments>/**&#xA;   * Return the DTM object containing a representation of this node.&#xA;   *&#xA;   * @param nodeHandle DTM Handle indicating which node to retrieve&#xA;   *&#xA;   * @return a reference to the DTM object containing this node.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:Return">
          <comments>// Performance critical function.</comments>
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
            <arraySelectors>
              <position xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
                <children xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.5"/>
                </children>
                <shiftOperators xsi:type="operators:UnsignedRightShift"/>
              </position>
            </arraySelectors>
          </returnValue>
        </statements>
        <catcheBlocks>
          <comments>// Programming error; want to know about it.</comments>
          <statements xsi:type="statements:Condition">
            <comments>// Accept as a special case.</comments>
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:NullLiteral"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Throw">
              <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@catcheBlocks.0/@parameter"/>
            </elseStatement>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>java</namespaces>
              <namespaces>lang</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/ArrayIndexOutOfBoundsException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDTMIdentity">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized">
        <comments>/**&#xA;   * Given a DTM, find the ID number in the DTM tables which addresses&#xA;   * the start of the document. If overflow addressing is in use, other&#xA;   * DTM IDs may also be assigned to this DTM.&#xA;   *&#xA;   * @param dtm The DTM which (hopefully) contains this node.&#xA;   *&#xA;   * @return The DTM ID (as the high bits of a NodeHandle, not as our&#xA;   * internal index), or -1 if the DTM doesn't belong to this manager.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <comments>// Shortcut using DTMDefaultBase's extension hooks</comments>
        <comments>// %REVIEW% Should the lookup be part of the basic DTM API?</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="dtmdb">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="DTMDefaultBase.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="DTMDefaultBase.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@statement/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="DTMDefaultBase.class.xmi#//@classifiers.0/@members.119"/>
                </next>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@statement/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DTMDefaultBase.class.xmi#//@classifiers.0/@members.118"/>
                </next>
              </children>
              <children xsi:type="references:SelfReference">
                <self xsi:type="literals:This"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Return">
              <returnValue xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </returnValue>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="DTMDefaultBase.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="n">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
            <next xsi:type="references:IdentifierReference"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="tdtm">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.2/@init"/>
                </arraySelectors>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.2/@init"/>
                <children xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.5"/>
                </children>
                <shiftOperators xsi:type="operators:LeftShift"/>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.2/@statement/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.2/@init"/>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.1/@variable"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="release">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="shouldHardDelete">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized">
        <comments>/**&#xA;   * Release the DTMManager's reference(s) to a DTM, making it unmanaged.&#xA;   * This is typically done as part of returning the DTM to the heap after&#xA;   * we're done with it.&#xA;   *&#xA;   * @param dtm the DTM to be released.&#xA;   * &#xA;   * @param shouldHardDelete If false, this call is a suggestion rather than an&#xA;   * order, and we may not actually release the DTM. This is intended to &#xA;   * support intelligent caching of documents... which is not implemented&#xA;   * in this version of the DTM manager.&#xA;   *&#xA;   * @return true if the DTM was released, false if shouldHardDelete was set&#xA;   * and we decided not to.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="Releasing "/>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ConditionalExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1"/>
                        <expressionIf xsi:type="references:StringReference" value="HARD"/>
                        <expressionElse xsi:type="references:StringReference" value="soft"/>
                      </expression>
                    </children>
                    <children xsi:type="references:StringReference" value=" dtm="/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0">
                      <comments>// Following shouldn't need a nodeHandle, but does...</comments>
                      <comments>// and doesn't seem to report the intended value</comments>
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../DTM.class.xmi#//@classifiers.0/@members.51"/>
                      </next>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
                <target xsi:type="members:Field" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="sax2dtm/SAX2DTM.class.xmi#//@classifiers.0/@members.36"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="sax2dtm/SAX2DTM.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
              </expression>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="sax2dtm/SAX2DTM.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Multiple DTM IDs may be assigned to a single DTM. </comments>
        <comments>// The Right Answer is to ask which (if it supports</comments>
        <comments>// extension, the DTM will need a list anyway). The </comments>
        <comments>// Wrong Answer, applied if the DTM can't help us,</comments>
        <comments>// is to linearly search them all; this may be very</comments>
        <comments>// painful.</comments>
        <comments>//</comments>
        <comments>// %REVIEW% Should the lookup move up into the basic DTM API?</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="ids">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>com</namespaces>
                <namespaces>sun</namespaces>
                <namespaces>org</namespaces>
                <namespaces>apache</namespaces>
                <namespaces>xml</namespaces>
                <namespaces>internal</namespaces>
                <namespaces>utils</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DTMDefaultBase.class.xmi#//@classifiers.0/@members.119"/>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="DTMDefaultBase.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
                </expression>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                  <arraySelectors>
                    <position xsi:type="expressions:ShiftExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.2/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.2/@statement/@statements.1/@init"/>
                        </next>
                      </children>
                      <children xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.5"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
                      </children>
                      <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                    </position>
                  </arraySelectors>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:NullLiteral"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.2/@statement/@statements.1/@init"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.2/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.13"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </initialValue>
            </init>
            <updates xsi:type="expressions:PrefixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.2/@statement/@statements.1/@init"/>
              <operator xsi:type="operators:MinusMinus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="DTMDefaultBase.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                    <arraySelectors>
                      <position xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.2/@elseStatement/@statements.0/@variable"/>
                        <children xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.5"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
                        </children>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </position>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:NullLiteral"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.2/@elseStatement/@statements.0/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
            </condition>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../DTM.class.xmi#//@classifiers.0/@members.81"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createDocumentFragment">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized">
        <comments>/**&#xA;   * Method createDocumentFragment&#xA;   *&#xA;   *&#xA;   * NEEDSDOC (createDocumentFragment) @return&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="dbf">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/parsers/DocumentBuilderFactory.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/parsers/DocumentBuilderFactory.class.xmi#//@classifiers.0/@members.9"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/parsers/DocumentBuilderFactory.class.xmi#//@classifiers.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/parsers/DocumentBuilderFactory.class.xmi#//@classifiers.0/@members.11"/>
              <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="db">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/parsers/DocumentBuilder.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/parsers/DocumentBuilderFactory.class.xmi#//@classifiers.0/@members.10"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="doc">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Document.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@statements.2/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../javax/xml/parsers/DocumentBuilder.class.xmi#//@classifiers.0/@members.11"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="df">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@statements.3/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../../../../org/w3c/dom/Document.class.xmi#//@classifiers.0/@members.4"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../javax/xml/transform/dom/DOMSource.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@statements.4/@variable"/>
            </arguments>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="literals:NullLiteral"/>
            <arguments xsi:type="literals:BooleanLiteral"/>
            <arguments xsi:type="literals:BooleanLiteral"/>
          </returnValue>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../DTMException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.0/@catcheBlocks.0/@parameter"/>
            </throwable>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createDTMIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../DTMIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="whatToShow">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../DTMFilter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="entityReferenceExpansion">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized">
        <comments>/**&#xA;   * NEEDSDOC Method createDTMIterator&#xA;   *&#xA;   *&#xA;   * NEEDSDOC @param whatToShow&#xA;   * NEEDSDOC @param filter&#xA;   * NEEDSDOC @param entityReferenceExpansion&#xA;   *&#xA;   * NEEDSDOC (createDTMIterator) @return&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <comments>/** @todo: implement this com.sun.org.apache.xml.internal.dtm.DTMManager abstract method */</comments>
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createDTMIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../DTMIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xpathString">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="presolver">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../utils/PrefixResolver.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized">
        <comments>/**&#xA;   * NEEDSDOC Method createDTMIterator&#xA;   *&#xA;   *&#xA;   * NEEDSDOC @param xpathString&#xA;   * NEEDSDOC @param presolver&#xA;   *&#xA;   * NEEDSDOC (createDTMIterator) @return&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <comments>/** @todo: implement this com.sun.org.apache.xml.internal.dtm.DTMManager abstract method */</comments>
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createDTMIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../DTMIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized">
        <comments>/**&#xA;   * NEEDSDOC Method createDTMIterator&#xA;   *&#xA;   *&#xA;   * NEEDSDOC @param node&#xA;   *&#xA;   * NEEDSDOC (createDTMIterator) @return&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <comments>/** @todo: implement this com.sun.org.apache.xml.internal.dtm.DTMManager abstract method */</comments>
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createDTMIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../DTMIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xpathCompiler">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized">
        <comments>/**&#xA;   * NEEDSDOC Method createDTMIterator&#xA;   *&#xA;   *&#xA;   * NEEDSDOC @param xpathCompiler&#xA;   * NEEDSDOC @param pos&#xA;   *&#xA;   * NEEDSDOC (createDTMIterator) @return&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <comments>/** @todo: implement this com.sun.org.apache.xml.internal.dtm.DTMManager abstract method */</comments>
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getExpandedNameTable">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ExpandedNameTable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * return the expanded name table.&#xA;   *&#xA;   * NEEDSDOC @param dtm&#xA;   *&#xA;   * NEEDSDOC ($objectName$) @return&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The default implementation for the DTMManager.&#xA; *&#xA; * %REVIEW% There is currently a reentrancy issue, since the finalizer&#xA; * for XRTreeFrag (which runs in the GC thread) wants to call&#xA; * DTMManager.release(), and may do so at the same time that the main&#xA; * transformation thread is accessing the manager. Our current solution is&#xA; * to make most of the manager's methods &lt;code>synchronized&lt;/code>.&#xA; * Early tests suggest that doing so is not causing a significant&#xA; * performance hit in Xalan. However, it should be noted that there&#xA; * is a possible alternative solution: rewrite release() so it merely&#xA; * posts a request for release onto a threadsafe queue, and explicitly&#xA; * process that queue on an infrequent basis during main-thread&#xA; * activity (eg, when getDTM() is invoked). The downside of that solution&#xA; * would be a greater delay before the DTM's storage is actually released&#xA; * for reuse.&#xA; * */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
