<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/literals ../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16" name="ItemPSVI.java">
  <comments>/*&#xA; * The Apache Software License, Version 1.1&#xA; *&#xA; *&#xA; * Copyright (c) 2003 The Apache Software Foundation.  All rights&#xA; * reserved.&#xA; *&#xA; * Redistribution and use in source and binary forms, with or without&#xA; * modification, are permitted provided that the following conditions&#xA; * are met:&#xA; *&#xA; * 1. Redistributions of source code must retain the above copyright&#xA; *    notice, this list of conditions and the following disclaimer.&#xA; *&#xA; * 2. Redistributions in binary form must reproduce the above copyright&#xA; *    notice, this list of conditions and the following disclaimer in&#xA; *    the documentation and/or other materials provided with the&#xA; *    distribution.&#xA; *&#xA; * 3. The end-user documentation included with the redistribution,&#xA; *    if any, must include the following acknowledgment:&#xA; *       &quot;This product includes software developed by the&#xA; *        Apache Software Foundation (http://www.apache.org/).&quot;&#xA; *    Alternately, this acknowledgment may appear in the software itself,&#xA; *    if and wherever such third-party acknowledgments normally appear.&#xA; *&#xA; * 4. The names &quot;Xerces&quot; and &quot;Apache Software Foundation&quot; must&#xA; *    not be used to endorse or promote products derived from this&#xA; *    software without prior written permission. For written&#xA; *    permission, please contact apache@apache.org.&#xA; *&#xA; * 5. Products derived from this software may not be called &quot;Apache&quot;,&#xA; *    nor may &quot;Apache&quot; appear in their name, without prior written&#xA; *    permission of the Apache Software Foundation.&#xA; *&#xA; * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED&#xA; * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES&#xA; * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE&#xA; * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR&#xA; * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xA; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xA; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF&#xA; * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND&#xA; * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,&#xA; * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT&#xA; * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF&#xA; * SUCH DAMAGE.&#xA; * ====================================================================&#xA; *&#xA; * This software consists of voluntary contributions made by many&#xA; * individuals on behalf of the Apache Software Foundation and was&#xA; * originally based on software copyright (c) 2003, International&#xA; * Business Machines, Inc., http://www.apache.org.  For more&#xA; * information on the Apache Software Foundation, please see&#xA; * &lt;http://www.apache.org/>.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xerces</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>xs</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="ItemPSVI">
    <members xsi:type="members:Field" name="VALIDITY_NOTKNOWN">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Validity value indicating that validation has either not been performed &#xA;     * or that a strict assessment of validity could not be performed. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="VALIDITY_INVALID">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Validity value indicating that validation has been strictly assessed &#xA;     * and the item in question is invalid according to the rules of schema &#xA;     * validation. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="VALIDITY_VALID">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Validation status indicating that schema validation has been performed &#xA;     * and the item in question is valid according to the rules of schema &#xA;     * validation. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="VALIDATION_NONE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Validation status indicating that schema validation has been performed &#xA;     * and the item in question has specifically been skipped. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="VALIDATION_PARTIAL">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Validation status indicating that schema validation has been performed &#xA;     * on the item in question under the rules of lax validation. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="VALIDATION_FULL">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Validation status indicating that full schema validation has been &#xA;     * performed on the item. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValidationContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The nearest ancestor element information item with a &#xA;     * &lt;code>[schema information]&lt;/code> property (or this element item &#xA;     * itself if it has such a property). For more information refer to &#xA;     * element validation context and attribute validation context . &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValidity">
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  &lt;code>[validity]&lt;/code>: determines the validity of the schema item &#xA;     * with respect to the validation being attempted. The value will be one &#xA;     * of the constants: &lt;code>VALIDITY_NOTKNOWN&lt;/code>, &#xA;     * &lt;code>VALIDITY_INVALID&lt;/code> or &lt;code>VALIDITY_VALID&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValidationAttempted">
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  &lt;code>[validation attempted]&lt;/code>: determines the extent to which &#xA;     * the schema item has been validated. The value will be one of the &#xA;     * constants: &lt;code>VALIDATION_NONE&lt;/code>, &#xA;     * &lt;code>VALIDATION_PARTIAL&lt;/code> or &lt;code>VALIDATION_FULL&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getErrorCodes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="StringList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  &lt;code>[schema error code]&lt;/code>: a list of error codes generated from &#xA;     * the validation attempt or an empty &lt;code>StringList&lt;/code> if no &#xA;     * errors occurred during the validation attempt. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSchemaNormalizedValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;code>[schema normalized value]&lt;/code>: the normalized value of this &#xA;     * item after validation. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getActualNormalizedValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;code>[schema normalized value]&lt;/code>: Binding specific actual value &#xA;     * or &lt;code>null&lt;/code> if the value is in error. &#xA;     * @exception XSException&#xA;     *   NOT_SUPPORTED_ERR: Raised if the implementation does not support this &#xA;     *   method.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getActualNormalizedValueType">
      <typeReference xsi:type="types:Short"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The actual value built-in datatype, e.g. &#xA;     * &lt;code>STRING_DT, SHORT_DT&lt;/code>. If the type definition of this &#xA;     * value is a list type definition, this method returns &#xA;     * &lt;code>LIST_DT&lt;/code>. If the type definition of this value is a list &#xA;     * type definition whose item type is a union type definition, this &#xA;     * method returns &lt;code>LISTOFUNION_DT&lt;/code>. To query the actual value &#xA;     * of the list or list of union type definitions use &#xA;     * &lt;code>itemValueTypes&lt;/code>. If the &lt;code>actualNormalizedValue&lt;/code>&#xA;     *  is &lt;code>null&lt;/code>, this method returns &lt;code>UNAVAILABLE_DT&lt;/code>&#xA;     * . &#xA;     * @exception XSException&#xA;     *   NOT_SUPPORTED_ERR: Raised if the implementation does not support this &#xA;     *   method.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getItemValueTypes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ShortList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * In the case the actual value represents a list, i.e. the &#xA;     * &lt;code>actualNormalizedValueType&lt;/code> is &lt;code>LIST_DT&lt;/code>, the &#xA;     * returned array consists of one type kind which represents the itemType&#xA;     * . For example: &#xA;     * &lt;pre> &amp;lt;simpleType name=&quot;listtype&quot;&amp;gt; &amp;lt;list &#xA;     * itemType=&quot;positiveInteger&quot;/&amp;gt; &amp;lt;/simpleType&amp;gt; &amp;lt;element &#xA;     * name=&quot;list&quot; type=&quot;listtype&quot;/&amp;gt; ... &amp;lt;list&amp;gt;1 2 3&amp;lt;/list&amp;gt; &lt;/pre>&#xA;     *  &#xA;     * The &lt;code>schemaNormalizedValue&lt;/code> value is &quot;1 2 3&quot;, the &#xA;     * &lt;code>actualNormalizedValueType&lt;/code> value is &lt;code>LIST_DT&lt;/code>, &#xA;     * and the &lt;code>itemValueTypes&lt;/code> is an array of size 1 with the &#xA;     * value &lt;code>POSITIVEINTEGER_DT&lt;/code>. &#xA;     * &lt;br> If the actual value represents a list type definition whose item &#xA;     * type is a union type definition, i.e. &lt;code>LISTOFUNION_DT&lt;/code>, &#xA;     * for each actual value in the list the array contains the &#xA;     * corresponding memberType kind. For example: &#xA;     * &lt;pre> &amp;lt;simpleType &#xA;     * name='union_type' memberTypes=&quot;integer string&quot;/&amp;gt; &amp;lt;simpleType &#xA;     * name='listOfUnion'&amp;gt; &amp;lt;list itemType='union_type'/&amp;gt; &#xA;     * &amp;lt;/simpleType&amp;gt; &amp;lt;element name=&quot;list&quot; type=&quot;listOfUnion&quot;/&amp;gt; &#xA;     * ... &amp;lt;list&amp;gt;1 2 foo&amp;lt;/list&amp;gt; &lt;/pre>&#xA;     *  The &#xA;     * &lt;code>schemaNormalizedValue&lt;/code> value is &quot;1 2 foo&quot;, the &#xA;     * &lt;code>actualNormalizedValueType&lt;/code> is &lt;code>LISTOFUNION_DT&lt;/code>&#xA;     * , and the &lt;code>itemValueTypes&lt;/code> is an array of size 3 with the &#xA;     * following values: &lt;code>INTEGER_DT, INTEGER_DT, STRING_DT&lt;/code>. &#xA;     * @exception XSException&#xA;     *   NOT_SUPPORTED_ERR: Raised if the implementation does not support this &#xA;     *   method.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTypeDefinition">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="XSTypeDefinition.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  &lt;code>[type definition]&lt;/code>: an item isomorphic to the type &#xA;     * definition used to validate the schema item. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMemberTypeDefinition">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="XSSimpleTypeDefinition.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;code>[member type definition]&lt;/code>: if and only if that type &#xA;     * definition is a simple type definition with {variety} union, or a &#xA;     * complex type definition whose {content type} is a simple type &#xA;     * definition with {variety} union, then an item isomorphic to that &#xA;     * member of the union's {member type definitions} which actually &#xA;     * validated the schema item's normalized value. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSchemaDefault">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;code>[schema default]&lt;/code>: the canonical lexical representation of &#xA;     * the declaration's {value constraint} value. For more information &#xA;     * refer to element schema default and attribute schema default. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getIsSchemaSpecified">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;code>[schema specified]&lt;/code>: if true, the value was specified in &#xA;     * the schema. If false, the value comes from the infoset. For more &#xA;     * information refer to element specified and attribute specified. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *  Represents an abstract PSVI item for an element or an attribute &#xA; * information item.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
