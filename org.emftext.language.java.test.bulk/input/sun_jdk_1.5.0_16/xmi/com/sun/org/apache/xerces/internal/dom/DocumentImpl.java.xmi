<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../../../../java.ecore#/17" name="DocumentImpl.java">
  <comments>/*&#xA; * The Apache Software License, Version 1.1&#xA; *&#xA; *&#xA; * Copyright (c) 2001, 2002 The Apache Software Foundation.  All rights&#xA; * reserved.&#xA; *&#xA; * Redistribution and use in source and binary forms, with or without&#xA; * modification, are permitted provided that the following conditions&#xA; * are met:&#xA; *&#xA; * 1. Redistributions of source code must retain the above copyright&#xA; *    notice, this list of conditions and the following disclaimer.&#xA; *&#xA; * 2. Redistributions in binary form must reproduce the above copyright&#xA; *    notice, this list of conditions and the following disclaimer in&#xA; *    the documentation and/or other materials provided with the&#xA; *    distribution.&#xA; *&#xA; * 3. The end-user documentation included with the redistribution,&#xA; *    if any, must include the following acknowledgment:&#xA; *       &quot;This product includes software developed by the&#xA; *        Apache Software Foundation (http://www.apache.org/).&quot;&#xA; *    Alternately, this acknowledgment may appear in the software itself,&#xA; *    if and wherever such third-party acknowledgments normally appear.&#xA; *&#xA; * 4. The names &quot;Xerces&quot; and &quot;Apache Software Foundation&quot; must&#xA; *    not be used to endorse or promote products derived from this&#xA; *    software without prior written permission. For written&#xA; *    permission, please contact apache@apache.org.&#xA; *&#xA; * 5. Products derived from this software may not be called &quot;Apache&quot;,&#xA; *    nor may &quot;Apache&quot; appear in their name, without prior written&#xA; *    permission of the Apache Software Foundation.&#xA; *&#xA; * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED&#xA; * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES&#xA; * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE&#xA; * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR&#xA; * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xA; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xA; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF&#xA; * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND&#xA; * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,&#xA; * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT&#xA; * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF&#xA; * SUCH DAMAGE.&#xA; * ====================================================================&#xA; *&#xA; * This software consists of voluntary contributions made by many&#xA; * individuals on behalf of the Apache Software Foundation and was&#xA; * originally based on software copyright (c) 1999, International&#xA; * Business Machines, Inc., http://www.apache.org.  For more&#xA; * information on the Apache Software Foundation, please see&#xA; * &lt;http://www.apache.org/>.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xerces</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>dom</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>events</namespaces>
    <classifier xsi:type="classifiers:Class" href="events/EventImpl.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>events</namespaces>
    <classifier xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/UserDataHandler.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Attr.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/DOMImplementation.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/DocumentType.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Element.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/NamedNodeMap.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>events</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/DocumentEvent.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>events</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/Event.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>events</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../org/w3c/dom/events/EventException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>events</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/EventListener.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>events</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/MutationEvent.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>ranges</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/ranges/DocumentRange.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>ranges</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/ranges/Range.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>traversal</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/traversal/DocumentTraversal.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>traversal</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/traversal/NodeFilter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>traversal</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/traversal/NodeIterator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>traversal</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/traversal/TreeWalker.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="DocumentImpl">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="515687835542616694"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>//</comments>
        <comments>// Constants</comments>
        <comments>//</comments>
        <comments>/** Serialization version. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="iterators">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>//</comments>
        <comments>// Data</comments>
        <comments>//</comments>
        <comments>/** Iterators */</comments>
        <comments>// REVISIT: Should this be transient? -Ac</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="ranges">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Ranges */</comments>
        <comments>// REVISIT: Should this be transient? -Ac</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="eventListeners">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Table for event listeners registered to this document nodes. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="mutationEvents">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Bypass mutation events firing. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DocumentImpl">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Constructors</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * NON-DOM: Actually creating a Document is outside the DOM's spec,&#xA;     * since it has to operate in terms of a particular implementation.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DocumentImpl">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="grammarAccess">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Constructor. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DocumentImpl">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="doctype">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/DocumentType.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * For DOM2 support.&#xA;     * The createDocument factory method is in DOMImplementation.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DocumentImpl">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="doctype">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/DocumentType.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="grammarAccess">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** For DOM2 support. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="cloneNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="deep">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Node methods</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Deep-clone a document, including fixing ownerDoc for the cloned&#xA;     * children. Note that this requires bypassing the WRONG_DOCUMENT_ERR&#xA;     * protection. I've chosen to implement it by calling importNode&#xA;     * which is DOM Level 2.&#xA;     *&#xA;     * @return org.w3c.dom.Node&#xA;     * @param deep boolean, iff true replicate children&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="newdoc">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="CoreDocumentImpl.class.xmi#//@classifiers.0/@members.109"/>
          <arguments xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/UserDataHandler.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/UserDataHandler.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="CoreDocumentImpl.class.xmi#//@classifiers.0/@members.31"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable">
            <comments>// experimental</comments>
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getImplementation">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/DOMImplementation.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// cloneNode(boolean):Node</comments>
        <comments>/**&#xA;     * Retrieve information describing the abilities of this particular&#xA;     * DOM implementation. Intended to support applications that may be&#xA;     * using DOMs retrieved from several different sources, potentially&#xA;     * with different underlying representations.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>// Currently implemented as a singleton, since it's hardcoded</comments>
        <comments>// information anyway.</comments>
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="DOMImplementationImpl.class.xmi#//@classifiers.0/@members.2"/>
          </next>
          <target xsi:type="classifiers:Class" href="DOMImplementationImpl.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createNodeIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/traversal/NodeIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="root">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="whatToShow">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/traversal/NodeFilter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// DocumentTraversal methods</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * NON-DOM extension:&#xA;     * Create and return a NodeIterator. The NodeIterator is&#xA;     * added to a list of NodeIterators so that it can be&#xA;     * removed to free up the DOM Nodes it references.&#xA;     *&#xA;     * @param root The root of the iterator.&#xA;     * @param whatToShow The whatToShow mask.&#xA;     * @param filter The NodeFilter installed. Null means no filter.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.2"/>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createNodeIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/traversal/NodeIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="root">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="whatToShow">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/traversal/NodeFilter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="entityReferenceExpansion">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create and return a NodeIterator. The NodeIterator is&#xA;     * added to a list of NodeIterators so that it can be&#xA;     * removed to free up the DOM Nodes it references.&#xA;     *&#xA;     * @param root The root of the iterator.&#xA;     * @param whatToShow The whatToShow mask.&#xA;     * @param filter The NodeFilter installed. Null means no filter.&#xA;     * @param entityReferenceExpansion true to expand the contents of&#xA;     *                                 EntityReference nodes&#xA;     * @since WD-DOM-Level-2-19990923&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="msg">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DOMMessageFormatter.class.xmi#//@classifiers.0/@members.8"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="DOMMessageFormatter.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="DOMMessageFormatter.class.xmi#//@classifiers.0"/>
                  </arguments>
                  <arguments xsi:type="references:StringReference" value="NOT_SUPPORTED_ERR"/>
                  <arguments xsi:type="literals:NullLiteral"/>
                </next>
                <target xsi:type="classifiers:Class" href="DOMMessageFormatter.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0/@members.9"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@statement/@statements.0/@variable"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="iterator">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/traversal/NodeIterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NodeIteratorImpl.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.3"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.28"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@variable"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createTreeWalker">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/traversal/TreeWalker.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="root">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="whatToShow">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/traversal/NodeFilter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * NON-DOM extension:&#xA;     * Create and return a TreeWalker.&#xA;     *&#xA;     * @param root The root of the iterator.&#xA;     * @param whatToShow The whatToShow mask.&#xA;     * @param filter The NodeFilter installed. Null means no filter.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.2"/>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createTreeWalker">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/traversal/TreeWalker.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="root">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="whatToShow">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/traversal/NodeFilter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="entityReferenceExpansion">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create and return a TreeWalker.&#xA;     *&#xA;     * @param root The root of the iterator.&#xA;     * @param whatToShow The whatToShow mask.&#xA;     * @param filter The NodeFilter installed. Null means no filter.&#xA;     * @param entityReferenceExpansion true to expand the contents of&#xA;     *                                 EntityReference nodes&#xA;     * @since WD-DOM-Level-2-19990923&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="msg">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DOMMessageFormatter.class.xmi#//@classifiers.0/@members.8"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="DOMMessageFormatter.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="DOMMessageFormatter.class.xmi#//@classifiers.0"/>
                  </arguments>
                  <arguments xsi:type="references:StringReference" value="NOT_SUPPORTED_ERR"/>
                  <arguments xsi:type="literals:NullLiteral"/>
                </next>
                <target xsi:type="classifiers:Class" href="DOMMessageFormatter.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0/@members.9"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@statement/@statements.0/@variable"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="TreeWalkerImpl.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.3"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="removeNodeIterator">
      <typeReference xsi:type="types:Void">
        <comments>//</comments>
        <comments>// Not DOM Level 2. Support DocumentTraversal methods.</comments>
        <comments>//</comments>
        <comments>/** This is not called by the developer client. The&#xA;     *  developer client uses the detach() function on the&#xA;     *  NodeIterator itself. &lt;p>&#xA;     *&#xA;     *  This function is called from the NodeIterator#detach().&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeIterator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/traversal/NodeIterator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.29"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createRange">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/ranges/Range.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// DocumentRange methods</comments>
        <comments>//</comments>
        <comments>/**&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="range">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/ranges/Range.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="RangeImpl.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.28"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.1/@variable"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.1/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="removeRange">
      <typeReference xsi:type="types:Void">
        <comments>/** Not a client function. Called by Range.detach(),&#xA;     *  so a Range can remove itself from the list of&#xA;     *  Ranges.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="range">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/ranges/Range.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.29"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="replacedText">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when some text was changed in a text node,&#xA;     * so that live objects can be notified.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <comments>// notify ranges</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="size">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="RangeImpl.class.xmi#//@classifiers.0/@members.45"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="RangeImpl.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@statement/@statements.1/@init"/>
                      </next>
                    </child>
                  </expression>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@statement/@statements.1/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@statement/@statements.0/@variable"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@statement/@statements.1/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="deletedText">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when some text was deleted from a text node,&#xA;     * so that live objects can be notified.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="count">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:Condition">
        <comments>// notify ranges</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="size">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="RangeImpl.class.xmi#//@classifiers.0/@members.42"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.2"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="RangeImpl.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@statement/@statements.1/@init"/>
                      </next>
                    </child>
                  </expression>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@statement/@statements.1/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@statement/@statements.0/@variable"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@statement/@statements.1/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="insertedText">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when some text was inserted into a text node,&#xA;     * so that live objects can be notified.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="count">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:Condition">
        <comments>// notify ranges</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="size">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="RangeImpl.class.xmi#//@classifiers.0/@members.44"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.2"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="RangeImpl.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@statement/@statements.1/@init"/>
                      </next>
                    </child>
                  </expression>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@statement/@statements.1/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@statement/@statements.0/@variable"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@statement/@statements.1/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="splitData">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when a text node has been split,&#xA;     * so that live objects can be notified.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newNode">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:Condition">
        <comments>// notify ranges</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="size">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="RangeImpl.class.xmi#//@classifiers.0/@members.40"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.2"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="RangeImpl.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statement/@statements.1/@init"/>
                      </next>
                    </child>
                  </expression>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statement/@statements.1/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statement/@statements.0/@variable"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statement/@statements.1/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createEvent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/Event.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// DocumentEvent methods</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Introduced in DOM Level 2. Optional. &lt;p>&#xA;     * Create and return Event objects.&#xA;     *&#xA;     * @param type The eventType parameter specifies the type of Event&#xA;     * interface to be created.  If the Event interface specified is supported&#xA;     * by the implementation this method will return a new Event of the&#xA;     * interface type requested. If the Event is to be dispatched via the&#xA;     * dispatchEvent method the appropriate event init method must be called&#xA;     * after creation in order to initialize the Event's values.  As an&#xA;     * example, a user wishing to synthesize some kind of Event would call&#xA;     * createEvent with the parameter &quot;Events&quot;. The initEvent method could then&#xA;     * be called on the newly created Event to set the specific type of Event&#xA;     * to be dispatched and set its context information.&#xA;     * @return Newly created Event&#xA;     * @exception DOMException NOT_SUPPORTED_ERR: Raised if the implementation&#xA;     * does not support the type of Event interface requested&#xA;     * @since WD-DOM-Level-2-19990923&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="events/EventImpl.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.36"/>
              <arguments xsi:type="references:StringReference" value="Events"/>
            </next>
          </children>
          <children xsi:type="references:StringReference" value="Event">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
            </next>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.36"/>
              <arguments xsi:type="references:StringReference" value="MutationEvents"/>
            </next>
          </children>
          <children xsi:type="references:StringReference" value="MutationEvent">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
            </next>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="msg">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DOMMessageFormatter.class.xmi#//@classifiers.0/@members.8"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="DOMMessageFormatter.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="DOMMessageFormatter.class.xmi#//@classifiers.0"/>
                  </arguments>
                  <arguments xsi:type="references:StringReference" value="NOT_SUPPORTED_ERR"/>
                  <arguments xsi:type="literals:NullLiteral"/>
                </next>
                <target xsi:type="classifiers:Class" href="DOMMessageFormatter.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0/@members.9"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.1/@elseStatement/@statements.0/@variable"/>
            </throwable>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setMutationEvents">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Sets whether the DOM implementation generates mutation events&#xA;     * upon operations.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="set">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMutationEvents">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Returns true if the DOM implementation generates mutation events.&#xA;     */</comments>
      </typeReference>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setEventListeners">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="n">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listeners">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Store event listener registered on a given node&#xA;     * This is another place where we could use weak references! Indeed, the&#xA;     * node here won't be GC'ed as long as some listener is registered on it,&#xA;     * since the eventsListeners table will have a reference to the node.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.28"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                    <comments>// stop firing events when there isn't any listener</comments>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.19"/>
              </next>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.1"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                <comments>// turn mutation events on</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEventListeners">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="n">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Retreive event listener registered on a given node&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.25"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="LEntry">
      <comments>//</comments>
      <comments>// EventTarget support (public and internal)</comments>
      <comments>//</comments>
      <comments>//</comments>
      <comments>// Constants</comments>
      <comments>//</comments>
      <comments>/*&#xA;     * NON-DOM INTERNAL: Class LEntry is just a struct used to represent&#xA;     * event listeners registered with this node. Copies of this object&#xA;     * are hung from the nodeListeners Vector.&#xA;     * &lt;p>&#xA;     * I considered using two vectors -- one for capture,&#xA;     * one for bubble -- but decided that since the list of listeners &#xA;     * is probably short in most cases, it might not be worth spending&#xA;     * the space. ***** REVISIT WHEN WE HAVE MORE EXPERIENCE.&#xA;     */</comments>
      <members xsi:type="members:Field" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:Field" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/EventListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:Field" name="useCapture">
        <typeReference xsi:type="types:Boolean"/>
      </members>
      <members xsi:type="members:Constructor" name="LEntry">
        <comments>/** NON-DOM INTERNAL: Constructor for Listener list Entry &#xA;         * @param type Event name (NOT event group!) to listen for.&#xA;         * @param listener Who gets called when event is dispatched&#xA;         * @param useCaptue True iff listener is registered on&#xA;         *  capturing phase rather than at-target or bubbling&#xA;         */</comments>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.3/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.3/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.2"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.3/@parameters.2"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="type">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/EventListener.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="useCapture">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
      </members>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
    </members>
    <members xsi:type="members:ClassMethod" name="addEventListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/EventListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="useCapture">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// LEntry</comments>
        <comments>/**&#xA;     * Introduced in DOM Level 2. &lt;p> Register an event listener with this&#xA;     * Node. A listener may be independently registered as both Capturing and&#xA;     * Bubbling, but may only be registered once per role; redundant&#xA;     * registrations are ignored.&#xA;     * @param node node to add listener to&#xA;     * @param type Event name (NOT event group!) to listen for.&#xA;     * @param listener Who gets called when event is dispatched&#xA;     * @param useCapture True iff listener is registered on&#xA;     *  capturing phase rather than at-target or bubbling&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// We can't dispatch to blank type-name, and of course we need</comments>
        <comments>// a listener to dispatch to</comments>
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.1"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="references:StringReference" value=""/>
            </next>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.2"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
          <comments>// Each listener may be registered only once per type per phase.</comments>
          <comments>// Simplest way to code that is to zap the previous entry, if any.</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.3"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nodeListeners">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.2/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.2/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.2/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.28"/>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.27"/>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.2"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.3"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lc">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// Record active listener</comments>
              <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="LCount.class.xmi#//@classifiers.0/@members.5"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:PrefixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.5/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </child>
            <operator xsi:type="operators:PlusPlus"/>
          </expression>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.3"/>
        <elseStatement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:PrefixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.5/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.2"/>
              </next>
            </child>
            <operator xsi:type="operators:PlusPlus"/>
          </expression>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="removeEventListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/EventListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="useCapture">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// addEventListener(NodeImpl,String,EventListener,boolean) :void</comments>
        <comments>/**&#xA;     * Introduced in DOM Level 2. &lt;p> Deregister an event listener previously&#xA;     * registered with this Node.  A listener must be independently removed&#xA;     * from the Capturing and Bubbling roles. Redundant removals (of listeners&#xA;     * not currently registered for this role) are ignored.&#xA;     * @param node node to remove listener from&#xA;     * @param type Event name (NOT event group!) to listen for.&#xA;     * @param listener Who gets called when event is dispatched&#xA;     * @param useCapture True iff listener is registered on&#xA;     *  capturing phase rather than at-target or bubbling&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// If this couldn't be a valid listener registration, ignore request</comments>
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.1"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="references:StringReference" value=""/>
            </next>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.2"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nodeListeners">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.1/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// Note that addListener has previously ensured that </comments>
        <comments>// each listener may be registered only once per type per phase.</comments>
        <comments>// count-down is OK for deletions!</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="le">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.27"/>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.27"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.3/@init"/>
                  </next>
                </child>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <comments>// Found it; no need to loop farther.</comments>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.26"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.3/@init"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <comments>// Storage management: Discard empty listener lists</comments>
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="lc">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <comments>// Remove active listener</comments>
                      <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="LCount.class.xmi#//@classifiers.0/@members.5"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.1"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.3/@statement/@statements.1/@statement/@statements.2/@variable">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </child>
                    <operator xsi:type="operators:MinusMinus"/>
                  </expression>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.3"/>
                <elseStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.3/@statement/@statements.1/@statement/@statements.2/@variable">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.2"/>
                      </next>
                    </child>
                    <operator xsi:type="operators:MinusMinus"/>
                  </expression>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.3/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.2"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.3"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.3/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.1"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.2"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.3/@statement/@statements.0/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.1"/>
                  </next>
                </next>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.3/@init"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.1/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </init>
        <updates xsi:type="expressions:PrefixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.3/@init"/>
          <operator xsi:type="operators:MinusMinus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="copyEventListeners">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="src">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tgt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// removeEventListener(NodeImpl,String,EventListener,boolean) :void</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nodeListeners">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.1"/>
          <arguments xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.31"/>
              </next>
            </child>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="dispatchEvent">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="event">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/Event.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Introduced in DOM Level 2. &lt;p>&#xA;     * Distribution engine for DOM Level 2 Events. &#xA;     * &lt;p>&#xA;     * Event propagation runs as follows:&#xA;     * &lt;ol>&#xA;     * &lt;li>Event is dispatched to a particular target node, which invokes&#xA;     *   this code. Note that the event's stopPropagation flag is&#xA;     *   cleared when dispatch begins; thereafter, if it has &#xA;     *   been set before processing of a node commences, we instead&#xA;     *   immediately advance to the DEFAULT phase.&#xA;     * &lt;li>The node's ancestors are established as destinations for events.&#xA;     *   For capture and bubble purposes, node ancestry is determined at &#xA;     *   the time dispatch starts. If an event handler alters the document &#xA;     *   tree, that does not change which nodes will be informed of the event. &#xA;     * &lt;li>CAPTURING_PHASE: Ancestors are scanned, root to target, for &#xA;     *   Capturing listeners. If found, they are invoked (see below). &#xA;     * &lt;li>AT_TARGET: &#xA;     *   Event is dispatched to NON-CAPTURING listeners on the&#xA;     *   target node. Note that capturing listeners on this node are _not_&#xA;     *   invoked.&#xA;     * &lt;li>BUBBLING_PHASE: Ancestors are scanned, target to root, for&#xA;     *   non-capturing listeners. &#xA;     * &lt;li>Default processing: Some DOMs have default behaviors bound to&#xA;     *   specific nodes. If this DOM does, and if the event's preventDefault&#xA;     *   flag has not been set, we now return to the target node and process&#xA;     *   its default handler for this event, if any.&#xA;     * &lt;/ol>&#xA;     * &lt;p>&#xA;     * Note that registration of handlers during processing of an event does&#xA;     * not take effect during this phase of this event; they will not be called&#xA;     * until the next time this node is visited by dispatchEvent. On the other&#xA;     * hand, removals take effect immediately.&#xA;     * &lt;p>&#xA;     * If an event handler itself causes events to be dispatched, they are&#xA;     * processed synchronously, before processing resumes&#xA;     * on the event which triggered them. Please be aware that this may &#xA;     * result in events arriving at listeners &quot;out of order&quot; relative&#xA;     * to the actual sequence of requests.&#xA;     * &lt;p>&#xA;     * Note that our implementation resets the event's stop/prevent flags&#xA;     * when dispatch begins.&#xA;     * I believe the DOM's intent is that event objects be redispatchable,&#xA;     * though it isn't stated in those terms.&#xA;     * @param node node to dispatch to&#xA;     * @param event the event object to be dispatched to &#xA;     *              registered EventListeners&#xA;     * @return true if the event's &lt;code>preventDefault()&lt;/code>&#xA;     *              method was invoked by an EventListener; otherwise false.&#xA;    */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="evt">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// Can't use anyone else's implementation, since there's no public</comments>
              <comments>// API for setting the event's processing-state fields.</comments>
              <target xsi:type="classifiers:Class" href="events/EventImpl.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="events/EventImpl.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// VALIDATE -- must have been initialized at least once, must have</comments>
        <comments>// a non-null non-blank name.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="msg">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DOMMessageFormatter.class.xmi#//@classifiers.0/@members.8"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="DOMMessageFormatter.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="DOMMessageFormatter.class.xmi#//@classifiers.0"/>
                  </arguments>
                  <arguments xsi:type="references:StringReference" value="UNSPECIFIED_EVENT_TYPE_ERR"/>
                  <arguments xsi:type="literals:NullLiteral"/>
                </next>
                <target xsi:type="classifiers:Class" href="DOMMessageFormatter.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../org/w3c/dom/events/EventException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/events/EventException.class.xmi#//@classifiers.0/@members.1"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../org/w3c/dom/events/EventException.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.2/@statement/@statements.0/@variable"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.4"/>
              </next>
            </child>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:StringReference" value=""/>
              </next>
              <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lc">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// If nobody is listening for this event, discard immediately</comments>
              <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="LCount.class.xmi#//@classifiers.0/@members.5"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="events/EventImpl.class.xmi#//@classifiers.0/@members.17"/>
                </next>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.8"/>
            </next>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.3/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.3/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.2"/>
              </next>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.3/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.3"/>
              </next>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
            <comments>// INITIALIZE THE EVENT'S DISPATCH STATUS</comments>
            <comments>// (Note that Event objects are reusable in our implementation;</comments>
            <comments>// that doesn't seem to be explicitly guaranteed in the DOM, but</comments>
            <comments>// I believe it is the intent.)</comments>
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.7"/>
            </next>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.8"/>
            </next>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="pv">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// Capture pre-event parentage chain, not including target;</comments>
              <comments>// use pre-event-dispatch ancestors even if event handlers mutate</comments>
              <comments>// document and change the target's context.</comments>
              <comments>// Note that this is parents ONLY; events do not</comments>
              <comments>// cross the Attr/Element &quot;blood/brain barrier&quot;. </comments>
              <comments>// DOMAttrModified. which looks like an exception,</comments>
              <comments>// is issued to the Element rather than the Attr</comments>
              <comments>// and causes a _second_ DOMSubtreeModified in the Element's</comments>
              <comments>// tree.</comments>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.9/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.8/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.28"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.10/@variable"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.9/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.10/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.10/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.10/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.10/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// CAPTURING_PHASE:</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/events/Event.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/Event.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <comments>// Ancestors are scanned, root to target, for </comments>
            <comments>// Capturing listeners.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Break"/>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.7"/>
                  </next>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="nn">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <comments>// Someone set the flag. Phase ends.</comments>
                      <comments>// Handle all capturing listeners on this node</comments>
                      <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.8/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@init"/>
                      </next>
                    </child>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@statement/@statements.1/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="nodeListeners">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@statement/@statements.1/@variable"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="nl">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@statement/@statements.3/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.31"/>
                          </next>
                        </child>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="nlsize">
                      <typeReference xsi:type="types:Int">
                        <comments>// call listeners in the order in which they got registered</comments>
                      </typeReference>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@statement/@statements.4/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                        </next>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ForLoop">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="le">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.27"/>
                          </typeReference>
                          <initialValue xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences target="//@classifiers.0/@members.27"/>
                            </typeReference>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@statement/@statements.4/@statement/@statements.0/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@statement/@statements.4/@statement/@statements.2/@init"/>
                              </next>
                            </child>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:TryBlock">
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@variable">
                                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.1">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/w3c/dom/events/EventListener.class.xmi#//@classifiers.0/@members.0"/>
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable"/>
                                  </next>
                                </next>
                              </expression>
                            </statements>
                            <catcheBlocks>
                              <comments>// All exceptions are ignored.</comments>
                              <parameter name="e">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                              </parameter>
                            </catcheBlocks>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:ConditionalAndExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@variable">
                            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.2"/>
                          </children>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@variable">
                            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.0">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
                                  <next xsi:type="references:IdentifierReference">
                                    <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.0"/>
                                  </next>
                                </arguments>
                              </next>
                            </next>
                          </children>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@statement/@statements.3/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.17"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@variable"/>
                            </next>
                          </children>
                        </condition>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@statement/@statements.4/@statement/@statements.2/@init"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@statement/@statements.4/@statement/@statements.1/@variable"/>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </condition>
                    <init xsi:type="variables:LocalVariable" name="i">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </init>
                    <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@statement/@statements.4/@statement/@statements.2/@init"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </updates>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@statement/@statements.3/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@init"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="j">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.8/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </initialValue>
            </init>
            <updates xsi:type="expressions:PrefixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.12/@statement/@statements.1/@init"/>
              <operator xsi:type="operators:MinusMinus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.3/@variable">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Both AT_TARGET and BUBBLE use non-capturing listeners.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
                <comments>// AT_TARGET PHASE: Event is dispatched to NON-CAPTURING listeners</comments>
                <comments>// on the target node. Note that capturing listeners on the target</comments>
                <comments>// node are _not_ invoked, even during the capture phase.</comments>
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/events/Event.class.xmi#//@classifiers.0/@members.1"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/Event.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="nodeListeners">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="nl">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.31"/>
                      </next>
                    </child>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="nlsize">
                  <typeReference xsi:type="types:Int">
                    <comments>// call listeners in the order in which they got registered</comments>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.3/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ForLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="le">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@members.27"/>
                      </typeReference>
                      <initialValue xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@members.27"/>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.3/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.3/@statement/@statements.2/@init"/>
                          </next>
                        </child>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:TryBlock">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.3/@statement/@statements.2/@statement/@statements.0/@variable">
                            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.1">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/w3c/dom/events/EventListener.class.xmi#//@classifiers.0/@members.0"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable"/>
                              </next>
                            </next>
                          </expression>
                        </statements>
                        <catcheBlocks>
                          <comments>// All exceptions are ignored.</comments>
                          <parameter name="e">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                          </parameter>
                        </catcheBlocks>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Negate"/>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.3/@statement/@statements.2/@statement/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.2"/>
                        </child>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.3/@statement/@statements.2/@statement/@statements.0/@variable">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.0"/>
                              </next>
                            </arguments>
                          </next>
                        </next>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.2/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.17"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.3/@statement/@statements.2/@statement/@statements.0/@variable"/>
                        </next>
                      </children>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.3/@statement/@statements.2/@init"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.3/@statement/@statements.1/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <init xsi:type="variables:LocalVariable" name="i">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </init>
                <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.3/@statement/@statements.2/@init"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </updates>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.7"/>
                  </next>
                </child>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.2/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// BUBBLING_PHASE: Ancestors are scanned, target to root, for</comments>
            <comments>// non-capturing listeners. If the event's preventBubbling flag</comments>
            <comments>// has been set before processing of a node commences, we</comments>
            <comments>// instead immediately advance to the default phase.</comments>
            <comments>// Note that not all events bubble.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/events/Event.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/Event.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="pvsize">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.8/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ForLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Break"/>
                    <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.7"/>
                      </next>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="nn">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <comments>// Someone set the flag. Phase ends.</comments>
                          <comments>// Handle all bubbling listeners on this node</comments>
                          <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.8/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.2/@init"/>
                          </next>
                        </child>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.2"/>
                        </next>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.2/@statement/@statements.1/@variable"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.2/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.2/@statement/@statements.1/@variable"/>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="nl">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <initialValue xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.2/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.31"/>
                              </next>
                            </child>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="nlsize">
                          <typeReference xsi:type="types:Int">
                            <comments>// call listeners in the order in which they got</comments>
                            <comments>// registered</comments>
                          </typeReference>
                          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.2/@statement/@statements.4/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                            </next>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:ForLoop">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:LocalVariableStatement">
                            <variable name="le">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@members.27"/>
                              </typeReference>
                              <initialValue xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences target="//@classifiers.0/@members.27"/>
                                </typeReference>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.2/@statement/@statements.4/@statement/@statements.0/@variable">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.2/@statement/@statements.4/@statement/@statements.2/@init"/>
                                  </next>
                                </child>
                              </initialValue>
                            </variable>
                          </statements>
                          <statements xsi:type="statements:Condition">
                            <statement xsi:type="statements:Block">
                              <statements xsi:type="statements:TryBlock">
                                <statements xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.2/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@variable">
                                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.1">
                                      <next xsi:type="references:MethodCall">
                                        <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/w3c/dom/events/EventListener.class.xmi#//@classifiers.0/@members.0"/>
                                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable"/>
                                      </next>
                                    </next>
                                  </expression>
                                </statements>
                                <catcheBlocks>
                                  <comments>// All exceptions are ignored.</comments>
                                  <parameter name="e">
                                    <typeReference xsi:type="types:NamespaceClassifierReference">
                                      <classifierReferences>
                                        <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                                      </classifierReferences>
                                    </typeReference>
                                  </parameter>
                                </catcheBlocks>
                              </statements>
                            </statement>
                            <condition xsi:type="expressions:ConditionalAndExpression">
                              <children xsi:type="expressions:UnaryExpression">
                                <operators xsi:type="operators:Negate"/>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.2/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@variable">
                                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.2"/>
                                </child>
                              </children>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.2/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@variable">
                                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.0">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
                                      <next xsi:type="references:IdentifierReference">
                                        <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.0"/>
                                      </next>
                                    </arguments>
                                  </next>
                                </next>
                              </children>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.2/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.17"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.2/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@variable"/>
                                </next>
                              </children>
                            </condition>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.2/@statement/@statements.4/@statement/@statements.2/@init"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.2/@statement/@statements.4/@statement/@statements.1/@variable"/>
                          <relationOperators xsi:type="operators:LessThan"/>
                        </condition>
                        <init xsi:type="variables:LocalVariable" name="i">
                          <typeReference xsi:type="types:Int"/>
                          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        </init>
                        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.2/@statement/@statements.4/@statement/@statements.2/@init"/>
                          <operator xsi:type="operators:PlusPlus"/>
                        </updates>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.2/@variable"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.2/@init"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.1/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <init xsi:type="variables:LocalVariable" name="j">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </init>
                <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.13/@statement/@statements.4/@statement/@statements.2/@init"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </updates>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.5"/>
              </next>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.3/@variable">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// DEFAULT PHASE: Some DOMs have default behaviors bound to specific</comments>
        <comments>// nodes. If this DOM does, and if the event's preventDefault flag has</comments>
        <comments>// not been set, we now return to the target node and process its</comments>
        <comments>// default handler for this event, if any.</comments>
        <comments>// No specific phase value defined, since this is DOM-internal</comments>
        <statement xsi:type="statements:Block">
          <comments>// evt.eventPhase = Event.DEFAULT_PHASE;</comments>
          <comments>// evt.currentTarget = node;</comments>
          <comments>// DO_DEFAULT_OPERATION</comments>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.3/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.3"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.6"/>
                  </next>
                </child>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.8"/>
                  </next>
                </child>
              </children>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@variable">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="events/EventImpl.class.xmi#//@classifiers.0/@members.8"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="dispatchEventToSubtree">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="n">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/Event.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// dispatchEvent(NodeImpl,Event) :boolean</comments>
        <comments>/**&#xA;     * NON-DOM INTERNAL: DOMNodeInsertedIntoDocument and ...RemovedFrom...&#xA;     * are dispatched to an entire subtree. This is the distribution code&#xA;     * therefor. They DO NOT bubble, thanks be, but may be captured.&#xA;     * &lt;p>&#xA;     * ***** At the moment I'm being sloppy and using the normal&#xA;     * capture dispatcher on every node. This could be optimized hugely&#xA;     * by writing a capture engine that tracks our position in the tree to&#xA;     * update the capture chain without repeated chases up to root.&#xA;     * @param node node to dispatch to&#xA;     * @param n node which was directly inserted or removed&#xA;     * @param e event to be sent to that node and its subtree&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nodeListeners">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.1"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:NestedExpression">
          <comments>// ***** Recursive implementation. This is excessively expensive,</comments>
          <comments>// and should be replaced in conjunction with optimization</comments>
          <comments>// mentioned above.</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="NodeImpl.class.xmi#//@classifiers.0/@members.63"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.2"/>
          </next>
          <expression xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.1"/>
          </expression>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="a">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/NamedNodeMap.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.28"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.32">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.3/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/w3c/dom/NamedNodeMap.class.xmi#//@classifiers.0/@members.3"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.3/@statement/@statements.1/@init"/>
                  </next>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.2"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.3/@statement/@statements.1/@init"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.3/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/w3c/dom/NamedNodeMap.class.xmi#//@classifiers.0/@members.4"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </initialValue>
            </init>
            <updates xsi:type="expressions:PrefixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.3/@statement/@statements.1/@init"/>
              <operator xsi:type="operators:MinusMinus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.21"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.32">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.24"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.32">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.27"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.2"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="EnclosingAttr">
      <comments>// dispatchEventToSubtree(NodeImpl,Node,Event) :void</comments>
      <comments>/**&#xA;     * NON-DOM INTERNAL: Return object for getEnclosingAttr. Carries&#xA;     * (two values, the Attr node affected (if any) and its previous &#xA;     * string value. Simple struct, no methods.&#xA;     */</comments>
      <members xsi:type="members:Field" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AttrImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:Field" name="oldvalue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
    </members>
    <members xsi:type="members:Field" name="savedEnclosingAttr">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.33"/>
      </typeReference>
    </members>
    <members xsi:type="members:ClassMethod" name="dispatchAggregateEvents">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ea">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.33"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * NON-DOM INTERNAL: Convenience wrapper for calling&#xA;     * dispatchAggregateEvents when the context was established&#xA;     * by &lt;code>savedEnclosingAttr&lt;/code>.&#xA;     * @param node node to dispatch to&#xA;     * @param ea description of Attr affected by current operation&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.1">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@members.0"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.1">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@members.1"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/events/MutationEvent.class.xmi#//@classifiers.0/@members.0"/>
              </next>
              <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/MutationEvent.class.xmi#//@classifiers.0"/>
            </arguments>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
            <arguments xsi:type="literals:NullLiteral"/>
            <arguments xsi:type="literals:NullLiteral"/>
            <arguments xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:Short"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arguments>
          </expression>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="dispatchAggregateEvents">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="enclosingAttr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AttrImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oldvalue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="change">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// dispatchAggregateEvents(NodeImpl,EnclosingAttr) :void</comments>
        <comments>/**&#xA;     * NON-DOM INTERNAL: Generate the &quot;aggregated&quot; post-mutation events&#xA;     * DOMAttrModified and DOMSubtreeModified.&#xA;     * Both of these should be issued only once for each user-requested&#xA;     * mutation operation, even if that involves multiple changes to&#xA;     * the DOM.&#xA;     * For example, if a DOM operation makes multiple changes to a single&#xA;     * Attr before returning, it would be nice to generate only one &#xA;     * DOMAttrModified, and multiple changes over larger scope but within&#xA;     * a recognizable single subtree might want to generate only one &#xA;     * DOMSubtreeModified, sent to their lowest common ancestor. &#xA;     * &lt;p>&#xA;     * To manage this, use the &quot;internal&quot; versions of insert and remove&#xA;     * with MUTATION_LOCAL, then make an explicit call to this routine&#xA;     * at the higher level. Some examples now exist in our code.&#xA;     *&#xA;     * @param node The node to dispatch to&#xA;     * @param enclosingAttr The Attr node (if any) whose value has been changed&#xA;     * as a result of the DOM operation. Null if none such.&#xA;     * @param oldValue The String value previously held by the&#xA;     * enclosingAttr. Ignored if none such.&#xA;     * @param change Type of modification to the attr. See&#xA;     * MutationEvent.attrChange&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="owner">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// We have to send DOMAttrModified.</comments>
              <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="lc">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="LCount.class.xmi#//@classifiers.0/@members.5"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.10"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.1">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="AttrImpl.class.xmi#//@classifiers.0/@members.26"/>
                  </next>
                </child>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="me">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@statement/@statements.2/@statement/@statements.0/@statement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.18"/>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.10"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                        </arguments>
                        <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                        <arguments xsi:type="literals:BooleanLiteral"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.1"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.2"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.1">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="AttrImpl.class.xmi#//@classifiers.0/@members.20"/>
                          </next>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.1">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="AttrImpl.class.xmi#//@classifiers.0/@members.15"/>
                          </next>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.3"/>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="NodeImpl.class.xmi#//@classifiers.0/@members.63"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@statement/@statements.2/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lc">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// DOMSubtreeModified gets sent to the lowest common root of a</comments>
              <comments>// set of changes. </comments>
              <comments>// &quot;This event is dispatched after all other events caused by the</comments>
              <comments>// mutation have been fired.&quot;</comments>
              <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="LCount.class.xmi#//@classifiers.0/@members.5"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="me">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/MutationEvent.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@statement/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/w3c/dom/events/MutationEvent.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                <arguments xsi:type="literals:BooleanLiteral"/>
                <arguments xsi:type="literals:NullLiteral"/>
                <arguments xsi:type="literals:NullLiteral"/>
                <arguments xsi:type="literals:NullLiteral"/>
                <arguments xsi:type="literals:NullLiteral"/>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:Short"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// If we're within an Attr, DStM gets sent to the Attr</comments>
            <comments>// and to its owningElement. Otherwise we dispatch it</comments>
            <comments>// locally.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@statement/@statements.0/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@statement/@statements.0/@variable"/>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.1"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@statement/@statements.0/@variable"/>
              </expression>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.2"/>
              </next>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.3"/>
              </next>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="saveEnclosingAttr">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// dispatchAggregateEvents(NodeImpl, AttrImpl,String) :void</comments>
        <comments>/**&#xA;     * NON-DOM INTERNAL: Pre-mutation context check, in&#xA;     * preparation for later generating DOMAttrModified events.&#xA;     * Determines whether this node is within an Attr&#xA;     * @param node node to get enclosing attribute for&#xA;     * @return either a description of that Attr, or null if none such. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lc">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// MUTATION PREPROCESSING AND PRE-EVENTS:</comments>
              <comments>// If we're within the scope of an Attr and DOMAttrModified </comments>
              <comments>// was requested, we need to preserve its previous value for</comments>
              <comments>// that event.</comments>
              <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="LCount.class.xmi#//@classifiers.0/@members.5"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.10"/>
                </next>
                <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="eventAncestor">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
            </variable>
          </statements>
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <comments>// Any other parent means we're not in an Attr</comments>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Return"/>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.2/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="type">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.2/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="NodeImpl.class.xmi#//@classifiers.0/@members.29"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="retval">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@members.33"/>
                      </typeReference>
                      <initialValue xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@members.33"/>
                        </typeReference>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.2/@statement/@statements.1/@statement/@statements.2/@statement/@statements.0/@variable">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@members.0"/>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="AttrImpl.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.2/@statement/@statements.0/@variable"/>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.2/@statement/@statements.1/@statement/@statements.2/@statement/@statements.0/@variable">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@members.1"/>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.2/@statement/@statements.1/@statement/@statements.2/@statement/@statements.0/@variable">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@members.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="AttrImpl.class.xmi#//@classifiers.0/@members.20"/>
                          </next>
                        </next>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.2/@statement/@statements.1/@statement/@statements.2/@statement/@statements.0/@variable"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Return"/>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.2/@statement/@statements.1/@statement/@statements.1/@variable"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.2/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.2/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="NodeImpl.class.xmi#//@classifiers.0/@members.40"/>
                        </next>
                      </value>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.2/@statement/@statements.1/@statement/@statements.1/@variable"/>
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.4"/>
                      </next>
                      <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
                    </children>
                  </condition>
                  <elseStatement xsi:type="statements:Return"/>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="literals:BooleanLiteral" value="true"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.1/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.1/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.2"/>
              </next>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.1/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.3"/>
              </next>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="modifyingCharacterData">
      <typeReference xsi:type="types:Void">
        <comments>// saveEnclosingAttr(NodeImpl) :void</comments>
        <comments>/**&#xA;     * A method to be called when a character data node has been modified&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="modifiedCharacterData">
      <comments>// End mutation postprocessing</comments>
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when a character data node has been modified&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oldvalue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="lc">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// MUTATION POST-EVENTS:</comments>
                  <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="LCount.class.xmi#//@classifiers.0/@members.5"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.11"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="me">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/MutationEvent.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/w3c/dom/events/MutationEvent.class.xmi#//@classifiers.0/@members.8"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.11"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                    <arguments xsi:type="literals:BooleanLiteral"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.2"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:Short"/>
                      <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
              <comments>// Subroutine: Transmit DOMAttrModified and DOMSubtreeModified,</comments>
              <comments>// if required. (Common to most kinds of mutation)</comments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="insertingNode">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when a node is about to be inserted in the tree.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="replace">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="insertedNode">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when a node has been inserted in the tree.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newInternal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="replace">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="lc">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// MUTATION POST-EVENTS:</comments>
                  <comments>// &quot;Local&quot; events (non-aggregated)</comments>
                  <comments>// New child is told it was inserted, and where</comments>
                  <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="LCount.class.xmi#//@classifiers.0/@members.5"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.6"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="me">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.18"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.6"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                    <arguments xsi:type="literals:BooleanLiteral"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:Short"/>
                      <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.0/@variable">
                <comments>// If within the Document, tell the subtree it's been added</comments>
                <comments>// to the Doc.</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="LCount.class.xmi#//@classifiers.0/@members.5"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.9"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="eventAncestor">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.3/@statement/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@members.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="AttrImpl.class.xmi#//@classifiers.0/@members.26"/>
                          </next>
                        </next>
                      </child>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="p">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <comments>// Might have been orphan Attr</comments>
                          <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.3/@statement/@statements.0/@variable"/>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:WhileLoop">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.3/@statement/@statements.0/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.3/@statement/@statements.2/@statement/@statements.0/@variable"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <comments>// Last non-null ancestor</comments>
                        <comments>// In this context, ancestry includes</comments>
                        <comments>// walking back from Attr to Element</comments>
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.3/@statement/@statements.2/@statement/@statements.0/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                                <child xsi:type="expressions:NestedExpression">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="AttrImpl.class.xmi#//@classifiers.0/@members.26"/>
                                  </next>
                                  <expression xsi:type="expressions:CastExpression">
                                    <typeReference xsi:type="types:NamespaceClassifierReference">
                                      <classifierReferences>
                                        <target xsi:type="classifiers:Class" href="AttrImpl.class.xmi#//@classifiers.0"/>
                                      </classifierReferences>
                                    </typeReference>
                                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.3/@statement/@statements.2/@statement/@statements.0/@variable"/>
                                  </expression>
                                </child>
                              </value>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.3/@statement/@statements.2/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="NodeImpl.class.xmi#//@classifiers.0/@members.29"/>
                            </next>
                          </children>
                          <children xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.1"/>
                          </children>
                        </condition>
                        <elseStatement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.3/@statement/@statements.2/@statement/@statements.0/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.3/@statement/@statements.2/@statement/@statements.0/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="NodeImpl.class.xmi#//@classifiers.0/@members.40"/>
                                </next>
                              </value>
                            </expression>
                          </statements>
                        </elseStatement>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.3/@statement/@statements.2/@statement/@statements.0/@variable"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="me">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <initialValue xsi:type="instantiations:NewConstructorCall">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.3/@statement/@statements.2/@statement/@statements.2/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.18"/>
                            <arguments xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.9"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                            </arguments>
                            <arguments xsi:type="literals:BooleanLiteral"/>
                            <arguments xsi:type="literals:BooleanLiteral"/>
                            <arguments xsi:type="literals:NullLiteral"/>
                            <arguments xsi:type="literals:NullLiteral"/>
                            <arguments xsi:type="literals:NullLiteral"/>
                            <arguments xsi:type="literals:NullLiteral"/>
                            <arguments xsi:type="expressions:CastExpression">
                              <typeReference xsi:type="types:Short"/>
                              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                            </arguments>
                          </next>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.32">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.1"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.3/@statement/@statements.2/@statement/@statements.2/@statement/@statements.0/@variable"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.3/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="NodeImpl.class.xmi#//@classifiers.0/@members.29"/>
                        </next>
                      </children>
                      <children xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.8"/>
                        </next>
                        <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
                      </children>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.3/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
                  <comments>// Subroutine: Transmit DOMAttrModified and DOMSubtreeModified</comments>
                  <comments>// (Common to most kinds of mutation)</comments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.2"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="removingNode">
      <comments>// End mutation preprocessing</comments>
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when a node is about to be removed from the tree.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oldChild">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="replace">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <statements xsi:type="statements:Condition">
        <comments>// notify iterators</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="size">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="NodeIteratorImpl.class.xmi#//@classifiers.0/@members.19"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.1"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="NodeIteratorImpl.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statement/@statements.1/@init"/>
                      </next>
                    </child>
                  </expression>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statement/@statements.1/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statement/@statements.0/@variable"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statement/@statements.1/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// notify ranges</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="size">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="RangeImpl.class.xmi#//@classifiers.0/@members.48"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.1"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="RangeImpl.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.1/@statement/@statements.1/@init"/>
                      </next>
                    </child>
                  </expression>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.1/@statement/@statements.1/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.1/@statement/@statements.0/@variable"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.1/@statement/@statements.1/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// mutation events</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <comments>// MUTATION PREPROCESSING AND PRE-EVENTS:</comments>
            <comments>// If we're within the scope of an Attr and DOMAttrModified </comments>
            <comments>// was requested, we need to preserve its previous value for</comments>
            <comments>// that event.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.2"/>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="lc">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// Child is told that it is about to be removed</comments>
                  <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="LCount.class.xmi#//@classifiers.0/@members.5"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.7"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="me">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.2/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.18"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.7"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                    <arguments xsi:type="literals:BooleanLiteral"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:Short"/>
                      <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.2/@statement/@statements.0/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.1/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.1/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.1/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.1/@variable">
                <comments>// If within Document, child's subtree is informed that it's</comments>
                <comments>// losing that status</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="LCount.class.xmi#//@classifiers.0/@members.5"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.8"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="eventAncestor">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:SelfReference">
                    <self xsi:type="literals:This"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.4/@statement/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@members.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="AttrImpl.class.xmi#//@classifiers.0/@members.26"/>
                          </next>
                        </next>
                      </child>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ForLoop">
                    <comments>// Might have been orphan Attr</comments>
                    <statement xsi:type="statements:Block">
                      <comments>// Last non-null ancestor</comments>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.4/@statement/@statements.0/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@init"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@init"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                    <init xsi:type="variables:LocalVariable" name="p">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.4/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="NodeImpl.class.xmi#//@classifiers.0/@members.40"/>
                        </next>
                      </initialValue>
                    </init>
                    <updates xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@init"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.4/@statement/@statements.2/@statement/@statements.0/@init">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="NodeImpl.class.xmi#//@classifiers.0/@members.40"/>
                        </next>
                      </value>
                    </updates>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="me">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <initialValue xsi:type="instantiations:NewConstructorCall">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.4/@statement/@statements.2/@statement/@statements.1/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.18"/>
                            <arguments xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.8"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                            </arguments>
                            <arguments xsi:type="literals:BooleanLiteral"/>
                            <arguments xsi:type="literals:BooleanLiteral"/>
                            <arguments xsi:type="literals:NullLiteral"/>
                            <arguments xsi:type="literals:NullLiteral"/>
                            <arguments xsi:type="literals:NullLiteral"/>
                            <arguments xsi:type="literals:NullLiteral"/>
                            <arguments xsi:type="expressions:CastExpression">
                              <typeReference xsi:type="types:Short"/>
                              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                            </arguments>
                          </next>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.32">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.1"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.4/@statement/@statements.2/@statement/@statements.1/@statement/@statements.0/@variable"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.4/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="NodeImpl.class.xmi#//@classifiers.0/@members.29"/>
                        </next>
                      </children>
                      <children xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0/@members.8"/>
                        </next>
                        <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
                      </children>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.4/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.1/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.1/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statement/@statements.1/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="removedNode">
      <comments>// End mutation postprocessing</comments>
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when a node has been removed from the tree.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="replace">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <comments>// MUTATION POST-EVENTS:</comments>
            <comments>// Subroutine: Transmit DOMAttrModified and DOMSubtreeModified,</comments>
            <comments>// if required. (Common to most kinds of mutation)</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.1"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="replacingNode">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when a node is about to be replaced in the tree.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="replacedNode">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when a node has been replaced in the tree.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="modifiedAttrValue">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when an attribute value has been modified&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AttrImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oldvalue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
              <comments>// MUTATION POST-EVENTS:</comments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.1"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/events/MutationEvent.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/MutationEvent.class.xmi#//@classifiers.0"/>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setAttrNode">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when an attribute node has been set&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AttrImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="previous">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AttrImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <comments>// MUTATION POST-EVENTS:</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="NodeImpl.class.xmi#//@classifiers.0/@members.15"/>
                    </next>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
                  <arguments xsi:type="literals:NullLiteral"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/events/MutationEvent.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/MutationEvent.class.xmi#//@classifiers.0"/>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.1"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="NodeImpl.class.xmi#//@classifiers.0/@members.15"/>
                    </next>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="AttrImpl.class.xmi#//@classifiers.0/@members.20"/>
                    </next>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/events/MutationEvent.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/MutationEvent.class.xmi#//@classifiers.0"/>
                  </arguments>
                </expression>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="removedAttrNode">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when an attribute node has been removed&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AttrImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oldOwner">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NodeImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <comments>// We can't use the standard dispatchAggregate, since it assumes</comments>
        <comments>// that the Attr is still attached to an owner. This code is</comments>
        <comments>// similar but dispatches to the previous owner, &quot;element&quot;.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="lc">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// If we have to send DOMAttrModified (determined earlier),</comments>
                  <comments>// do so.</comments>
                  <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="LCount.class.xmi#//@classifiers.0/@members.5"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.10"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="LCount.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="me">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.18"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="events/MutationEventImpl.class.xmi#//@classifiers.0/@members.10"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="events/MutationEventImpl.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                    <arguments xsi:type="literals:BooleanLiteral"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="AttrImpl.class.xmi#//@classifiers.0/@members.20"/>
                      </next>
                    </arguments>
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.2"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../org/w3c/dom/events/MutationEvent.class.xmi#//@classifiers.0/@members.2"/>
                      </next>
                      <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/MutationEvent.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="LCount.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
              <comments>// We can hand off to process DOMSubtreeModified, though.</comments>
              <comments>// Note that only the Element needs to be informed; the</comments>
              <comments>// Attr's subtree has not been changed by this operation.</comments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.1"/>
              <arguments xsi:type="literals:NullLiteral"/>
              <arguments xsi:type="literals:NullLiteral"/>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Short"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="renamedAttrNode">
      <comments>// REVISIT: To be implemented!!!</comments>
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when an attribute node has been renamed&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oldAt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Attr.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newAt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Attr.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:ClassMethod" name="renamedElement">
      <comments>// REVISIT: To be implemented!!!</comments>
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A method to be called when an element has been renamed&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oldEl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Element.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newEl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Element.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The Document interface represents the entire HTML or XML document.&#xA; * Conceptually, it is the root of the document tree, and provides the&#xA; * primary access to the document's data.&#xA; * &lt;P>&#xA; * Since elements, text nodes, comments, processing instructions,&#xA; * etc. cannot exist outside the context of a Document, the Document&#xA; * interface also contains the factory methods needed to create these&#xA; * objects. The Node objects created have a ownerDocument attribute&#xA; * which associates them with the Document within whose context they&#xA; * were created.&#xA; * &lt;p>&#xA; * The DocumentImpl class also implements the DOM Level 2 DocumentTraversal&#xA; * interface. This interface is comprised of factory methods needed to&#xA; * create NodeIterators and TreeWalkers. The process of creating NodeIterator&#xA; * objects also adds these references to this document.&#xA; * After finishing with an iterator it is important to remove the object&#xA; * using the remove methods in this implementation. This allows the release of&#xA; * the references from the iterator objects to the DOM Nodes.&#xA; * &lt;p>&#xA; * &lt;b>Note:&lt;/b> When any node in the document is serialized, the&#xA; * entire document is serialized along with it.&#xA; *&#xA; * @author Arnaud  Le Hors, IBM&#xA; * @author Joe Kesselman, IBM&#xA; * @author Andy Clark, IBM&#xA; * @author Ralf Pfeiffer, IBM&#xA; * @version $Id: DocumentImpl.java,v 1.78 2003/07/29 18:24:05 elena Exp $&#xA; * @since  PR-DOM-Level-1-19980818.&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/traversal/DocumentTraversal.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/events/DocumentEvent.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/ranges/DocumentRange.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="CoreDocumentImpl.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
