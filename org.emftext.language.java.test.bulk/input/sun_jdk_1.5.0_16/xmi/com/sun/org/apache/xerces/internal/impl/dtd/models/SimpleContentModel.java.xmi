<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../../../../../../java.ecore#/17" name="SimpleContentModel.java">
  <comments>/*&#xA; * The Apache Software License, Version 1.1&#xA; *&#xA; *&#xA; * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights &#xA; * reserved.&#xA; *&#xA; * Redistribution and use in source and binary forms, with or without&#xA; * modification, are permitted provided that the following conditions&#xA; * are met:&#xA; *&#xA; * 1. Redistributions of source code must retain the above copyright&#xA; *    notice, this list of conditions and the following disclaimer. &#xA; *&#xA; * 2. Redistributions in binary form must reproduce the above copyright&#xA; *    notice, this list of conditions and the following disclaimer in&#xA; *    the documentation and/or other materials provided with the&#xA; *    distribution.&#xA; *&#xA; * 3. The end-user documentation included with the redistribution,&#xA; *    if any, must include the following acknowledgment:  &#xA; *       &quot;This product includes software developed by the&#xA; *        Apache Software Foundation (http://www.apache.org/).&quot;&#xA; *    Alternately, this acknowledgment may appear in the software itself,&#xA; *    if and wherever such third-party acknowledgments normally appear.&#xA; *&#xA; * 4. The names &quot;Xerces&quot; and &quot;Apache Software Foundation&quot; must&#xA; *    not be used to endorse or promote products derived from this&#xA; *    software without prior written permission. For written &#xA; *    permission, please contact apache@apache.org.&#xA; *&#xA; * 5. Products derived from this software may not be called &quot;Apache&quot;,&#xA; *    nor may &quot;Apache&quot; appear in their name, without prior written&#xA; *    permission of the Apache Software Foundation.&#xA; *&#xA; * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED&#xA; * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES&#xA; * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE&#xA; * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR&#xA; * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xA; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xA; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF&#xA; * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND&#xA; * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,&#xA; * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT&#xA; * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF&#xA; * SUCH DAMAGE.&#xA; * ====================================================================&#xA; *&#xA; * This software consists of voluntary contributions made by many&#xA; * individuals on behalf of the Apache Software Foundation and was&#xA; * originally based on software copyright (c) 1999, International&#xA; * Business Machines, Inc., http://www.apache.org.  For more&#xA; * information on the Apache Software Foundation, please see&#xA; * &lt;http://www.apache.org/>.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xerces</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>impl</namespaces>
  <namespaces>dtd</namespaces>
  <namespaces>models</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>xni</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../xni/QName.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>dtd</namespaces>
    <classifier xsi:type="classifiers:Class" href="../XMLContentSpec.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="SimpleContentModel">
    <comments>// validate</comments>
    <members xsi:type="members:Field" name="CHOICE">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      </initialValue>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Constants</comments>
        <comments>//</comments>
        <comments>/** CHOICE */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SEQUENCE">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      </initialValue>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** SEQUENCE */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="fFirstChild">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../xni/QName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../xni/QName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>//</comments>
        <comments>// Data</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * The element decl pool indices of the first (and optional second)&#xA;     * child node. The operation code tells us whether the second child&#xA;     * is used or not.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fSecondChild">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../xni/QName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../xni/QName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The element decl pool indices of the first (and optional second)&#xA;     * child node. The operation code tells us whether the second child&#xA;     * is used or not.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fOperator">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The operation that this object represents. Since this class only&#xA;     * does simple contents, there is only ever a single operation&#xA;     * involved (i.e. the children of the operation are always one or&#xA;     * two leafs.) This is one of the XMLDTDParams.CONTENTSPECNODE_XXX values.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="SimpleContentModel">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
          <comments>//</comments>
          <comments>//  Store away the children and operation. This is all we need to</comments>
          <comments>//  do the content model check.</comments>
          <comments>//</comments>
          <comments>//  The operation is one of the ContentSpecNode.NODE_XXX values!</comments>
          <comments>//</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.7"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.7"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.2"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.9"/>
              </next>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="operator">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="firstChild">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../xni/QName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="secondChild">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../xni/QName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* this is the EquivClassComparator object */</comments>
        <comments>//private EquivClassComparator comparator = null;</comments>
        <comments>//</comments>
        <comments>// Constructors</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Constructs a simple content model.&#xA;     *&#xA;     * @param operator The content model operator.&#xA;     * @param firstChild The first child index.&#xA;     * @param secondChild The second child index.&#xA;     * @param dtd if it is for a DTDGrammar.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="validate">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="children">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../xni/QName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// ContentModelValidator methods</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Check that the specified content is valid according to this&#xA;     * content model. This method can also be called to do 'what if' &#xA;     * testing of content models just to see if they would be valid.&#xA;     * &lt;p>&#xA;     * A value of -1 in the children array indicates a PCDATA node. All other &#xA;     * indexes will be positive and represent child elements. The count can be&#xA;     * zero, since some elements have the EMPTY content model and that must be &#xA;     * confirmed.&#xA;     *&#xA;     * @param children The children of this element.  Each integer is an index within&#xA;     *                 the &lt;code>StringPool&lt;/code> of the child element name.  An index&#xA;     *                 of -1 is used to indicate an occurrence of non-whitespace character&#xA;     *                 data.&#xA;     * @param offset Offset into the array where the children starts.&#xA;     * @param length The number of entries in the &lt;code>children&lt;/code> array.&#xA;     *&#xA;     * @return The value -1 if fully valid, else the 0 based index of the child&#xA;     *         that first failed. If the value returned is equal to the number&#xA;     *         of children, then the specified children are valid but additional&#xA;     *         content is required to reach a valid ending state.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Switch">
        <comments>//</comments>
        <comments>//  According to the type of operation, we do the correct type of</comments>
        <comments>//  content check.</comments>
        <comments>//</comments>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Condition">
            <comments>// If there is not a child, then report an error at index 0</comments>
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// If the 0th child is not the right kind, report an error at 0</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                </next>
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
                </arraySelectors>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// If more than one child, report an error at index 1</comments>
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../XMLContentSpec.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../XMLContentSpec.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Condition">
            <comments>//</comments>
            <comments>//  If there is one child, make sure its the right type. If not,</comments>
            <comments>//  then its an error at index 0.</comments>
            <comments>//</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
                    </arraySelectors>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </children>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>//</comments>
            <comments>//  If the child count is greater than one, then obviously</comments>
            <comments>//  bad, so report an error at index 1.</comments>
            <comments>//</comments>
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../XMLContentSpec.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../XMLContentSpec.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Condition">
            <comments>//</comments>
            <comments>//  If the child count is zero, that's fine. If its more than</comments>
            <comments>//  zero, then make sure that all children are of the element</comments>
            <comments>//  type that we stored. If not, report the index of the first</comments>
            <comments>//  failed one.</comments>
            <comments>//</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ForLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@cases.2/@statements.0/@statement/@statements.0/@init"/>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                        </next>
                        <arraySelectors>
                          <position xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@cases.2/@statements.0/@statement/@statements.0/@init"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                          </position>
                        </arraySelectors>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                        </next>
                      </children>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@cases.2/@statements.0/@statement/@statements.0/@init"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <init xsi:type="variables:LocalVariable" name="index">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </init>
                <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@cases.2/@statements.0/@statement/@statements.0/@init"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </updates>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../XMLContentSpec.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <target xsi:type="classifiers:Class" href="../XMLContentSpec.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Condition">
            <comments>//</comments>
            <comments>//  If the child count is zero, that's an error so report</comments>
            <comments>//  an error at index 0.</comments>
            <comments>//</comments>
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <comments>//</comments>
            <comments>//  Otherwise we have to check them all to make sure that they</comments>
            <comments>//  are of the correct child type. If not, then report the index</comments>
            <comments>//  of the first one that is not.</comments>
            <comments>//</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@cases.3/@statements.1/@init"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <arraySelectors>
                      <position xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@cases.3/@statements.1/@init"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </position>
                    </arraySelectors>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </children>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@cases.3/@statements.1/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="index">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@cases.3/@statements.1/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../XMLContentSpec.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <target xsi:type="classifiers:Class" href="../XMLContentSpec.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Condition">
            <comments>//</comments>
            <comments>//  There must be one and only one child, so if the element count</comments>
            <comments>//  is zero, return an error at index 0.</comments>
            <comments>//</comments>
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// If the zeroth element isn't one of our choices, error at 0</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
                    </arraySelectors>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </children>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
                    </arraySelectors>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </children>
                </expression>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// If there is more than one element, then an error at 1</comments>
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../XMLContentSpec.class.xmi#//@classifiers.0/@members.4"/>
            </next>
            <target xsi:type="classifiers:Class" href="../XMLContentSpec.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Condition">
            <comments>//</comments>
            <comments>//  There must be two children and they must be the two values</comments>
            <comments>//  we stored, in the stored order.</comments>
            <comments>//</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
                    </arraySelectors>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <arraySelectors>
                      <position xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </position>
                    </arraySelectors>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </children>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                  <relationOperators xsi:type="operators:GreaterThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../XMLContentSpec.class.xmi#//@classifiers.0/@members.5"/>
            </next>
            <target xsi:type="classifiers:Class" href="../XMLContentSpec.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:DefaultSwitchCase">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/RuntimeException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="ImplementationMessages.VAL_CST"/>
            </throwable>
          </statements>
        </cases>
        <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>// We survived, so return success status</comments>
        <returnValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * @version $Id: SimpleContentModel.java,v 1.4 2002/05/29 17:59:37 neilg Exp $&#xA; *&#xA; * SimpleContentModel is a derivative of the abstract content model base&#xA; * class that handles a small set of simple content models that are just&#xA; * way overkill to give the DFA treatment.&#xA; * &lt;p>&#xA; * This class handles the following scenarios:&#xA; * &lt;ul>&#xA; * &lt;li> a&#xA; * &lt;li> a?&#xA; * &lt;li> a*&#xA; * &lt;li> a+&#xA; * &lt;li> a,b&#xA; * &lt;li> a|b&#xA; * &lt;/ul>&#xA; * &lt;p>&#xA; * These all involve a unary operation with one element type, or a binary&#xA; * operation with two elements. These are very simple and can be checked&#xA; * in a simple way without a DFA and without the overhead of setting up a&#xA; * DFA for such a simple check.&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="ContentModelValidator.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
