<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16" name="DTMManager.java">
  <comments>/*&#xA; * Copyright 1999-2004 The Apache Software Foundation.&#xA; *&#xA; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#xA; * you may not use this file except in compliance with the License.&#xA; * You may obtain a copy of the License at&#xA; *&#xA; *     http://www.apache.org/licenses/LICENSE-2.0&#xA; *&#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <comments>/*&#xA; * $Id: DTMManager.java,v 1.18 2004/02/23 10:29:36 aruny Exp $&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>dtm</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>res</namespaces>
    <classifier xsi:type="classifiers:Class" href="../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>res</namespaces>
    <classifier xsi:type="classifiers:Class" href="../res/XMLMessages.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>utils</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../utils/PrefixResolver.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>utils</namespaces>
    <classifier xsi:type="classifiers:Class" href="../utils/XMLStringFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="DTMManager">
    <members xsi:type="members:Field" name="defaultPropName">
      <initialValue xsi:type="references:StringReference" value="com.sun.org.apache.xml.internal.dtm.DTMManager"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** The default property name to load the manager. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="defaultClassName">
      <initialValue xsi:type="references:StringReference" value="com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** The default class name to use as the manager. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="m_xsf">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../utils/XMLStringFactory.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Factory for creating XMLString objects.&#xA;   *  %TBD% Make this set by the caller.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DTMManager">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Default constructor is protected on purpose.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getXMLStringFactory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../utils/XMLStringFactory.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get the XMLStringFactory used for the DTMs.&#xA;   *&#xA;   *&#xA;   * @return a valid XMLStringFactory object, or null if it hasn't been set yet.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setXMLStringFactory">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xsf">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../utils/XMLStringFactory.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Set the XMLStringFactory used for the DTMs.&#xA;   *&#xA;   *&#xA;   * @param xsf a valid XMLStringFactory object, should not be null.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="newInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xsf">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../utils/XMLStringFactory.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DTMConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Obtain a new instance of a &lt;code>DTMManager&lt;/code>.&#xA;   * This static method creates a new factory instance&#xA;   * This method uses the following ordered lookup procedure to determine&#xA;   * the &lt;code>DTMManager&lt;/code> implementation class to&#xA;   * load:&#xA;   * &lt;ul>&#xA;   * &lt;li>&#xA;   * Use the &lt;code>com.sun.org.apache.xml.internal.dtm.DTMManager&lt;/code> system&#xA;   * property.&#xA;   * &lt;/li>&#xA;   * &lt;li>&#xA;   * Use the JAVA_HOME(the parent directory where jdk is&#xA;   * installed)/lib/xalan.properties for a property file that contains the&#xA;   * name of the implementation class keyed on the same value as the&#xA;   * system property defined above.&#xA;   * &lt;/li>&#xA;   * &lt;li>&#xA;   * Use the Services API (as detailed in the JAR specification), if&#xA;   * available, to determine the classname. The Services API will look&#xA;   * for a classname in the file&#xA;   * &lt;code>META-INF/services/com.sun.org.apache.xml.internal.dtm.DTMManager&lt;/code>&#xA;   * in jars available to the runtime.&#xA;   * &lt;/li>&#xA;   * &lt;li>&#xA;   * Use the default &lt;code>DTMManager&lt;/code> classname, which is&#xA;   * &lt;code>com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault&lt;/code>.&#xA;   * &lt;/li>&#xA;   * &lt;/ul>&#xA;   *&#xA;   * Once an application has obtained a reference to a &lt;code>&#xA;   * DTMManager&lt;/code> it can use the factory to configure&#xA;   * and obtain parser instances.&#xA;   *&#xA;   * @return new DTMManager instance, never null.&#xA;   *&#xA;   * @throws DTMConfigurationException&#xA;   * if the implementation is not available or cannot be instantiated.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="factoryImpl">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0"/>
              </typeReference>
              <child xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ObjectFactory.class.xmi#//@classifiers.0/@members.6"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                </next>
                <target xsi:type="classifiers:Class" href="ObjectFactory.class.xmi#//@classifiers.0"/>
              </child>
            </value>
          </expression>
        </statements>
        <catcheBlocks>
          <comments>//&quot;No default implementation found&quot;);</comments>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="DTMConfigurationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../res/XMLMessages.class.xmi#//@classifiers.0/@members.8"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../res/XMLErrorResources.class.xmi#//@classifiers.0/@members.6"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
                  </arguments>
                  <arguments xsi:type="literals:NullLiteral"/>
                </next>
                <target xsi:type="classifiers:Class" href="../res/XMLMessages.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.1/@catcheBlocks.0/@parameter">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ObjectFactory$ConfigurationError.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </arguments>
            </throwable>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>ObjectFactory</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="ObjectFactory$ConfigurationError.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <comments>//&quot;No default implementation found&quot;);</comments>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="DTMConfigurationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../res/XMLMessages.class.xmi#//@classifiers.0/@members.8"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../res/XMLErrorResources.class.xmi#//@classifiers.0/@members.6"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
                  </arguments>
                  <arguments xsi:type="literals:NullLiteral"/>
                </next>
                <target xsi:type="classifiers:Class" href="../res/XMLMessages.class.xmi#//@classifiers.0"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDTM">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DTM.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="source">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>javax</namespaces>
          <namespaces>xml</namespaces>
          <namespaces>transform</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../javax/xml/transform/Source.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="unique">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="whiteSpaceFilter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DTMWSFilter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="incremental">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="doIndexing">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get an instance of a DTM, loaded with the content from the&#xA;   * specified source.  If the unique flag is true, a new instance will&#xA;   * always be returned.  Otherwise it is up to the DTMManager to return a&#xA;   * new instance or an instance that it already created and may be being used&#xA;   * by someone else.&#xA;   * &#xA;   * (More parameters may eventually need to be added for error handling&#xA;   * and entity resolution, and to better control selection of implementations.)&#xA;   *&#xA;   * @param source the specification of the source object, which may be null,&#xA;   *               in which case it is assumed that node construction will take&#xA;   *               by some other means.&#xA;   * @param unique true if the returned DTM must be unique, probably because it&#xA;   * is going to be mutated.&#xA;   * @param whiteSpaceFilter Enables filtering of whitespace nodes, and may&#xA;   *                         be null.&#xA;   * @param incremental true if the DTM should be built incrementally, if&#xA;   *                    possible.&#xA;   * @param doIndexing true if the caller considers it worth it to use &#xA;   *                   indexing schemes.&#xA;   *&#xA;   * @return a non-null DTM reference.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDTM">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DTM.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get the instance of DTM that &quot;owns&quot; a node handle.&#xA;   *&#xA;   * @param nodeHandle the nodeHandle.&#xA;   *&#xA;   * @return a non-null DTM reference.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDTMHandleFromNode">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>w3c</namespaces>
          <namespaces>dom</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a W3C DOM node, try and return a DTM handle.&#xA;   * Note: calling this may be non-optimal.&#xA;   *&#xA;   * @param node Non-null reference to a DOM node.&#xA;   *&#xA;   * @return a valid DTM handle.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createDocumentFragment">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DTM.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Creates a DTM representing an empty &lt;code>DocumentFragment&lt;/code> object.&#xA;   * @return a non-null DTM reference.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="release">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DTM.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="shouldHardDelete">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Release a DTM either to a lru pool, or completely remove reference.&#xA;   * DTMs without system IDs are always hard deleted.&#xA;   * State: experimental.&#xA;   *&#xA;   * @param dtm The DTM to be released.&#xA;   * @param shouldHardDelete True if the DTM should be removed no matter what.&#xA;   * @return true if the DTM was removed, false if it was put back in a lru pool.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createDTMIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DTMIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xpathCompiler">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Create a new &lt;code>DTMIterator&lt;/code> based on an XPath&#xA;   * &lt;a href=&quot;http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath&lt;/a> or&#xA;   * a &lt;a href=&quot;http://www.w3.org/TR/xpath#NT-UnionExpr&quot;>UnionExpr&lt;/a>.&#xA;   *&#xA;   * @param xpathCompiler ??? Somehow we need to pass in a subpart of the&#xA;   * expression.  I hate to do this with strings, since the larger expression&#xA;   * has already been parsed.&#xA;   *&#xA;   * @param pos The position in the expression.&#xA;   * @return The newly created &lt;code>DTMIterator&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createDTMIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DTMIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xpathString">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="presolver">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../utils/PrefixResolver.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Create a new &lt;code>DTMIterator&lt;/code> based on an XPath&#xA;   * &lt;a href=&quot;http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath&lt;/a> or&#xA;   * a &lt;a href=&quot;http://www.w3.org/TR/xpath#NT-UnionExpr&quot;>UnionExpr&lt;/a>.&#xA;   *&#xA;   * @param xpathString Must be a valid string expressing a&#xA;   * &lt;a href=&quot;http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath&lt;/a> or&#xA;   * a &lt;a href=&quot;http://www.w3.org/TR/xpath#NT-UnionExpr&quot;>UnionExpr&lt;/a>.&#xA;   *&#xA;   * @param presolver An object that can resolve prefixes to namespace URLs.&#xA;   *&#xA;   * @return The newly created &lt;code>DTMIterator&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createDTMIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DTMIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="whatToShow">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DTMFilter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="entityReferenceExpansion">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Create a new &lt;code>DTMIterator&lt;/code> based only on a whatToShow&#xA;   * and a DTMFilter.  The traversal semantics are defined as the&#xA;   * descendant access.&#xA;   * &lt;p>&#xA;   * Note that DTMIterators may not be an exact match to DOM&#xA;   * NodeIterators. They are initialized and used in much the same way&#xA;   * as a NodeIterator, but their response to document mutation is not&#xA;   * currently defined.&#xA;   *&#xA;   * @param whatToShow This flag specifies which node types may appear in&#xA;   *   the logical view of the tree presented by the iterator. See the&#xA;   *   description of &lt;code>NodeFilter&lt;/code> for the set of possible&#xA;   *   &lt;code>SHOW_&lt;/code> values.These flags can be combined using&#xA;   *   &lt;code>OR&lt;/code>.&#xA;   * @param filter The &lt;code>NodeFilter&lt;/code> to be used with this&#xA;   *   &lt;code>DTMFilter&lt;/code>, or &lt;code>null&lt;/code> to indicate no filter.&#xA;   * @param entityReferenceExpansion The value of this flag determines&#xA;   *   whether entity reference nodes are expanded.&#xA;   *&#xA;   * @return The newly created &lt;code>DTMIterator&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createDTMIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DTMIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Create a new &lt;code>DTMIterator&lt;/code> that holds exactly one node.&#xA;   *&#xA;   * @param node The node handle that the DTMIterator will iterate to.&#xA;   *&#xA;   * @return The newly created &lt;code>DTMIterator&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:Field" name="m_incremental">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* Flag indicating whether an incremental transform is desired */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getIncremental">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Set a flag indicating whether an incremental transform is desired &#xA;   * @param incremental boolean to use to set m_incremental.&#xA;   *&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setIncremental">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="incremental">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Set a flag indicating whether an incremental transform is desired &#xA;   * @param incremental boolean to use to set m_incremental.&#xA;   *&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:Field" name="debug">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// -------------------- private methods --------------------</comments>
        <comments>/**&#xA;   * Temp debug code - this will be removed after we test everything&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.25"/>
                  <arguments xsi:type="references:StringReference" value="dtm.debug"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </value>
          </expression>
        </statements>
        <catcheBlocks>
          <parameter name="ex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/SecurityException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="IDENT_DTM_NODE_BITS">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** This value, set at compile time, controls how many bits of the&#xA;   * DTM node identifier numbers are used to identify a node within a&#xA;   * document, and thus sets the maximum number of nodes per&#xA;   * document. The remaining bits are used to identify the DTM&#xA;   * document which contains this node.&#xA;   *&#xA;   * If you change IDENT_DTM_NODE_BITS, be sure to rebuild _ALL_ the&#xA;   * files which use it... including the IDKey testcases.&#xA;   *&#xA;   * (FuncGenerateKey currently uses the node identifier directly and&#xA;   * thus is affected when this changes. The IDKEY results will still be&#xA;   * _correct_ (presuming no other breakage), but simple equality&#xA;   * comparison against the previous &quot;golden&quot; files will probably&#xA;   * complain.)&#xA;   * */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="IDENT_NODE_DEFAULT">
      <initialValue xsi:type="expressions:AdditiveExpression">
        <children xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ShiftExpression">
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </expression>
        </children>
        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        <additiveOperators xsi:type="operators:Subtraction"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** When this bitmask is ANDed with a DTM node handle number, the result&#xA;   * is the low bits of the node's index number within that DTM. To obtain&#xA;   * the high bits, add the DTM ID portion's offset as assigned in the DTM &#xA;   * Manager.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="IDENT_DTM_DEFAULT">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Complement"/>
        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** When this bitmask is ANDed with a DTM node handle number, the result&#xA;   * is the DTM's document identity number.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="IDENT_MAX_DTMS">
      <initialValue xsi:type="expressions:AdditiveExpression">
        <children xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ShiftExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
            <shiftOperators xsi:type="operators:UnsignedRightShift"/>
          </expression>
        </children>
        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        <additiveOperators xsi:type="operators:Addition"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** This is the maximum number of DTMs available.  The highest DTM is&#xA;    * one less than this.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDTMIdentity">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DTM.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * %TBD% Doc&#xA;   *&#xA;   * NEEDSDOC @param dtm&#xA;   *&#xA;   * NEEDSDOC ($objectName$) @return&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getDTMIdentityMask">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * %TBD% Doc&#xA;   *&#xA;   * NEEDSDOC ($objectName$) @return&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNodeIdentityMask">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * %TBD% Doc&#xA;   *&#xA;   * NEEDSDOC ($objectName$) @return&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A DTMManager instance can be used to create DTM and&#xA; * DTMIterator objects, and manage the DTM objects in the system.&#xA; *&#xA; * &lt;p>The system property that determines which Factory implementation&#xA; * to create is named &quot;com.sun.org.apache.xml.internal.utils.DTMFactory&quot;. This&#xA; * property names a concrete subclass of the DTMFactory abstract&#xA; *  class. If the property is not defined, a platform default is be used.&lt;/p>&#xA; *&#xA; * &lt;p>An instance of this class &lt;emph>must&lt;/emph> be safe to use across&#xA; * thread instances.  It is expected that a client will create a single instance&#xA; * of a DTMManager to use across multiple threads.  This will allow sharing&#xA; * of DTMs across multiple processes.&lt;/p>&#xA; *&#xA; * &lt;p>Note: this class is incomplete right now.  It will be pretty much&#xA; * modeled after javax.xml.transform.TransformerFactory in terms of its&#xA; * factory support.&lt;/p>&#xA; *&#xA; * &lt;p>State: In progress!!&lt;/p>&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
