<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../../../java.ecore#/16" name="DOMASBuilder.java">
  <comments>/*&#xA; * Copyright (c) 2001 World Wide Web Consortium,&#xA; * (Massachusetts Institute of Technology, Institut National de&#xA; * Recherche en Informatique et en Automatique, Keio University). All&#xA; * Rights Reserved. This program is distributed under the W3C's Software&#xA; * Intellectual Property License. This program is distributed in the&#xA; * hope that it will be useful, but WITHOUT ANY WARRANTY; without even&#xA; * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR&#xA; * PURPOSE.&#xA; * See W3C License http://www.w3.org/Consortium/Legal/ for more details.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xerces</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>dom3</namespaces>
  <namespaces>as</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>ls</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/ls/LSInput.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>ls</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/ls/LSParser.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="DOMASBuilder">
    <members xsi:type="members:InterfaceMethod" name="getAbstractSchema">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASModel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Associate an &lt;code>ASModel&lt;/code> with a &lt;code>LSParser&lt;/code>. This&#xA;     * &lt;code>ASModel&lt;/code> will be used by the &quot;&#xA;     * &lt;code>validate-if-schema&lt;/code>&quot; and &quot;&#xA;     * &lt;code>datatype-normalization&lt;/code>&quot; options during the load of a new &#xA;     * &lt;code>Document&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAbstractSchema">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="abstractSchema">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ASModel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Associate an &lt;code>ASModel&lt;/code> with a &lt;code>LSParser&lt;/code>. This&#xA;     * &lt;code>ASModel&lt;/code> will be used by the &quot;&#xA;     * &lt;code>validate-if-schema&lt;/code>&quot; and &quot;&#xA;     * &lt;code>datatype-normalization&lt;/code>&quot; options during the load of a new &#xA;     * &lt;code>Document&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="parseASURI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASModel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="uri">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMASException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Parse a Abstract Schema from a location identified by an URI reference.&#xA;     * @param uri The location of the Abstract Schema to be read. &#xA;     * @return The newly created Abstract Schema.&#xA;     * @exception DOMASException&#xA;     *   Exceptions raised by &lt;code>parseASURI()&lt;/code> originate with the &#xA;     *   installed ErrorHandler, and thus depend on the implementation of &#xA;     *   the &lt;code>DOMErrorHandler&lt;/code> interfaces. The default error &#xA;     *   handlers will raise a &lt;code>DOMASException&lt;/code> if any form of &#xA;     *   Abstract Schema inconsistencies or warning occurs during the parse, &#xA;     *   but application defined errorHandlers are not required to do so. &#xA;     *   &lt;br> WRONG_MIME_TYPE_ERR: Raised when &lt;code>mimeTypeCheck&lt;/code> is &#xA;     *   &lt;code>true&lt;/code> and the input source has an incorrect MIME Type. &#xA;     *   See the attribute &lt;code>mimeTypeCheck&lt;/code>. &#xA;     * @exception DOMSystemException&#xA;     *   Exceptions raised by &lt;code>parseURI()&lt;/code> originate with the &#xA;     *   installed ErrorHandler, and thus depend on the implementation of &#xA;     *   the &lt;code>DOMErrorHandler&lt;/code> interfaces. The default error &#xA;     *   handlers will raise a DOMSystemException if any form I/O or other &#xA;     *   system error occurs during the parse, but application defined error &#xA;     *   handlers are not required to do so. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="parseASInputSource">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASModel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="is">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/ls/LSInput.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMASException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Parse a Abstract Schema from a location identified by an &#xA;     * &lt;code>LSInput&lt;/code>.&#xA;     * @param is The &lt;code>LSInput&lt;/code> from which the source&#xA;     *   Abstract Schema is to be read. &#xA;     * @return The newly created &lt;code>ASModel&lt;/code>.&#xA;     * @exception DOMASException&#xA;     *   Exceptions raised by &lt;code>parseASURI()&lt;/code> originate with the &#xA;     *   installed ErrorHandler, and thus depend on the implementation of &#xA;     *   the &lt;code>DOMErrorHandler&lt;/code> interfaces. The default error &#xA;     *   handlers will raise a &lt;code>DOMASException&lt;/code> if any form of &#xA;     *   Abstract Schema inconsistencies or warning occurs during the parse, &#xA;     *   but application defined errorHandlers are not required to do so. &#xA;     *   &lt;br> Raise a WRONG_MIME_TYPE_ERR when &lt;code>mimeTypeCheck&lt;/code> is &#xA;     *   &lt;code>true&lt;/code> and the inputsource has an incorrect MIME Type. &#xA;     *   See attribute &lt;code>mimeTypeCheck&lt;/code>. &#xA;     * @exception DOMSystemException&#xA;     *   Exceptions raised by &lt;code>parseURI()&lt;/code> originate with the &#xA;     *   installed ErrorHandler, and thus depend on the implementation of &#xA;     *   the &lt;code>DOMErrorHandler&lt;/code> interfaces. The default error &#xA;     *   handlers will raise a DOMSystemException if any form I/O or other &#xA;     *   system error occurs during the parse, but application defined error &#xA;     *   handlers are not required to do so. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * @deprecated&#xA; * An Abstract Schema parser interface.&#xA; * &lt;p>&lt;code>DOMASBuilder&lt;/code> provides an API for parsing Abstract Schemas &#xA; * and building the corresponding &lt;code>ASModel&lt;/code> tree. &#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2001/WD-DOM-Level-3-ASLS-20011025'>Document Object Model (DOM) Level 3 Abstract Schemas and Load&#xA;and Save Specification&lt;/a>.&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/ls/LSParser.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
