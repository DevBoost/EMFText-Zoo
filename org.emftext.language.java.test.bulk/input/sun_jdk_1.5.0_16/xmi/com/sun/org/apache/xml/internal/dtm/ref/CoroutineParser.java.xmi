<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../../../java.ecore#/16" name="CoroutineParser.java">
  <comments>/*&#xA; * Copyright 1999-2004 The Apache Software Foundation.&#xA; *&#xA; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#xA; * you may not use this file except in compliance with the License.&#xA; * You may obtain a copy of the License at&#xA; *&#xA; *     http://www.apache.org/licenses/LICENSE-2.0&#xA; *&#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <comments>/*&#xA; * $Id: CoroutineParser.java,v 1.8 2004/02/16 23:06:11 minchau Exp $&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>dtm</namespaces>
  <namespaces>ref</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/ContentHandler.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/InputSource.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="CoroutineParser">
    <members xsi:type="members:InterfaceMethod" name="getParserCoroutineID">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** @return the coroutine ID number for this CoroutineParser object.&#xA;     * Note that this isn't useful unless you know which CoroutineManager&#xA;     * you're talking to. Also note that the do...() methods encapsulate&#xA;     * the common transactions with the CoroutineParser, so you shouldn't&#xA;     * need this in most cases.&#xA;     * */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCoroutineManager">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CoroutineManager.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** @return the CoroutineManager for this CoroutineParser object.&#xA;     * If you're using the do...() methods, applications should only&#xA;     * need to talk to the CoroutineManager once, to obtain the&#xA;     * application's Coroutine ID.&#xA;     * */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setContentHandler">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="handler">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/ContentHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Register a SAX-style content handler for us to output to */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setLexHandler">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="handler">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>xml</namespaces>
          <namespaces>sax</namespaces>
          <namespaces>ext</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/ext/LexicalHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**  Register a SAX-style lexical handler for us to output to&#xA;   *  Not all parsers support this...&#xA;   *&#xA;   * %REVIEW% Not called setLexicalHandler because Xalan uses that name&#xA;   * internally, which causes subclassing nuisances. &#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="doParse">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="source">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/InputSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="appCoroutine">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* The run() method is required in CoroutineParsers that run as&#xA;   * threads (of course)... but it isn't part of our API, and&#xA;   * shouldn't be declared here.&#xA;   * */</comments>
        <comments>//================================================================</comments>
        <comments>/** doParse() is a simple API which tells the coroutine parser&#xA;   * to begin reading from a file.  This is intended to be called from one&#xA;   * of our partner coroutines, and serves both to encapsulate the&#xA;   * communication protocol and to avoid having to explicitly use the&#xA;   * CoroutineParser's coroutine ID number.&#xA;   *&#xA;   * %REVIEW% Can/should this unify with doMore? (if URI hasn't changed,&#xA;   * parse more from same file, else end and restart parsing...?&#xA;   *&#xA;   * @param source The InputSource to parse from.&#xA;   * @param appCoroutine The coroutine ID number of the coroutine invoking&#xA;   * this method, so it can be resumed after the parser has responded to the&#xA;   * request.&#xA;   * @return Boolean.TRUE if the CoroutineParser believes more data may be available&#xA;   * for further parsing. Boolean.FALSE if parsing ran to completion.&#xA;   * Exception if the parser objected for some reason.&#xA;   * */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="doMore">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parsemore">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="appCoroutine">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** doMore() is a simple API which tells the coroutine parser&#xA;   * that we need more nodes.  This is intended to be called from one&#xA;   * of our partner coroutines, and serves both to encapsulate the&#xA;   * communication protocol and to avoid having to explicitly use the&#xA;   * CoroutineParser's coroutine ID number.&#xA;   *&#xA;   * @param parsemore If true, tells the incremental parser to generate&#xA;   * another chunk of output. If false, tells the parser that we're&#xA;   * satisfied and it can terminate parsing of this document.&#xA;   * @param appCoroutine The coroutine ID number of the coroutine invoking&#xA;   * this method, so it can be resumed after the parser has responded to the&#xA;   * request.&#xA;   * @return Boolean.TRUE if the CoroutineParser believes more data may be available&#xA;   * for further parsing. Boolean.FALSE if parsing ran to completion.&#xA;   * Exception if the parser objected for some reason.&#xA;   * */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="doTerminate">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="appCoroutine">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** doTerminate() is a simple API which tells the coroutine&#xA;   * parser to terminate itself.  This is intended to be called from&#xA;   * one of our partner coroutines, and serves both to encapsulate the&#xA;   * communication protocol and to avoid having to explicitly use the&#xA;   * CoroutineParser's coroutine ID number.&#xA;   *&#xA;   * Returns only after the CoroutineParser has acknowledged the request.&#xA;   *&#xA;   * @param appCoroutine The coroutine ID number of the coroutine invoking&#xA;   * this method, so it can be resumed after the parser has responded to the&#xA;   * request.&#xA;   * */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="init">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="co">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="CoroutineManager.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="appCoroutineID">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parser">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/XMLReader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Initialize the coroutine parser. Same parameters could be passed&#xA;   * in a non-default constructor, or by using using context ClassLoader&#xA;   * and newInstance and then calling init()&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** &lt;p>CoroutineParser is an API for parser threads that operate as&#xA; * coroutines. See CoroutineSAXParser and CoroutineSAXParser_Xerces&#xA; * for examples.&lt;/p>&#xA; *&#xA; * &lt;p>&amp;lt;grumble&amp;gt; I'd like the interface to require a specific form&#xA; * for either the base constructor or a static factory method. Java&#xA; * doesn't allow us to specify either, so I'll just document them&#xA; * here:&#xA; *&#xA; * &lt;ul>&#xA; * &lt;li>public CoroutineParser(CoroutineManager co, int appCoroutine);&lt;/li>&#xA; * &lt;li>public CoroutineParser createCoroutineParser(CoroutineManager co, int appCoroutine);&lt;/li>&#xA; * &lt;/ul>&#xA; *&#xA; * &amp;lt;/grumble&amp;gt;&lt;/p>&#xA; *&#xA; * @deprecated Since the ability to start a parse via the&#xA; * coroutine protocol was not being used and was complicating design.&#xA; * See {@link IncrementalSAXSource}.&#xA; * */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
