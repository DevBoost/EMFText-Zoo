<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../../java.ecore#/4 http://www.emftext.org/java/literals ../../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../../../java.ecore#/14 http://www.emftext.org/java/types ../../../../../../../../java.ecore#/16" name="ASContentModel.java">
  <comments>/*&#xA; * Copyright (c) 2001 World Wide Web Consortium,&#xA; * (Massachusetts Institute of Technology, Institut National de&#xA; * Recherche en Informatique et en Automatique, Keio University). All&#xA; * Rights Reserved. This program is distributed under the W3C's Software&#xA; * Intellectual Property License. This program is distributed in the&#xA; * hope that it will be useful, but WITHOUT ANY WARRANTY; without even&#xA; * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR&#xA; * PURPOSE.&#xA; * See W3C License http://www.w3.org/Consortium/Legal/ for more details.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xerces</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>dom3</namespaces>
  <namespaces>as</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="ASContentModel">
    <members xsi:type="members:Field" name="AS_UNBOUNDED">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0/@members.1"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Signifies unbounded upper limit. The MAX_VALUE value is &#xA;     * &lt;code>0xFFFFFFFF FFFFFFFF&lt;/code>. This needs to be better defined in &#xA;     * the generated bindings.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="AS_SEQUENCE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ASContentModelType</comments>
        <comments>/**&#xA;     * This constant value signifies a sequence operator. For example, in a &#xA;     * DTD, this would be the '&lt;code>,&lt;/code>' operator.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="AS_CHOICE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This constant value signifies a choice operator. For example, in a DTD, &#xA;     * this would be the '&lt;code>|&lt;/code>' operator.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="AS_ALL">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * All of the above.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="AS_NONE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * None of the above, i.e., neither a choice nor sequence operator.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getListOperator">
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  One of &lt;code>AS_CHOICE&lt;/code>, &lt;code>AS_SEQUENCE&lt;/code>, &#xA;     * &lt;code>AS_ALL&lt;/code> or &lt;code>AS_NONE&lt;/code>. The operator is applied &#xA;     * to all the components(ASObjects) in the &lt;code>subModels&lt;/code>. For &#xA;     * example, if the list operator is &lt;code>AS_CHOICE&lt;/code> and the &#xA;     * components in subModels are a, b and c then the abstract schema for &#xA;     * the element being declared is &lt;code>(a|b|c)&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setListOperator">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listOperator">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  One of &lt;code>AS_CHOICE&lt;/code>, &lt;code>AS_SEQUENCE&lt;/code>, &#xA;     * &lt;code>AS_ALL&lt;/code> or &lt;code>AS_NONE&lt;/code>. The operator is applied &#xA;     * to all the components(ASObjects) in the &lt;code>subModels&lt;/code>. For &#xA;     * example, if the list operator is &lt;code>AS_CHOICE&lt;/code> and the &#xA;     * components in subModels are a, b and c then the abstract schema for &#xA;     * the element being declared is &lt;code>(a|b|c)&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMinOccurs">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * min occurrence for this content particle. Its value may be 0 or a &#xA;     * positive integer. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setMinOccurs">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minOccurs">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * min occurrence for this content particle. Its value may be 0 or a &#xA;     * positive integer. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMaxOccurs">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  maximum occurrence for this content particle. Its value may be &#xA;     * &lt;code>0&lt;/code>, a positive integer, or &lt;code>AS_UNBOUNDED&lt;/code> to &#xA;     * indicate that no upper limit has been set. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setMaxOccurs">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maxOccurs">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  maximum occurrence for this content particle. Its value may be &#xA;     * &lt;code>0&lt;/code>, a positive integer, or &lt;code>AS_UNBOUNDED&lt;/code> to &#xA;     * indicate that no upper limit has been set. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSubModels">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASObjectList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Pointers to &lt;code>ASObject&lt;/code>s such as &#xA;     * &lt;code> ASElementDeclaration&lt;/code>s and further &#xA;     * &lt;code>ASContentModel&lt;/code>s. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSubModels">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="subModels">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ASObjectList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Pointers to &lt;code>ASObject&lt;/code>s such as &#xA;     * &lt;code> ASElementDeclaration&lt;/code>s and further &#xA;     * &lt;code>ASContentModel&lt;/code>s. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removesubModel">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oldNode">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ASObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the &lt;code>ASObject&lt;/code> in the submodel. Nodes that already &#xA;     * exist in the list are moved as needed. &#xA;     * @param oldNode The node to be removed.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insertsubModel">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newNode">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ASObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMASException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts a new node in the submodel. Nodes that already exist in the &#xA;     * list are moved as needed. &#xA;     * @param newNode The new node to be inserted.&#xA;     * @exception DOMASException&#xA;     *    &lt;code>DUPLICATE_NAME_ERR&lt;/code>: Raised if a element declaration &#xA;     *   already exists with the same name within an &lt;code>AS_CHOICE&lt;/code> &#xA;     *   operator. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="appendsubModel">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newNode">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ASObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMASException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Appends a new node to the end of the list representing the&#xA;     * &lt;code>subModels&lt;/code>.&#xA;     * @param newNode The new node to be appended.&#xA;     * @return the length of the &lt;code>subModels&lt;/code>.&#xA;     * @exception DOMASException&#xA;     *    &lt;code>DUPLICATE_NAME_ERR&lt;/code>: Raised if a element declaration &#xA;     *   already exists with the same name within an &lt;code>AS_CHOICE&lt;/code> &#xA;     *   operator. &#xA;     *   &lt;br> &lt;code>TYPE_ERR&lt;/code>: Raised if type is neither an &#xA;     *   &lt;code>ASContentModel&lt;/code> nor an &lt;code>ASElementDeclaration&lt;/code>&#xA;     *   . &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * @deprecated&#xA; * The content model of a declared element.&#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2001/WD-DOM-Level-3-ASLS-20011025'>Document Object Model (DOM) Level 3 Abstract Schemas and Load&#xA;and Save Specification&lt;/a>.&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="ASObject.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
