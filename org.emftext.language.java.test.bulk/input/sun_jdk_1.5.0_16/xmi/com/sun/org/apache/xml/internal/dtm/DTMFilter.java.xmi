<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/literals ../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16" name="DTMFilter.java">
  <comments>/*&#xA; * Copyright 1999-2004 The Apache Software Foundation.&#xA; *&#xA; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#xA; * you may not use this file except in compliance with the License.&#xA; * You may obtain a copy of the License at&#xA; *&#xA; *     http://www.apache.org/licenses/LICENSE-2.0&#xA; *&#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <comments>/*&#xA; * $Id: DTMFilter.java,v 1.4 2004/02/16 23:03:44 minchau Exp $&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>dtm</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="DTMFilter">
    <members xsi:type="members:Field" name="SHOW_ALL">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="4294967295"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Constants for whatToShow.  These are used to set the node type that will </comments>
        <comments>// be traversed. These values may be ORed together before being passed to</comments>
        <comments>// the DTMIterator.</comments>
        <comments>/**&#xA;   * Show all &lt;code>Nodes&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_ELEMENT">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Show &lt;code>Element&lt;/code> nodes.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_ATTRIBUTE">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Show &lt;code>Attr&lt;/code> nodes. This is meaningful only when creating an&#xA;   * iterator or tree-walker with an attribute node as its&#xA;   * &lt;code>root&lt;/code>; in this case, it means that the attribute node&#xA;   * will appear in the first position of the iteration or traversal.&#xA;   * Since attributes are never children of other nodes, they do not&#xA;   * appear when traversing over the main document tree.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_TEXT">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="4"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Show &lt;code>Text&lt;/code> nodes.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_CDATA_SECTION">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="8"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Show &lt;code>CDATASection&lt;/code> nodes.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_ENTITY_REFERENCE">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="16"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Show &lt;code>EntityReference&lt;/code> nodes. Note that if Entity References&#xA;   * have been fully expanded while the tree was being constructed, these&#xA;   * nodes will not appear and this mask has no effect.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_ENTITY">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="32"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Show &lt;code>Entity&lt;/code> nodes. This is meaningful only when creating&#xA;   * an iterator or tree-walker with an&lt;code> Entity&lt;/code> node as its&#xA;   * &lt;code>root&lt;/code>; in this case, it means that the &lt;code>Entity&lt;/code>&#xA;   *  node will appear in the first position of the traversal. Since&#xA;   * entities are not part of the document tree, they do not appear when&#xA;   * traversing over the main document tree.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_PROCESSING_INSTRUCTION">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="64"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Show &lt;code>ProcessingInstruction&lt;/code> nodes.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_COMMENT">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Show &lt;code>Comment&lt;/code> nodes.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_DOCUMENT">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="256"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Show &lt;code>Document&lt;/code> nodes. (Of course, as with Attributes&#xA;   * and such, this is meaningful only when the iteration root is the&#xA;   * Document itself, since Document has no parent.)&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_DOCUMENT_TYPE">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="512"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Show &lt;code>DocumentType&lt;/code> nodes. &#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_DOCUMENT_FRAGMENT">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="1024"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Show &lt;code>DocumentFragment&lt;/code> nodes. (Of course, as with&#xA;   * Attributes and such, this is meaningful only when the iteration&#xA;   * root is the Document itself, since DocumentFragment has no parent.)&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_NOTATION">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="2048"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Show &lt;code>Notation&lt;/code> nodes. This is meaningful only when creating&#xA;   * an iterator or tree-walker with a &lt;code>Notation&lt;/code> node as its&#xA;   * &lt;code>root&lt;/code>; in this case, it means that the&#xA;   * &lt;code>Notation&lt;/code> node will appear in the first position of the&#xA;   * traversal. Since notations are not part of the document tree, they do&#xA;   * not appear when traversing over the main document tree.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_NAMESPACE">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="4096"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;&#xA;   * This bit instructs the iterator to show namespace nodes, which&#xA;   * are modeled by DTM but not by the DOM.  Make sure this does not&#xA;   * conflict with {@link org.w3c.dom.traversal.NodeFilter}.&#xA;   * &lt;p>&#xA;   * %REVIEW% Might be safer to start from higher bits and work down,&#xA;   * to leave room for the DOM to expand its set of constants... Or,&#xA;   * possibly, to create a DTM-specific field for these additional bits.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_BYFUNCTION">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="65536"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Special bit for filters implementing match patterns starting with&#xA;   * a function.  Make sure this does not conflict with&#xA;   * {@link org.w3c.dom.traversal.NodeFilter}.&#xA;   * &lt;p>&#xA;   * %REVIEW% Might be safer to start from higher bits and work down,&#xA;   * to leave room for the DOM to expand its set of constants... Or,&#xA;   * possibly, to create a DTM-specific field for these additional bits.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="acceptNode">
      <typeReference xsi:type="types:Short"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="whatToShow">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Test whether a specified node is visible in the logical view of a&#xA;   * &lt;code>DTMIterator&lt;/code>. Normally, this function&#xA;   * will be called by the implementation of &lt;code>DTMIterator&lt;/code>; &#xA;   * it is not normally called directly from&#xA;   * user code.&#xA;   * &#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @param whatToShow one of SHOW_XXX values.&#xA;   * @return one of FILTER_ACCEPT, FILTER_REJECT, or FILTER_SKIP.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="acceptNode">
      <typeReference xsi:type="types:Short"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="whatToShow">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="expandedName">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Test whether a specified node is visible in the logical view of a&#xA;   * &lt;code>DTMIterator&lt;/code>. Normally, this function&#xA;   * will be called by the implementation of &lt;code>DTMIterator&lt;/code>; &#xA;   * it is not normally called directly from&#xA;   * user code.&#xA;   * &lt;p>&#xA;   * TODO: Should this be setNameMatch(expandedName) followed by accept()?&#xA;   * Or will we really be testing a different name at every invocation?&#xA;   * &#xA;   * &lt;p>%REVIEW% Under what circumstances will this be used? The cases&#xA;   * I've considered are just as easy and just about as efficient if&#xA;   * the name test is performed in the DTMIterator... -- Joe&lt;/p>&#xA;   * &#xA;   * &lt;p>%REVIEW% Should that 0xFFFF have a mnemonic assigned to it?&#xA;   * Also: This representation is assuming the expanded name is indeed&#xA;   * split into high/low 16-bit halfwords. If we ever change the&#xA;   * balance between namespace and localname bits (eg because we&#xA;   * decide there are many more localnames than namespaces, which is&#xA;   * fairly likely), this is going to break. It might be safer to&#xA;   * encapsulate the details with a makeExpandedName method and make&#xA;   * that responsible for setting up the wildcard version as well.&lt;/p>&#xA;   * &#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @param whatToShow one of SHOW_XXX values.&#xA;   * @param expandedName a value defining the exanded name as defined in &#xA;   *                     the DTM interface.  Wild cards will be defined &#xA;   *                     by 0xFFFF in the namespace and/or localname&#xA;   *&#x9;&#x9;&#x9; portion of the expandedName.&#xA;   * @return one of FILTER_ACCEPT, FILTER_REJECT, or FILTER_SKIP.  */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Simple filter for doing node tests.  Note the semantics of this are&#xA; * somewhat different that the DOM's NodeFilter.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
