<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../../../../../java.ecore#/17" name="DTMDefaultBase.java">
  <comments>/*&#xA; * Copyright 1999-2004 The Apache Software Foundation.&#xA; *&#xA; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#xA; * you may not use this file except in compliance with the License.&#xA; * You may obtain a copy of the License at&#xA; *&#xA; *     http://www.apache.org/licenses/LICENSE-2.0&#xA; *&#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <comments>/*&#xA; * $Id: DTMDefaultBase.java,v 1.39 2004/02/16 23:06:11 minchau Exp $&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>dtm</namespaces>
  <namespaces>ref</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>dtm</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>utils</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>utils</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../utils/BoolStack.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>transform</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../../javax/xml/transform/Source.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>utils</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../utils/XMLString.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>utils</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../utils/XMLStringFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>res</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../res/XMLMessages.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>res</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="DTMDefaultBase">
    <members xsi:type="members:Field" name="JJK_DEBUG">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="ROOTNODE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// This constant is likely to be removed in the future. Use the </comments>
        <comments>// getDocument() method instead of ROOTNODE to get at the root </comments>
        <comments>// node of a DTM.</comments>
        <comments>/** The identity of the root node. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="m_size">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * The number of nodes, which is also used to determine the next&#xA;   *  node index.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_exptype">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** The expanded names, one array element for each node. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_firstch">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** First child values, one array element for each node. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_nextsib">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Next sibling values, one array element for each node. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_prevsib">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Previous sibling values, one array element for each node. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_parent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Previous sibling values, one array element for each node. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_namespaceDeclSets">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Vector of SuballocatedIntVectors of NS decl sets */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_namespaceDeclSetElements">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** SuballocatedIntVector  of elements at which corresponding&#xA;   * namespaceDeclSets were defined */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_elemIndexes">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <arrayDimensionsBefore/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * These hold indexes to elements based on namespace and local name.&#xA;   * The base lookup is the the namespace.  The second lookup is the local&#xA;   * name, and the last array contains the the first free element&#xA;   * at the start, and the list of element handles following.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="DEFAULT_BLOCKSIZE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="512"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** The default block size of the node arrays */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DEFAULT_NUMBLOCKS">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// favor small docs.</comments>
        <comments>/** The number of blocks for the node arrays */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DEFAULT_NUMBLOCKS_SMALL">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** The number of blocks used for small documents &amp; RTFs */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NOTPROCESSED">
      <initialValue xsi:type="expressions:AdditiveExpression">
        <children xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </next>
          <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
        </children>
        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        <additiveOperators xsi:type="operators:Subtraction"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** The block size of the node arrays */</comments>
        <comments>//protected final int m_blocksize;</comments>
        <comments>/**&#xA;   * The value to use when the information has not been built yet.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="m_mgr">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The DTM manager who &quot;owns&quot; this DTM.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_mgrDefault">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DTMManagerDefault.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * m_mgr cast to DTMManagerDefault, or null if it isn't an instance&#xA;   * (Efficiency hook)&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_dtmIdent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** The document identity number(s). If we have overflowed the addressing&#xA;   * range of the first that was assigned to us, we may add others. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_documentBaseURI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** The mask for the identity.&#xA;      %REVIEW% Should this really be set to the _DEFAULT? What if&#xA;      a particular DTM wanted to use another value? */</comments>
        <comments>//protected final static int m_mask = DTMManager.IDENT_NODE_DEFAULT;</comments>
        <comments>/** The base URI for this document. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_wsfilter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../DTMWSFilter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * The whitespace filter that enables elements to strip whitespace or not.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_shouldStripWS">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Flag indicating whether to strip whitespace nodes */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_shouldStripWhitespaceStack">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../utils/BoolStack.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Stack of flags indicating whether to strip whitespace nodes */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_xstrf">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../utils/XMLStringFactory.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** The XMLString factory for creating XMLStrings. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_expandedNameTable">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ExpandedNameTable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * The table for exandedNameID lookups.  This may or may not be the same&#xA;   * table as is contained in the DTMManagerDefault.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="m_indexing">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** true if indexing is turned on. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DTMDefaultBase">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.4"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.5"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          <arguments xsi:type="literals:BooleanLiteral"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mgr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="source">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../javax/xml/transform/Source.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtmIdentity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="whiteSpaceFilter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../DTMWSFilter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xstringfactory">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../utils/XMLStringFactory.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="doIndexing">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Construct a DTMDefaultBase object using the default block size.&#xA;   *&#xA;   * @param mgr The DTMManager who owns this DTM.&#xA;   * @param domSource the DOM source that this DTM will wrap.&#xA;   * @param source The object that is used to specify the construction source.&#xA;   * @param dtmIdentity The DTM identity ID for this DTM.&#xA;   * @param whiteSpaceFilter The white space filter for this DTM, which may&#xA;   *                         be null.&#xA;   * @param xstringfactory The factory to use for creating XMLStrings.&#xA;   * @param doIndexing true if the caller considers it worth it to use&#xA;   *                   indexing schemes.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DTMDefaultBase">
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="numblocks">
          <typeReference xsi:type="types:Int">
            <comments>// Use smaller sizes for the internal node arrays if the block size</comments>
            <comments>// is small.</comments>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.6"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="64"/>
          <relationOperators xsi:type="operators:LessThanOrEqual"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.6"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.6"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.6"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.6"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Only create the m_prevsib array if the usePrevsib flag is true.</comments>
        <comments>// Some DTM implementations (e.g. SAXImpl) do not need this array.</comments>
        <comments>// We can save the time to build it in those cases.</comments>
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.6"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.7"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="DTMManagerDefault.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="DTMManagerDefault.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="literals:NullLiteral"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.1"/>
              </expression>
            </child>
            <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../../../../javax/xml/transform/Source.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </expressionIf>
            <expressionElse xsi:type="literals:NullLiteral"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.22"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.2"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.3"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.4"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.5"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="ExpandedNameTable.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.5"/>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
                <comments>// Note that this fails if we aren't talking to an instance of</comments>
                <comments>// DTMManagerDefault</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DTMManagerDefault.class.xmi#//@classifiers.0/@members.22"/>
                  <arguments xsi:type="references:SelfReference">
                    <self xsi:type="literals:This"/>
                  </arguments>
                </next>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../utils/BoolStack.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.112">
              <arguments xsi:type="literals:BooleanLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="literals:NullLiteral"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.3"/>
        </condition>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mgr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="source">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../javax/xml/transform/Source.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtmIdentity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="whiteSpaceFilter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../DTMWSFilter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xstringfactory">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../utils/XMLStringFactory.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="doIndexing">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="blocksize">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="usePrevsib">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newNameTable">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Construct a DTMDefaultBase object from a DOM node.&#xA;   *&#xA;   * @param mgr The DTMManager who owns this DTM.&#xA;   * @param domSource the DOM source that this DTM will wrap.&#xA;   * @param source The object that is used to specify the construction source.&#xA;   * @param dtmIdentity The DTM identity ID for this DTM.&#xA;   * @param whiteSpaceFilter The white space filter for this DTM, which may&#xA;   *                         be null.&#xA;   * @param xstringfactory The factory to use for creating XMLStrings.&#xA;   * @param doIndexing true if the caller considers it worth it to use&#xA;   *                   indexing schemes.&#xA;   * @param blocksize The block size of the DTM.&#xA;   * @param usePrevsib true if we want to build the previous sibling node array.&#xA;   * @param newNameTable true if we want to use a new ExpandedNameTable for this DTM.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="ensureSizeOfIndex">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceID">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="LocalNameID">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Ensure that the size of the element indexes can hold the information.&#xA;   *&#xA;   * @param namespaceID Namespace ID index.&#xA;   * @param LocalNameID Local name ID.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Int"/>
                <arrayDimensionsBefore/>
                <arrayDimensionsBefore/>
                <sizes xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="20"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </sizes>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="literals:NullLiteral"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="indexes">
                <typeReference xsi:type="types:Int"/>
                <arrayDimensionsBefore/>
                <arrayDimensionsBefore/>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="arrays:ArrayInstantiationBySize">
                  <typeReference xsi:type="types:Int"/>
                  <arrayDimensionsBefore/>
                  <arrayDimensionsBefore/>
                  <sizes xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="20"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </sizes>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@elseStatement/@statement/@statements.0/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@elseStatement/@statement/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </condition>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="localNameIndex">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsBefore/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10">
            <arraySelectors>
              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
            </arraySelectors>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Int"/>
                <arrayDimensionsBefore/>
                <sizes xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.1"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </sizes>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="literals:NullLiteral"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="indexes">
                <typeReference xsi:type="types:Int"/>
                <arrayDimensionsBefore/>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable"/>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="arrays:ArrayInstantiationBySize">
                  <typeReference xsi:type="types:Int"/>
                  <arrayDimensionsBefore/>
                  <sizes xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.1"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </sizes>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.2/@elseStatement/@statement/@statements.0/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.2/@elseStatement/@statement/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
                  </arraySelectors>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.1"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </condition>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="elemHandles">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable">
            <arraySelectors>
              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.1"/>
            </arraySelectors>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Int"/>
                <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.1"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.3/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.3/@variable">
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="literals:NullLiteral"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.3/@variable"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="indexes">
                <typeReference xsi:type="types:Int"/>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.3/@variable"/>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.3/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="arrays:ArrayInstantiationBySize">
                  <typeReference xsi:type="types:Int"/>
                  <sizes xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.3/@variable">
                      <arraySelectors>
                        <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </arraySelectors>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1024"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </sizes>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@elseStatement/@statement/@statements.0/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.3/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@elseStatement/@statement/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.1"/>
                  </arraySelectors>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.3/@variable"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.3/@variable">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <children xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.3/@variable">
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </children>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </condition>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="indexNode">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="expandedTypeID">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="identity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Add a node to the element indexes. The node will not be added unless&#xA;   * it's an element.&#xA;   *&#xA;   * @param expandedTypeID The expanded type ID of the node.&#xA;   * @param identity The node identity index.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="ent">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="ExpandedNameTable.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="type">
          <typeReference xsi:type="types:Short"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ExpandedNameTable.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="namespaceID">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ExpandedNameTable.class.xmi#//@classifiers.0/@members.32"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="localNameID">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ExpandedNameTable.class.xmi#//@classifiers.0/@members.30"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.27">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.2/@statement/@statements.0/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.2/@statement/@statements.1/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="index">
              <typeReference xsi:type="types:Int"/>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.2/@statement/@statements.0/@variable"/>
                </arraySelectors>
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.2/@statement/@statements.1/@variable"/>
                </arraySelectors>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.2/@statement/@statements.3/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.2/@statement/@statements.3/@variable">
                    <arraySelectors>
                      <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </arraySelectors>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.1"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.2/@statement/@statements.3/@variable">
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
              </child>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.1/@variable"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="findGTE">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="list">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Find the first index that occurs in the list that is greater than or&#xA;   * equal to the given value.&#xA;   *&#xA;   * @param list A list of integers.&#xA;   * @param start The start index to begin the search.&#xA;   * @param len The number of items to search.&#xA;   * @param value Find the slot that has a value that is greater than or&#xA;   * identical to this argument.&#xA;   *&#xA;   * @return The index in the list of the slot that is higher or identical&#xA;   * to the identity argument, or -1 if no node is higher or equal.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="low">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="high">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.1"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.2"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </expression>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="end">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.1/@variable"/>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="mid">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.1/@variable"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </expression>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <multiplicativeOperators xsi:type="operators:Division"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="c">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.3/@statement/@statements.0/@variable"/>
                </arraySelectors>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.1/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.3/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </value>
              </expression>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.3/@statement/@statements.1/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.3"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.3/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.3/@statement/@statements.1/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.3"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <elseStatement xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.3/@statement/@statements.0/@variable"/>
              </elseStatement>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@variable"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.1/@variable"/>
          <relationOperators xsi:type="operators:LessThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.2/@variable"/>
                <relationOperators xsi:type="operators:LessThanOrEqual"/>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@variable"/>
                  </arraySelectors>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.3"/>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </children>
            </expression>
          </child>
          <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@variable"/>
          <expressionElse xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </expressionElse>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="findElementFromIndex">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;   * Find the first matching element from the index at or after the&#xA;   * given node.&#xA;   *&#xA;   * @param nsIndex The namespace index lookup.&#xA;   * @param lnIndex The local name index lookup.&#xA;   * @param firstPotential The first potential match that is worth looking at.&#xA;   *&#xA;   * @return The first node that is greater than or equal to the&#xA;   *         firstPotential argument, or DTM.NOTPROCESSED if not found.&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nsIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="firstPotential">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="indexes">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsBefore/>
          <arrayDimensionsBefore/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="lnIndexs">
              <typeReference xsi:type="types:Int"/>
              <arrayDimensionsBefore/>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
                </arraySelectors>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="elems">
                  <typeReference xsi:type="types:Int"/>
                  <arrayDimensionsBefore/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@statement/@statements.0/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.1"/>
                    </arraySelectors>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="pos">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@statement/@statements.1/@statement/@statements.0/@variable"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@statement/@statements.1/@statement/@statements.0/@variable">
                          <arraySelectors>
                            <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          </arraySelectors>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.2"/>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@statement/@statements.1/@statement/@statements.0/@variable">
                          <arraySelectors>
                            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@statement/@statements.1/@statement/@statements.1/@statement/@statements.0/@variable"/>
                          </arraySelectors>
                        </returnValue>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@statement/@statements.1/@statement/@statements.1/@statement/@statements.0/@variable"/>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </children>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="literals:NullLiteral"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@statement/@statements.1/@statement/@statements.0/@variable"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="literals:NullLiteral"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@statement/@statements.0/@variable"/>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.1"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference"/>
                </children>
                <relationOperators xsi:type="operators:LessThan"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="literals:NullLiteral"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNextNodeIdentity">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="identity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Get the next node identity value in the list, and call the iterator&#xA;   * if it hasn't been added yet.&#xA;   *&#xA;   * @param identity The node identity (index).&#xA;   * @return identity+1, or DTM.NULL.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="nextNode">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * This method should try and build one or more nodes in the table.&#xA;   *&#xA;   * @return The true if a next node is found or false if&#xA;   *         there are no more nodes.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNumberOfNodes">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Get the number of nodes that have been added.&#xA;   *&#xA;   * @return the number of nodes that have been mapped.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:Field" name="m_traversers">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DTMAxisTraverser.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Stateless axis traversers, lazely built. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="_type">
      <typeReference xsi:type="types:Short"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="identity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>//    /**</comments>
        <comments>//     * Ensure that the size of the information arrays can hold another entry</comments>
        <comments>//     * at the given index.</comments>
        <comments>//     *</comments>
        <comments>//     * @param index On exit from this function, the information arrays sizes must be</comments>
        <comments>//     * at least index+1.</comments>
        <comments>//     */</comments>
        <comments>//    protected void ensureSize(int index)</comments>
        <comments>//    {</comments>
        <comments>//        // We've cut over to Suballocated*Vector, which are self-sizing.</comments>
        <comments>//    }</comments>
        <comments>/**&#xA;   * Get the simple type ID for the given node identity.&#xA;   *&#xA;   * @param identity The node identity.&#xA;   *&#xA;   * @return The simple type ID, or DTM.NULL.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="info">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ExpandedNameTable.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@variable"/>
            </next>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@variable"/>
        </condition>
        <elseStatement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </returnValue>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_exptype">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="identity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Get the expanded type ID for the given node identity.&#xA;   *&#xA;   * @param identity The node identity.&#xA;   *&#xA;   * @return The expanded type ID, or DTM.NULL.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <comments>// Reorganized test and loop into single flow</comments>
        <comments>// Tiny performance improvement, saves a few bytes of code, clearer.</comments>
        <comments>// %OPT% Other internal getters could be treated simliarly</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.32"/>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_level">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="identity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Get the level in the tree for the given node identity.&#xA;   *&#xA;   * @param identity The node identity.&#xA;   *&#xA;   * @return The tree level, or DTM.NULL.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="isMore">
              <typeReference xsi:type="types:Boolean"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.32"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@statement/@statements.0/@variable"/>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:PrefixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.1/@variable"/>
            <operator xsi:type="operators:PlusPlus"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
              </value>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.1/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_firstch">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="identity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Get the first child for the given node identity.&#xA;   *&#xA;   * @param identity The node identity.&#xA;   *&#xA;   * @return The first child identity, or DTM.NULL.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="info">
          <typeReference xsi:type="types:Int">
            <comments>// Boiler-plate code for each of the _xxx functions, except for the array.</comments>
          </typeReference>
          <initialValue xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </expression>
            </child>
            <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
              </next>
            </expressionElse>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <comments>// Check to see if the information requested has been processed, and,</comments>
        <comments>// if not, advance the iterator until we the information has been</comments>
        <comments>// processed.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="isMore">
              <typeReference xsi:type="types:Boolean"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.32"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.1/@statement/@statements.0/@variable"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Return">
                  <returnValue xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                  </returnValue>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
                  </children>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.1/@statement/@statements.0/@variable"/>
                  </children>
                </condition>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_nextsib">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="identity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Get the next sibling for the given node identity.&#xA;   *&#xA;   * @param identity The node identity.&#xA;   *&#xA;   * @return The next sibling identity, or DTM.NULL.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="info">
          <typeReference xsi:type="types:Int">
            <comments>// Boiler-plate code for each of the _xxx functions, except for the array.</comments>
          </typeReference>
          <initialValue xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </expression>
            </child>
            <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
              </next>
            </expressionElse>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <comments>// Check to see if the information requested has been processed, and,</comments>
        <comments>// if not, advance the iterator until we the information has been</comments>
        <comments>// processed.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="isMore">
              <typeReference xsi:type="types:Boolean"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.32"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@statement/@statements.0/@variable"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Return">
                  <returnValue xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                  </returnValue>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
                  </children>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.1/@statement/@statements.0/@variable"/>
                  </children>
                </condition>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@variable"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_prevsib">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="identity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Get the previous sibling for the given node identity.&#xA;   *&#xA;   * @param identity The node identity.&#xA;   *&#xA;   * @return The previous sibling identity, or DTM.NULL.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
            </next>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <comments>// Check to see if the information requested has been processed, and,</comments>
        <comments>// if not, advance the iterator until we the information has been</comments>
        <comments>// processed.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="isMore">
              <typeReference xsi:type="types:Boolean"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.32"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.1/@statement/@statements.0/@variable"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
                  </next>
                </returnValue>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_parent">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="identity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Get the parent for the given node identity.&#xA;   *&#xA;   * @param identity The node identity.&#xA;   *&#xA;   * @return The parent identity, or DTM.NULL.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
            </next>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <comments>// Check to see if the information requested has been processed, and,</comments>
        <comments>// if not, advance the iterator until we the information has been</comments>
        <comments>// processed.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="isMore">
              <typeReference xsi:type="types:Boolean"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.32"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.1/@statement/@statements.0/@variable"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
                  </next>
                </returnValue>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="dumpDTM">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="os">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/io/OutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Diagnostics function to dump the DTM.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="f">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/io/File.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/io/File.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="DTMDump"/>
                    <children xsi:type="expressions:NestedExpression">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.3"/>
                      </next>
                      <expression xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:SelfReference">
                          <self xsi:type="literals:This"/>
                        </child>
                      </expression>
                    </children>
                    <children xsi:type="references:StringReference" value=".txt"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:StringReference" value="Dumping... "/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.0/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/File.class.xmi#//@classifiers.0/@members.24"/>
                        </next>
                      </children>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                  </next>
                  <target xsi:type="members:Field" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.2"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/io/FileOutputStream.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.0/@statement/@statements.0/@variable"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="ps">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block"/>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.32"/>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="nRecords">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Total nodes: "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.3/@variable"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="i">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@init"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="=========== index="/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@init"/>
                    <children xsi:type="references:StringReference" value=" handle="/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.0/@variable"/>
                    <children xsi:type="references:StringReference" value=" ==========="/>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="NodeName: "/>
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.78">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.0/@variable"/>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="NodeNameX: "/>
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.79">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.0/@variable"/>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="LocalName: "/>
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.80">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.0/@variable"/>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="NamespaceURI: "/>
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.82">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.0/@variable"/>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="Prefix: "/>
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.81">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.0/@variable"/>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="exTypeID">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@init"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="Expanded Type ID: "/>
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0/@members.11"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.7/@variable"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="type">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@init"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="typestring">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </variable>
            </statements>
            <statements xsi:type="statements:Switch">
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="ATTRIBUTE_NODE"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </condition>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="CDATA_SECTION_NODE"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </condition>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="COMMENT_NODE"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.9"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </condition>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="DOCUMENT_FRAGMENT_NODE"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.12"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </condition>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="DOCUMENT_NODE"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.10"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </condition>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="DOCUMENT_NODE"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.11"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </condition>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="ELEMENT_NODE"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </condition>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="ENTITY_NODE"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.7"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </condition>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="ENTITY_REFERENCE_NODE"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.6"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </condition>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="NAMESPACE_NODE"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </condition>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="NOTATION_NODE"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.13"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </condition>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="NULL"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </condition>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="PROCESSING_INSTRUCTION_NODE"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.8"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </condition>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="TEXT_NODE"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.4"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </condition>
              </cases>
              <cases xsi:type="statements:DefaultSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="Unknown!"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
              </cases>
              <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.9/@variable"/>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="Type: "/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.10/@variable"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="firstChild">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@init"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                    <arguments xsi:type="references:StringReference" value="First child: DTM.NULL"/>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.13/@variable"/>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                      <arguments xsi:type="references:StringReference" value="First child: NOTPROCESSED"/>
                    </next>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.13/@variable"/>
                </condition>
                <elseStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                      <arguments xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:StringReference" value="First child: "/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.13/@variable"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </arguments>
                    </next>
                  </expression>
                </elseStatement>
              </elseStatement>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="prevSibling">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.40">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@init"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                        <arguments xsi:type="references:StringReference" value="Prev sibling: DTM.NULL"/>
                      </next>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                      </next>
                      <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.15/@statement/@statements.0/@variable"/>
                  </condition>
                  <elseStatement xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                          <arguments xsi:type="references:StringReference" value="Prev sibling: NOTPROCESSED"/>
                        </next>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.15/@statement/@statements.0/@variable"/>
                    </condition>
                    <elseStatement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                          <arguments xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:StringReference" value="Prev sibling: "/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.15/@statement/@statements.0/@variable"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                          </arguments>
                        </next>
                      </expression>
                    </elseStatement>
                  </elseStatement>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="nextSibling">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@init"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                    <arguments xsi:type="references:StringReference" value="Next sibling: DTM.NULL"/>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.16/@variable"/>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                      <arguments xsi:type="references:StringReference" value="Next sibling: NOTPROCESSED"/>
                    </next>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.16/@variable"/>
                </condition>
                <elseStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                      <arguments xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:StringReference" value="Next sibling: "/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.16/@variable"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </arguments>
                    </next>
                  </expression>
                </elseStatement>
              </elseStatement>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="parent">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@init"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                    <arguments xsi:type="references:StringReference" value="Parent: DTM.NULL"/>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.18/@variable"/>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                      <arguments xsi:type="references:StringReference" value="Parent: NOTPROCESSED"/>
                    </next>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.18/@variable"/>
                </condition>
                <elseStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                      <arguments xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:StringReference" value="Parent: "/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.18/@variable"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </arguments>
                    </next>
                  </expression>
                </elseStatement>
              </elseStatement>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="level">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@init"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="Level: "/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.20/@variable"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="Node Value: "/>
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.83">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.0/@variable"/>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="String Value: "/>
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@statement/@statements.0/@variable"/>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.3/@variable"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="index">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:PrefixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@statements.5/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@catcheBlocks.0/@parameter">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.15"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.32"/>
                <arguments xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <parameter name="ioe">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="dumpNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Diagnostics function to dump a single node.&#xA;   * &#xA;   * %REVIEW% KNOWN GLITCH: If you pass it a node index rather than a &#xA;   * node handle, it works just fine... but the displayed identity &#xA;   * number before the colon is different, which complicates comparing&#xA;   * it with nodes printed the other way. We could always OR the DTM ID&#xA;   * into the value, to suppress that distinction...&#xA;   * &#xA;   * %REVIEW% This might want to be moved up to DTMDefaultBase, or possibly&#xA;   * DTM itself, since it's a useful diagnostic and uses only DTM's public&#xA;   * APIs.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:StringReference" value="[null]"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="typestring">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Switch">
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="ATTR"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="CDATA"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.5"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="COMMENT"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.9"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="DOC_FRAG"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.12"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="DOC"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.10"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="DOC_TYPE"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.11"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="ELEMENT"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="ENTITY"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.7"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="ENT_REF"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.6"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="NAMESPACE"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.14"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="NOTATION"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.13"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="null"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="PI"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.8"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="TEXT"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.4"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:DefaultSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="Unknown!"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
        </cases>
        <variable xsi:type="references:MethodCall" target="//@classifiers.0/@members.84">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sb">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.3/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:StringReference" value="["/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
              <children xsi:type="references:StringReference" value=": "/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@variable"/>
              <children xsi:type="references:StringReference" value="(0x"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0/@members.11"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.73">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
              </children>
              <children xsi:type="references:StringReference" value=") "/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.79">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
              </children>
              <children xsi:type="references:StringReference" value=" {"/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.82">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
              </children>
              <children xsi:type="references:StringReference" value="}"/>
              <children xsi:type="references:StringReference" value="=&quot;"/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.83">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
              </children>
              <children xsi:type="references:StringReference" value="&quot;]"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.3/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setFeature">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="featureId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="state">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ========= DTM Implementation Control Functions. ==============</comments>
        <comments>/**&#xA;   * Set an implementation dependent feature.&#xA;   * &lt;p>&#xA;   * %REVIEW% Do we really expect to set features on DTMs?&#xA;   *&#xA;   * @param featureId A feature URL.&#xA;   * @param state true if this feature should be on, false otherwise.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="hasChildNodes">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ========= Document Navigation Functions =========</comments>
        <comments>/**&#xA;   * Given a node handle, test if it has child nodes.&#xA;   * &lt;p> %REVIEW% This is obviously useful at the DOM layer, where it&#xA;   * would permit testing this without having to create a proxy&#xA;   * node. It's less useful in the DTM API, where&#xA;   * (dtm.getFirstChild(nodeHandle)!=DTM.NULL) is just as fast and&#xA;   * almost as self-evident. But it's a convenience, and eases porting&#xA;   * of DOM code to DTM.  &lt;/p>&#xA;   *&#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @return int true if the given node has child nodes.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="identity">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="firstChild">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@statements.0/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@statements.1/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="makeNodeHandle">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeIdentity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/** Given a node identity, return a node handle. If extended addressing&#xA;   * has been used (multiple DTM IDs), we need to map the high bits of the&#xA;   * identity into the proper DTM ID.&#xA;   * &#xA;   * This has been made FINAL to facilitate inlining, since we do not expect&#xA;   * any subclass of DTMDefaultBase to ever change the algorithm. (I don't&#xA;   * really like doing so, and would love to have an excuse not to...)&#xA;   * &#xA;   * %REVIEW% Is it worth trying to specialcase small documents?&#xA;   * %REVIEW% Should this be exposed at the package/public layers?&#xA;   * &#xA;   * @param nodeIdentity Internal offset to this node's records.&#xA;   * @return NodeHandle (external representation of node)&#xA;   * */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                <arguments xsi:type="references:StringReference" value="GONK! (only useful in limited situations)"/>
              </next>
              <target xsi:type="members:Field" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.6"/>
              </next>
              <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
            </children>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
              <arguments xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
                </children>
                <shiftOperators xsi:type="operators:UnsignedRightShift"/>
              </arguments>
            </next>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AndExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.6"/>
                </next>
                <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
          <additiveOperators xsi:type="operators:Addition"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="makeNodeIdentity">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/** Given a node handle, return a node identity. If extended addressing&#xA;   * has been used (multiple DTM IDs), we need to map the high bits of the&#xA;   * identity into the proper DTM ID and thence find the proper offset&#xA;   * to add to the low bits of the identity&#xA;   * &#xA;   * This has been made FINAL to facilitate inlining, since we do not expect&#xA;   * any subclass of DTMDefaultBase to ever change the algorithm. (I don't&#xA;   * really like doing so, and would love to have an excuse not to...)&#xA;   * &#xA;   * %OPT% Performance is critical for this operation.&#xA;   *&#xA;   * %REVIEW% Should this be exposed at the package/public layers?&#xA;   * &#xA;   * @param NodeHandle (external representation of node)&#xA;   * @return nodeIdentity Internal offset to this node's records.&#xA;   * */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="whichDTMindex">
              <typeReference xsi:type="types:Int">
                <comments>// Optimization: use the DTMManagerDefault's fast DTMID-to-offsets</comments>
                <comments>// table.  I'm not wild about this solution but this operation</comments>
                <comments>// needs need extreme speed.</comments>
              </typeReference>
              <initialValue xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
                </children>
                <shiftOperators xsi:type="operators:UnsignedRightShift"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// %REVIEW% Wish I didn't have to perform the pre-test, but</comments>
            <comments>// someone is apparently asking DTMs whether they contain nodes</comments>
            <comments>// which really don't belong to them. That's probably a bug</comments>
            <comments>// which should be fixed, but until it is:</comments>
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16">
                <next xsi:type="references:IdentifierReference">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.1/@statement/@statements.0/@variable"/>
                  </arraySelectors>
                  <target xsi:type="members:Field" href="DTMManagerDefault.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </children>
              <children xsi:type="references:SelfReference">
                <self xsi:type="literals:This"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Return">
              <returnValue xsi:type="expressions:InclusiveOrExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16">
                  <next xsi:type="references:IdentifierReference">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.1/@statement/@statements.0/@variable"/>
                    </arraySelectors>
                    <target xsi:type="members:Field" href="DTMManagerDefault.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.6"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
                    </children>
                  </expression>
                </children>
              </returnValue>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="whichDTMid">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.26"/>
              <arguments xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.7"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
                </children>
              </arguments>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.2/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
              </children>
            </expression>
          </child>
          <expressionIf xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </expressionIf>
          <expressionElse xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.2/@variable"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
                </children>
                <shiftOperators xsi:type="operators:LeftShift"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTMManager.class.xmi#//@classifiers.0/@members.6"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
                </children>
              </expression>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </expressionElse>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFirstChild">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, get the handle of the node's first child.&#xA;   * If not yet resolved, waits for more nodes to be added to the document and&#xA;   * tries again.&#xA;   *&#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @return int DTM node-number of first child, or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="identity">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="firstChild">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getTypedFirstChild">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeType">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, get the handle of the node's first child.&#xA;   * If not yet resolved, waits for more nodes to be added to the document and&#xA;   * tries again.&#xA;   *&#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @return int DTM node-number of first child, or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="firstChild">
          <typeReference xsi:type="types:Int"/>
          <additionalLocalVariables name="eType"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable/@additionalLocalVariables.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
                    </returnValue>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable/@additionalLocalVariables.0"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.1"/>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable/@additionalLocalVariables.0"/>
                        <children xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.15"/>
                          </next>
                          <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                        </children>
                        <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                      </children>
                      <children xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="ExpandedNameTable.class.xmi#//@classifiers.0/@members.33"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable/@additionalLocalVariables.0"/>
                          </next>
                        </children>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.1"/>
                      </children>
                    </expression>
                  </children>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
            <init xsi:type="expressions:ExpressionList">
              <expressions xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
                  </arguments>
                </value>
              </expressions>
            </init>
            <updates xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
              </value>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.1"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.15"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
                    </returnValue>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.1"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
            <init xsi:type="expressions:ExpressionList">
              <expressions xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
                  </arguments>
                </value>
              </expressions>
            </init>
            <updates xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
              </value>
            </updates>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </next>
          <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLastChild">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, advance to its last child.&#xA;   * If not yet resolved, waits for more nodes to be added to the document and&#xA;   * tries again.&#xA;   *&#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @return int Node-number of last child,&#xA;   * or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="identity">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="child">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.0/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lastChild">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.1/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.1/@variable"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.1/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.2/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributeNode">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Retrieves an attribute node by by qualified name and namespace URI.&#xA;   *&#xA;   * @param nodeHandle int Handle of the node upon which to look up this attribute..&#xA;   * @param namespaceURI The namespace URI of the attribute to&#xA;   *   retrieve, or null.&#xA;   * @param name The local name of the attribute to&#xA;   *   retrieve.&#xA;   * @return The attribute node handle with the specified name (&#xA;   *   &lt;code>nodeName&lt;/code>) or &lt;code>DTM.NULL&lt;/code> if there is no such&#xA;   *   attribute.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getFirstAttribute">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, get the index of the node's first attribute.&#xA;   *&#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @return Handle of first attribute, or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nodeID">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@statements.0/@variable"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFirstAttributeIdentity">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="identity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Given a node identity, get the index of the node's first attribute.&#xA;   *&#xA;   * @param identity int identity of the node.&#xA;   * @return Identity of first attribute, or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="type">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:WhileLoop">
            <comments>// Assume that attributes and namespaces immediately follow the element.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@statements.0/@variable">
                    <comments>// Assume this can not be null.</comments>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:Break"/>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.14"/>
                      </next>
                      <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@statements.0/@variable"/>
                  </condition>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0"/>
                  </value>
                </expression>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@statements.0/@variable"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </next>
          <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getTypedAttribute">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attType">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Given a node handle and an expanded type ID, get the index of the node's&#xA;   * attribute of that type, if any.&#xA;   *&#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @param attType int expanded type ID of the required attribute.&#xA;   * @return Handle of attribute of the required type, or DTM.NULL to indicate&#xA;   * none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="type">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.84">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="identity">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.1/@statement/@statements.0/@variable"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Return">
                      <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.1/@statement/@statements.0/@variable"/>
                      </returnValue>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.1/@statement/@statements.0/@variable"/>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.1"/>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:Break"/>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.14"/>
                      </next>
                      <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.0/@variable"/>
                  </condition>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.1/@statement/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.1/@statement/@statements.0/@variable"/>
                  </value>
                </expression>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.0/@variable"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </next>
          <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNextSibling">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, advance to its next sibling.&#xA;   * If not yet resolved, waits for more nodes to be added to the document and&#xA;   * tries again.&#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @return int Node-number of next sibling,&#xA;   * or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0"/>
            </arguments>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getTypedNextSibling">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeType">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, advance to its next sibling.&#xA;   * If not yet resolved, waits for more nodes to be added to the document and&#xA;   * tries again.&#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @return int Node-number of next sibling,&#xA;   * or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="node">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="eType">
          <typeReference xsi:type="types:Int"/>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:EmptyStatement"/>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.1/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.1/@variable"/>
                </value>
              </expression>
            </children>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
              </next>
              <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.2/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.1/@variable"/>
                    </value>
                  </expression>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.1"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ExpandedNameTable.class.xmi#//@classifiers.0/@members.33"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.2/@variable"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.1"/>
              </children>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>//_type(node) != nodeType));</comments>
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.1/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
              </children>
            </child>
            <expressionIf xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
              </next>
              <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
            </expressionIf>
            <expressionElse xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.1/@variable"/>
            </expressionElse>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPreviousSibling">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, find its preceeding sibling.&#xA;   * WARNING: DTM is asymmetric; this operation is resolved by search, and is&#xA;   * relatively expensive.&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return int Node-number of the previous sib,&#xA;   * or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.40">
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0"/>
              </arguments>
            </arguments>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="nodeID">
              <typeReference xsi:type="types:Int">
                <comments>// If the previous sibling array is not built, we get at</comments>
                <comments>// the previous sibling using the parent, firstch and </comments>
                <comments>// nextsib arrays. </comments>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="parent">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.1/@elseStatement/@statements.0/@variable"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="node">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.1/@elseStatement/@statements.1/@variable"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="result">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.1/@elseStatement/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.1/@elseStatement/@statements.2/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.1/@elseStatement/@statements.2/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.1/@elseStatement/@statements.2/@variable"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.1/@elseStatement/@statements.2/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.1/@elseStatement/@statements.0/@variable"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.1/@elseStatement/@statements.3/@variable"/>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNextAttribute">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, advance to the next attribute.&#xA;   * If an attr, we advance to&#xA;   * the next attr on the same node.  If not an attribute, we return NULL.&#xA;   *&#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @return int DTM node-number of the resolved attr,&#xA;   * or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nodeID">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.59">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@variable"/>
              </arguments>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@variable"/>
          </children>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </next>
          <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNextAttributeIdentity">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="identity">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Given a node identity for an attribute, advance to the next attribute.&#xA;   *&#xA;   * @param identity int identity of the attribute node.  This&#xA;   * &lt;strong>must&lt;/strong> be an attribute node.&#xA;   *&#xA;   * @return int DTM node-identity of the resolved attr,&#xA;   * or DTM.NULL to indicate none exists.&#xA;   *&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:WhileLoop">
        <comments>// Assume that attributes and namespace nodes immediately follow the element</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="type">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59/@parameters.0"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59/@statements.0/@statement/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.3"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Break"/>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59/@statements.0/@statement/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                </children>
              </condition>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59/@parameters.0"/>
              </value>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </next>
          <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="m_namespaceLists">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Lazily created namespace lists. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="declareNamespaceInContext">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="elementNodeIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceNodeIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// on demand</comments>
        <comments>/** Build table of namespace declaration&#xA;   * locations during DTM construction. Table is a Vector of&#xA;   * SuballocatedIntVectors containing the namespace node HANDLES declared at&#xA;   * that ID, plus an SuballocatedIntVector of the element node INDEXES at which&#xA;   * these declarations appeared.&#xA;   *&#xA;   * NOTE: Since this occurs during model build, nodes will be encountered&#xA;   * in doucment order and thus the table will be ordered by element,&#xA;   * permitting binary-search as a possible retrieval optimization.&#xA;   *&#xA;   * %REVIEW% Directly managed arrays rather than vectors?&#xA;   * %REVIEW% Handles or IDs? Given usage, I think handles.&#xA;   * */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nsList">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9">
                <comments>// First</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.15"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.0"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.28"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="last">
              <typeReference xsi:type="types:Int">
                <comments>// Most recent. May be -1 (none) if DTM was pruned.</comments>
                <comments>// %OPT% Is there a lastElement() method? Should there be?</comments>
              </typeReference>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.13"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@elseStatement/@statements.0/@variable"/>
                      </next>
                    </child>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@elseStatement/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@elseStatement/@statements.0/@variable"/>
                  </next>
                </children>
              </children>
            </condition>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.15"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.0"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="inherited">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.62">
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.0"/>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="isize">
                  <typeReference xsi:type="types:Int">
                    <comments>// %OPT% Count-down might be faster, but debuggability may</comments>
                    <comments>// be better this way, and if we ever decide we want to</comments>
                    <comments>// keep this ordered by expanded-type...</comments>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@statement/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.13"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable">
                    <comments>// Base the size of a new namespace list on the</comments>
                    <comments>// size of the inherited list - but within reason!</comments>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Math.class.xmi#//@classifiers.0/@members.33"/>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../../../java/lang/Math.class.xmi#//@classifiers.0/@members.37"/>
                            <arguments xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@statement/@statements.2/@statement/@statements.0/@variable"/>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                              <additiveOperators xsi:type="operators:Addition"/>
                            </arguments>
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2048"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Math.class.xmi#//@classifiers.0"/>
                        </arguments>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Math.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ForLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.15"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@statement/@statements.1/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@statement/@statements.2/@statement/@statements.2/@init"/>
                          </next>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@statement/@statements.2/@statement/@statements.2/@init"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@statement/@statements.2/@statement/@statements.0/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <init xsi:type="variables:LocalVariable" name="i">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </init>
                <updates xsi:type="expressions:PrefixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@statement/@statements.2/@statement/@statements.2/@init"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </updates>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.2/@statement/@statements.1/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
                  </value>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.28"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="newEType">
          <typeReference xsi:type="types:Int">
            <comments>// Handle overwriting inherited.</comments>
            <comments>// %OPT% Keep sorted? (By expanded-name rather than by doc order...)</comments>
            <comments>// Downside: Would require insertElementAt if not found,</comments>
            <comments>// which has recopying costs. But these are generally short lists...</comments>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.22"/>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.1"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.4/@init"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Return"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.3/@variable"/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.73">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.4/@init"/>
                  </next>
                </arguments>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.4/@init"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.13"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </init>
        <updates xsi:type="expressions:PrefixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.4/@init"/>
          <operator xsi:type="operators:MinusMinus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.1"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="findNamespaceContext">
      <comments>// No namespaces known at this node</comments>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="elementNodeIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Retrieve list of namespace declaration locations&#xA;     * active at this node. List is an SuballocatedIntVector whose&#xA;     * entries are the namespace node HANDLES declared at that ID.&#xA;     *&#xA;     * %REVIEW% Directly managed arrays rather than vectors?&#xA;     * %REVIEW% Handles or IDs? Given usage, I think handles.&#xA;     * */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="wouldBeAt">
              <typeReference xsi:type="types:Int">
                <comments>// %OPT% Is binary-search really saving us a lot versus linear?</comments>
                <comments>// (... It may be, in large docs with many NS decls.)</comments>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.63">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <comments>// Found it</comments>
              <returnValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.0/@variable"/>
                  </next>
                </child>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <comments>// -1-wouldbeat == 0</comments>
              <returnValue xsi:type="literals:NullLiteral"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.0/@variable"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.0/@variable">
                <comments>// Not after anything; definitely not found</comments>
                <comments>// Not found, but we know where it should have been.</comments>
                <comments>// Search back until we find an ancestor or run out.</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.0/@variable"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="candidate">
              <typeReference xsi:type="types:Int">
                <comments>// Decrement wouldBeAt to find last possible ancestor</comments>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                  <arguments xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.0/@variable"/>
                    <operator xsi:type="operators:MinusMinus"/>
                  </arguments>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="ancestor">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// Special case: if the candidate is before the given node, and</comments>
            <comments>// is in the earliest possible position in the document, it</comments>
            <comments>// must have the namespace declarations we're interested in.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="rootHandle">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.69">
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@parameters.0"/>
                    </arguments>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="rootID">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.6/@statement/@statements.0/@variable"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="uppermostNSCandidateID">
                  <typeReference xsi:type="types:Int"/>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="ch">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.6/@statement/@statements.1/@variable"/>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.6/@statement/@statements.2/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:ConditionalExpression">
                        <child xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:NotEqual"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.6/@statement/@statements.3/@statement/@statements.0/@variable"/>
                            <children xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                              </next>
                              <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                            </children>
                          </expression>
                        </child>
                        <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.6/@statement/@statements.3/@statement/@statements.0/@variable"/>
                        <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.6/@statement/@statements.1/@variable"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.84">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.6/@statement/@statements.0/@variable"/>
                  </children>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.10"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.6/@statement/@statements.2/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.6/@statement/@statements.1/@variable"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.0/@variable"/>
                        </next>
                      </child>
                    </returnValue>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.4/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.6/@statement/@statements.2/@variable"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.4/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.5/@variable"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <comments>// Found ancestor in list</comments>
                    <returnValue xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.0/@variable"/>
                        </next>
                      </child>
                    </returnValue>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.4/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.5/@variable"/>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:DoWhileLoop">
                      <comments>// Too deep in tree</comments>
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:AssignmentExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.5/@variable"/>
                            <assignmentOperator xsi:type="operators:Assignment"/>
                            <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.5/@variable"/>
                            </value>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.4/@variable"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.5/@variable"/>
                        <relationOperators xsi:type="operators:LessThan"/>
                      </condition>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.4/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.5/@variable"/>
                    <relationOperators xsi:type="operators:LessThan"/>
                  </condition>
                  <elseStatement xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.4/@variable">
                            <comments>// Too late in list</comments>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                              <arguments xsi:type="expressions:PrefixUnaryModificationExpression">
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.0/@variable"/>
                                <operator xsi:type="operators:MinusMinus"/>
                              </arguments>
                            </next>
                          </value>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.0/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </condition>
                    <elseStatement xsi:type="statements:Break"/>
                  </elseStatement>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@statements.0/@statement/@statements.5/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="literals:NullLiteral"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="findInSortedSuballocatedIntVector">
      <comments>// not-found has to be encoded.</comments>
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="vector">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lookfor">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Subroutine: Locate the specified node within&#xA;     * m_namespaceDeclSetElements, or the last element which&#xA;     * preceeds it in document order&#xA;     *&#xA;     * %REVIEW% Inlne this into findNamespaceContext? Create SortedSuballocatedIntVector type?&#xA;     *&#xA;     * @param elementNodeIndex Index of a node to look up.&#xA;     *&#xA;     * @return If positive or zero, the index of the found item.&#xA;     * If negative, index of the point at which it would have appeared,&#xA;     * encoded as -1-index and hence reconvertable by subtracting&#xA;     * it from -1. (Encoding because I don't want to recompare the strings&#xA;     * but don't want to burn bytes on a datatype to hold a flagged value.)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="i">
          <typeReference xsi:type="types:Int">
            <comments>// Binary search</comments>
          </typeReference>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="first">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="last">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.13"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:MultiplicativeExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@statement/@statements.0/@variable"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@statement/@statements.1/@variable"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                    <multiplicativeOperators xsi:type="operators:Division"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="test">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@parameters.1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@variable"/>
                      </next>
                    </children>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <comments>// Name found</comments>
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@variable"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@statement/@statements.2/@statement/@statements.1/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <comments>// looked too late</comments>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@statement/@statements.1/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </value>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@statement/@statements.2/@statement/@statements.1/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <relationOperators xsi:type="operators:LessThan"/>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <comments>// looked ot early</comments>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@statement/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </value>
                      </expression>
                    </statements>
                  </elseStatement>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@statement/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@statement/@statements.1/@variable"/>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <comments>// Clean up at loop end</comments>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@statement/@statements.0/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@statement/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@variable"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@variable"/>
          <additiveOperators xsi:type="operators:Subtraction"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFirstNamespaceNode">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inScope">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, get the index of the node's first child.&#xA;   * If not yet resolved, waits for more nodes to be added to the document and&#xA;   * tries again&#xA;   *&#xA;   * @param nodeHandle handle to node, which should probably be an element&#xA;   *                   node, but need not be.&#xA;   *&#xA;   * @param inScope    true if all namespaces in scope should be returned,&#xA;   *                   false if only the namespace declarations should be&#xA;   *                   returned.&#xA;   * @return handle of first namespace, or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="identity">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="nsContext">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.62">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.0/@variable"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Return">
                  <returnValue xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                  </returnValue>
                </statement>
                <condition xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </children>
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.13"/>
                      </next>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <relationOperators xsi:type="operators:LessThan"/>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </next>
                </returnValue>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statement/@statements.0/@variable"/>
              </children>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.2"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
              </returnValue>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.1"/>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="identity">
              <typeReference xsi:type="types:Int">
                <comments>// Assume that attributes and namespaces immediately</comments>
                <comments>// follow the element.</comments>
                <comments>//</comments>
                <comments>// %OPT% Would things be faster if all NS nodes were built</comments>
                <comments>// before all Attr nodes? Some costs at build time for 2nd</comments>
                <comments>// pass...</comments>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:WhileLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="type">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@elseStatement/@statements.0/@variable"/>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Return">
                      <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@elseStatement/@statements.0/@variable"/>
                      </returnValue>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@elseStatement/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      <children xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.14"/>
                        </next>
                        <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                      </children>
                    </condition>
                    <elseStatement xsi:type="statements:Condition">
                      <statement xsi:type="statements:Break"/>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.3"/>
                          </next>
                          <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                        </children>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@elseStatement/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      </condition>
                    </elseStatement>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@elseStatement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@elseStatement/@statements.0/@variable"/>
                      </value>
                    </expression>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                </returnValue>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@elseStatement/@statements.0/@variable"/>
              </children>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.2"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
              </returnValue>
            </elseStatement>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNextNamespaceNode">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="baseHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inScope">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a namespace handle, advance to the next namespace.&#xA;   *&#xA;   * @param baseHandle handle to original node from where the first namespace&#xA;   * was relative to (needed to return nodes in document order).&#xA;   * @param namespaceHandle handle to node which must be of type&#xA;   * NAMESPACE_NODE.&#xA;   * @param nodeHandle A namespace handle for which we will find the next node.&#xA;   * @param inScope true if all namespaces that are in scope should be processed,&#xA;   * otherwise just process the nodes in the given element handle.&#xA;   * @return handle of next namespace, or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="nsContext">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>//Since we've been given the base, try direct lookup</comments>
                  <comments>//(could look from nodeHandle but this is at least one</comments>
                  <comments>//comparison/get-parent faster)</comments>
                  <comments>//SuballocatedIntVector nsContext=findNamespaceContext(nodeHandle &amp; m_mask);</comments>
                  <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.62">
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.26"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@statement/@statements.2/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThanOrEqual"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@statement/@statements.2/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.13"/>
                  </next>
                </children>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@statement/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@statement/@statements.2/@variable"/>
              </next>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.2"/>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="identity">
              <typeReference xsi:type="types:Int">
                <comments>// Assume that attributes and namespace nodes immediately follow the element.</comments>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="type">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@elseStatement/@statements.0/@variable"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@elseStatement/@statements.0/@variable"/>
                    </returnValue>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:Break"/>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.3"/>
                      </next>
                      <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
                    </children>
                  </condition>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@elseStatement/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@elseStatement/@statements.0/@variable"/>
                  </value>
                </expression>
              </children>
            </condition>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </next>
          <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getParent">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, find its parent node.&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return int Node-number of parent,&#xA;   * or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="identity">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@variable"/>
            </arguments>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
        <elseStatement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </returnValue>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDocument">
      <comments>// makeNodeHandle(0)</comments>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Find the Document node handle for the document currently under construction.&#xA;   * PLEASE NOTE that most people should use getOwnerDocument(nodeHandle) instead;&#xA;   * this version of the operation is primarily intended for use during negotiation&#xA;   * with the DTM Manager.&#xA;   * &#xA;   *  @param nodeHandle the id of the node.&#xA;   *  @return int Node handle of document, which should always be valid.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0/@members.23"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getOwnerDocument">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, find the owning document node.  This has the exact&#xA;   * same semantics as the DOM Document method of the same name, in that if&#xA;   * the nodeHandle is a document node, it will return NULL.&#xA;   *&#xA;   * &lt;p>%REVIEW% Since this is DOM-specific, it may belong at the DOM&#xA;   * binding layer. Included here as a convenience function and to&#xA;   * aid porting of DOM code to DTM.&lt;/p>&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return int Node handle of owning document, or -1 if the node was a Docment&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.10"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </children>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.84">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@parameters.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.69">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDocumentRoot">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, find the owning document node.  Unlike the DOM,&#xA;   * this considers the owningDocument of a Document to be itself.&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return int Node handle of owning document, or the nodeHandle if it is&#xA;   *             a Document.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.67"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStringValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../utils/XMLString.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get the string-value of a node as a String object&#xA;   * (see http://www.w3.org/TR/xpath#data-model&#xA;   * for the definition of a node's string-value).&#xA;   *&#xA;   * @param nodeHandle The node ID.&#xA;   *&#xA;   * @return A string object that represents the string-value of the given node.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getStringValueChunkCount">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get number of character array chunks in&#xA;   * the string-value of a node.&#xA;   * (see http://www.w3.org/TR/xpath#data-model&#xA;   * for the definition of a node's string-value).&#xA;   * Note that a single text node may have multiple text chunks.&#xA;   *&#xA;   * @param nodeHandle The node ID.&#xA;   *&#xA;   * @return number of character array chunks in&#xA;   *         the string-value of a node.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.110">
          <comments>// %TBD%</comments>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../res/XMLMessages.class.xmi#//@classifiers.0/@members.8"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0/@members.49"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="literals:NullLiteral"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../res/XMLMessages.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>//(&quot;getStringValueChunkCount not yet supported!&quot;);</comments>
        <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStringValueChunk">
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="chunkIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="startAndLen">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get a character array chunk in the string-value of a node.&#xA;   * (see http://www.w3.org/TR/xpath#data-model&#xA;   * for the definition of a node's string-value).&#xA;   * Note that a single text node may have multiple text chunks.&#xA;   *&#xA;   * @param nodeHandle The node ID.&#xA;   * @param chunkIndex Which chunk to get.&#xA;   * @param startAndLen An array of 2 where the start position and length of&#xA;   *                    the chunk will be returned.&#xA;   *&#xA;   * @return The character array reference where the chunk occurs.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.110">
          <comments>// %TBD%</comments>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../res/XMLMessages.class.xmi#//@classifiers.0/@members.8"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0/@members.49"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="literals:NullLiteral"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../res/XMLMessages.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>//&quot;getStringValueChunk not yet supported!&quot;);</comments>
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getExpandedTypeID">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, return an ID that represents the node's expanded name.&#xA;   *&#xA;   * @param nodeHandle The handle to the node in question.&#xA;   *&#xA;   * @return the expanded-name id of the node.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="id">
          <typeReference xsi:type="types:Int">
            <comments>// %REVIEW% This _should_ only be null if someone asked the wrong DTM about the node...</comments>
            <comments>// which one would hope would never happen...</comments>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.0/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.0/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getExpandedTypeID">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespace">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given an expanded name, return an ID.  If the expanded-name does not&#xA;   * exist in the internal tables, the entry will be created, and the ID will&#xA;   * be returned.  Any additional nodes that are created that have this&#xA;   * expanded name will use this ID.&#xA;   *&#xA;   * @param nodeHandle The handle to the node in question.&#xA;   * @param type The simple type, i.e. one of ELEMENT, ATTRIBUTE, etc.&#xA;   *&#xA;   * @param namespace The namespace URI, which may be null, may be an empty&#xA;   *                  string (which will be the same as null), or may be a&#xA;   *                  namespace URI.&#xA;   * @param localName The local name string, which must be a valid&#xA;   *                  &lt;a href=&quot;http://www.w3.org/TR/REC-xml-names/&quot;>NCName&lt;/a>.&#xA;   *&#xA;   * @return the expanded-name id of the node.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="ent">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="ExpandedNameTable.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ExpandedNameTable.class.xmi#//@classifiers.0/@members.25"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.2"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLocalNameFromExpandedNameID">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="expandedNameID">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given an expanded-name ID, return the local name part.&#xA;   *&#xA;   * @param ExpandedNameID an ID that represents an expanded-name.&#xA;   * @return String Local name of this node.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ExpandedNameTable.class.xmi#//@classifiers.0/@members.29"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75/@parameters.0"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNamespaceFromExpandedNameID">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="expandedNameID">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given an expanded-name ID, return the namespace URI part.&#xA;   *&#xA;   * @param ExpandedNameID an ID that represents an expanded-name.&#xA;   * @return String URI value of this node's namespace, or null if no&#xA;   * namespace was resolved.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ExpandedNameTable.class.xmi#//@classifiers.0/@members.31"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNamespaceType">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Returns the namespace type of a specific node&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return the ID of the namespace.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="identity">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="expandedNameID">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.0/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ExpandedNameTable.class.xmi#//@classifiers.0/@members.32"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.1/@variable"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNodeName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, return its DOM-style node name. This will&#xA;   * include names such as #text or #document.&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return String Name of this node, which may be an empty string.&#xA;   * %REVIEW% Document when empty string is possible...&#xA;   * %REVIEW-COMMENT% It should never be empty, should it?&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getNodeNameX">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, return the XPath node name.  This should be&#xA;   * the name as described by the XPath data model, NOT the DOM-style&#xA;   * name.&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return String Name of this node, which may be an empty string.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.110">
          <comments>/** @todo: implement this com.sun.org.apache.xml.internal.dtm.DTMDefaultBase abstract method */</comments>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../res/XMLMessages.class.xmi#//@classifiers.0/@members.8"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0/@members.49"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="literals:NullLiteral"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../res/XMLMessages.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>//&quot;Not yet supported!&quot;);</comments>
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLocalName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, return its XPath-style localname.&#xA;   * (As defined in Namespaces, this is the portion of the name after any&#xA;   * colon character).&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return String Local name of this node.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPrefix">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a namespace handle, return the prefix that the namespace decl is&#xA;   * mapping.&#xA;   * Given a node handle, return the prefix used to map to the namespace.&#xA;   *&#xA;   * &lt;p> %REVIEW% Are you sure you want &quot;&quot; for no prefix?  &lt;/p>&#xA;   * &lt;p> %REVIEW-COMMENT% I think so... not totally sure. -sb  &lt;/p>&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return String prefix of this node's name, or &quot;&quot; if no explicit&#xA;   * namespace prefix was given.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNamespaceURI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, return its DOM-style namespace URI&#xA;   * (As defined in Namespaces, this is the declared URI which this node's&#xA;   * prefix -- or default in lieu thereof -- was mapped to.)&#xA;   *&#xA;   * &lt;p>%REVIEW% Null or &quot;&quot;? -sb&lt;/p>&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return String URI value of this node's namespace, or null if no&#xA;   * namespace was resolved.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNodeValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, return its node value. This is mostly&#xA;   * as defined by the DOM, but may ignore some conveniences.&#xA;   * &lt;p>&#xA;   *&#xA;   * @param nodeHandle The node id.&#xA;   * @return String Value of this node, or null if not&#xA;   * meaningful for this node type.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getNodeType">
      <typeReference xsi:type="types:Short"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, return its DOM-style node type.&#xA;   * &lt;p>&#xA;   * %REVIEW% Generally, returning short is false economy. Return int?&#xA;   * %REVIEW% Make assumption that node has already arrived.  Is OK?&#xA;   *&#xA;   * @param nodeHandle The node id.&#xA;   * @return int Node type, as per the DOM's Node._NODE constants.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.84/@parameters.0"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ExpandedNameTable.class.xmi#//@classifiers.0/@members.33"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.84/@parameters.0"/>
              </arguments>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLevel">
      <typeReference xsi:type="types:Short"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get the depth level of this node in the tree (equals 1 for&#xA;   * a parentless node).&#xA;   *&#xA;   * @param nodeHandle The node id.&#xA;   * @return the number of ancestors, plus one&#xA;   * @xsl.usage internal&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="identity">
          <typeReference xsi:type="types:Int">
            <comments>// Apparently, the axis walker stuff requires levels to count from 1.</comments>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Short"/>
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@statements.0/@variable"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </expression>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNodeIdent">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get the identity of this node in the tree &#xA;   *&#xA;   * @param nodeHandle The node handle.&#xA;   * @return the node identity&#xA;   * @xsl.usage internal&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>/*if (nodeHandle != DTM.NULL)&#xA;      return nodeHandle &amp; m_mask;&#xA;    else &#xA;      return DTM.NULL;*/</comments>
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNodeHandle">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeId">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get the handle of this node in the tree &#xA;   *&#xA;   * @param nodeId The node identity.&#xA;   * @return the node handle&#xA;   * @xsl.usage internal&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>/*if (nodeId != DTM.NULL)&#xA;      return nodeId | m_dtmIdent;&#xA;    else &#xA;      return DTM.NULL;*/</comments>
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isSupported">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="feature">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="version">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ============== Document query functions ==============</comments>
        <comments>/**&#xA;   * Tests whether DTM DOM implementation implements a specific feature and&#xA;   * that feature is supported by this node.&#xA;   *&#xA;   * @param feature The name of the feature to test.&#xA;   * @param versionThis is the version number of the feature to test.&#xA;   *   If the version is not&#xA;   *   specified, supporting any version of the feature will cause the&#xA;   *   method to return &lt;code>true&lt;/code>.&#xA;   * @param version The version string of the feature requested, may be null.&#xA;   * @return Returns &lt;code>true&lt;/code> if the specified feature is&#xA;   *   supported on this node, &lt;code>false&lt;/code> otherwise.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>// %TBD%</comments>
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDocumentBaseURI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return the base URI of the document entity. If it is not known&#xA;   * (because the document was parsed from a socket connection or from&#xA;   * standard input, for example), the value of this property is unknown.&#xA;   *&#xA;   * @return the document base URI String object or null if unknown.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setDocumentBaseURI">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="baseURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Set the base URI of the document entity.&#xA;   *&#xA;   * @param baseURI the document base URI String object or null if unknown.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDocumentSystemIdentifier">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return the system identifier of the document entity. If&#xA;   * it is not known, the value of this property is unknown.&#xA;   *&#xA;   * @param nodeHandle The node id, which can be any valid node handle.&#xA;   * @return the system identifier String object or null if unknown.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>// %REVIEW%  OK? -sb</comments>
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDocumentEncoding">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return the name of the character encoding scheme&#xA;   *        in which the document entity is expressed.&#xA;   *&#xA;   * @param nodeHandle The node id, which can be any valid node handle.&#xA;   * @return the document encoding String object.&#xA;   * @xsl.usage internal&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>// %REVIEW%  OK??  -sb</comments>
        <returnValue xsi:type="references:StringReference" value="UTF-8"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDocumentStandalone">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return an indication of the standalone status of the document,&#xA;   *        either &quot;yes&quot; or &quot;no&quot;. This property is derived from the optional&#xA;   *        standalone document declaration in the XML declaration at the&#xA;   *        beginning of the document entity, and has no value if there is no&#xA;   *        standalone document declaration.&#xA;   *&#xA;   * @param nodeHandle The node id, which can be any valid node handle.&#xA;   * @return the document standalone String object, either &quot;yes&quot;, &quot;no&quot;, or null.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDocumentVersion">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="documentHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return a string representing the XML version of the document. This&#xA;   * property is derived from the XML declaration optionally present at the&#xA;   * beginning of the document entity, and has no value if there is no XML&#xA;   * declaration.&#xA;   *&#xA;   * @param documentHandle The document handle&#xA;   *&#xA;   * @return the document version String object.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDocumentAllDeclarationsProcessed">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return an indication of&#xA;   * whether the processor has read the complete DTD. Its value is a&#xA;   * boolean. If it is false, then certain properties (indicated in their&#xA;   * descriptions below) may be unknown. If it is true, those properties&#xA;   * are never unknown.&#xA;   *&#xA;   * @return &lt;code>true&lt;/code> if all declarations were processed;&#xA;   *         &lt;code>false&lt;/code> otherwise.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>// %REVIEW% OK?</comments>
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDocumentTypeDeclarationSystemIdentifier">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   *   A document type declaration information item has the following properties:&#xA;   *&#xA;   *     1. [system identifier] The system identifier of the external subset, if&#xA;   *        it exists. Otherwise this property has no value.&#xA;   *&#xA;   * @return the system identifier String object, or null if there is none.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDocumentTypeDeclarationPublicIdentifier">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return the public identifier of the external subset,&#xA;   * normalized as described in 4.2.2 External Entities [XML]. If there is&#xA;   * no external subset or if it has no public identifier, this property&#xA;   * has no value.&#xA;   *&#xA;   * @param the document type declaration handle&#xA;   *&#xA;   * @return the public identifier String object, or null if there is none.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getElementById">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="elementId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Returns the &lt;code>Element&lt;/code> whose &lt;code>ID&lt;/code> is given by&#xA;   * &lt;code>elementId&lt;/code>. If no such element exists, returns&#xA;   * &lt;code>DTM.NULL&lt;/code>. Behavior is not defined if more than one element&#xA;   * has this &lt;code>ID&lt;/code>. Attributes (including those&#xA;   * with the name &quot;ID&quot;) are not of type ID unless so defined by DTD/Schema&#xA;   * information available to the DTM implementation.&#xA;   * Implementations that do not know whether attributes are of type ID or&#xA;   * not are expected to return &lt;code>DTM.NULL&lt;/code>.&#xA;   *&#xA;   * &lt;p>%REVIEW% Presumably IDs are still scoped to a single document,&#xA;   * and this operation searches only within a single document, right?&#xA;   * Wouldn't want collisions between DTMs in the same process.&lt;/p>&#xA;   *&#xA;   * @param elementId The unique &lt;code>id&lt;/code> value for an element.&#xA;   * @return The handle of the matching element.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUnparsedEntityURI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The getUnparsedEntityURI function returns the URI of the unparsed&#xA;   * entity with the specified name in the same document as the context&#xA;   * node (see [3.3 Unparsed Entities]). It returns the empty string if&#xA;   * there is no such entity.&#xA;   * &lt;p>&#xA;   * XML processors may choose to use the System Identifier (if one&#xA;   * is provided) to resolve the entity, rather than the URI in the&#xA;   * Public Identifier. The details are dependent on the processor, and&#xA;   * we would have to support some form of plug-in resolver to handle&#xA;   * this properly. Currently, we simply return the System Identifier if&#xA;   * present, and hope that it a usable URI or that our caller can&#xA;   * map it to one.&#xA;   * TODO: Resolve Public Identifiers... or consider changing function name.&#xA;   * &lt;p>&#xA;   * If we find a relative URI&#xA;   * reference, XML expects it to be resolved in terms of the base URI&#xA;   * of the document. The DOM doesn't do that for us, and it isn't&#xA;   * entirely clear whether that should be done here; currently that's&#xA;   * pushed up to a higher level of our application. (Note that DOM Level&#xA;   * 1 didn't store the document's base URI.)&#xA;   * TODO: Consider resolving Relative URIs.&#xA;   * &lt;p>&#xA;   * (The DOM's statement that &quot;An XML processor may choose to&#xA;   * completely expand entities before the structure model is passed&#xA;   * to the DOM&quot; refers only to parsed entities, not unparsed, and hence&#xA;   * doesn't affect this function.)&#xA;   *&#xA;   * @param name A string containing the Entity Name of the unparsed&#xA;   * entity.&#xA;   *&#xA;   * @return String containing the URI of the Unparsed Entity, or an&#xA;   * empty string if no such entity exists.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="supportsPreStripping">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ============== Boolean methods ================</comments>
        <comments>/**&#xA;   * Return true if the xsl:strip-space or xsl:preserve-space was processed&#xA;   * during construction of the DTM document.&#xA;   *&#xA;   * @return true if this DTM supports prestripping.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isNodeAfter">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle1">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle2">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Figure out whether nodeHandle2 should be considered as being later&#xA;   * in the document than nodeHandle1, in Document Order as defined&#xA;   * by the XPath model. This may not agree with the ordering defined&#xA;   * by other XML applications.&#xA;   * &lt;p>&#xA;   * There are some cases where ordering isn't defined, and neither are&#xA;   * the results of this function -- though we'll generally return false.&#xA;   *&#xA;   * @param nodeHandle1 Node handle to perform position comparison on.&#xA;   * @param nodeHandle2 Second Node handle to perform position comparison on .&#xA;   *&#xA;   * @return true if node1 comes before node2, otherwise return false.&#xA;   * You can think of this as&#xA;   * &lt;code>(node1.documentOrderPosition &amp;lt;= node2.documentOrderPosition)&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="index1">
          <typeReference xsi:type="types:Int">
            <comments>// These return NULL if the node doesn't belong to this document.</comments>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="index2">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@parameters.1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@statements.0/@variable"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@statements.1/@variable"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../DTM.class.xmi#//@classifiers.0/@members.0"/>
            </children>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@statements.0/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.101/@statements.1/@variable"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isCharacterElementContentWhitespace">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   *     2. [element content whitespace] A boolean indicating whether the&#xA;   *        character is white space appearing within element content (see [XML],&#xA;   *        2.10 &quot;White Space Handling&quot;). Note that validating XML processors are&#xA;   *        required by XML 1.0 to provide this information. If there is no&#xA;   *        declaration for the containing element, this property has no value for&#xA;   *        white space characters. If no declaration has been read, but the [all&#xA;   *        declarations processed] property of the document information item is&#xA;   *        false (so there may be an unread declaration), then the value of this&#xA;   *        property is unknown for white space characters. It is always false for&#xA;   *        characters that are not white space.&#xA;   *&#xA;   * @param nodeHandle the node ID.&#xA;   * @return &lt;code>true&lt;/code> if the character data is whitespace;&#xA;   *         &lt;code>false&lt;/code> otherwise.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>// %TBD%</comments>
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isDocumentAllDeclarationsProcessed">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="documentHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   *    10. [all declarations processed] This property is not strictly speaking&#xA;   *        part of the infoset of the document. Rather it is an indication of&#xA;   *        whether the processor has read the complete DTD. Its value is a&#xA;   *        boolean. If it is false, then certain properties (indicated in their&#xA;   *        descriptions below) may be unknown. If it is true, those properties&#xA;   *        are never unknown.&#xA;   *&#xA;   * @param the document handle&#xA;   *&#xA;   * @param documentHandle A node handle that must identify a document.&#xA;   * @return &lt;code>true&lt;/code> if all declarations were processed;&#xA;   *         &lt;code>false&lt;/code> otherwise.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isAttributeSpecified">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   *     5. [specified] A flag indicating whether this attribute was actually&#xA;   *        specified in the start-tag of its element, or was defaulted from the&#xA;   *        DTD.&#xA;   *&#xA;   * @param attributeHandle The attribute handle in question.&#xA;   *&#xA;   * @return &lt;code>true&lt;/code> if the attribute was specified;&#xA;   *         &lt;code>false&lt;/code> if it was defaulted.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="dispatchCharactersEvents">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>xml</namespaces>
          <namespaces>sax</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/ContentHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="normalize">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ========== Direct SAX Dispatch, for optimization purposes ========</comments>
        <comments>/**&#xA;   * Directly call the&#xA;   * characters method on the passed ContentHandler for the&#xA;   * string-value of the given node (see http://www.w3.org/TR/xpath#data-model&#xA;   * for the definition of a node's string-value). Multiple calls to the&#xA;   * ContentHandler's characters methods may well occur for a single call to&#xA;   * this method.&#xA;   *&#xA;   * @param nodeHandle The node ID.&#xA;   * @param ch A non-null reference to a ContentHandler.&#xA;   * @param normalize true if the content should be normalized according to&#xA;   * the rules for the XPath&#xA;   * &lt;a href=&quot;http://www.w3.org/TR/xpath#function-normalize-space&quot;>normalize-space&lt;/a>&#xA;   * function.&#xA;   *&#xA;   * @throws org.xml.sax.SAXException&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="dispatchToEvents">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>xml</namespaces>
          <namespaces>sax</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/ContentHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Directly create SAX parser events from a subtree.&#xA;   *&#xA;   * @param nodeHandle The node ID.&#xA;   * @param ch A non-null reference to a ContentHandler.&#xA;   *&#xA;   * @throws org.xml.sax.SAXException&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>w3c</namespaces>
        <namespaces>dom</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return an DOM node for the given node.&#xA;   *&#xA;   * @param nodeHandle The node ID.&#xA;   *&#xA;   * @return A node representation of the DTM node.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="DTMNodeProxy.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.107/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="appendChild">
      <comments>//&quot;appendChild not yet supported!&quot;);</comments>
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newChild">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clone">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cloneDepth">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ==== Construction methods (may not be supported by some implementations!) =====</comments>
        <comments>/**&#xA;   * Append a child to the end of the document. Please note that the node&#xA;   * is always cloned if it is owned by another document.&#xA;   *&#xA;   * &lt;p>%REVIEW% &quot;End of the document&quot; needs to be defined more clearly.&#xA;   * Does it become the last child of the Document? Of the root element?&lt;/p>&#xA;   *&#xA;   * @param newChild Must be a valid new node handle.&#xA;   * @param clone true if the child should be cloned into the document.&#xA;   * @param cloneDepth if the clone argument is true, specifies that the&#xA;   *                   clone should include all it's children.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.110">
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../res/XMLMessages.class.xmi#//@classifiers.0/@members.8"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0/@members.49"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="literals:NullLiteral"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../res/XMLMessages.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="appendTextChild">
      <comments>//&quot;appendTextChild not yet supported!&quot;);</comments>
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Append a text node child that will be constructed from a string,&#xA;   * to the end of the document.&#xA;   *&#xA;   * &lt;p>%REVIEW% &quot;End of the document&quot; needs to be defined more clearly.&#xA;   * Does it become the last child of the Document? Of the root element?&lt;/p>&#xA;   *&#xA;   * @param str Non-null reverence to a string.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.110">
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../res/XMLMessages.class.xmi#//@classifiers.0/@members.8"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0/@members.49"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../res/XMLErrorResources.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="literals:NullLiteral"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../res/XMLMessages.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="error">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="msg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Simple error for asserts and the like.&#xA;   *&#xA;   * @param msg Error message to report.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../DTMException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.110/@parameters.0"/>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getShouldStripWhitespace">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Find out whether or not to strip whispace nodes.&#xA;   *&#xA;   *&#xA;   * @return whether or not to strip whispace nodes.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="pushShouldStripWhitespace">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="shouldStrip">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Set whether to strip whitespaces and push in current value of&#xA;   * m_shouldStripWS in m_shouldStripWhitespaceStack.&#xA;   *&#xA;   * @param shouldStrip Flag indicating whether to strip whitespace nodes&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../utils/BoolStack.class.xmi#//@classifiers.0/@members.7"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.0"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="literals:NullLiteral"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="popShouldStripWhitespace">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Set whether to strip whitespaces at this point by popping out&#xA;   * m_shouldStripWhitespaceStack.&#xA;   *&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../utils/BoolStack.class.xmi#//@classifiers.0/@members.9"/>
              </next>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="literals:NullLiteral"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setShouldStripWhitespace">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="shouldStrip">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Set whether to strip whitespaces and set the top of the stack to&#xA;   * the current value of m_shouldStripWS.&#xA;   *&#xA;   *&#xA;   * @param shouldStrip Flag indicating whether to strip whitespace nodes&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.114/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../utils/BoolStack.class.xmi#//@classifiers.0/@members.10"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.114/@parameters.0"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="literals:NullLiteral"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="documentRegistration">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * A dummy routine to satisify the abstract interface. If the DTM&#xA;   * implememtation that extends the default base requires notification&#xA;   * of registration, they can override this method.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="documentRelease">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * A dummy routine to satisify the abstract interface. If the DTM&#xA;   * implememtation that extends the default base requires notification&#xA;   * when the document is being released, they can override this method&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="migrateTo">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mgr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    * Migrate a DTM built with an old DTMManager to a new DTMManager.&#xA;    * After the migration, the new DTMManager will treat the DTM as&#xA;    * one that is built by itself.&#xA;    * This is used to support DTM sharing between multiple transformations.&#xA;    * @param manager the DTMManager&#xA;    */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.117/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="DTMManagerDefault.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.117/@parameters.0"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="DTMManagerDefault.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.117/@parameters.0"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getManager">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DTMManager.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Query which DTMManager this DTM is currently being handled by.&#xA;&#x9;  * &#xA;&#x9;  * %REVEW% Should this become part of the base DTM API?&#xA;&#x9;  * &#xA;&#x9;  * @return a DTMManager, or null if this is a &quot;stand-alone&quot; DTM.&#xA;&#x9;  */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDTMIDs">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../utils/SuballocatedIntVector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Query which DTMIDs this DTM is currently using within the DTMManager.&#xA;&#x9;  * &#xA;&#x9;  * %REVEW% Should this become part of the base DTM API?&#xA;&#x9;  * &#xA;&#x9;  * @return an IntVector, or null if this is a &quot;stand-alone&quot; DTM.&#xA;&#x9;  */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>// for dumpDTM</comments>
      <comments>/**&#xA; * The &lt;code>DTMDefaultBase&lt;/code> class serves as a helper base for DTMs.&#xA; * It sets up structures for navigation and type, while leaving data&#xA; * management and construction to the derived classes.&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../DTM.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
