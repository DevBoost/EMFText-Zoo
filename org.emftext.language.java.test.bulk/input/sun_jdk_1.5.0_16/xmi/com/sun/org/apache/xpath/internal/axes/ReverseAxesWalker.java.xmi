<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16" name="ReverseAxesWalker.java">
  <comments>/*&#xA; * Copyright 1999-2004 The Apache Software Foundation.&#xA; *&#xA; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#xA; * you may not use this file except in compliance with the License.&#xA; * You may obtain a copy of the License at&#xA; *&#xA; *     http://www.apache.org/licenses/LICENSE-2.0&#xA; *&#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <comments>/*&#xA; * $Id: ReverseAxesWalker.java,v 1.14 2004/02/17 04:32:08 minchau Exp $&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xpath</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>axes</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>dtm</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../xml/internal/dtm/DTM.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>dtm</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../xml/internal/dtm/DTMAxisIterator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xpath</namespaces>
    <namespaces>internal</namespaces>
    <classifier xsi:type="classifiers:Class" href="../XPathContext.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ReverseAxesWalker">
    <members xsi:type="members:Constructor" name="ReverseAxesWalker">
      <comments>/**&#xA;   * Construct an AxesWalker using a LocPathIterator.&#xA;   *&#xA;   * @param locPathIterator The location path iterator that 'owns' this walker.&#xA;   */</comments>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="locPathIterator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="LocPathIterator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="axis">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:ClassMethod" name="setRoot">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="root">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Set the root node of the TreeWalker.&#xA;   * (Not part of the DOM2 TreeWalker interface).&#xA;   *&#xA;   * @param root The context node of this step.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.17"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../xml/internal/dtm/DTM.class.xmi#//@classifiers.0/@members.19"/>
              <arguments xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="AxesWalker.class.xmi#//@classifiers.0/@members.6"/>
              </arguments>
            </next>
            <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.28"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../xml/internal/dtm/DTMAxisIterator.class.xmi#//@classifiers.0/@members.7"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="detach">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Detaches the walker from the set which it iterated over, releasing&#xA;   * any computational resources and placing the iterator in the INVALID&#xA;   * state.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.14"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getNextNode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Get the next node in document order on the axes.&#xA;   *&#xA;   * @return the next node in document order on the axes, or null.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../xml/internal/dtm/DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../../../xml/internal/dtm/DTM.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="PredicatedNodeTest.class.xmi#//@classifiers.0/@members.1"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="next">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../xml/internal/dtm/DTMAxisIterator.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="AxesWalker.class.xmi#//@classifiers.0/@members.3"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:BooleanLiteral"/>
          </expression>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="AxesWalker.class.xmi#//@classifiers.0/@members.3"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="PredicatedNodeTest.class.xmi#//@classifiers.0/@members.1"/>
              </next>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:BooleanLiteral" value="true"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../xml/internal/dtm/DTM.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../../../xml/internal/dtm/DTM.class.xmi#//@classifiers.0"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@variable"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isReverseAxes">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Tells if this is a reverse axes.  Overrides AxesWalker#isReverseAxes.&#xA;   *&#xA;   * @return true for this class.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getProximityPosition">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="predicateIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>//  /**</comments>
        <comments>//   *  Set the root node of the TreeWalker.</comments>
        <comments>//   *</comments>
        <comments>//   * @param root The context node of this step.</comments>
        <comments>//   */</comments>
        <comments>//  public void setRoot(int root)</comments>
        <comments>//  {</comments>
        <comments>//    super.setRoot(root);</comments>
        <comments>//  }</comments>
        <comments>/**&#xA;   * Get the current sub-context position.  In order to do the&#xA;   * reverse axes count, for the moment this re-searches the axes&#xA;   * up to the predicate.  An optimization on this is to cache&#xA;   * the nodes searched, but, for the moment, this case is probably&#xA;   * rare enough that the added complexity isn't worth it.&#xA;   *&#xA;   * @param predicateIndex The predicate index of the proximity position.&#xA;   *&#xA;   * @return The pridicate index, or -1.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// A negative predicate index seems to occur with</comments>
        <comments>// (preceding-sibling::*|following-sibling::*)/ancestor::*[position()]/*[position()]</comments>
        <comments>// -sb</comments>
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="count">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference">
            <arraySelectors>
              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
            </arraySelectors>
            <target xsi:type="members:Field" href="PredicatedNodeTest.class.xmi#//@classifiers.0/@members.5"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="savedWalker">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="AxesWalker.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="WalkingIterator.class.xmi#//@classifiers.0/@members.12"/>
                </next>
                <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.9"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="clone">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0"/>
                </typeReference>
                <initialValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                  <child xsi:type="references:SelfReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.11"/>
                    </next>
                    <self xsi:type="literals:This"/>
                  </child>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.1/@statements.0/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.1">
                  <arguments xsi:type="references:SelfReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.15"/>
                    </next>
                    <self xsi:type="literals:This"/>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.1/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="PredicatedNodeTest.class.xmi#//@classifiers.0/@members.12"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.1/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.21"/>
                  <arguments xsi:type="literals:NullLiteral"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.1/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.19"/>
                  <arguments xsi:type="literals:NullLiteral"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="WalkingIterator.class.xmi#//@classifiers.0/@members.11"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.1/@statements.0/@variable"/>
                </next>
                <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.9"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.1/@variable">
                  <comments>// Count 'em all</comments>
                </child>
                <operator xsi:type="operators:PlusPlus"/>
              </expression>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="next">
                <typeReference xsi:type="types:Int"/>
              </variable>
            </statements>
            <statements xsi:type="statements:WhileLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.1/@variable"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../xml/internal/dtm/DTM.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../../../xml/internal/dtm/DTM.class.xmi#//@classifiers.0"/>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.1/@statements.7/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.1/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.25"/>
                      </next>
                    </value>
                  </expression>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
                  </arraySelectors>
                  <target xsi:type="members:Field" href="PredicatedNodeTest.class.xmi#//@classifiers.0/@members.5"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.1/@variable"/>
              </expression>
            </statements>
            <catcheBlocks>
              <comments>// can't happen</comments>
              <parameter name="cnse">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/CloneNotSupportedException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
            <finallyBlock>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="WalkingIterator.class.xmi#//@classifiers.0/@members.11"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@statement/@statements.0/@variable"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.9"/>
                </expression>
              </statements>
            </finallyBlock>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.1/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.1/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="countProximityPosition">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;   * Count backwards one proximity position.&#xA;   *&#xA;   * @param i The predicate index.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference">
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
              </arraySelectors>
              <target xsi:type="members:Field" href="PredicatedNodeTest.class.xmi#//@classifiers.0/@members.5"/>
            </child>
            <operator xsi:type="operators:MinusMinus"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference"/>
            <target xsi:type="members:Field" href="PredicatedNodeTest.class.xmi#//@classifiers.0/@members.5"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLastPos">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xctxt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../XPathContext.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get the number of nodes in this node list.  The function is probably ill&#xA;   * named?&#xA;   *&#xA;   *&#xA;   * @param xctxt The XPath runtime context.&#xA;   *&#xA;   * @return the number of nodes in this node list.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="count">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="savedWalker">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="AxesWalker.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="WalkingIterator.class.xmi#//@classifiers.0/@members.12"/>
            </next>
            <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.9"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="clone">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0"/>
              </typeReference>
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.11"/>
                </next>
                <self xsi:type="literals:This"/>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@statements.0/@variable">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.1">
              <arguments xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.15"/>
                </next>
                <self xsi:type="literals:This"/>
              </arguments>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="PredicatedNodeTest.class.xmi#//@classifiers.0/@members.12"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:SelfReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="PredicatedNodeTest.class.xmi#//@classifiers.0/@members.11"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.21"/>
              <arguments xsi:type="literals:NullLiteral"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.19"/>
              <arguments xsi:type="literals:NullLiteral"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="WalkingIterator.class.xmi#//@classifiers.0/@members.11"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@statements.0/@variable"/>
            </next>
            <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.9"/>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="next">
            <typeReference xsi:type="types:Int">
              <comments>// Count 'em all</comments>
              <comments>// count = 1;</comments>
            </typeReference>
          </variable>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
                <operator xsi:type="operators:PlusPlus"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../xml/internal/dtm/DTM.class.xmi#//@classifiers.0/@members.0"/>
              </next>
              <target xsi:type="classifiers:Interface" href="../../../xml/internal/dtm/DTM.class.xmi#//@classifiers.0"/>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@statements.6/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.25"/>
                  </next>
                </value>
              </expression>
            </children>
          </condition>
        </statements>
        <catcheBlocks>
          <comments>// can't happen</comments>
          <parameter name="cnse">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/CloneNotSupportedException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <finallyBlock>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="WalkingIterator.class.xmi#//@classifiers.0/@members.11"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@variable"/>
              </next>
              <target xsi:type="members:ClassMethod" href="AxesWalker.class.xmi#//@classifiers.0/@members.9"/>
            </expression>
          </statements>
        </finallyBlock>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isDocOrdered">
      <comments>// I think.</comments>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Returns true if all the nodes in the iteration well be returned in document &#xA;   * order.&#xA;   * Warning: This can only be called after setRoot has been called!&#xA;   * &#xA;   * @return false.&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:Field" name="m_iterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../xml/internal/dtm/DTMAxisIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** The DTM inner traversal class, that corresponds to the super axis. */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Walker for a reverse axes.&#xA; * @see &lt;a href=&quot;http://www.w3.org/TR/xpath#predicates&quot;>XPath 2.4 Predicates&lt;/a>&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="AxesWalker.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
