<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16" name="XMLDTDContentModelHandler.java">
  <comments>/*&#xA; * The Apache Software License, Version 1.1&#xA; *&#xA; *&#xA; * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights &#xA; * reserved.&#xA; *&#xA; * Redistribution and use in source and binary forms, with or without&#xA; * modification, are permitted provided that the following conditions&#xA; * are met:&#xA; *&#xA; * 1. Redistributions of source code must retain the above copyright&#xA; *    notice, this list of conditions and the following disclaimer. &#xA; *&#xA; * 2. Redistributions in binary form must reproduce the above copyright&#xA; *    notice, this list of conditions and the following disclaimer in&#xA; *    the documentation and/or other materials provided with the&#xA; *    distribution.&#xA; *&#xA; * 3. The end-user documentation included with the redistribution,&#xA; *    if any, must include the following acknowledgment:  &#xA; *       &quot;This product includes software developed by the&#xA; *        Apache Software Foundation (http://www.apache.org/).&quot;&#xA; *    Alternately, this acknowledgment may appear in the software itself,&#xA; *    if and wherever such third-party acknowledgments normally appear.&#xA; *&#xA; * 4. The names &quot;Xerces&quot; and &quot;Apache Software Foundation&quot; must&#xA; *    not be used to endorse or promote products derived from this&#xA; *    software without prior written permission. For written &#xA; *    permission, please contact apache@apache.org.&#xA; *&#xA; * 5. Products derived from this software may not be called &quot;Apache&quot;,&#xA; *    nor may &quot;Apache&quot; appear in their name, without prior written&#xA; *    permission of the Apache Software Foundation.&#xA; *&#xA; * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED&#xA; * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES&#xA; * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE&#xA; * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR&#xA; * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xA; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xA; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF&#xA; * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND&#xA; * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,&#xA; * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT&#xA; * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF&#xA; * SUCH DAMAGE.&#xA; * ====================================================================&#xA; *&#xA; * This software consists of voluntary contributions made by many&#xA; * individuals on behalf of the Apache Software Foundation and was&#xA; * originally based on software copyright (c) 1999, International&#xA; * Business Machines, Inc., http://www.apache.org.  For more&#xA; * information on the Apache Software Foundation, please see&#xA; * &lt;http://www.apache.org/>.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xerces</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>xni</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>xni</namespaces>
    <namespaces>parser</namespaces>
    <classifier xsi:type="classifiers:Interface" href="parser/XMLDTDContentModelSource.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="XMLDTDContentModelHandler">
    <members xsi:type="members:Field" name="SEPARATOR_CHOICE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Constants</comments>
        <comments>//</comments>
        <comments>// separators</comments>
        <comments>/** &#xA;     * A choice separator for children and mixed content models. This&#xA;     * separator is used to specify that the allowed child is one of a&#xA;     * collection.&#xA;     * &lt;p>&#xA;     * For example:&#xA;     * &lt;pre>&#xA;     * &amp;lt;!ELEMENT elem (foo|bar)&amp;gt;&#xA;     * &amp;lt;!ELEMENT elem (foo|bar+)&amp;gt;&#xA;     * &amp;lt;!ELEMENT elem (foo|bar|baz)&amp;gt;&#xA;     * &amp;lt;!ELEMENT elem (#PCDATA|foo|bar)*&amp;gt;&#xA;     * &lt;/pre>&#xA;     *&#xA;     * @see #SEPARATOR_SEQUENCE&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SEPARATOR_SEQUENCE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A sequence separator for children content models. This separator &#xA;     * is used to specify that the allowed children must follow in the&#xA;     * specified sequence.&#xA;     * &lt;p>&#xA;     * &lt;pre>&#xA;     * &amp;lt;!ELEMENT elem (foo,bar)&amp;gt;&#xA;     * &amp;lt;!ELEMENT elem (foo,bar*)&amp;gt;&#xA;     * &amp;lt;!ELEMENT elem (foo,bar,baz)&amp;gt;&#xA;     * &lt;/pre>&#xA;     *&#xA;     * @see #SEPARATOR_CHOICE&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="OCCURS_ZERO_OR_ONE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// occurrence counts</comments>
        <comments>/** &#xA;     * This occurrence count limits the element, choice, or sequence in a&#xA;     * children content model to zero or one. In other words, the child&#xA;     * is optional.&#xA;     * &lt;p>&#xA;     * For example:&#xA;     * &lt;pre>&#xA;     * &amp;lt;!ELEMENT elem (foo?)&amp;gt;&#xA;     * &lt;/pre>&#xA;     *&#xA;     * @see #OCCURS_ZERO_OR_MORE&#xA;     * @see #OCCURS_ONE_OR_MORE&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="OCCURS_ZERO_OR_MORE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * This occurrence count limits the element, choice, or sequence in a&#xA;     * children content model to zero or more. In other words, the child&#xA;     * may appear an arbitrary number of times, or not at all. This&#xA;     * occurrence count is also used for mixed content models.&#xA;     * &lt;p>&#xA;     * For example:&#xA;     * &lt;pre>&#xA;     * &amp;lt;!ELEMENT elem (foo*)&amp;gt;&#xA;     * &amp;lt;!ELEMENT elem (#PCDATA|foo|bar)*&amp;gt;&#xA;     * &lt;/pre>&#xA;     *&#xA;     * @see #OCCURS_ZERO_OR_ONE&#xA;     * @see #OCCURS_ONE_OR_MORE&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="OCCURS_ONE_OR_MORE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * This occurrence count limits the element, choice, or sequence in a&#xA;     * children content model to one or more. In other words, the child&#xA;     * may appear an arbitrary number of times, but must appear at least&#xA;     * once.&#xA;     * &lt;p>&#xA;     * For example:&#xA;     * &lt;pre>&#xA;     * &amp;lt;!ELEMENT elem (foo+)&amp;gt;&#xA;     * &lt;/pre>&#xA;     *&#xA;     * @see #OCCURS_ZERO_OR_ONE&#xA;     * @see #OCCURS_ZERO_OR_MORE&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="startContentModel">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="elementName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="augmentations">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Augmentations.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// XMLDTDContentModelHandler methods</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * The start of a content model. Depending on the type of the content&#xA;     * model, specific methods may be called between the call to the&#xA;     * startContentModel method and the call to the endContentModel method.&#xA;     * &#xA;     * @param elementName The name of the element.&#xA;     * @param augmentations Additional information that may include infoset&#xA;     *                      augmentations.&#xA;     *&#xA;     * @throws XNIException Thrown by handler to signal an error.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="any">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="augmentations">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Augmentations.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * A content model of ANY. &#xA;     *&#xA;     * @param augmentations Additional information that may include infoset&#xA;     *                      augmentations.&#xA;     *&#xA;     * @throws XNIException Thrown by handler to signal an error.&#xA;     *&#xA;     * @see #empty&#xA;     * @see #startGroup&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="empty">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="augmentations">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Augmentations.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A content model of EMPTY.&#xA;     *&#xA;     * @throws XNIException Thrown by handler to signal an error.&#xA;     *&#xA;     * @param augmentations Additional information that may include infoset&#xA;     *                      augmentations.&#xA;     *&#xA;     * @see #any&#xA;     * @see #startGroup&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="startGroup">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="augmentations">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Augmentations.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A start of either a mixed or children content model. A mixed&#xA;     * content model will immediately be followed by a call to the&#xA;     * &lt;code>pcdata()&lt;/code> method. A children content model will&#xA;     * contain additional groups and/or elements.&#xA;     *&#xA;     * @param augmentations Additional information that may include infoset&#xA;     *                      augmentations.&#xA;     *&#xA;     * @throws XNIException Thrown by handler to signal an error.&#xA;     *&#xA;     * @see #any&#xA;     * @see #empty&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="pcdata">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="augmentations">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Augmentations.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The appearance of &quot;#PCDATA&quot; within a group signifying a&#xA;     * mixed content model. This method will be the first called&#xA;     * following the content model's &lt;code>startGroup()&lt;/code>.&#xA;     *&#xA;     * @param augmentations Additional information that may include infoset&#xA;     *                      augmentations.&#xA;     *     &#xA;     * @throws XNIException Thrown by handler to signal an error.&#xA;     *&#xA;     * @see #startGroup&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="element">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="elementName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="augmentations">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Augmentations.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A referenced element in a mixed or children content model.&#xA;     * &#xA;     * @param elementName The name of the referenced element.&#xA;     * @param augmentations Additional information that may include infoset&#xA;     *                      augmentations.&#xA;     *&#xA;     * @throws XNIException Thrown by handler to signal an error.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="separator">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="separator">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="augmentations">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Augmentations.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The separator between choices or sequences of a mixed or children&#xA;     * content model.&#xA;     * &#xA;     * @param separator The type of children separator.&#xA;     * @param augmentations Additional information that may include infoset&#xA;     *                      augmentations.&#xA;     *&#xA;     * @throws XNIException Thrown by handler to signal an error.&#xA;     *&#xA;     * @see #SEPARATOR_CHOICE&#xA;     * @see #SEPARATOR_SEQUENCE&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="occurrence">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="occurrence">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="augmentations">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Augmentations.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The occurrence count for a child in a children content model or&#xA;     * for the mixed content model group.&#xA;     * &#xA;     * @param occurrence The occurrence count for the last element&#xA;     *                   or group.&#xA;     * @param augmentations Additional information that may include infoset&#xA;     *                      augmentations.&#xA;     *&#xA;     * @throws XNIException Thrown by handler to signal an error.&#xA;     *&#xA;     * @see #OCCURS_ZERO_OR_ONE&#xA;     * @see #OCCURS_ZERO_OR_MORE&#xA;     * @see #OCCURS_ONE_OR_MORE&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="endGroup">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="augmentations">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Augmentations.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The end of a group for mixed or children content models.&#xA;     *&#xA;     * @param augmentations Additional information that may include infoset&#xA;     *                      augmentations.&#xA;     *&#xA;     * @throws XNIException Thrown by handler to signal an error.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="endContentModel">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="augmentations">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Augmentations.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The end of a content model.&#xA;     *&#xA;     * @param augmentations Additional information that may include infoset&#xA;     *                      augmentations.&#xA;     *&#xA;     * @throws XNIException Thrown by handler to signal an error.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setDTDContentModelSource">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="source">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="parser/XMLDTDContentModelSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// set content model source</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDTDContentModelSource">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="parser/XMLDTDContentModelSource.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// get content model source</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The DTD content model handler interface defines callback methods &#xA; * to report information items in DTD content models of an element&#xA; * declaration. Parser components interested in DTD content model&#xA; * information implement this interface and are registered as the DTD&#xA; * content model handler on the DTD content model source.&#xA; *&#xA; * @see XMLDTDHandler&#xA; *&#xA; * @author Andy Clark, IBM&#xA; *&#xA; * @version $Id: XMLDTDContentModelHandler.java,v 1.5 2002/12/07 00:07:51 neilg Exp $&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
