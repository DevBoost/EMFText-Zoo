<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16" name="DTM.java">
  <comments>/*&#xA; * Copyright 1999-2004 The Apache Software Foundation.&#xA; *&#xA; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#xA; * you may not use this file except in compliance with the License.&#xA; * You may obtain a copy of the License at&#xA; *&#xA; *     http://www.apache.org/licenses/LICENSE-2.0&#xA; *&#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <comments>/*&#xA; * $Id: DTM.java,v 1.13 2004/02/16 23:03:44 minchau Exp $&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>dtm</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>transform</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../javax/xml/transform/SourceLocator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>utils</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../utils/XMLString.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="DTM">
    <members xsi:type="members:Field" name="NULL">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Null node handles are represented by this value.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ROOT_NODE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// These nodeType mnemonics and values are deliberately the same as those</comments>
        <comments>// used by the DOM, for convenient mapping</comments>
        <comments>//</comments>
        <comments>// %REVIEW% Should we actually define these as initialized to,</comments>
        <comments>// eg. org.w3c.dom.Document.ELEMENT_NODE?</comments>
        <comments>/**&#xA;   * The node is a &lt;code>Root&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ELEMENT_NODE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The node is an &lt;code>Element&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ATTRIBUTE_NODE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The node is an &lt;code>Attr&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="TEXT_NODE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The node is a &lt;code>Text&lt;/code> node.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CDATA_SECTION_NODE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The node is a &lt;code>CDATASection&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ENTITY_REFERENCE_NODE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="5"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The node is an &lt;code>EntityReference&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ENTITY_NODE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The node is an &lt;code>Entity&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="PROCESSING_INSTRUCTION_NODE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="7"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The node is a &lt;code>ProcessingInstruction&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="COMMENT_NODE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The node is a &lt;code>Comment&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DOCUMENT_NODE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="9"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The node is a &lt;code>Document&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DOCUMENT_TYPE_NODE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The node is a &lt;code>DocumentType&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DOCUMENT_FRAGMENT_NODE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="11"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The node is a &lt;code>DocumentFragment&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NOTATION_NODE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="12"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The node is a &lt;code>Notation&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NAMESPACE_NODE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="13"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The node is a &lt;code>namespace node&lt;/code>. Note that this is not&#xA;   * currently a node type defined by the DOM API.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NTYPES">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="14"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The number of valid nodetypes.&#xA;   */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setFeature">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="featureId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="state">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ========= DTM Implementation Control Functions. ==============</comments>
        <comments>// %TBD% RETIRED -- do via setFeature if needed. Remove from impls.</comments>
        <comments>// public void setParseBlockSize(int blockSizeSuggestion);</comments>
        <comments>/**&#xA;   * Set an implementation dependent feature.&#xA;   * &lt;p>&#xA;   * %REVIEW% Do we really expect to set features on DTMs?&#xA;   *&#xA;   * @param featureId A feature URL.&#xA;   * @param state true if this feature should be on, false otherwise.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setProperty">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="property">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Set a run time property for this DTM instance.&#xA;   *&#xA;   * @param property a &lt;code>String&lt;/code> value&#xA;   * @param value an &lt;code>Object&lt;/code> value&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAxisTraverser">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DTMAxisTraverser.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="axis">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ========= Document Navigation Functions =========</comments>
        <comments>/**&#xA;   * This returns a stateless &quot;traverser&quot;, that can navigate over an&#xA;   * XPath axis, though not in document order.&#xA;   *&#xA;   * @param axis One of Axes.ANCESTORORSELF, etc.&#xA;   *&#xA;   * @return A DTMAxisIterator, or null if the givin axis isn't supported.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAxisIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DTMAxisIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="axis">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * This is a shortcut to the iterators that implement&#xA;   * XPath axes.&#xA;   * Returns a bare-bones iterator that must be initialized&#xA;   * with a start node (using iterator.setStartNode()).&#xA;   *&#xA;   * @param axis One of Axes.ANCESTORORSELF, etc.&#xA;   *&#xA;   * @return A DTMAxisIterator, or null if the givin axis isn't supported.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTypedAxisIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DTMAxisIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="axis">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get an iterator that can navigate over an XPath Axis, predicated by&#xA;   * the extended type ID.&#xA;   *&#xA;   * @param axis&#xA;   * @param type An extended type ID.&#xA;   *&#xA;   * @return A DTMAxisIterator, or null if the givin axis isn't supported.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hasChildNodes">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, test if it has child nodes.&#xA;   * &lt;p> %REVIEW% This is obviously useful at the DOM layer, where it&#xA;   * would permit testing this without having to create a proxy&#xA;   * node. It's less useful in the DTM API, where&#xA;   * (dtm.getFirstChild(nodeHandle)!=DTM.NULL) is just as fast and&#xA;   * almost as self-evident. But it's a convenience, and eases porting&#xA;   * of DOM code to DTM.  &lt;/p>&#xA;   *&#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @return int true if the given node has child nodes.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFirstChild">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, get the handle of the node's first child.&#xA;   *&#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @return int DTM node-number of first child,&#xA;   * or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLastChild">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, get the handle of the node's last child.&#xA;   *&#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @return int Node-number of last child,&#xA;   * or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributeNode">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="elementHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Retrieves an attribute node by local name and namespace URI&#xA;   *&#xA;   * %TBD% Note that we currently have no way to support&#xA;   * the DOM's old getAttribute() call, which accesses only the qname.&#xA;   *&#xA;   * @param elementHandle Handle of the node upon which to look up this attribute.&#xA;   * @param namespaceURI The namespace URI of the attribute to&#xA;   *   retrieve, or null.&#xA;   * @param name The local name of the attribute to&#xA;   *   retrieve.&#xA;   * @return The attribute node handle with the specified name (&#xA;   *   &lt;code>nodeName&lt;/code>) or &lt;code>DTM.NULL&lt;/code> if there is no such&#xA;   *   attribute.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFirstAttribute">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, get the index of the node's first attribute.&#xA;   *&#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @return Handle of first attribute, or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFirstNamespaceNode">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inScope">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, get the index of the node's first namespace node.&#xA;   *&#xA;   * @param nodeHandle handle to node, which should probably be an element&#xA;   *                   node, but need not be.&#xA;   *&#xA;   * @param inScope true if all namespaces in scope should be&#xA;   *                   returned, false if only the node's own&#xA;   *                   namespace declarations should be returned.&#xA;   * @return handle of first namespace,&#xA;   * or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNextSibling">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, advance to its next sibling.&#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @return int Node-number of next sibling,&#xA;   * or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPreviousSibling">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, find its preceeding sibling.&#xA;   * WARNING: DTM implementations may be asymmetric; in some,&#xA;   * this operation has been resolved by search, and is relatively expensive.&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return int Node-number of the previous sib,&#xA;   * or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNextAttribute">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, advance to the next attribute. If an&#xA;   * element, we advance to its first attribute; if an attr, we advance to&#xA;   * the next attr of the same element.&#xA;   *&#xA;   * @param nodeHandle int Handle of the node.&#xA;   * @return int DTM node-number of the resolved attr,&#xA;   * or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNextNamespaceNode">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="baseHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inScope">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a namespace handle, advance to the next namespace in the same scope&#xA;   * (local or local-plus-inherited, as selected by getFirstNamespaceNode)&#xA;   *&#xA;   * @param baseHandle handle to original node from where the first child&#xA;   * was relative to (needed to return nodes in document order).&#xA;   * @param namespaceHandle handle to node which must be of type&#xA;   * NAMESPACE_NODE.&#xA;   * NEEDSDOC @param inScope&#xA;   * @return handle of next namespace,&#xA;   * or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getParent">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, find its parent node.&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return int Node handle of parent,&#xA;   * or DTM.NULL to indicate none exists.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDocument">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a DTM which contains only a single document, &#xA;   * find the Node Handle of the  Document node. Note &#xA;   * that if the DTM is configured so it can contain multiple&#xA;   * documents, this call will return the Document currently&#xA;   * under construction -- but may return null if it's between&#xA;   * documents. Generally, you should use getOwnerDocument(nodeHandle)&#xA;   * or getDocumentRoot(nodeHandle) instead.&#xA;   *&#xA;   * @return int Node handle of document, or DTM.NULL if a shared DTM&#xA;   * can not tell us which Document is currently active.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getOwnerDocument">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, find the owning document node. This version mimics&#xA;   * the behavior of the DOM call by the same name.&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return int Node handle of owning document, or DTM.NULL if the node was&#xA;   * a Document.&#xA;   * @see getDocumentRoot(int nodeHandle)&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDocumentRoot">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, find the owning document node.&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return int Node handle of owning document, or the node itself if it was&#xA;   * a Document. (Note difference from DOM, where getOwnerDocument returns&#xA;   * null for the Document node.)&#xA;   * @see getOwnerDocument(int nodeHandle)&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStringValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../utils/XMLString.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get the string-value of a node as a String object&#xA;   * (see http://www.w3.org/TR/xpath#data-model&#xA;   * for the definition of a node's string-value).&#xA;   *&#xA;   * @param nodeHandle The node ID.&#xA;   *&#xA;   * @return A string object that represents the string-value of the given node.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStringValueChunkCount">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get number of character array chunks in&#xA;   * the string-value of a node.&#xA;   * (see http://www.w3.org/TR/xpath#data-model&#xA;   * for the definition of a node's string-value).&#xA;   * Note that a single text node may have multiple text chunks.&#xA;   *&#xA;   * @param nodeHandle The node ID.&#xA;   *&#xA;   * @return number of character array chunks in&#xA;   *         the string-value of a node.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStringValueChunk">
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="chunkIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="startAndLen">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get a character array chunk in the string-value of a node.&#xA;   * (see http://www.w3.org/TR/xpath#data-model&#xA;   * for the definition of a node's string-value).&#xA;   * Note that a single text node may have multiple text chunks.&#xA;   *&#xA;   * @param nodeHandle The node ID.&#xA;   * @param chunkIndex Which chunk to get.&#xA;   * @param startAndLen  A two-integer array which, upon return, WILL&#xA;   * BE FILLED with values representing the chunk's start position&#xA;   * within the returned character buffer and the length of the chunk.&#xA;   * @return The character array buffer within which the chunk occurs,&#xA;   * setting startAndLen's contents as a side-effect.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getExpandedTypeID">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, return an ID that represents the node's expanded name.&#xA;   *&#xA;   * @param nodeHandle The handle to the node in question.&#xA;   *&#xA;   * @return the expanded-name id of the node.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getExpandedTypeID">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespace">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given an expanded name, return an ID.  If the expanded-name does not&#xA;   * exist in the internal tables, the entry will be created, and the ID will&#xA;   * be returned.  Any additional nodes that are created that have this&#xA;   * expanded name will use this ID.&#xA;   *&#xA;   * @param nodeHandle The handle to the node in question.&#xA;   *&#xA;   * NEEDSDOC @param namespace&#xA;   * NEEDSDOC @param localName&#xA;   * NEEDSDOC @param type&#xA;   *&#xA;   * @return the expanded-name id of the node.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLocalNameFromExpandedNameID">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ExpandedNameID">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given an expanded-name ID, return the local name part.&#xA;   *&#xA;   * @param ExpandedNameID an ID that represents an expanded-name.&#xA;   * @return String Local name of this node.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNamespaceFromExpandedNameID">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ExpandedNameID">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given an expanded-name ID, return the namespace URI part.&#xA;   *&#xA;   * @param ExpandedNameID an ID that represents an expanded-name.&#xA;   * @return String URI value of this node's namespace, or null if no&#xA;   * namespace was resolved.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNodeName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, return its DOM-style node name. This will&#xA;   * include names such as #text or #document.&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return String Name of this node, which may be an empty string.&#xA;   * %REVIEW% Document when empty string is possible...&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNodeNameX">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, return the XPath node name.  This should be&#xA;   * the name as described by the XPath data model, NOT the DOM-style&#xA;   * name.&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return String Name of this node.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLocalName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, return its DOM-style localname.&#xA;   * (As defined in Namespaces, this is the portion of the name after the&#xA;   * prefix, if present, or the whole node name if no prefix exists)&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return String Local name of this node.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPrefix">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a namespace handle, return the prefix that the namespace decl is&#xA;   * mapping.&#xA;   * Given a node handle, return the prefix used to map to the namespace.&#xA;   * (As defined in Namespaces, this is the portion of the name before any&#xA;   * colon character).&#xA;   * @param postition int Handle of the node.&#xA;   *&#xA;   * &lt;p> %REVIEW% Are you sure you want &quot;&quot; for no prefix?  &lt;/p>&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return String prefix of this node's name, or &quot;&quot; if no explicit&#xA;   * namespace prefix was given.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNamespaceURI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, return its DOM-style namespace URI&#xA;   * (As defined in Namespaces, this is the declared URI which this node's&#xA;   * prefix -- or default in lieu thereof -- was mapped to.)&#xA;   * @param postition int Handle of the node.&#xA;   *&#xA;   * @param nodeHandle the id of the node.&#xA;   * @return String URI value of this node's namespace, or null if no&#xA;   * namespace was resolved.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNodeValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, return its node value. This is mostly&#xA;   * as defined by the DOM, but may ignore some conveniences.&#xA;   * &lt;p>&#xA;   * @param nodeHandle The node id.&#xA;   * @return String Value of this node, or null if not&#xA;   * meaningful for this node type.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNodeType">
      <typeReference xsi:type="types:Short"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Given a node handle, return its DOM-style node type.&#xA;   *&#xA;   * &lt;p>%REVIEW% Generally, returning short is false economy. Return int?&lt;/p>&#xA;   *&#xA;   * @param nodeHandle The node id.&#xA;   * @return int Node type, as per the DOM's Node._NODE constants.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLevel">
      <typeReference xsi:type="types:Short"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get the depth level of this node in the tree (equals 1 for&#xA;   * a parentless node).&#xA;   *&#xA;   * @param nodeHandle The node id.&#xA;   * @return the number of ancestors, plus one&#xA;   * @xsl.usage internal&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isSupported">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="feature">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="version">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ============== Document query functions ==============</comments>
        <comments>/**&#xA;   * Tests whether DTM DOM implementation implements a specific feature and&#xA;   * that feature is supported by this node.&#xA;   * @param feature The name of the feature to test.&#xA;   * @param version This is the version number of the feature to test.&#xA;   *   If the version is not&#xA;   *   specified, supporting any version of the feature will cause the&#xA;   *   method to return &lt;code>true&lt;/code>.&#xA;   * @return Returns &lt;code>true&lt;/code> if the specified feature is&#xA;   *   supported on this node, &lt;code>false&lt;/code> otherwise.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDocumentBaseURI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return the base URI of the document entity. If it is not known&#xA;   * (because the document was parsed from a socket connection or from&#xA;   * standard input, for example), the value of this property is unknown.&#xA;   *&#xA;   * @return the document base URI String object or null if unknown.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setDocumentBaseURI">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="baseURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Set the base URI of the document entity.&#xA;   *&#xA;   * @param baseURI the document base URI String object or null if unknown.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDocumentSystemIdentifier">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return the system identifier of the document entity. If&#xA;   * it is not known, the value of this property is null.&#xA;   *&#xA;   * @param nodeHandle The node id, which can be any valid node handle.&#xA;   * @return the system identifier String object or null if unknown.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDocumentEncoding">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return the name of the character encoding scheme&#xA;   *        in which the document entity is expressed.&#xA;   *&#xA;   * @param nodeHandle The node id, which can be any valid node handle.&#xA;   * @return the document encoding String object.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDocumentStandalone">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return an indication of the standalone status of the document,&#xA;   *        either &quot;yes&quot; or &quot;no&quot;. This property is derived from the optional&#xA;   *        standalone document declaration in the XML declaration at the&#xA;   *        beginning of the document entity, and has no value if there is no&#xA;   *        standalone document declaration.&#xA;   *&#xA;   * @param nodeHandle The node id, which can be any valid node handle.&#xA;   * @return the document standalone String object, either &quot;yes&quot;, &quot;no&quot;, or null.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDocumentVersion">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="documentHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return a string representing the XML version of the document. This&#xA;   * property is derived from the XML declaration optionally present at the&#xA;   * beginning of the document entity, and has no value if there is no XML&#xA;   * declaration.&#xA;   *&#xA;   * @param the document handle&#xA;   *&#xA;   * NEEDSDOC @param documentHandle&#xA;   *&#xA;   * @return the document version String object&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDocumentAllDeclarationsProcessed">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return an indication of&#xA;   * whether the processor has read the complete DTD. Its value is a&#xA;   * boolean. If it is false, then certain properties (indicated in their&#xA;   * descriptions below) may be unknown. If it is true, those properties&#xA;   * are never unknown.&#xA;   *&#xA;   * @return &lt;code>true&lt;/code> if all declarations were processed;&#xA;   *         &lt;code>false&lt;/code> otherwise.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDocumentTypeDeclarationSystemIdentifier">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   *   A document type declaration information item has the following properties:&#xA;   *&#xA;   *     1. [system identifier] The system identifier of the external subset, if&#xA;   *        it exists. Otherwise this property has no value.&#xA;   *&#xA;   * @return the system identifier String object, or null if there is none.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDocumentTypeDeclarationPublicIdentifier">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return the public identifier of the external subset,&#xA;   * normalized as described in 4.2.2 External Entities [XML]. If there is&#xA;   * no external subset or if it has no public identifier, this property&#xA;   * has no value.&#xA;   *&#xA;   * @param the document type declaration handle&#xA;   *&#xA;   * @return the public identifier String object, or null if there is none.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getElementById">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="elementId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Returns the &lt;code>Element&lt;/code> whose &lt;code>ID&lt;/code> is given by&#xA;   * &lt;code>elementId&lt;/code>. If no such element exists, returns&#xA;   * &lt;code>DTM.NULL&lt;/code>. Behavior is not defined if more than one element&#xA;   * has this &lt;code>ID&lt;/code>. Attributes (including those&#xA;   * with the name &quot;ID&quot;) are not of type ID unless so defined by DTD/Schema&#xA;   * information available to the DTM implementation.&#xA;   * Implementations that do not know whether attributes are of type ID or&#xA;   * not are expected to return &lt;code>DTM.NULL&lt;/code>.&#xA;   *&#xA;   * &lt;p>%REVIEW% Presumably IDs are still scoped to a single document,&#xA;   * and this operation searches only within a single document, right?&#xA;   * Wouldn't want collisions between DTMs in the same process.&lt;/p>&#xA;   *&#xA;   * @param elementId The unique &lt;code>id&lt;/code> value for an element.&#xA;   * @return The handle of the matching element.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUnparsedEntityURI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * The getUnparsedEntityURI function returns the URI of the unparsed&#xA;   * entity with the specified name in the same document as the context&#xA;   * node (see [3.3 Unparsed Entities]). It returns the empty string if&#xA;   * there is no such entity.&#xA;   * &lt;p>&#xA;   * XML processors may choose to use the System Identifier (if one&#xA;   * is provided) to resolve the entity, rather than the URI in the&#xA;   * Public Identifier. The details are dependent on the processor, and&#xA;   * we would have to support some form of plug-in resolver to handle&#xA;   * this properly. Currently, we simply return the System Identifier if&#xA;   * present, and hope that it a usable URI or that our caller can&#xA;   * map it to one.&#xA;   * %REVIEW% Resolve Public Identifiers... or consider changing function name.&#xA;   * &lt;p>&#xA;   * If we find a relative URI&#xA;   * reference, XML expects it to be resolved in terms of the base URI&#xA;   * of the document. The DOM doesn't do that for us, and it isn't&#xA;   * entirely clear whether that should be done here; currently that's&#xA;   * pushed up to a higher level of our application. (Note that DOM Level&#xA;   * 1 didn't store the document's base URI.)&#xA;   * %REVIEW% Consider resolving Relative URIs.&#xA;   * &lt;p>&#xA;   * (The DOM's statement that &quot;An XML processor may choose to&#xA;   * completely expand entities before the structure model is passed&#xA;   * to the DOM&quot; refers only to parsed entities, not unparsed, and hence&#xA;   * doesn't affect this function.)&#xA;   *&#xA;   * @param name A string containing the Entity Name of the unparsed&#xA;   * entity.&#xA;   *&#xA;   * @return String containing the URI of the Unparsed Entity, or an&#xA;   * empty string if no such entity exists.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="supportsPreStripping">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ============== Boolean methods ================</comments>
        <comments>/**&#xA;   * Return true if the xsl:strip-space or xsl:preserve-space was processed&#xA;   * during construction of the document contained in this DTM.&#xA;   *&#xA;   * NEEDSDOC ($objectName$) @return&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isNodeAfter">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="firstNodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="secondNodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Figure out whether nodeHandle2 should be considered as being later&#xA;   * in the document than nodeHandle1, in Document Order as defined&#xA;   * by the XPath model. This may not agree with the ordering defined&#xA;   * by other XML applications.&#xA;   * &lt;p>&#xA;   * There are some cases where ordering isn't defined, and neither are&#xA;   * the results of this function -- though we'll generally return true.&#xA;   * &lt;p>&#xA;   * %REVIEW% Make sure this does the right thing with attribute nodes!!!&#xA;   * &lt;p>&#xA;   * %REVIEW% Consider renaming for clarity. Perhaps isDocumentOrder(a,b)?&#xA;   *&#xA;   * @param firstNodeHandle DOM Node to perform position comparison on.&#xA;   * @param secondNodeHandle DOM Node to perform position comparison on.&#xA;   *&#xA;   * @return false if secondNode comes before firstNode, otherwise return true.&#xA;   * You can think of this as&#xA;   * &lt;code>(firstNode.documentOrderPosition &amp;lt;= secondNode.documentOrderPosition)&lt;/code>.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isCharacterElementContentWhitespace">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * 2. [element content whitespace] A boolean indicating whether a&#xA;   * text node represents white space appearing within element content&#xA;   * (see [XML], 2.10 &quot;White Space Handling&quot;).  Note that validating&#xA;   * XML processors are required by XML 1.0 to provide this&#xA;   * information... but that DOM Level 2 did not support it, since it&#xA;   * depends on knowledge of the DTD which DOM2 could not guarantee&#xA;   * would be available.&#xA;   * &lt;p>&#xA;   * If there is no declaration for the containing element, an XML&#xA;   * processor must assume that the whitespace could be meaningful and&#xA;   * return false. If no declaration has been read, but the [all&#xA;   * declarations processed] property of the document information item&#xA;   * is false (so there may be an unread declaration), then the value&#xA;   * of this property is indeterminate for white space characters and&#xA;   * should probably be reported as false. It is always false for text&#xA;   * nodes that contain anything other than (or in addition to) white&#xA;   * space.&#xA;   * &lt;p>&#xA;   * Note too that it always returns false for non-Text nodes.&#xA;   * &lt;p>&#xA;   * %REVIEW% Joe wants to rename this isWhitespaceInElementContent() for clarity&#xA;   *&#xA;   * @param nodeHandle the node ID.&#xA;   * @return &lt;code>true&lt;/code> if the node definitely represents whitespace in&#xA;   * element content; &lt;code>false&lt;/code> otherwise.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isDocumentAllDeclarationsProcessed">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="documentHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   *    10. [all declarations processed] This property is not strictly speaking&#xA;   *        part of the infoset of the document. Rather it is an indication of&#xA;   *        whether the processor has read the complete DTD. Its value is a&#xA;   *        boolean. If it is false, then certain properties (indicated in their&#xA;   *        descriptions below) may be unknown. If it is true, those properties&#xA;   *        are never unknown.&#xA;   *&#xA;   *&#xA;   * @param the document handle&#xA;   *&#xA;   * @param documentHandle A node handle that must identify a document.&#xA;   * @return &lt;code>true&lt;/code> if all declarations were processed;&#xA;   *         &lt;code>false&lt;/code> otherwise.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isAttributeSpecified">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   *     5. [specified] A flag indicating whether this attribute was actually&#xA;   *        specified in the start-tag of its element, or was defaulted from the&#xA;   *        DTD (or schema).&#xA;   *&#xA;   * @param the attribute handle&#xA;   *&#xA;   * NEEDSDOC @param attributeHandle&#xA;   * @return &lt;code>true&lt;/code> if the attribute was specified;&#xA;   *         &lt;code>false&lt;/code> if it was defaulted or the handle doesn't&#xA;   *            refer to an attribute node.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="dispatchCharactersEvents">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>xml</namespaces>
          <namespaces>sax</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/xml/sax/ContentHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="normalize">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ========== Direct SAX Dispatch, for optimization purposes ========</comments>
        <comments>/**&#xA;   * Directly call the&#xA;   * characters method on the passed ContentHandler for the&#xA;   * string-value of the given node (see http://www.w3.org/TR/xpath#data-model&#xA;   * for the definition of a node's string-value). Multiple calls to the&#xA;   * ContentHandler's characters methods may well occur for a single call to&#xA;   * this method.&#xA;   *&#xA;   * @param nodeHandle The node ID.&#xA;   * @param ch A non-null reference to a ContentHandler.&#xA;   * @param normalize true if the content should be normalized according to&#xA;   * the rules for the XPath&#xA;   * &lt;a href=&quot;http://www.w3.org/TR/xpath#function-normalize-space&quot;>normalize-space&lt;/a>&#xA;   * function.&#xA;   *&#xA;   * @throws org.xml.sax.SAXException&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="dispatchToEvents">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>xml</namespaces>
          <namespaces>sax</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/xml/sax/ContentHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Directly create SAX parser events representing the XML content of&#xA;   * a DTM subtree. This is a &quot;serialize&quot; operation.&#xA;   *&#xA;   * @param nodeHandle The node ID.&#xA;   * @param ch A non-null reference to a ContentHandler.&#xA;   *&#xA;   * @throws org.xml.sax.SAXException&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>w3c</namespaces>
        <namespaces>dom</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/w3c/dom/Node.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodeHandle">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return an DOM node for the given node.&#xA;   *&#xA;   * @param nodeHandle The node ID.&#xA;   *&#xA;   * @return A node representation of the DTM node.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="needsTwoThreads">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ==== Construction methods (may not be supported by some implementations!) =====</comments>
        <comments>// %REVIEW% What response occurs if not supported?</comments>
        <comments>/**&#xA;   * @return true iff we're building this model incrementally (eg&#xA;   * we're partnered with a CoroutineParser) and thus require that the&#xA;   * transformation and the parse run simultaneously. Guidance to the&#xA;   * DTMManager.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getContentHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/xml/sax/ContentHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// %REVIEW% Do these appends make any sense, should we support a</comments>
        <comments>// wider set of methods (like the &quot;append&quot; methods in the</comments>
        <comments>// current DTMDocumentImpl draft), or should we just support SAX</comments>
        <comments>// listener interfaces?  Should it be a separate interface to</comments>
        <comments>// make that distinction explicit?</comments>
        <comments>/**&#xA;   * Return this DTM's content handler, if it has one.&#xA;   *&#xA;   * @return null if this model doesn't respond to SAX events.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLexicalHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <namespaces>ext</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/xml/sax/ext/LexicalHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return this DTM's lexical handler, if it has one.&#xA;   *&#xA;   * %REVIEW% Should this return null if constrution already done/begun?&#xA;   *&#xA;   * @return null if this model doesn't respond to lexical SAX events.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getEntityResolver">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/xml/sax/EntityResolver.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return this DTM's EntityResolver, if it has one.&#xA;   *&#xA;   * @return null if this model doesn't respond to SAX entity ref events.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDTDHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/xml/sax/DTDHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return this DTM's DTDHandler, if it has one.&#xA;   *&#xA;   * @return null if this model doesn't respond to SAX dtd events.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getErrorHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/xml/sax/ErrorHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return this DTM's ErrorHandler, if it has one.&#xA;   *&#xA;   * @return null if this model doesn't respond to SAX error events.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDeclHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>xml</namespaces>
        <namespaces>sax</namespaces>
        <namespaces>ext</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/xml/sax/ext/DeclHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Return this DTM's DeclHandler, if it has one.&#xA;   *&#xA;   * @return null if this model doesn't respond to SAX Decl events.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="appendChild">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newChild">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clone">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cloneDepth">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Append a child to &quot;the end of the document&quot;. Please note that&#xA;   * the node is always cloned in a base DTM, since our basic behavior&#xA;   * is immutable so nodes can't be removed from their previous&#xA;   * location.&#xA;   *&#xA;   * &lt;p> %REVIEW%  DTM maintains an insertion cursor which&#xA;   * performs a depth-first tree walk as nodes come in, and this operation&#xA;   * is really equivalent to:&#xA;   *    insertionCursor.appendChild(document.importNode(newChild)))&#xA;   * where the insert point is the last element that was appended (or&#xA;   * the last one popped back to by an end-element operation).&lt;/p>&#xA;   *&#xA;   * @param newChild Must be a valid new node handle.&#xA;   * @param clone true if the child should be cloned into the document.&#xA;   * @param cloneDepth if the clone argument is true, specifies that the&#xA;   *                   clone should include all it's children.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="appendTextChild">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Append a text node child that will be constructed from a string,&#xA;   * to the end of the document. Behavior is otherwise like appendChild().&#xA;   *&#xA;   * @param str Non-null reference to a string.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSourceLocatorFor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../../javax/xml/transform/SourceLocator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Get the location of a node in the source document.&#xA;   *&#xA;   * @param node an &lt;code>int&lt;/code> value&#xA;   * @return a &lt;code>SourceLocator&lt;/code> value or null if no location&#xA;   * is available&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="documentRegistration">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * As the DTM is registered with the DTMManager, this method&#xA;   * will be called. This will give the DTM implementation a&#xA;   * chance to initialize any subsystems that are required to&#xA;   * build the DTM&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="documentRelease">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * As documents are released from the DTMManager, the DTM implementation&#xA;   * will be notified of the event. This will allow the DTM implementation&#xA;   * to shutdown any subsystem activity that may of been assoiated with&#xA;   * the active DTM Implementation.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="migrateTo">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="manager">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DTMManager.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    * Migrate a DTM built with an old DTMManager to a new DTMManager.&#xA;    * After the migration, the new DTMManager will treat the DTM as&#xA;    * one that is built by itself.&#xA;    * This is used to support DTM sharing between multiple transformations.&#xA;    * @param manager the DTMManager&#xA;    */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;code>DTM&lt;/code> is an XML document model expressed as a table&#xA; * rather than an object tree. It attempts to provide an interface to&#xA; * a parse tree that has very little object creation. (DTM&#xA; * implementations may also support incremental construction of the&#xA; * model, but that's hidden from the DTM API.)&#xA; *&#xA; * &lt;p>Nodes in the DTM are identified by integer &quot;handles&quot;.  A handle must&#xA; * be unique within a process, and carries both node identification and&#xA; * document identification.  It must be possible to compare two handles&#xA; * (and thus their nodes) for identity with &quot;==&quot;.&lt;/p>&#xA; *&#xA; * &lt;p>Namespace URLs, local-names, and expanded-names can all be&#xA; * represented by and tested as integer ID values.  An expanded name&#xA; * represents (and may or may not directly contain) a combination of&#xA; * the URL ID, and the local-name ID.  Note that the namespace URL id&#xA; * can be 0, which should have the meaning that the namespace is null.&#xA; * For consistancy, zero should not be used for a local-name index. &lt;/p>&#xA; *&#xA; * &lt;p>Text content of a node is represented by an index and length,&#xA; * permitting efficient storage such as a shared FastStringBuffer.&lt;/p>&#xA; *&#xA; * &lt;p>The model of the tree, as well as the general navigation model,&#xA; * is that of XPath 1.0, for the moment.  The model will eventually be&#xA; * adapted to match the XPath 2.0 data model, XML Schema, and&#xA; * InfoSet.&lt;/p>&#xA; *&#xA; * &lt;p>DTM does _not_ directly support the W3C's Document Object&#xA; * Model. However, it attempts to come close enough that an&#xA; * implementation of DTM can be created that wraps a DOM and vice&#xA; * versa.&lt;/p>&#xA; *&#xA; * &lt;p>&lt;strong>Please Note:&lt;/strong> The DTM API is still&#xA; * &lt;strong>Subject To Change.&lt;/strong> This wouldn't affect most&#xA; * users, but might require updating some extensions.&lt;/p>&#xA; *&#xA; * &lt;p> The largest change being contemplated is a reconsideration of&#xA; * the Node Handle representation.  We are still not entirely sure&#xA; * that an integer packed with two numeric subfields is really the&#xA; * best solution. It has been suggested that we move up to a Long, to&#xA; * permit more nodes per document without having to reduce the number&#xA; * of slots in the DTMManager. There's even been a proposal that we&#xA; * replace these integers with &quot;cursor&quot; objects containing the&#xA; * internal node id and a pointer to the actual DTM object; this might&#xA; * reduce the need to continuously consult the DTMManager to retrieve&#xA; * the latter, and might provide a useful &quot;hook&quot; back into normal Java&#xA; * heap management.  But changing this datatype would have huge impact&#xA; * on Xalan's internals -- especially given Java's lack of C-style&#xA; * typedefs -- so we won't cut over unless we're convinced the new&#xA; * solution really would be an improvement!&lt;/p>&#xA; * */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
