<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../../../../java.ecore#/17" name="XMLDocumentFragmentScannerImpl.java">
  <comments>/*&#xA; * The Apache Software License, Version 1.1&#xA; *&#xA; *&#xA; * Copyright (c) 1999-2004 The Apache Software Foundation.  &#xA; * All rights reserved.&#xA; *&#xA; * Redistribution and use in source and binary forms, with or without&#xA; * modification, are permitted provided that the following conditions&#xA; * are met:&#xA; *&#xA; * 1. Redistributions of source code must retain the above copyright&#xA; *    notice, this list of conditions and the following disclaimer. &#xA; *&#xA; * 2. Redistributions in binary form must reproduce the above copyright&#xA; *    notice, this list of conditions and the following disclaimer in&#xA; *    the documentation and/or other materials provided with the&#xA; *    distribution.&#xA; *&#xA; * 3. The end-user documentation included with the redistribution,&#xA; *    if any, must include the following acknowledgment:  &#xA; *       &quot;This product includes software developed by the&#xA; *        Apache Software Foundation (http://www.apache.org/).&quot;&#xA; *    Alternately, this acknowledgment may appear in the software itself,&#xA; *    if and wherever such third-party acknowledgments normally appear.&#xA; *&#xA; * 4. The names &quot;Xerces&quot; and &quot;Apache Software Foundation&quot; must&#xA; *    not be used to endorse or promote products derived from this&#xA; *    software without prior written permission. For written &#xA; *    permission, please contact apache@apache.org.&#xA; *&#xA; * 5. Products derived from this software may not be called &quot;Apache&quot;,&#xA; *    nor may &quot;Apache&quot; appear in their name, without prior written&#xA; *    permission of the Apache Software Foundation.&#xA; *&#xA; * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED&#xA; * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES&#xA; * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE&#xA; * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR&#xA; * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xA; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xA; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF&#xA; * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND&#xA; * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,&#xA; * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT&#xA; * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF&#xA; * SUCH DAMAGE.&#xA; * ====================================================================&#xA; *&#xA; * This software consists of voluntary contributions made by many&#xA; * individuals on behalf of the Apache Software Foundation and was&#xA; * originally based on software copyright (c) 1999, International&#xA; * Business Machines, Inc., http://www.apache.org.  For more&#xA; * information on the Apache Software Foundation, please see&#xA; * &lt;http://www.apache.org/>.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xerces</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>impl</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../java/io/CharConversionException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../java/io/EOFException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="io/MalformedByteSequenceException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>msg</namespaces>
    <classifier xsi:type="classifiers:Class" href="msg/XMLMessageFormatter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/AugmentationsImpl.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/XMLAttributesImpl.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/XMLChar.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/XMLSymbols.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>xni</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../xni/Augmentations.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>xni</namespaces>
    <classifier xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>xni</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../xni/XMLAttributes.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>xni</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>xni</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../xni/XMLResourceIdentifier.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>xni</namespaces>
    <classifier xsi:type="classifiers:Class" href="../xni/XMLString.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>xni</namespaces>
    <classifier xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>xni</namespaces>
    <namespaces>parser</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../xni/parser/XMLComponent.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>xni</namespaces>
    <namespaces>parser</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../xni/parser/XMLComponentManager.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>xni</namespaces>
    <namespaces>parser</namespaces>
    <classifier xsi:type="classifiers:Class" href="../xni/parser/XMLConfigurationException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>xni</namespaces>
    <namespaces>parser</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../xni/parser/XMLDocumentScanner.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>xni</namespaces>
    <namespaces>parser</namespaces>
    <classifier xsi:type="classifiers:Class" href="../xni/parser/XMLInputSource.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/SecurityManager.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="XMLDocumentFragmentScannerImpl">
    <comments>// class FragmentContentDispatcher</comments>
    <members xsi:type="members:Field" name="fSecurityManager">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../util/SecurityManager.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>//</comments>
        <comments>// Constants</comments>
        <comments>//</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="SCANNER_STATE_START_OF_MARKUP">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// scanner states</comments>
        <comments>/** Scanner state: start of markup. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SCANNER_STATE_COMMENT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Scanner state: comment. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SCANNER_STATE_PI">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Scanner state: processing instruction. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SCANNER_STATE_DOCTYPE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Scanner state: DOCTYPE. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SCANNER_STATE_ROOT_ELEMENT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Scanner state: root element. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SCANNER_STATE_CONTENT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="7"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Scanner state: content. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SCANNER_STATE_REFERENCE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Scanner state: reference. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SCANNER_STATE_END_OF_INPUT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="13"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Scanner state: end of input. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SCANNER_STATE_TERMINATED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="14"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Scanner state: terminated. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SCANNER_STATE_CDATA">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="15"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Scanner state: CDATA section. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SCANNER_STATE_TEXT_DECL">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Scanner state: Text declaration. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NAMESPACES">
      <initialValue xsi:type="expressions:AdditiveExpression">
        <children xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.2"/>
          </next>
          <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
        </children>
        <children xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.3"/>
          </next>
          <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
        </children>
        <additiveOperators xsi:type="operators:Addition"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// feature identifiers</comments>
        <comments>/** Feature identifier: namespaces. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NOTIFY_BUILTIN_REFS">
      <initialValue xsi:type="expressions:AdditiveExpression">
        <children xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.62"/>
          </next>
          <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
        </children>
        <children xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.84"/>
          </next>
          <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
        </children>
        <additiveOperators xsi:type="operators:Addition"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Feature identifier: notify built-in refereces. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ENTITY_RESOLVER">
      <initialValue xsi:type="expressions:AdditiveExpression">
        <children xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.90"/>
          </next>
          <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
        </children>
        <children xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.101"/>
          </next>
          <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
        </children>
        <additiveOperators xsi:type="operators:Addition"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// property identifiers</comments>
        <comments>/** Property identifier: entity resolver. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="RECOGNIZED_FEATURES">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
          <initialValues xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.0"/>
          </initialValues>
          <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
          <initialValues xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.2"/>
          </initialValues>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// recognized features and properties</comments>
        <comments>/** Recognized features. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="FEATURE_DEFAULTS">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="literals:NullLiteral"/>
          <initialValues xsi:type="literals:NullLiteral"/>
          <initialValues xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../java/lang/Boolean.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Boolean.class.xmi#//@classifiers.0"/>
          </initialValues>
          <initialValues xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../../../../../../java/lang/Boolean.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Boolean.class.xmi#//@classifiers.0"/>
          </initialValues>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Boolean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Feature defaults. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="RECOGNIZED_PROPERTIES">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.4"/>
          </initialValues>
          <initialValues xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.5"/>
          </initialValues>
          <initialValues xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.6"/>
          </initialValues>
          <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Recognized properties. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="PROPERTY_DEFAULTS">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="literals:NullLiteral"/>
          <initialValues xsi:type="literals:NullLiteral"/>
          <initialValues xsi:type="literals:NullLiteral"/>
          <initialValues xsi:type="literals:NullLiteral"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Property defaults. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DEBUG_SCANNER_STATE">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// debugging</comments>
        <comments>/** Debug scanner state. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DEBUG_DISPATCHER">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Debug dispatcher. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DEBUG_CONTENT_SCANNING">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Debug content dispatcher scanning. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="fDocumentHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>//</comments>
        <comments>// Data</comments>
        <comments>//</comments>
        <comments>// protected data</comments>
        <comments>/** Document handler. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fEntityStack">
      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
        <typeReference xsi:type="types:Int"/>
        <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Entity stack. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fMarkupDepth">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Markup depth. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fScannerState">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Scanner state. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fInScanContent">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** SubScanner state: inside scanContent method. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fHasExternalDTD">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** has external dtd */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fStandalone">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Standalone. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fElementAttributeLimit">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>//variable to restrict attribute limit</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fExternalSubsetResolver">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ExternalSubsetResolver.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** External subset resolver. **/</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fCurrentElement">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// element information</comments>
        <comments>/** Current element. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fElementStack">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.81"/>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.81"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Element stack. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fNotifyBuiltInRefs">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// other info</comments>
        <comments>/** Document system identifier. &#xA;     * REVISIT:  So what's this used for?  - NG&#xA;    * protected String fDocumentSystemId;&#xA;     ******/</comments>
        <comments>// features</comments>
        <comments>/** Notify built-in references. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fDispatcher">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.82"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// dispatchers</comments>
        <comments>/** Active dispatcher. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fContentDispatcher">
      <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.62"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.82"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Content dispatcher. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fElementQName">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// temporary variables</comments>
        <comments>/** Element QName. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fAttributeQName">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Attribute QName. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fAttributes">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../util/XMLAttributesImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../util/XMLAttributesImpl.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Element attributes. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fTempString">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/XMLString.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XMLString.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** String. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fTempString2">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/XMLString.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XMLString.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** String. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fStrings">
      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Array of 3 strings. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fStringBuffer">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** String buffer. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fStringBuffer2">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** String buffer. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fQName">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Another QName. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fSingleChar">
      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
        <typeReference xsi:type="types:Char"/>
        <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      </initialValue>
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Single character array. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="fExternalEntity">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>XMLEntityManager</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="XMLEntityManager$ExternalEntity.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>XMLEntityManager</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="XMLEntityManager$ExternalEntity.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** External entity. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fSawSpace">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &#xA;     * Saw spaces after element name or between attributes.&#xA;     * &#xA;     * This is reserved for the case where scanning of a start element spans&#xA;     * several methods, as is the case when scanning the start of a root element &#xA;     * where a DTD external subset may be read after scanning the element name.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="XMLDocumentFragmentScannerImpl">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Constructors</comments>
        <comments>//</comments>
        <comments>/** Default constructor. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="setInputSource">
      <comments>//fDocumentSystemId = fEntityManager.expandSystemId(inputSource.getSystemId());</comments>
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inputSource">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/parser/XMLInputSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// &lt;init>()</comments>
        <comments>//</comments>
        <comments>// XMLDocumentScanner methods</comments>
        <comments>//</comments>
        <comments>/** &#xA;     * Sets the input source. &#xA;     *&#xA;     * @param inputSource The input source.&#xA;     *&#xA;     * @throws IOException Thrown on i/o error.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="XMLEntityManager.class.xmi#//@classifiers.0/@members.64"/>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.14"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="XMLEntityManager.class.xmi#//@classifiers.0/@members.80"/>
            <arguments xsi:type="references:StringReference" value="$fragment$"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
            <arguments xsi:type="literals:BooleanLiteral"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          </next>
          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.14"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scanDocument">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="complete">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// setInputSource(XMLInputSource)</comments>
        <comments>/** &#xA;     * Scans a document.&#xA;     *&#xA;     * @param complete True if the scanner should scan the document&#xA;     *                 completely, pushing all events to the registered&#xA;     *                 document handler. A value of false indicates that&#xA;     *                 that the scanner should only scan the next portion&#xA;     *                 of the document and return. A scanner instance is&#xA;     *                 permitted to completely scan a document if it does&#xA;     *                 not support this &quot;pull&quot; scanning model.&#xA;     *&#xA;     * @return True if there is more to scan, false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <comments>// reset entity scanner</comments>
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLEntityManager.class.xmi#//@classifiers.0/@members.84"/>
            </next>
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.14"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <comments>// keep dispatching &quot;events&quot;</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="XMLEntityManager.class.xmi#//@classifiers.0/@members.64"/>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.14"/>
        </expression>
      </statements>
      <statements xsi:type="statements:DoWhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.82/@members.0">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
                </next>
              </child>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>// return success</comments>
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="reset">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="componentManager">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../xni/parser/XMLComponentManager.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/parser/XMLConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// scanDocument(boolean):boolean</comments>
        <comments>//</comments>
        <comments>// XMLComponent methods</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Resets the component. The component can query the component manager&#xA;     * about any features and properties that affect the operation of the&#xA;     * component.&#xA;     * &#xA;     * @param componentManager The component manager.&#xA;     *&#xA;     * @throws SAXException Thrown by component on initialization error.&#xA;     *                      For example, if a feature or property is&#xA;     *                      required for the operation of the component, the&#xA;     *                      component manager may throw a &#xA;     *                      SAXNotRecognizedException or a&#xA;     *                      SAXNotSupportedException.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.34"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38">
          <comments>// other settings</comments>
          <comments>//fDocumentSystemId = null;</comments>
          <comments>// sax features</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../util/XMLAttributesImpl.class.xmi#//@classifiers.0/@members.12"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.9"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24">
            <comments>// initialize vars</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.81/@members.5"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <comments>// setup dispatcher</comments>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../util/SecurityManager.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../xni/parser/XMLComponentManager.class.xmi#//@classifiers.0/@members.1"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.100"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </child>
            </value>
          </expression>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../xni/parser/XMLConfigurationException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <children xsi:type="literals:NullLiteral"/>
              </expression>
            </child>
            <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../util/SecurityManager.class.xmi#//@classifiers.0/@members.11"/>
              </next>
            </expressionIf>
            <expressionElse xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.78">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:TryBlock">
            <comments>// parser settings have changed. reset them.</comments>
            <comments>// xerces features</comments>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../xni/parser/XMLComponentManager.class.xmi#//@classifiers.0/@members.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
                  </next>
                </value>
              </expression>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral"/>
                </expression>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../xni/parser/XMLConfigurationException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <comments>// xerces properties</comments>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="resolver">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../xni/parser/XMLComponentManager.class.xmi#//@classifiers.0/@members.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:ConditionalExpression">
                  <child xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:InstanceOfExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Interface" href="ExternalSubsetResolver.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.12/@statement/@statements.1/@statements.0/@variable"/>
                    </expression>
                  </child>
                  <expressionIf xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="ExternalSubsetResolver.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.12/@statement/@statements.1/@statements.0/@variable"/>
                  </expressionIf>
                  <expressionElse xsi:type="literals:NullLiteral"/>
                </value>
              </expression>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:NullLiteral"/>
                </expression>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../xni/parser/XMLConfigurationException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.11"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getRecognizedFeatures">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// reset(XMLComponentManager)</comments>
        <comments>/**&#xA;     * Returns a list of feature identifiers that are recognized by&#xA;     * this component. This method may return null if no features&#xA;     * are recognized by this component.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.5"/>
              </next>
            </expression>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setFeature">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="featureId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="state">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/parser/XMLConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// getRecognizedFeatures():String[]</comments>
        <comments>/**&#xA;     * Sets the state of a feature. This method is called by the component&#xA;     * manager any time after reset when a feature changes state. &#xA;     * &lt;p>&#xA;     * &lt;strong>Note:&lt;/strong> Components should silently ignore features&#xA;     * that do not affect the operation of the component.&#xA;     * &#xA;     * @param featureId The feature identifier.&#xA;     * @param state     The state of the feature.&#xA;     *&#xA;     * @throws SAXNotRecognizedException The component should not throw&#xA;     *                                   this exception.&#xA;     * @throws SAXNotSupportedException The component should not throw&#xA;     *                                  this exception.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.36"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.1"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Xerces properties</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="suffixLength">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                    </next>
                    <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.62"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
                </children>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </initialValue>
              <annotationsAndModifiers xsi:type="modifiers:Final"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.1"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@statements.1/@statement/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                    </next>
                    <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.84"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
                </children>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.43"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.84"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.42"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.62"/>
              </next>
              <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
            </arguments>
          </next>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getRecognizedProperties">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// setFeature(String,boolean)</comments>
        <comments>/**&#xA;     * Returns a list of property identifiers that are recognized by&#xA;     * this component. This method may return null if no properties&#xA;     * are recognized by this component.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.5"/>
              </next>
            </expression>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setProperty">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="propertyId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/parser/XMLConfigurationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// getRecognizedProperties():String[]</comments>
        <comments>/**&#xA;     * Sets the value of a property. This method is called by the component&#xA;     * manager any time after reset when a property changes value. &#xA;     * &lt;p>&#xA;     * &lt;strong>Note:&lt;/strong> Components should silently ignore properties&#xA;     * that do not affect the operation of the component.&#xA;     * &#xA;     * @param propertyId The property identifier.&#xA;     * @param value      The value of the property.&#xA;     *&#xA;     * @throws SAXNotRecognizedException The component should not throw&#xA;     *                                   this exception.&#xA;     * @throws SAXNotSupportedException The component should not throw&#xA;     *                                  this exception.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.35"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.1"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Xerces properties</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="suffixLength">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                    </next>
                    <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.90"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
                </children>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </initialValue>
              <annotationsAndModifiers xsi:type="modifiers:Final"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.14"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="XMLEntityManager.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.1"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Return"/>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@statements.1/@statement/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                    </next>
                    <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.97"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
                </children>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.43"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.97"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:ConditionalExpression">
                    <child xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:InstanceOfExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Interface" href="ExternalSubsetResolver.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.1"/>
                      </expression>
                    </child>
                    <expressionIf xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Interface" href="ExternalSubsetResolver.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.1"/>
                    </expressionIf>
                    <expressionElse xsi:type="literals:NullLiteral"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Return"/>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@statements.1/@statement/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                    </next>
                    <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.101"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
                </children>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.43"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.101"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.42"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.90"/>
              </next>
              <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
            </arguments>
          </next>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFeatureDefault">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Boolean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="featureId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// setProperty(String,Object)</comments>
        <comments>/** &#xA;     * Returns the default state for a feature, or null if this&#xA;     * component does not want to report a default value for this&#xA;     * feature.&#xA;     *&#xA;     * @param featureId The feature identifier.&#xA;     *&#xA;     * @since Xerces 2.2.0&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.0/@init"/>
                  </arraySelectors>
                </returnValue>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
              </next>
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.0/@init"/>
              </arraySelectors>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.0/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.0/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPropertyDefault">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="propertyId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// getFeatureDefault(String):Boolean</comments>
        <comments>/** &#xA;     * Returns the default state for a property, or null if this&#xA;     * component does not want to report a default value for this&#xA;     * property. &#xA;     *&#xA;     * @param propertyId The property identifier.&#xA;     *&#xA;     * @since Xerces 2.2.0&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.0/@init"/>
                  </arraySelectors>
                </returnValue>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0"/>
              </next>
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.0/@init"/>
              </arraySelectors>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.0/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.0/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setDocumentHandler">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="documentHandler">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// getPropertyDefault(String):Object</comments>
        <comments>//</comments>
        <comments>// XMLDocumentSource methods</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * setDocumentHandler&#xA;     * &#xA;     * @param documentHandler &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDocumentHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// setDocumentHandler(XMLDocumentHandler)</comments>
        <comments>/** Returns the document handler */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="startEntity">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="identifier">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../xni/XMLResourceIdentifier.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="encoding">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="augs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../xni/Augmentations.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// XMLEntityHandler methods</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * This method notifies of the start of an entity. The DTD has the&#xA;     * pseudo-name of &quot;[dtd]&quot; parameter entity names start with '%'; and&#xA;     * general entities are just specified by their name.&#xA;     * &#xA;     * @param name     The name of the entity.&#xA;     * @param identifier The resource identifier.&#xA;     * @param encoding The auto-detected IANA encoding name of the entity&#xA;     *                 stream. This value will be null in those situations&#xA;     *                 where the entity encoding is not auto-detected (e.g.&#xA;     *                 internal entities or a document entity that is&#xA;     *                 parsed from a java.io.Reader).&#xA;     * @param augs     Additional information that may include infoset augmentations&#xA;     *&#xA;     * @throws XNIException Thrown by handler to signal an error.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// keep track of this entity before fEntityDepth is increased</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="entityarray">
              <typeReference xsi:type="types:Int"/>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Int"/>
                <sizes xsi:type="expressions:MultiplicativeExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                </sizes>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@statements.0/@statement/@statements.0/@variable"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
                  <next xsi:type="references:IdentifierReference"/>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@statements.0/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.16"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
            <next xsi:type="references:IdentifierReference"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
            <arraySelectors>
              <position xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.16"/>
              </position>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.48"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.3"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// WFC:  entity declared in external subset in standalone doc</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
              <arguments xsi:type="references:StringReference" value="MSG_REFERENCE_TO_EXTERNALLY_DECLARED_ENTITY_WHEN_STANDALONE"/>
              <arguments xsi:type="arrays:ArrayInstantiationByValues">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <arrayInitializer>
                  <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0"/>
                </arrayInitializer>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLEntityManager.class.xmi#//@classifiers.0/@members.70"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0"/>
            </next>
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.14"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// call handler</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.3"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:StringReference" value="[xml]"/>
                </next>
              </child>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.18"/>
            </child>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="endEntity">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="augs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../xni/Augmentations.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// startEntity(String,XMLResourceIdentifier,String)</comments>
        <comments>/**&#xA;     * This method notifies the end of an entity. The DTD has the pseudo-name&#xA;     * of &quot;[dtd]&quot; parameter entity names start with '%'; and general entities &#xA;     * are just specified by their name.&#xA;     * &#xA;     * @param name The name of the entity.&#xA;     * @param augs Additional information that may include infoset augmentations&#xA;     *&#xA;     * @throws XNIException Thrown by handler to signal an error.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// flush possible pending output buffer - see scanContent</comments>
        <statement xsi:type="statements:Block">
          <comments>// make sure we know it's been flushed</comments>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.10"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../xni/XMLString.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26"/>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../xni/XMLString.class.xmi#//@classifiers.0/@members.2"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.49"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.1"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// make sure markup is properly balanced</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
              <arguments xsi:type="references:StringReference" value="MarkupEntityMismatch"/>
              <arguments xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
            <arraySelectors>
              <position xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.16"/>
              </position>
            </arraySelectors>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// call handler</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.9"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.1"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:StringReference" value="[xml]"/>
                </next>
              </child>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.18"/>
            </child>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createContentDispatcher">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.82"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// endEntity(String)</comments>
        <comments>//</comments>
        <comments>// Protected methods</comments>
        <comments>//</comments>
        <comments>// dispatcher factory methods</comments>
        <comments>/** Creates a content dispatcher. */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.83"/>
          </typeReference>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scanXMLDeclOrTextDecl">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scanningTextDecl">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// createContentDispatcher():Dispatcher</comments>
        <comments>// scanning methods</comments>
        <comments>/**&#xA;     * Scans an XML or text declaration.&#xA;     * &lt;p>&#xA;     * &lt;pre>&#xA;     * [23] XMLDecl ::= '&amp;lt;?xml' VersionInfo EncodingDecl? SDDecl? S? '?>'&#xA;     * [24] VersionInfo ::= S 'version' Eq (' VersionNum ' | &quot; VersionNum &quot;)&#xA;     * [80] EncodingDecl ::= S 'encoding' Eq ('&quot;' EncName '&quot;' |  &quot;'&quot; EncName &quot;'&quot; )&#xA;     * [81] EncName ::= [A-Za-z] ([A-Za-z0-9._] | '-')*&#xA;     * [32] SDDecl ::= S 'standalone' Eq ((&quot;'&quot; ('yes' | 'no') &quot;'&quot;)&#xA;     *                 | ('&quot;' ('yes' | 'no') '&quot;'))&#xA;     *&#xA;     * [77] TextDecl ::= '&amp;lt;?xml' VersionInfo? EncodingDecl S? '?>'&#xA;     * &lt;/pre>&#xA;     *&#xA;     * @param scanningTextDecl True if a text declaration is to&#xA;     *                         be scanned instead of an XML&#xA;     *                         declaration.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.39"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41"/>
          </next>
          <self xsi:type="literals:Super">
            <comments>// scan decl</comments>
          </self>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="version">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// pseudo-attribute values</comments>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="encoding">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arraySelectors>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="standalone">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            </arraySelectors>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28">
            <comments>// set standalone</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.4/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.4/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:StringReference" value="yes"/>
              </next>
            </children>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="XMLEntityManager.class.xmi#//@classifiers.0/@members.62"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28"/>
          </next>
          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.14"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// call handler</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.8"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.2/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.3/@variable"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@parameters.0"/>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.2/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.3/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.4/@variable"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </next>
                </expression>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// set encoding on reader</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.9"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.3/@variable"/>
              </next>
              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.3/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="XMLEntityManager$ScannedEntity.class.xmi#//@classifiers.0/@members.24"/>
                </next>
                <target xsi:type="members:Field" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.3"/>
              </next>
              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
            </child>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scanPIData">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="data">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/XMLString.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// scanXMLDeclOrTextDecl(boolean)</comments>
        <comments>/**&#xA;     * Scans a processing data. This is needed to handle the situation&#xA;     * where a document starts with a processing instruction whose &#xA;     * target name &lt;em>starts with&lt;/em> &quot;xml&quot;. (e.g. xmlfoo)&#xA;     *&#xA;     * @param target The PI target&#xA;     * @param data The string to fill in with the data&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.42"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.1"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// call handler</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.1"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scanComment">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// scanPIData(String)</comments>
        <comments>/**&#xA;     * Scans a comment.&#xA;     * &lt;p>&#xA;     * &lt;pre>&#xA;     * [15] Comment ::= '&amp;lt!--' ((Char - '-') | ('-' (Char - '-')))* '-->'&#xA;     * &lt;/pre>&#xA;     * &lt;p>&#xA;     * &lt;strong>Note:&lt;/strong> Called after scanning past '&amp;lt;!--'&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.43"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// call handler</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.3"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scanStartElement">
      <typeReference xsi:type="types:Boolean"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// scanComment()</comments>
        <comments>/** &#xA;     * Scans a start element. This method will handle the binding of&#xA;     * namespace information and notifying the handler of the start&#xA;     * of the element.&#xA;     * &lt;p>&#xA;     * &lt;pre>&#xA;     * [44] EmptyElemTag ::= '&amp;lt;' Name (S Attribute)* S? '/>'&#xA;     * [40] STag ::= '&amp;lt;' Name (S Attribute)* S? '>'&#xA;     * &lt;/pre> &#xA;     * &lt;p>&#xA;     * &lt;strong>Note:&lt;/strong> This method assumes that the leading&#xA;     * '&amp;lt;' character has been consumed.&#xA;     * &lt;p>&#xA;     * &lt;strong>Note:&lt;/strong> This method uses the fElementQName and&#xA;     * fAttributes variables. The contents of these variables will be&#xA;     * destroyed. The caller should copy important information out of&#xA;     * these variables before calling this method.&#xA;     *&#xA;     * @return True if element is empty. (i.e. It matches&#xA;     *          production [44].&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                <arguments xsi:type="references:StringReference" value=">>> scanStartElement()"/>
              </next>
              <target xsi:type="members:Field" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
          </expression>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// name</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.16"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
              </next>
              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.9"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="name">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.14"/>
                </next>
                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../xni/QName.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="literals:NullLiteral"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.1/@elseStatement/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.1/@elseStatement/@statements.0/@variable"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="rawname">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31">
            <comments>// push element stack</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.81/@members.3">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="empty">
          <typeReference xsi:type="types:Boolean">
            <comments>// attributes</comments>
          </typeReference>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../util/XMLAttributesImpl.class.xmi#//@classifiers.0/@members.14"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:DoWhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="sawSpace">
              <typeReference xsi:type="types:Boolean">
                <comments>// spaces</comments>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.21"/>
                </next>
                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="c">
              <typeReference xsi:type="types:Int">
                <comments>// end tag?</comments>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.11"/>
                </next>
                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.12"/>
                  </next>
                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.6/@statement/@statements.1/@variable"/>
              <children xsi:type="literals:CharacterLiteral" value="62"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.12"/>
                    </next>
                    <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                        <arguments xsi:type="references:StringReference" value="ElementUnterminated"/>
                        <arguments xsi:type="arrays:ArrayInstantiationByValues">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arrayDimensionsBefore/>
                          <arrayInitializer>
                            <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.2/@variable"/>
                          </arrayInitializer>
                        </arguments>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
                        <arguments xsi:type="literals:CharacterLiteral" value="62"/>
                      </next>
                      <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                    </child>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.4/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:BooleanLiteral" value="true"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.6/@statement/@statements.1/@variable"/>
                <children xsi:type="literals:CharacterLiteral" value="47"/>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <comments>// Second chance. Check if this character is a high</comments>
                    <comments>// surrogate of a valid name start character.</comments>
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                          <arguments xsi:type="references:StringReference" value="ElementUnterminated"/>
                          <arguments xsi:type="arrays:ArrayInstantiationByValues">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <arrayDimensionsBefore/>
                            <arrayInitializer>
                              <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.2/@variable"/>
                            </arrayInitializer>
                          </arguments>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalOrExpression">
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Negate"/>
                        <child xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.56"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.6/@statement/@statements.1/@variable"/>
                        </child>
                      </children>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Negate"/>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.6/@statement/@statements.0/@variable"/>
                      </children>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.54"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.6/@statement/@statements.1/@variable"/>
                    </child>
                  </children>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.6/@statement/@statements.0/@variable"/>
                  </children>
                </condition>
              </elseStatement>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.69">
              <comments>// attributes</comments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="XMLErrorReporter.class.xmi#//@classifiers.0/@members.23"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="msg/XMLMessageFormatter.class.xmi#//@classifiers.0/@members.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="msg/XMLMessageFormatter.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="references:StringReference" value="ElementAttributeLimit"/>
                    <arguments xsi:type="arrays:ArrayInstantiationByValues">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arrayDimensionsBefore/>
                      <arrayInitializer>
                        <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.2/@variable"/>
                        <initialValues xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../util/XMLAttributesImpl.class.xmi#//@classifiers.0/@members.24"/>
                            </next>
                          </arguments>
                        </initialValues>
                      </arrayInitializer>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="XMLErrorReporter.class.xmi#//@classifiers.0/@members.2"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="XMLErrorReporter.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.13"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../util/XMLAttributesImpl.class.xmi#//@classifiers.0/@members.24"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29"/>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// call handler</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24">
                    <comments>//decrease the markup depth..</comments>
                  </child>
                  <operator xsi:type="operators:MinusMinus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <comments>// check that this element was opened in the same entity</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                      <arguments xsi:type="references:StringReference" value="ElementEntityMismatch"/>
                      <arguments xsi:type="arrays:ArrayInstantiationByValues">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arrayDimensionsBefore/>
                        <arrayInitializer>
                          <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                            </next>
                          </initialValues>
                        </arrayInitializer>
                      </arguments>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
                    <arraySelectors>
                      <position xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.16"/>
                        </children>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </position>
                    </arraySelectors>
                  </children>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.6"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32">
                  <comments>//pop the element off the stack..</comments>
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.81/@members.4">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.4/@variable"/>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.5"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </next>
                </expression>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="&lt;&lt;&lt; scanStartElement(): "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.4/@variable"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </next>
              <target xsi:type="members:Field" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
          </expression>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.4/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scanStartElementName">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// scanStartElement():boolean</comments>
        <comments>/**&#xA;     * Scans the name of an element in a start or empty tag. &#xA;     * &#xA;     * @see #scanStartElement()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// name</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.16"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
              </next>
              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.9"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="name">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.14"/>
                </next>
                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../xni/QName.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="literals:NullLiteral"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@statements.0/@elseStatement/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@statements.0/@elseStatement/@statements.0/@variable"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47">
            <comments>// Must skip spaces here because the DTD scanner</comments>
            <comments>// would consume them at the end of the external subset.</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.21"/>
            </next>
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scanStartElementAfterName">
      <typeReference xsi:type="types:Boolean"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// scanStartElementName()</comments>
        <comments>/**&#xA;     * Scans the remainder of a start or empty tag after the element name.&#xA;     * &#xA;     * @see #scanStartElement&#xA;     * @return True if element is empty.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="rawname">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31">
            <comments>// push element stack</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.81/@members.3">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="empty">
          <typeReference xsi:type="types:Boolean">
            <comments>// attributes</comments>
          </typeReference>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../util/XMLAttributesImpl.class.xmi#//@classifiers.0/@members.14"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:DoWhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="c">
              <typeReference xsi:type="types:Int">
                <comments>// end tag?</comments>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.11"/>
                </next>
                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.12"/>
                  </next>
                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@statements.4/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:CharacterLiteral" value="62"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.12"/>
                    </next>
                    <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                        <arguments xsi:type="references:StringReference" value="ElementUnterminated"/>
                        <arguments xsi:type="arrays:ArrayInstantiationByValues">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arrayDimensionsBefore/>
                          <arrayInitializer>
                            <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@statements.0/@variable"/>
                          </arrayInitializer>
                        </arguments>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
                        <arguments xsi:type="literals:CharacterLiteral" value="62"/>
                      </next>
                      <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                    </child>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@statements.2/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:BooleanLiteral" value="true"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@statements.4/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:CharacterLiteral" value="47"/>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <comments>// Second chance. Check if this character is a high</comments>
                    <comments>// surrogate of a valid name start character.</comments>
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                          <arguments xsi:type="references:StringReference" value="ElementUnterminated"/>
                          <arguments xsi:type="arrays:ArrayInstantiationByValues">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <arrayDimensionsBefore/>
                            <arrayInitializer>
                              <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@statements.0/@variable"/>
                            </arrayInitializer>
                          </arguments>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalOrExpression">
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Negate"/>
                        <child xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.56"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@statements.4/@statement/@statements.0/@variable"/>
                        </child>
                      </children>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Negate"/>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47"/>
                      </children>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.54"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@statements.4/@statement/@statements.0/@variable"/>
                    </child>
                  </children>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47"/>
                  </children>
                </condition>
              </elseStatement>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.69">
              <comments>// attributes</comments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47">
                <comments>// spaces</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.21"/>
                </next>
                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// call handler</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24">
                    <comments>//decrease the markup depth..</comments>
                  </child>
                  <operator xsi:type="operators:MinusMinus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <comments>// check that this element was opened in the same entity</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                      <arguments xsi:type="references:StringReference" value="ElementEntityMismatch"/>
                      <arguments xsi:type="arrays:ArrayInstantiationByValues">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arrayDimensionsBefore/>
                        <arrayInitializer>
                          <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                            </next>
                          </initialValues>
                        </arrayInitializer>
                      </arguments>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
                    <arraySelectors>
                      <position xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.16"/>
                        </children>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </position>
                    </arraySelectors>
                  </children>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.6"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32">
                  <comments>//pop the element off the stack..</comments>
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.81/@members.4">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@statements.2/@variable"/>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.5"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </next>
                </expression>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="&lt;&lt;&lt; scanStartElementAfterName(): "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@statements.2/@variable"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </next>
              <target xsi:type="members:Field" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
          </expression>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@statements.2/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scanAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../xni/XMLAttributes.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// scanStartElementAfterName()</comments>
        <comments>/** &#xA;     * Scans an attribute.&#xA;     * &lt;p>&#xA;     * &lt;pre>&#xA;     * [41] Attribute ::= Name Eq AttValue&#xA;     * &lt;/pre> &#xA;     * &lt;p>&#xA;     * &lt;strong>Note:&lt;/strong> This method assumes that the next &#xA;     * character on the stream is the first character of the attribute&#xA;     * name.&#xA;     * &lt;p>&#xA;     * &lt;strong>Note:&lt;/strong> This method uses the fAttributeQName and&#xA;     * fQName variables. The contents of these variables will be&#xA;     * destroyed.&#xA;     *&#xA;     * @param attributes The attributes list for the scanned attribute.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                <arguments xsi:type="references:StringReference" value=">>> scanAttribute()"/>
              </next>
              <target xsi:type="members:Field" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
          </expression>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// name</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.16"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37"/>
              </next>
              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.9"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="name">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.14"/>
                </next>
                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../xni/QName.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="literals:NullLiteral"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.1/@elseStatement/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.1/@elseStatement/@statements.0/@variable"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <comments>// equals</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.21"/>
          </next>
          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
              <arguments xsi:type="references:StringReference" value="EqRequiredInAttribute"/>
              <arguments xsi:type="arrays:ArrayInstantiationByValues">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <arrayInitializer>
                  <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </initialValues>
                  <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </initialValues>
                </arrayInitializer>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
              <arguments xsi:type="literals:CharacterLiteral" value="61"/>
            </next>
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.21"/>
          </next>
          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldLen">
          <typeReference xsi:type="types:Int">
            <comments>// content</comments>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../xni/XMLAttributes.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="attrIndex">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../xni/XMLAttributes.class.xmi#//@classifiers.0/@members.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../util/XMLSymbols.class.xmi#//@classifiers.0/@members.4"/>
                </next>
                <target xsi:type="classifiers:Class" href="../util/XMLSymbols.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="literals:NullLiteral"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// WFC: Unique Att Spec</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
              <arguments xsi:type="references:StringReference" value="AttributeNotUnique"/>
              <arguments xsi:type="arrays:ArrayInstantiationByValues">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <arrayInitializer>
                  <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </initialValues>
                  <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </initialValues>
                </arrayInitializer>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.5/@variable"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../xni/XMLAttributes.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="isVC">
          <typeReference xsi:type="types:Boolean">
            <comments>//REVISIT: one more case needs to be included: external PE and standalone is no</comments>
          </typeReference>
          <initialValue xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27"/>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28"/>
            </children>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.44"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.8/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../xni/XMLAttributes.class.xmi#//@classifiers.0/@members.16"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.6/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../xni/XMLString.class.xmi#//@classifiers.0/@members.11"/>
              </next>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../xni/XMLAttributes.class.xmi#//@classifiers.0/@members.20"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.6/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../xni/XMLString.class.xmi#//@classifiers.0/@members.11"/>
              </next>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../xni/XMLAttributes.class.xmi#//@classifiers.0/@members.22"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.6/@variable"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                <arguments xsi:type="references:StringReference" value="&lt;&lt;&lt; scanAttribute()"/>
              </next>
              <target xsi:type="members:Field" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
          </expression>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scanContent">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// scanAttribute(XMLAttributes)</comments>
        <comments>/**&#xA;     * Scans element content.&#xA;     *&#xA;     * @return Returns the next character on the stream.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="content">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../xni/XMLString.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="c">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
            </next>
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <comments>// happens when there is the character reference &amp;#13;</comments>
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.12"/>
              </next>
              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.7"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.11"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:Char"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.1/@variable"/>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.1/@variable"/>
          <children xsi:type="literals:CharacterLiteral" value="13"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.10"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../xni/XMLString.class.xmi#//@classifiers.0/@members.2"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.7"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:Char"/>
                  <child xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.12"/>
                    </next>
                    <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                  </child>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26">
                <comments>// remember where we are in case we get an endEntity before we</comments>
                <comments>// could flush the buffer out - this happens when we're parsing an</comments>
                <comments>// entity which ends with a ]</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>//</comments>
            <comments>// We work on a single character basis to handle cases such as:</comments>
            <comments>// ']]]>' which we might otherwise miss.</comments>
            <comments>//</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.8"/>
                    <arguments xsi:type="literals:CharacterLiteral" value="93"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:WhileLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.8"/>
                        <arguments xsi:type="literals:CharacterLiteral" value="93"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
                    <arguments xsi:type="literals:CharacterLiteral" value="93"/>
                  </next>
                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                      <arguments xsi:type="references:StringReference" value="CDEndInContent"/>
                      <arguments xsi:type="literals:NullLiteral"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
                    <arguments xsi:type="literals:CharacterLiteral" value="62"/>
                  </next>
                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
                <arguments xsi:type="literals:CharacterLiteral" value="93"/>
              </next>
              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.10"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../xni/XMLString.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.1/@variable"/>
            <children xsi:type="literals:CharacterLiteral" value="93"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../xni/XMLString.class.xmi#//@classifiers.0/@members.2"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.1/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scanCDATASection">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="complete">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// scanContent():int</comments>
        <comments>/** &#xA;     * Scans a CDATA section. &#xA;     * &lt;p>&#xA;     * &lt;strong>Note:&lt;/strong> This method uses the fTempString and&#xA;     * fStringBuffer variables.&#xA;     *&#xA;     * @param complete True if the CDATA section is to be scanned&#xA;     *                 completely.&#xA;     *&#xA;     * @return True if CDATA is completely scanned.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// call handler</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.13"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.7"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.10"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
                        <arguments xsi:type="literals:NullLiteral"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </children>
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../xni/XMLString.class.xmi#//@classifiers.0/@members.2"/>
                      </next>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <relationOperators xsi:type="operators:GreaterThan"/>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="brackets">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </variable>
              </statements>
              <statements xsi:type="statements:WhileLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@statement/@statements.1/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
                    <arguments xsi:type="literals:CharacterLiteral" value="93"/>
                  </next>
                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.7"/>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="chunks">
                          <typeReference xsi:type="types:Int">
                            <comments>// Handle large sequences of ']'</comments>
                          </typeReference>
                          <initialValue xsi:type="expressions:MultiplicativeExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@statement/@statements.1/@variable"/>
                            <children xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="XMLEntityManager.class.xmi#//@classifiers.0/@members.0"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="XMLEntityManager.class.xmi#//@classifiers.0"/>
                            </children>
                            <multiplicativeOperators xsi:type="operators:Division"/>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="remainder">
                          <typeReference xsi:type="types:Int"/>
                          <initialValue xsi:type="expressions:MultiplicativeExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@statement/@statements.1/@variable"/>
                            <children xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="XMLEntityManager.class.xmi#//@classifiers.0/@members.0"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="XMLEntityManager.class.xmi#//@classifiers.0"/>
                            </children>
                            <multiplicativeOperators xsi:type="operators:Remainder"/>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:ForLoop">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.8"/>
                                <arguments xsi:type="literals:CharacterLiteral" value="93"/>
                              </next>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@statement/@statements.3/@statement/@statements.1/@statement/@statements.2/@init"/>
                          <children xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="XMLEntityManager.class.xmi#//@classifiers.0/@members.0"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="XMLEntityManager.class.xmi#//@classifiers.0"/>
                          </children>
                          <relationOperators xsi:type="operators:LessThan"/>
                        </condition>
                        <init xsi:type="variables:LocalVariable" name="i">
                          <typeReference xsi:type="types:Int"/>
                          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        </init>
                        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@statement/@statements.3/@statement/@statements.1/@statement/@statements.2/@init"/>
                          <operator xsi:type="operators:PlusPlus"/>
                        </updates>
                      </statements>
                      <statements xsi:type="statements:ForLoop">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.10"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
                                <arguments xsi:type="literals:NullLiteral"/>
                              </next>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@statement/@statements.3/@statement/@statements.1/@statement/@statements.3/@init"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@statement/@statements.3/@statement/@statements.1/@statement/@statements.0/@variable"/>
                          <relationOperators xsi:type="operators:LessThan"/>
                        </condition>
                        <init xsi:type="variables:LocalVariable" name="i">
                          <typeReference xsi:type="types:Int"/>
                          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        </init>
                        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@statement/@statements.3/@statement/@statements.1/@statement/@statements.3/@init"/>
                          <operator xsi:type="operators:PlusPlus"/>
                        </updates>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                                <next xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="../xni/XMLString.class.xmi#//@classifiers.0/@members.2"/>
                                </next>
                              </child>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@statement/@statements.3/@statement/@statements.1/@statement/@statements.1/@variable"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.10"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
                                <arguments xsi:type="literals:NullLiteral"/>
                              </next>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@statement/@statements.3/@statement/@statements.1/@statement/@statements.1/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        </condition>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@statement/@statements.1/@variable"/>
                      <children xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="XMLEntityManager.class.xmi#//@classifiers.0/@members.0"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="XMLEntityManager.class.xmi#//@classifiers.0"/>
                      </children>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </condition>
                    <elseStatement xsi:type="statements:Block">
                      <statements xsi:type="statements:ForLoop">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.8"/>
                                <arguments xsi:type="literals:CharacterLiteral" value="93"/>
                              </next>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@statement/@statements.3/@statement/@statements.1/@elseStatement/@statements.0/@init"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@statement/@statements.1/@variable"/>
                          <relationOperators xsi:type="operators:LessThan"/>
                        </condition>
                        <init xsi:type="variables:LocalVariable" name="i">
                          <typeReference xsi:type="types:Int"/>
                          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        </init>
                        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@statement/@statements.3/@statement/@statements.1/@elseStatement/@statements.0/@init"/>
                          <operator xsi:type="operators:PlusPlus"/>
                        </updates>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.10"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
                            <arguments xsi:type="literals:NullLiteral"/>
                          </next>
                        </expression>
                      </statements>
                    </elseStatement>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </children>
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@statement/@statements.1/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <relationOperators xsi:type="operators:GreaterThan"/>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Break"/>
                </statement>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
                    <arguments xsi:type="literals:CharacterLiteral" value="62"/>
                  </next>
                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.7"/>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.9"/>
                        <arguments xsi:type="references:StringReference" value="]]"/>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.10"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
                        <arguments xsi:type="literals:NullLiteral"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.19"/>
                  <arguments xsi:type="references:StringReference" value="]]"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
                </next>
                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
              </child>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.10"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
                        <arguments xsi:type="literals:NullLiteral"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="c">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.11"/>
                    </next>
                    <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.7"/>
                          </next>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.59"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.10"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
                                <arguments xsi:type="literals:NullLiteral"/>
                              </next>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </condition>
                      </statements>
                    </statement>
                    <condition xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../util/XMLChar.class.xmi#//@classifiers.0/@members.14"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@elseStatement/@statements.1/@variable"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../util/XMLChar.class.xmi#//@classifiers.0"/>
                    </condition>
                    <elseStatement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                          <arguments xsi:type="references:StringReference" value="InvalidCharInCDSect"/>
                          <arguments xsi:type="arrays:ArrayInstantiationByValues">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <arrayDimensionsBefore/>
                            <arrayInitializer>
                              <initialValues xsi:type="references:IdentifierReference">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0/@members.10"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@elseStatement/@statements.1/@variable"/>
                                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                                </next>
                                <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                              </initialValues>
                            </arrayInitializer>
                          </arguments>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.12"/>
                          </next>
                          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                        </expression>
                      </statements>
                    </elseStatement>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@elseStatement/@statements.1/@variable"/>
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Subtraction"/>
                      <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </children>
                  </children>
                  <children xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.52"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@statement/@statements.1/@elseStatement/@statements.1/@variable"/>
                  </children>
                </condition>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// call handler</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scanEndElement">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// scanCDATASection(boolean):boolean</comments>
        <comments>/**&#xA;     * Scans an end element.&#xA;     * &lt;p>&#xA;     * &lt;pre>&#xA;     * [42] ETag ::= '&amp;lt;/' Name S? '>'&#xA;     * &lt;/pre>&#xA;     * &lt;p>&#xA;     * &lt;strong>Note:&lt;/strong> This method uses the fElementQName variable.&#xA;     * The contents of this variable will be destroyed. The caller should&#xA;     * copy the needed information out of this variable before calling&#xA;     * this method.&#xA;     *&#xA;     * @return The element depth.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                <arguments xsi:type="references:StringReference" value=">>> scanEndElement()"/>
              </next>
              <target xsi:type="members:Field" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
          </expression>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.81/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Take advantage of the fact that next string _should_ be &quot;fElementQName.rawName&quot;,</comments>
        <comments>//In scanners most of the time is consumed on checks done for XML characters, we can</comments>
        <comments>// optimize on it and avoid the checks done for endElement,</comments>
        <comments>//we will also avoid symbol table lookup - neeraj.bajaj@sun.com</comments>
        <comments>// this should work both for namespace processing true or false...</comments>
        <comments>//REVISIT: if the string is not the same as expected.. we need to do better error handling..</comments>
        <comments>//We can skip this for now... In any case if the string doesn't match -- document is not well formed.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
              <arguments xsi:type="references:StringReference" value="ETagRequired"/>
              <arguments xsi:type="arrays:ArrayInstantiationByValues">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <arrayInitializer>
                  <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </initialValues>
                </arrayInitializer>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.23"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <comments>// end</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.21"/>
          </next>
          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
              <arguments xsi:type="references:StringReference" value="ETagUnterminated"/>
              <arguments xsi:type="arrays:ArrayInstantiationByValues">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <arrayInitializer>
                  <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </initialValues>
                </arrayInitializer>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
              <arguments xsi:type="literals:CharacterLiteral" value="62"/>
            </next>
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24">
            <comments>//we have increased the depth for two markup &quot;&lt;&quot; characters</comments>
          </child>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// check that this element was opened in the same entity</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
              <arguments xsi:type="references:StringReference" value="ElementEntityMismatch"/>
              <arguments xsi:type="arrays:ArrayInstantiationByValues">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <arrayInitializer>
                  <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </initialValues>
                </arrayInitializer>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
            <arraySelectors>
              <position xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.16"/>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </position>
            </arraySelectors>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// call handler</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scanCharReference">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// scanEndElement():int</comments>
        <comments>/**&#xA;     * Scans a character reference.&#xA;     * &lt;p>&#xA;     * &lt;pre>&#xA;     * [66] CharRef ::= '&amp;#' [0-9]+ ';' | '&amp;#x' [0-9a-fA-F]+ ';'&#xA;     * &lt;/pre>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.7"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="ch">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.50"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
            <arguments xsi:type="literals:NullLiteral"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <comments>// call handler</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.7"/>
                        <arguments xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.17"/>
                        </arguments>
                        <arguments xsi:type="literals:NullLiteral"/>
                        <arguments xsi:type="literals:NullLiteral"/>
                        <arguments xsi:type="literals:NullLiteral"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.10"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="augs">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../xni/Augmentations.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="literals:NullLiteral"/>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.3/@statement/@statements.0/@statement/@statements.1/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../util/AugmentationsImpl.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.3/@statement/@statements.0/@statement/@statements.1/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../xni/Augmentations.class.xmi#//@classifiers.0/@members.0"/>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="Constants.class.xmi#//@classifiers.0/@members.124"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="Constants.class.xmi#//@classifiers.0"/>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../../../../../../../java/lang/Boolean.class.xmi#//@classifiers.0/@members.0"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Boolean.class.xmi#//@classifiers.0"/>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.8"/>
                  </children>
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.1/@variable"/>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="32"/>
                    <relationOperators xsi:type="operators:LessThanOrEqual"/>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.10"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.3/@statement/@statements.0/@statement/@statements.1/@variable"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.9"/>
                        <arguments xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.17"/>
                        </arguments>
                        <arguments xsi:type="literals:NullLiteral"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.10"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.1/@variable"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scanEntityReference">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// scanCharReference()</comments>
        <comments>/**&#xA;     * Scans an entity reference.&#xA;     *&#xA;     * @throws IOException  Thrown if i/o error occurs.&#xA;     * @throws XNIException Thrown if handler throws exception upon&#xA;     *                      notification.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="name">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// name</comments>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.14"/>
            </next>
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
              <arguments xsi:type="references:StringReference" value="NameRequiredInReference"/>
              <arguments xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// end</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
              <arguments xsi:type="references:StringReference" value="SemicolonRequiredInReference"/>
              <arguments xsi:type="arrays:ArrayInstantiationByValues">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <arrayInitializer>
                  <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable"/>
                </arrayInitializer>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
              <arguments xsi:type="literals:CharacterLiteral" value="59"/>
            </next>
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// handle built-in entities</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.75">
              <arguments xsi:type="literals:CharacterLiteral" value="38"/>
              <arguments xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.23"/>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.23"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.75">
                <arguments xsi:type="literals:CharacterLiteral" value="60"/>
                <arguments xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.24"/>
                </arguments>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.24"/>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.75">
                  <arguments xsi:type="literals:CharacterLiteral" value="62"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.25"/>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.25"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.75">
                    <arguments xsi:type="literals:CharacterLiteral" value="34"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.26"/>
                    </arguments>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.26"/>
                </children>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <comments>// start general entity</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.75">
                      <arguments xsi:type="literals:CharacterLiteral" value="39"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.27"/>
                      </arguments>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.27"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                        <arguments xsi:type="references:StringReference" value="ReferenceToUnparsedEntity"/>
                        <arguments xsi:type="arrays:ArrayInstantiationByValues">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arrayDimensionsBefore/>
                          <arrayInitializer>
                            <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable"/>
                          </arrayInitializer>
                        </arguments>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="XMLEntityManager.class.xmi#//@classifiers.0/@members.72"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable"/>
                    </next>
                    <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.14"/>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:Condition">
                          <comments>//REVISIT: one more case needs to be included: external PE and standalone is no</comments>
                          <statement xsi:type="statements:Block">
                            <statements xsi:type="statements:Condition">
                              <statement xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="XMLErrorReporter.class.xmi#//@classifiers.0/@members.23"/>
                                    <arguments xsi:type="references:IdentifierReference">
                                      <next xsi:type="references:IdentifierReference">
                                        <target xsi:type="members:Field" href="msg/XMLMessageFormatter.class.xmi#//@classifiers.0/@members.0"/>
                                      </next>
                                      <target xsi:type="classifiers:Class" href="msg/XMLMessageFormatter.class.xmi#//@classifiers.0"/>
                                    </arguments>
                                    <arguments xsi:type="references:StringReference" value="EntityNotDeclared"/>
                                    <arguments xsi:type="arrays:ArrayInstantiationByValues">
                                      <typeReference xsi:type="types:NamespaceClassifierReference">
                                        <classifierReferences>
                                          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                                        </classifierReferences>
                                      </typeReference>
                                      <arrayDimensionsBefore/>
                                      <arrayInitializer>
                                        <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable"/>
                                      </arrayInitializer>
                                    </arguments>
                                    <arguments xsi:type="references:IdentifierReference">
                                      <next xsi:type="references:IdentifierReference">
                                        <target xsi:type="members:Field" href="XMLErrorReporter.class.xmi#//@classifiers.0/@members.1"/>
                                      </next>
                                      <target xsi:type="classifiers:Class" href="XMLErrorReporter.class.xmi#//@classifiers.0"/>
                                    </arguments>
                                  </next>
                                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.13"/>
                                </expression>
                              </statement>
                              <condition xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.8"/>
                              </condition>
                            </statements>
                          </statement>
                          <condition xsi:type="expressions:ConditionalAndExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27"/>
                            <children xsi:type="expressions:UnaryExpression">
                              <operators xsi:type="operators:Negate"/>
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28"/>
                            </children>
                          </condition>
                          <elseStatement xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                              <arguments xsi:type="references:StringReference" value="EntityNotDeclared"/>
                              <arguments xsi:type="arrays:ArrayInstantiationByValues">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                                <arrayDimensionsBefore/>
                                <arrayInitializer>
                                  <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable"/>
                                </arrayInitializer>
                              </arguments>
                            </expression>
                          </elseStatement>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Negate"/>
                        <child xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="XMLEntityManager.class.xmi#//@classifiers.0/@members.73"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable"/>
                          </next>
                          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.14"/>
                        </child>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="XMLEntityManager.class.xmi#//@classifiers.0/@members.75"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.0/@variable"/>
                          <arguments xsi:type="literals:BooleanLiteral"/>
                        </next>
                        <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.14"/>
                      </expression>
                    </statements>
                  </elseStatement>
                </elseStatement>
              </elseStatement>
            </elseStatement>
          </elseStatement>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="handleCharacter">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="entity">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// scanEntityReference()</comments>
        <comments>// utility methods</comments>
        <comments>/** &#xA;     * Calls document handler with a single character resulting from&#xA;     * built-in entity resolution. &#xA;     *&#xA;     * @param c&#xA;     * @param entity built-in name&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75/@parameters.1"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45">
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../xni/XMLString.class.xmi#//@classifiers.0/@members.6"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.10"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.9"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75/@parameters.1"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="handleEndElement">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="element">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="isEmpty">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// handleCharacter(char)</comments>
        <comments>/** &#xA;     * Handles the end element. This method will make sure that&#xA;     * the end element name matches the current element and notify&#xA;     * the handler about the end of the element and the end of any&#xA;     * relevent prefix mappings.&#xA;     * &lt;p>&#xA;     * &lt;strong>Note:&lt;/strong> This method uses the fQName variable.&#xA;     * The contents of this variable will be destroyed.&#xA;     *&#xA;     * @param element The element.&#xA;     *&#xA;     * @return The element depth.&#xA;     *&#xA;     * @throws XNIException Thrown if the handler throws a SAX exception&#xA;     *                      upon notification.&#xA;     *&#xA;     */</comments>
        <comments>// REVISIT: need to remove this method. It's not called anymore, because</comments>
        <comments>// the handling is done when the end tag is scanned. - SG</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// check that this element was opened in the same entity</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
              <arguments xsi:type="references:StringReference" value="ElementEntityMismatch"/>
              <arguments xsi:type="arrays:ArrayInstantiationByValues">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <arrayInitializer>
                  <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </initialValues>
                </arrayInitializer>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
            <arraySelectors>
              <position xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.16"/>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </position>
            </arraySelectors>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="startElement">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// make sure the elements match</comments>
              <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.81/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@statements.2/@variable"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
              <arguments xsi:type="references:StringReference" value="ETagRequired"/>
              <arguments xsi:type="arrays:ArrayInstantiationByValues">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <arrayInitializer>
                  <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@statements.2/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </initialValues>
                </arrayInitializer>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@statements.2/@variable">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// bind namespaces</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@statements.2/@variable">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../xni/QName.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.9"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// call handler</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.1"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setScannerState">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="state">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// callEndElement(QName,boolean):int</comments>
        <comments>// helper methods</comments>
        <comments>/**&#xA;     * Sets the scanner state.&#xA;     *&#xA;     * @param state The new scanner state.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.32"/>
                  <arguments xsi:type="references:StringReference" value="### setScannerState: "/>
                </next>
                <target xsi:type="members:Field" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.32"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.79">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
                  </arguments>
                </next>
                <target xsi:type="members:Field" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.34"/>
                </next>
                <target xsi:type="members:Field" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setDispatcher">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dispatcher">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.82"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// setScannerState(int)</comments>
        <comments>/**&#xA;     * Sets the dispatcher.&#xA;     *&#xA;     * @param dispatcher The new dispatcher.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.78/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.32"/>
                  <arguments xsi:type="references:StringReference" value="%%% setDispatcher: "/>
                </next>
                <target xsi:type="members:Field" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.32"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.80">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.78/@parameters.0"/>
                  </arguments>
                </next>
                <target xsi:type="members:Field" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.34"/>
                </next>
                <target xsi:type="members:Field" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getScannerStateName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="state">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>//</comments>
        <comments>// Private methods</comments>
        <comments>//</comments>
        <comments>/** Returns the scanner state name. */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Switch">
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:StringReference" value="SCANNER_STATE_DOCTYPE"/>
          </statements>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:StringReference" value="SCANNER_STATE_ROOT_ELEMENT"/>
          </statements>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:StringReference" value="SCANNER_STATE_START_OF_MARKUP"/>
          </statements>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:StringReference" value="SCANNER_STATE_COMMENT"/>
          </statements>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:StringReference" value="SCANNER_STATE_PI"/>
          </statements>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:StringReference" value="SCANNER_STATE_CONTENT"/>
          </statements>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:StringReference" value="SCANNER_STATE_REFERENCE"/>
          </statements>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:StringReference" value="SCANNER_STATE_END_OF_INPUT"/>
          </statements>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:StringReference" value="SCANNER_STATE_TERMINATED"/>
          </statements>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:StringReference" value="SCANNER_STATE_CDATA"/>
          </statements>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:StringReference" value="SCANNER_STATE_TEXT_DECL"/>
          </statements>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
        </cases>
        <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:StringReference" value="??? ("/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0"/>
          <children xsi:type="literals:CharacterLiteral" value="41"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDispatcherName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dispatcher">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.82"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// getScannerStateName(int):String</comments>
        <comments>/** Returns the dispatcher name. */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="name">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.44"/>
                      </next>
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="index">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.47"/>
                      <arguments xsi:type="literals:CharacterLiteral" value="46"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.55"/>
                          <arguments xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.0/@statement/@statements.0/@statement/@statements.1/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                          </arguments>
                        </next>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.0/@statement/@statements.0/@statement/@statements.1/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.47"/>
                          <arguments xsi:type="literals:CharacterLiteral" value="36"/>
                        </next>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.55"/>
                              <arguments xsi:type="expressions:AdditiveExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.0/@statement/@statements.0/@statement/@statements.1/@variable"/>
                                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                <additiveOperators xsi:type="operators:Addition"/>
                              </arguments>
                            </next>
                          </value>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.0/@statement/@statements.0/@statement/@statements.1/@variable"/>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </children>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.0/@statement/@statements.0/@statement/@statements.1/@variable"/>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:StringReference" value="null"/>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="ElementStack">
      <comments>// clear()</comments>
      <members xsi:type="members:Field" name="fElements">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>//</comments>
          <comments>// Data</comments>
          <comments>//</comments>
          <comments>/** The stack data. */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="fSize">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/** The size of the stack. */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Constructor" name="ElementStack">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.0"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="arrays:ArrayInstantiationBySize">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.2/@statements.1/@init"/>
                  </arraySelectors>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.2/@statements.1/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.0">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="i">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.2/@statements.1/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>//</comments>
          <comments>// Constructors</comments>
          <comments>//</comments>
          <comments>/** Default constructor. */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="pushElement">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="element">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// &lt;init>()</comments>
          <comments>//</comments>
          <comments>// Public methods</comments>
          <comments>//</comments>
          <comments>/** &#xA;         * Pushes an element on the stack. &#xA;         * &lt;p>&#xA;         * &lt;strong>Note:&lt;/strong> The QName values are copied into the&#xA;         * stack. In other words, the caller does &lt;em>not&lt;/em> orphan&#xA;         * the element to the stack. Also, the QName object returned&#xA;         * is &lt;em>not&lt;/em> orphaned to the caller. It should be &#xA;         * considered read-only.&#xA;         *&#xA;         * @param element The element to push onto the stack.&#xA;         *&#xA;         * @return Returns the actual QName object that stores the&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="array">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <sizes xsi:type="expressions:MultiplicativeExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.0">
                      <next xsi:type="references:IdentifierReference"/>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                    <multiplicativeOperators xsi:type="operators:Multiplication"/>
                  </sizes>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.0"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.3/@statements.0/@statement/@statements.0/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.1"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.3/@statements.0/@statement/@statements.0/@variable"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ForLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.0">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.3/@statements.0/@statement/@statements.3/@init"/>
                      </arraySelectors>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.3/@statements.0/@statement/@statements.3/@init"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.0">
                  <next xsi:type="references:IdentifierReference"/>
                </children>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <init xsi:type="variables:LocalVariable" name="i">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.1"/>
              </init>
              <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.3/@statements.0/@statement/@statements.3/@init"/>
                <operator xsi:type="operators:PlusPlus"/>
              </updates>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.1"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.0">
              <next xsi:type="references:IdentifierReference"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../xni/QName.class.xmi#//@classifiers.0/@members.7"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.3/@parameters.0"/>
            </next>
            <arraySelectors>
              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.1"/>
            </arraySelectors>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.0">
            <arraySelectors>
              <position xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.1"/>
                <operator xsi:type="operators:PlusPlus"/>
              </position>
            </arraySelectors>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="popElement">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="element">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../xni/QName.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// pushElement(QName):QName</comments>
          <comments>/** &#xA;         * Pops an element off of the stack by setting the values of&#xA;         * the specified QName.&#xA;         * &lt;p>&#xA;         * &lt;strong>Note:&lt;/strong> The object returned is &lt;em>not&lt;/em>&#xA;         * orphaned to the caller. Therefore, the caller should consider&#xA;         * the object to be read-only.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.4/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../xni/QName.class.xmi#//@classifiers.0/@members.7"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.0">
                <arraySelectors>
                  <position xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.1"/>
                    <operator xsi:type="operators:MinusMinus"/>
                  </position>
                </arraySelectors>
              </arguments>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="clear">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// popElement(QName)</comments>
          <comments>/** Clears the stack without throwing away existing QName objects. */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@members.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </expression>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// getDispatcherName():String</comments>
        <comments>//</comments>
        <comments>// Classes</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Element stack. This stack operates without synchronization, error&#xA;     * checking, and it re-uses objects instead of throwing popped items&#xA;     * away.&#xA;     *&#xA;     * @author Andy Clark, IBM&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="classifiers:Interface" name="Dispatcher">
      <members xsi:type="members:InterfaceMethod" name="dispatch">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="complete">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>//</comments>
          <comments>// Dispatcher methods</comments>
          <comments>//</comments>
          <comments>/** &#xA;         * Dispatch an XML &quot;event&quot;.&#xA;         *&#xA;         * @param complete True if this dispatcher is intended to scan&#xA;         *                 and dispatch as much as possible.                 &#xA;         *&#xA;         * @return True if there is more to dispatch either from this &#xA;         *          or a another dispatcher.&#xA;         *&#xA;         * @throws IOException  Thrown on i/o error.&#xA;         * @throws XNIException Thrown on parse error.&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// class ElementStack</comments>
        <comments>/** &#xA;     * This interface defines an XML &quot;event&quot; dispatching model. Classes&#xA;     * that implement this interface are responsible for scanning parts&#xA;     * of the XML document and dispatching callbacks.&#xA;     *&#xA;     * @author Glenn Marcy, IBM&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="classifiers:Class" name="FragmentContentDispatcher">
      <comments>// endOfFileHook()</comments>
      <members xsi:type="members:ClassMethod" name="dispatch">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="complete">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>//</comments>
          <comments>// Dispatcher methods</comments>
          <comments>//</comments>
          <comments>/** &#xA;         * Dispatch an XML &quot;event&quot;.&#xA;         *&#xA;         * @param complete True if this dispatcher is intended to scan&#xA;         *                 and dispatch as much as possible.                 &#xA;         *&#xA;         * @return True if there is more to dispatch either from this &#xA;         *          or a another dispatcher.&#xA;         *&#xA;         * @throws IOException  Thrown on i/o error.&#xA;         * @throws XNIException Thrown on parse error.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="again">
              <typeReference xsi:type="types:Boolean"/>
            </variable>
          </statements>
          <statements xsi:type="statements:DoWhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Switch">
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:Block">
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:AssignmentExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@statements.0/@variable"/>
                            <assignmentOperator xsi:type="operators:Assignment"/>
                            <value xsi:type="literals:BooleanLiteral" value="true"/>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
                          <arguments xsi:type="literals:CharacterLiteral" value="60"/>
                        </next>
                        <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                      </condition>
                      <elseStatement xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@statements.0/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="literals:BooleanLiteral" value="true"/>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
                            <arguments xsi:type="literals:CharacterLiteral" value="38"/>
                          </next>
                          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                        </condition>
                        <elseStatement xsi:type="statements:Block">
                          <statements xsi:type="statements:DoWhileLoop">
                            <statement xsi:type="statements:Block">
                              <statements xsi:type="statements:LocalVariableStatement">
                                <variable name="c">
                                  <typeReference xsi:type="types:Int"/>
                                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.70"/>
                                </variable>
                              </statements>
                              <statements xsi:type="statements:Condition">
                                <statement xsi:type="statements:Block">
                                  <statements xsi:type="statements:ExpressionStatement">
                                    <expression xsi:type="references:IdentifierReference">
                                      <next xsi:type="references:MethodCall">
                                        <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.12"/>
                                      </next>
                                      <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                                    </expression>
                                  </statements>
                                  <statements xsi:type="statements:ExpressionStatement">
                                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                                    </expression>
                                  </statements>
                                  <statements xsi:type="statements:Break"/>
                                </statement>
                                <condition xsi:type="expressions:EqualityExpression">
                                  <equalityOperators xsi:type="operators:Equal"/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@statements.1/@statement/@statements.1/@cases.0/@statements.0/@statements.0/@elseStatement/@elseStatement/@statements.0/@statement/@statements.0/@variable"/>
                                  <children xsi:type="literals:CharacterLiteral" value="60"/>
                                </condition>
                                <elseStatement xsi:type="statements:Condition">
                                  <statement xsi:type="statements:Block">
                                    <statements xsi:type="statements:ExpressionStatement">
                                      <expression xsi:type="references:IdentifierReference">
                                        <next xsi:type="references:MethodCall">
                                          <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.12"/>
                                        </next>
                                        <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                                      </expression>
                                    </statements>
                                    <statements xsi:type="statements:ExpressionStatement">
                                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                                      </expression>
                                    </statements>
                                    <statements xsi:type="statements:Break"/>
                                  </statement>
                                  <condition xsi:type="expressions:EqualityExpression">
                                    <equalityOperators xsi:type="operators:Equal"/>
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@statements.1/@statement/@statements.1/@cases.0/@statements.0/@statements.0/@elseStatement/@elseStatement/@statements.0/@statement/@statements.0/@variable"/>
                                    <children xsi:type="literals:CharacterLiteral" value="38"/>
                                  </condition>
                                  <elseStatement xsi:type="statements:Condition">
                                    <statement xsi:type="statements:Block">
                                      <statements xsi:type="statements:Condition">
                                        <statement xsi:type="statements:Block">
                                          <statements xsi:type="statements:ExpressionStatement">
                                            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                                              <comments>// special case: surrogates</comments>
                                              <next xsi:type="references:MethodCall">
                                                <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.7"/>
                                              </next>
                                            </expression>
                                          </statements>
                                          <statements xsi:type="statements:Condition">
                                            <statement xsi:type="statements:Block">
                                              <statements xsi:type="statements:Condition">
                                                <comments>// call handler</comments>
                                                <statement xsi:type="statements:Block">
                                                  <statements xsi:type="statements:ExpressionStatement">
                                                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                                                      <next xsi:type="references:MethodCall">
                                                        <target xsi:type="members:InterfaceMethod" href="../xni/XMLDocumentHandler.class.xmi#//@classifiers.0/@members.10"/>
                                                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
                                                        <arguments xsi:type="literals:NullLiteral"/>
                                                      </next>
                                                    </expression>
                                                  </statements>
                                                </statement>
                                                <condition xsi:type="expressions:EqualityExpression">
                                                  <equalityOperators xsi:type="operators:NotEqual"/>
                                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                                                  <children xsi:type="literals:NullLiteral"/>
                                                </condition>
                                              </statements>
                                            </statement>
                                            <condition xsi:type="references:MethodCall">
                                              <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.59"/>
                                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42"/>
                                            </condition>
                                          </statements>
                                        </statement>
                                        <condition xsi:type="references:IdentifierReference">
                                          <next xsi:type="references:MethodCall">
                                            <target xsi:type="members:ClassMethod" href="../util/XMLChar.class.xmi#//@classifiers.0/@members.14"/>
                                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@statements.1/@statement/@statements.1/@cases.0/@statements.0/@statements.0/@elseStatement/@elseStatement/@statements.0/@statement/@statements.0/@variable"/>
                                          </next>
                                          <target xsi:type="classifiers:Class" href="../util/XMLChar.class.xmi#//@classifiers.0"/>
                                        </condition>
                                        <elseStatement xsi:type="statements:Block">
                                          <statements xsi:type="statements:ExpressionStatement">
                                            <expression xsi:type="references:MethodCall">
                                              <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                                              <arguments xsi:type="references:StringReference" value="InvalidCharInContent"/>
                                              <arguments xsi:type="arrays:ArrayInstantiationByValues">
                                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                                  <classifierReferences>
                                                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                                                  </classifierReferences>
                                                </typeReference>
                                                <arrayDimensionsBefore/>
                                                <arrayInitializer>
                                                  <initialValues xsi:type="references:IdentifierReference">
                                                    <next xsi:type="references:MethodCall">
                                                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0/@members.10"/>
                                                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@statements.1/@statement/@statements.1/@cases.0/@statements.0/@statements.0/@elseStatement/@elseStatement/@statements.0/@statement/@statements.0/@variable"/>
                                                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                                                    </next>
                                                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                                                  </initialValues>
                                                </arrayInitializer>
                                              </arguments>
                                            </expression>
                                          </statements>
                                          <statements xsi:type="statements:ExpressionStatement">
                                            <expression xsi:type="references:IdentifierReference">
                                              <next xsi:type="references:MethodCall">
                                                <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.12"/>
                                              </next>
                                              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                                            </expression>
                                          </statements>
                                        </elseStatement>
                                      </statements>
                                    </statement>
                                    <condition xsi:type="expressions:ConditionalAndExpression">
                                      <children xsi:type="expressions:EqualityExpression">
                                        <equalityOperators xsi:type="operators:NotEqual"/>
                                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@statements.1/@statement/@statements.1/@cases.0/@statements.0/@statements.0/@elseStatement/@elseStatement/@statements.0/@statement/@statements.0/@variable"/>
                                        <children xsi:type="expressions:UnaryExpression">
                                          <operators xsi:type="operators:Subtraction"/>
                                          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                        </children>
                                      </children>
                                      <children xsi:type="references:MethodCall">
                                        <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.52"/>
                                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@statements.1/@statement/@statements.1/@cases.0/@statements.0/@statements.0/@elseStatement/@elseStatement/@statements.0/@statement/@statements.0/@variable"/>
                                      </children>
                                    </condition>
                                  </elseStatement>
                                </elseStatement>
                              </statements>
                            </statement>
                            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@parameters.0"/>
                          </statements>
                        </elseStatement>
                      </elseStatement>
                    </statements>
                    <statements xsi:type="statements:Break"/>
                  </statements>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:Condition">
                          <statement xsi:type="statements:Block">
                            <statements xsi:type="statements:Condition">
                              <statement xsi:type="statements:Block">
                                <statements xsi:type="statements:Return">
                                  <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
                                </statements>
                              </statement>
                              <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.83/@members.2"/>
                            </statements>
                          </statement>
                          <condition xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.72"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          </condition>
                        </statements>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
                          <arguments xsi:type="literals:CharacterLiteral" value="47"/>
                        </next>
                        <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                      </condition>
                      <elseStatement xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.66"/>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.54"/>
                          <arguments xsi:type="references:IdentifierReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.11"/>
                            </next>
                            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                          </arguments>
                        </condition>
                        <elseStatement xsi:type="statements:Condition">
                          <statement xsi:type="statements:Block">
                            <statements xsi:type="statements:Condition">
                              <statement xsi:type="statements:Block">
                                <statements xsi:type="statements:Condition">
                                  <statement xsi:type="statements:Block">
                                    <statements xsi:type="statements:ExpressionStatement">
                                      <expression xsi:type="references:MethodCall">
                                        <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                                        <arguments xsi:type="references:StringReference" value="InvalidCommentStart"/>
                                        <arguments xsi:type="literals:NullLiteral"/>
                                      </expression>
                                    </statements>
                                  </statement>
                                  <condition xsi:type="expressions:UnaryExpression">
                                    <operators xsi:type="operators:Negate"/>
                                    <child xsi:type="references:IdentifierReference">
                                      <next xsi:type="references:MethodCall">
                                        <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
                                        <arguments xsi:type="literals:CharacterLiteral" value="45"/>
                                      </next>
                                      <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                                    </child>
                                  </condition>
                                </statements>
                                <statements xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                                  </expression>
                                </statements>
                                <statements xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="expressions:AssignmentExpression">
                                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@statements.0/@variable"/>
                                    <assignmentOperator xsi:type="operators:Assignment"/>
                                    <value xsi:type="literals:BooleanLiteral" value="true"/>
                                  </expression>
                                </statements>
                              </statement>
                              <condition xsi:type="references:IdentifierReference">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
                                  <arguments xsi:type="literals:CharacterLiteral" value="45"/>
                                </next>
                                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                              </condition>
                              <elseStatement xsi:type="statements:Condition">
                                <statement xsi:type="statements:Block">
                                  <statements xsi:type="statements:ExpressionStatement">
                                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
                                    </expression>
                                  </statements>
                                  <statements xsi:type="statements:ExpressionStatement">
                                    <expression xsi:type="expressions:AssignmentExpression">
                                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@statements.0/@variable"/>
                                      <assignmentOperator xsi:type="operators:Assignment"/>
                                      <value xsi:type="literals:BooleanLiteral" value="true"/>
                                    </expression>
                                  </statements>
                                </statement>
                                <condition xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.23"/>
                                    <arguments xsi:type="references:StringReference" value="[CDATA["/>
                                  </next>
                                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                                </condition>
                                <elseStatement xsi:type="statements:Condition">
                                  <statement xsi:type="statements:Block">
                                    <statements xsi:type="statements:ExpressionStatement">
                                      <expression xsi:type="references:MethodCall">
                                        <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                                        <arguments xsi:type="references:StringReference" value="MarkupNotRecognizedInContent"/>
                                        <arguments xsi:type="literals:NullLiteral"/>
                                      </expression>
                                    </statements>
                                  </statement>
                                  <condition xsi:type="expressions:UnaryExpression">
                                    <operators xsi:type="operators:Negate"/>
                                    <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.83/@members.1"/>
                                  </condition>
                                </elseStatement>
                              </elseStatement>
                            </statements>
                          </statement>
                          <condition xsi:type="references:IdentifierReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
                              <arguments xsi:type="literals:CharacterLiteral" value="33"/>
                            </next>
                            <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                          </condition>
                          <elseStatement xsi:type="statements:Condition">
                            <statement xsi:type="statements:Block">
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                                </expression>
                              </statements>
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@statements.0/@variable"/>
                                  <assignmentOperator xsi:type="operators:Assignment"/>
                                  <value xsi:type="literals:BooleanLiteral" value="true"/>
                                </expression>
                              </statements>
                            </statement>
                            <condition xsi:type="references:IdentifierReference">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
                                <arguments xsi:type="literals:CharacterLiteral" value="63"/>
                              </next>
                              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                            </condition>
                            <elseStatement xsi:type="statements:Condition">
                              <statement xsi:type="statements:Block">
                                <statements xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.66"/>
                                </statements>
                                <statements xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                                  </expression>
                                </statements>
                              </statement>
                              <condition xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.56"/>
                                <arguments xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.11"/>
                                  </next>
                                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                                </arguments>
                              </condition>
                              <elseStatement xsi:type="statements:Block">
                                <statements xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                                    <arguments xsi:type="references:StringReference" value="MarkupNotRecognizedInContent"/>
                                    <arguments xsi:type="literals:NullLiteral"/>
                                  </expression>
                                </statements>
                                <statements xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                                  </expression>
                                </statements>
                              </elseStatement>
                            </elseStatement>
                          </elseStatement>
                        </elseStatement>
                      </elseStatement>
                    </statements>
                    <statements xsi:type="statements:Break"/>
                  </statements>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.65"/>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Break"/>
                  </statements>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.41"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Break"/>
                  </statements>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.71">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@parameters.0"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Break"/>
                  </statements>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                        <comments>// NOTE: We need to set the state beforehand</comments>
                        <comments>//       because the XMLEntityHandler#startEntity</comments>
                        <comments>//       callback could set the state to</comments>
                        <comments>//       SCANNER_STATE_TEXT_DECL and we don't want</comments>
                        <comments>//       to override that scanner state.</comments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.73"/>
                        </statements>
                      </statement>
                      <condition xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.20"/>
                          <arguments xsi:type="literals:CharacterLiteral" value="35"/>
                        </next>
                        <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                      </condition>
                      <elseStatement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.74"/>
                        </statements>
                      </elseStatement>
                    </statements>
                    <statements xsi:type="statements:Break"/>
                  </statements>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:Block">
                    <statements xsi:type="statements:Condition">
                      <comments>// scan text decl</comments>
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
                            <operator xsi:type="operators:PlusPlus"/>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:Condition">
                          <comments>// NOTE: special case where entity starts with a PI</comments>
                          <comments>//       whose name starts with &quot;xml&quot; (e.g. &quot;xmlfoo&quot;)</comments>
                          <comments>// standard text declaration</comments>
                          <statement xsi:type="statements:Block">
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.7"/>
                                </next>
                              </expression>
                            </statements>
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.9"/>
                                  <arguments xsi:type="references:StringReference" value="xml"/>
                                </next>
                              </expression>
                            </statements>
                            <statements xsi:type="statements:Condition">
                              <statement xsi:type="statements:Block">
                                <statements xsi:type="statements:WhileLoop">
                                  <statement xsi:type="statements:Block">
                                    <statements xsi:type="statements:ExpressionStatement">
                                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                                        <next xsi:type="references:MethodCall">
                                          <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.8"/>
                                          <arguments xsi:type="expressions:CastExpression">
                                            <typeReference xsi:type="types:Char"/>
                                            <child xsi:type="references:IdentifierReference">
                                              <next xsi:type="references:MethodCall">
                                                <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.12"/>
                                              </next>
                                              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                                            </child>
                                          </arguments>
                                        </next>
                                      </expression>
                                    </statements>
                                  </statement>
                                  <condition xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.55"/>
                                    <arguments xsi:type="references:IdentifierReference">
                                      <next xsi:type="references:MethodCall">
                                        <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.11"/>
                                      </next>
                                      <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                                    </arguments>
                                  </condition>
                                </statements>
                              </statement>
                              <condition xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.9"/>
                              </condition>
                              <elseStatement xsi:type="statements:Block">
                                <statements xsi:type="statements:WhileLoop">
                                  <statement xsi:type="statements:Block">
                                    <statements xsi:type="statements:ExpressionStatement">
                                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                                        <next xsi:type="references:MethodCall">
                                          <target xsi:type="members:ClassMethod" href="../util/XMLStringBuffer.class.xmi#//@classifiers.0/@members.8"/>
                                          <arguments xsi:type="expressions:CastExpression">
                                            <typeReference xsi:type="types:Char"/>
                                            <child xsi:type="references:IdentifierReference">
                                              <next xsi:type="references:MethodCall">
                                                <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.12"/>
                                              </next>
                                              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                                            </child>
                                          </arguments>
                                        </next>
                                      </expression>
                                    </statements>
                                  </statement>
                                  <condition xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.53"/>
                                    <arguments xsi:type="references:IdentifierReference">
                                      <next xsi:type="references:MethodCall">
                                        <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.11"/>
                                      </next>
                                      <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                                    </arguments>
                                  </condition>
                                </statements>
                              </elseStatement>
                            </statements>
                            <statements xsi:type="statements:LocalVariableStatement">
                              <variable name="target">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                                <initialValue xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../util/SymbolTable.class.xmi#//@classifiers.0/@members.6"/>
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                                      <next xsi:type="references:IdentifierReference">
                                        <target xsi:type="members:Field" href="../xni/XMLString.class.xmi#//@classifiers.0/@members.0"/>
                                      </next>
                                    </arguments>
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                                      <next xsi:type="references:IdentifierReference">
                                        <target xsi:type="members:Field" href="../xni/XMLString.class.xmi#//@classifiers.0/@members.1"/>
                                      </next>
                                    </arguments>
                                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                                      <next xsi:type="references:IdentifierReference">
                                        <target xsi:type="members:Field" href="../xni/XMLString.class.xmi#//@classifiers.0/@members.2"/>
                                      </next>
                                    </arguments>
                                  </next>
                                  <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.12"/>
                                </initialValue>
                              </variable>
                            </statements>
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@statements.1/@statement/@statements.1/@cases.6/@statements.0/@statements.0/@statement/@statements.1/@statement/@statements.3/@variable"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39"/>
                              </expression>
                            </statements>
                          </statement>
                          <condition xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.53"/>
                            <arguments xsi:type="references:IdentifierReference">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.11"/>
                              </next>
                              <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                            </arguments>
                          </condition>
                          <elseStatement xsi:type="statements:Block">
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.63">
                                <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                              </expression>
                            </statements>
                          </elseStatement>
                        </statements>
                      </statement>
                      <condition xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="XMLEntityScanner.class.xmi#//@classifiers.0/@members.23"/>
                          <arguments xsi:type="references:StringReference" value="&lt;?xml"/>
                        </next>
                        <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.15"/>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference">
                          <comments>// now that we've straightened out the readers, we can read in chunks:</comments>
                          <next xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="XMLEntityManager$ScannedEntity.class.xmi#//@classifiers.0/@members.12"/>
                            </next>
                            <target xsi:type="members:Field" href="XMLEntityManager.class.xmi#//@classifiers.0/@members.49"/>
                          </next>
                          <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.14"/>
                        </child>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="literals:BooleanLiteral" value="true"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Break"/>
                  </statements>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:Block">
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:Return">
                          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
                        </statements>
                      </statement>
                      <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.83/@members.3"/>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Break"/>
                  </statements>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                        <arguments xsi:type="references:StringReference" value="DoctypeIllegalInContent"/>
                        <arguments xsi:type="literals:NullLiteral"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                      </expression>
                    </statements>
                  </statements>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                </cases>
                <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@parameters.0"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@statements.0/@variable"/>
            </condition>
          </statements>
          <catcheBlocks>
            <comments>// encoding errors</comments>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="XMLErrorReporter.class.xmi#//@classifiers.0/@members.23"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@catcheBlocks.0/@parameter">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="io/MalformedByteSequenceException.class.xmi#//@classifiers.0/@members.7"/>
                    </next>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@catcheBlocks.0/@parameter">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="io/MalformedByteSequenceException.class.xmi#//@classifiers.0/@members.8"/>
                    </next>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@catcheBlocks.0/@parameter">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="io/MalformedByteSequenceException.class.xmi#//@classifiers.0/@members.9"/>
                    </next>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="XMLErrorReporter.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="XMLErrorReporter.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
                <target xsi:type="members:Field" href="XMLScanner.class.xmi#//@classifiers.0/@members.13"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statements>
            <parameter name="e">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="io/MalformedByteSequenceException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
          <catcheBlocks>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                <arguments xsi:type="references:StringReference" value="CharConversionFailure"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statements>
            <parameter name="e">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../java/io/CharConversionException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
          <catcheBlocks>
            <comments>// premature end of file</comments>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.83/@members.4">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@members.0/@statements.0/@catcheBlocks.2/@parameter"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statements>
            <parameter name="e">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../java/io/EOFException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="scanForDoctypeHook">
        <typeReference xsi:type="types:Boolean"/>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>// dispatch(boolean):boolean</comments>
          <comments>//</comments>
          <comments>// Protected methods</comments>
          <comments>//</comments>
          <comments>// hooks</comments>
          <comments>// NOTE: These hook methods are added so that the full document</comments>
          <comments>//       scanner can share the majority of code with this class.</comments>
          <comments>/** &#xA;         * Scan for DOCTYPE hook. This method is a hook for subclasses&#xA;         * to add code to handle scanning for a the &quot;DOCTYPE&quot; string &#xA;         * after the string &quot;&lt;!&quot; has been scanned.&#xA;         * &#xA;         * @return True if the &quot;DOCTYPE&quot; was scanned; false if &quot;DOCTYPE&quot;&#xA;         *          was not scanned.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="elementDepthIsZeroHook">
        <typeReference xsi:type="types:Boolean"/>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>// scanForDoctypeHook():boolean</comments>
          <comments>/** &#xA;         * Element depth iz zero. This methos is a hook for subclasses&#xA;         * to add code to handle when the element depth hits zero. When&#xA;         * scanning a document fragment, an element depth of zero is&#xA;         * normal. However, when scanning a full XML document, the&#xA;         * scanner must handle the trailing miscellanous section of&#xA;         * the document after the end of the document's root element.&#xA;         *&#xA;         * @return True if the caller should stop and return true which&#xA;         *          allows the scanner to switch to a new scanning &#xA;         *          dispatcher. A return value of false indicates that&#xA;         *          the content dispatcher should continue as normal.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="scanRootElementHook">
        <typeReference xsi:type="types:Boolean"/>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>// elementDepthIsZeroHook():boolean</comments>
          <comments>/**&#xA;         * Scan for root element hook. This method is a hook for&#xA;         * subclasses to add code that handles scanning for the root&#xA;         * element. When scanning a document fragment, there is no&#xA;         * &quot;root&quot; element. However, when scanning a full XML document,&#xA;         * the scanner must handle the root element specially.&#xA;         *&#xA;         * @return True if the caller should stop and return true which&#xA;         *          allows the scanner to switch to a new scanning &#xA;         *          dispatcher. A return value of false indicates that&#xA;         *          the content dispatcher should continue as normal.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="endOfFileHook">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="e">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/io/EOFException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../xni/XNIException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>// scanRootElementHook():boolean</comments>
          <comments>/**&#xA;         * End of file hook. This method is a hook for subclasses to&#xA;         * add code that handles the end of file. The end of file in&#xA;         * a document fragment is OK if the markup depth is zero.&#xA;         * However, when scanning a full XML document, an end of file&#xA;         * is always premature.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <comments>// NOTE: An end of file is only only an error if we were</comments>
          <comments>//       in the middle of scanning some markup. -Ac</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="XMLScanner.class.xmi#//@classifiers.0/@members.60"/>
                <arguments xsi:type="references:StringReference" value="PrematureEOF"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </condition>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// interface Dispatcher</comments>
        <comments>/**&#xA;     * Dispatcher to handle content scanning.&#xA;     *&#xA;     * @author Andy Clark, IBM&#xA;     * @author Eric Ye, IBM&#xA;     */</comments>
      </annotationsAndModifiers>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.82"/>
      </implements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class is responsible for scanning the structure and content&#xA; * of document fragments. The scanner acts as the source for the &#xA; * document information which is communicated to the document handler.&#xA; * &lt;p>&#xA; * This component requires the following features and properties from the&#xA; * component manager that uses it:&#xA; * &lt;ul>&#xA; *  &lt;li>http://xml.org/sax/features/validation&lt;/li>&#xA; *  &lt;li>http://apache.org/xml/features/scanner/notify-char-refs&lt;/li>&#xA; *  &lt;li>http://apache.org/xml/features/scanner/notify-builtin-refs&lt;/li>&#xA; *  &lt;li>http://apache.org/xml/properties/internal/symbol-table&lt;/li>&#xA; *  &lt;li>http://apache.org/xml/properties/internal/error-reporter&lt;/li>&#xA; *  &lt;li>http://apache.org/xml/properties/internal/entity-manager&lt;/li>&#xA; * &lt;/ul>&#xA; *&#xA; * @author Glenn Marcy, IBM&#xA; * @author Andy Clark, IBM&#xA; * @author Arnaud  Le Hors, IBM&#xA; * @author Eric Ye, IBM&#xA; *&#xA; * @version $Id: XMLDocumentFragmentScannerImpl.java,v 1.52 2004/04/08 22:24:52 mrglavas Exp $&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../xni/parser/XMLDocumentScanner.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../xni/parser/XMLComponent.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="XMLEntityHandler.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="XMLScanner.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
