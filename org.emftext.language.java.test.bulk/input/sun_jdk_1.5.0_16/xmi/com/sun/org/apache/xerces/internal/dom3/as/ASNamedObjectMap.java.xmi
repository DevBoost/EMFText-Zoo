<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../../../java.ecore#/16" name="ASNamedObjectMap.java">
  <comments>/*&#xA; * Copyright (c) 2001 World Wide Web Consortium,&#xA; * (Massachusetts Institute of Technology, Institut National de&#xA; * Recherche en Informatique et en Automatique, Keio University). All&#xA; * Rights Reserved. This program is distributed under the W3C's Software&#xA; * Intellectual Property License. This program is distributed in the&#xA; * hope that it will be useful, but WITHOUT ANY WARRANTY; without even&#xA; * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR&#xA; * PURPOSE.&#xA; * See W3C License http://www.w3.org/Consortium/Legal/ for more details.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xerces</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>dom3</namespaces>
  <namespaces>as</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ASNamedObjectMap">
    <members xsi:type="members:InterfaceMethod" name="getLength">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The number of &lt;code>ASObjects&lt;/code> in the &lt;code>ASObjectList&lt;/code>. &#xA;     * The range of valid child node indices is 0 to &lt;code>length-1&lt;/code> &#xA;     * inclusive.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNamedItem">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASObject.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves an &lt;code>ASObject&lt;/code> specified by name.&#xA;     * @param name The &lt;code>nodeName&lt;/code> of an &lt;code>ASObject&lt;/code> to &#xA;     *   retrieve.&#xA;     * @return An &lt;code>ASObject&lt;/code> with specified node name and &#xA;     *   &lt;code>null&lt;/code> if the map does not contain an element with the &#xA;     *   given name.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNamedItemNS">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASObject.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves an &lt;code>ASObject&lt;/code> specified by local name and &#xA;     * namespace URI.&#xA;     * @param namespaceURI The namespace URI of the &lt;code>ASObject&lt;/code> to &#xA;     *   retrieve.&#xA;     * @param localName The local name of the &lt;code>ASObject&lt;/code> to &#xA;     *   retrieve.&#xA;     * @return A &lt;code>ASObject&lt;/code> (of any type) with the specified local &#xA;     *   name and namespace URI, or &lt;code>null&lt;/code> if they do not &#xA;     *   identify any &lt;code>ASObject&lt;/code> in this map.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="item">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASObject.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;code>index&lt;/code>th item in the map. The index starts at &#xA;     * &lt;code>0&lt;/code>. If &lt;code>index&lt;/code> is greater than or equal to the &#xA;     * number of nodes in the list, this returns &lt;code>null&lt;/code>.&#xA;     * @param index The position in the map from which the item is to be &#xA;     *   retrieved.&#xA;     * @return The &lt;code>ASObject&lt;/code> at the &lt;code>index&lt;/code>th position &#xA;     *   in the &lt;code>ASNamedObjectMap&lt;/code>, or &lt;code>null&lt;/code> if that &#xA;     *   is not a valid index.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeNamedItem">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASObject.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes an &lt;code>ASObject&lt;/code> specified by a &lt;code>nodeName&lt;/code>. &#xA;     * @param name The &lt;code>nodeName&lt;/code> of the &lt;code>ASObject&lt;/code> to &#xA;     *   be removed.&#xA;     * @return  The &lt;code>ASObject&lt;/code> removed from this map if an &#xA;     *   &lt;code>ASObject&lt;/code> with such a name exists.&#xA;     * @exception DOMException&#xA;     *   NOT_FOUND_ERR: Raised if there is no node named &lt;code>name&lt;/code> in &#xA;     *   this map.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeNamedItemNS">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASObject.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes an &lt;code>ASObject&lt;/code> specified by a namespace URI and a &#xA;     * local name.&#xA;     * @param namespaceURI The namespace URI of the &lt;code>ASObject&lt;/code> to &#xA;     *   be removed.&#xA;     * @param localName The local name of the &lt;code>ASObject&lt;/code> to remove.&#xA;     * @return The &lt;code>ASObject&lt;/code> removed from this map if an &#xA;     *   &lt;code>ASObject&lt;/code> with such a local name and namespace URI &#xA;     *   exists.&#xA;     * @exception DOMException&#xA;     *   NOT_FOUND_ERR: Raised if there is no node with the specified &#xA;     *   &lt;code>namespaceURI&lt;/code> and &lt;code>localName&lt;/code> in this map.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setNamedItem">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASObject.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newASObject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ASObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds an &lt;code>ASObject&lt;/code> using its &lt;code>nodeName&lt;/code> &#xA;     * attribute. If an &lt;code>ASObject&lt;/code> with that name is already &#xA;     * present in this map, it is replaced by the new one.&#xA;     * @param newASObject The &lt;code>ASObject&lt;/code> to be inserted in the map &#xA;     *   with its &lt;code>nodeName&lt;/code> as the key.&#xA;     * @return If the new node replaces an existing one, the replaced node is &#xA;     *   returned, otherwise &lt;code>null&lt;/code>.&#xA;     * @exception DOMException&#xA;     *   WRONG_DOCUMENT_ERR: Raised if &lt;code>arg&lt;/code> was created from a &#xA;     *   different &lt;code>ASModel&lt;/code> than the one that created this map.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.&#xA;     *   &lt;br>HIERARCHY_REQUEST_ERR: Raised if an attempt is made to add a node &#xA;     *   doesn't belong in this &lt;code>ASNamedObjectMap&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setNamedItemNS">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASObject.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newASObject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ASObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds an &lt;code>ASObject&lt;/code> using its &lt;code>namespaceURI&lt;/code> and &#xA;     * &lt;code>localName&lt;/code>. If an &lt;code>ASObject&lt;/code> with the same &#xA;     * &lt;code>namespaceURI&lt;/code> and &lt;code>localName&lt;/code> is already &#xA;     * present in this map, it is replaced by the new one.&#xA;     * @param newASObject The &lt;code>ASObject&lt;/code> to be inserted in the &#xA;     *   map.The &lt;code>ASObject&lt;/code> will later be accessible using the &#xA;     *   value of its &lt;code>namespaceURI&lt;/code> and &lt;code>localName&lt;/code> &#xA;     *   attributes.&#xA;     * @return If the new node replaces an existing one, the replaced node is &#xA;     *   returned, otherwise &lt;code>null&lt;/code>.&#xA;     * @exception DOMException&#xA;     *   &lt;code>WRONG_DOCUMENT_ERR&lt;/code>: Raised if &lt;code>arg&lt;/code> was &#xA;     *   created from a different &lt;code>ASModel&lt;/code> than the one that &#xA;     *   created this map.&#xA;     *   &lt;br>&lt;code>NO_MODIFICATION_ALLOWED_ERR&lt;/code>: Raised if this map is &#xA;     *   readonly.&#xA;     *   &lt;br>&lt;code>HIERARCHY_REQUEST_ERR&lt;/code>: Raised if an attempt is made &#xA;     *   to add a node doesn't belong in this &lt;code>ASNamedObjectMap&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * @deprecated&#xA; * Objects implementing the &lt;code>ASNamedObjectMap&lt;/code> interface are used &#xA; * to represent collections of abstract schema nodes that can be accessed by &#xA; * name. Note that &lt;code>ASNamedObjectMap&lt;/code> does not inherit from &#xA; * &lt;code>ASObjectList&lt;/code>; &lt;code>ASNamedObjectMaps&lt;/code> are not &#xA; * maintained in any particular order. Objects contained in an object &#xA; * implementing &lt;code>ASNamedObjectMap&lt;/code> may also be accessed by an &#xA; * ordinal index, but this is simply to allow convenient enumeration of the &#xA; * contents of a &lt;code>ASNamedObjectMap&lt;/code>, and does not imply that the &#xA; * DOM specifies an order to these &lt;code>ASObjects&lt;/code>. &#xA; * &lt;p>&lt;code>ASNamedObjectMap&lt;/code> object in the DOM are live.&#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2001/WD-DOM-Level-3-ASLS-20011025'>Document Object Model (DOM) Level 3 Abstract Schemas and Load&#xA;and Save Specification&lt;/a>.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
