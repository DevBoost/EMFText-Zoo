<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../../../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../../../../../../java.ecore#/17" name="FloatDV.java">
  <comments>/*&#xA; * The Apache Software License, Version 1.1&#xA; *&#xA; *&#xA; * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights&#xA; * reserved.&#xA; *&#xA; * Redistribution and use in source and binary forms, with or without&#xA; * modification, are permitted provided that the following conditions&#xA; * are met:&#xA; *&#xA; * 1. Redistributions of source code must retain the above copyright&#xA; *    notice, this list of conditions and the following disclaimer.&#xA; *&#xA; * 2. Redistributions in binary form must reproduce the above copyright&#xA; *    notice, this list of conditions and the following disclaimer in&#xA; *    the documentation and/or other materials provided with the&#xA; *    distribution.&#xA; *&#xA; * 3. The end-user documentation included with the redistribution,&#xA; *    if any, must include the following acknowledgment:&#xA; *       &quot;This product includes software developed by the&#xA; *        Apache Software Foundation (http://www.apache.org/).&quot;&#xA; *    Alternately, this acknowledgment may appear in the software itself,&#xA; *    if and wherever such third-party acknowledgments normally appear.&#xA; *&#xA; * 4. The names &quot;Xerces&quot; and &quot;Apache Software Foundation&quot; must&#xA; *    not be used to endorse or promote products derived from this&#xA; *    software without prior written permission. For written&#xA; *    permission, please contact apache@apache.org.&#xA; *&#xA; * 5. Products derived from this software may not be called &quot;Apache&quot;,&#xA; *    nor may &quot;Apache&quot; appear in their name, without prior written&#xA; *    permission of the Apache Software Foundation.&#xA; *&#xA; * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED&#xA; * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES&#xA; * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE&#xA; * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR&#xA; * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,&#xA; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT&#xA; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF&#xA; * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND&#xA; * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,&#xA; * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT&#xA; * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF&#xA; * SUCH DAMAGE.&#xA; * ====================================================================&#xA; *&#xA; * This software consists of voluntary contributions made by many&#xA; * individuals on behalf of the Apache Software Foundation and was&#xA; * originally based on software copyright (c) 2001, International&#xA; * Business Machines, Inc., http://www.apache.org.  For more&#xA; * information on the Apache Software Foundation, please see&#xA; * &lt;http://www.apache.org/>.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xerces</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>impl</namespaces>
  <namespaces>dv</namespaces>
  <namespaces>xs</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>dv</namespaces>
    <classifier xsi:type="classifiers:Class" href="../InvalidDatatypeValueException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>xerces</namespaces>
    <namespaces>internal</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>dv</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../ValidationContext.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="FloatDV">
    <members xsi:type="members:ClassMethod" name="getAllowedFacets">
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:InclusiveOrExpression">
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../xs/XSSimpleTypeDefinition.class.xmi#//@classifiers.0/@members.8"/>
              </next>
              <target xsi:type="classifiers:Class" href="XSSimpleTypeDecl.class.xmi#//@classifiers.0"/>
            </children>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../xs/XSSimpleTypeDefinition.class.xmi#//@classifiers.0/@members.9"/>
              </next>
              <target xsi:type="classifiers:Class" href="XSSimpleTypeDecl.class.xmi#//@classifiers.0"/>
            </children>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../xs/XSSimpleTypeDefinition.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <target xsi:type="classifiers:Class" href="XSSimpleTypeDecl.class.xmi#//@classifiers.0"/>
            </children>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../xs/XSSimpleTypeDefinition.class.xmi#//@classifiers.0/@members.10"/>
              </next>
              <target xsi:type="classifiers:Class" href="XSSimpleTypeDecl.class.xmi#//@classifiers.0"/>
            </children>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../xs/XSSimpleTypeDefinition.class.xmi#//@classifiers.0/@members.13"/>
              </next>
              <target xsi:type="classifiers:Class" href="XSSimpleTypeDecl.class.xmi#//@classifiers.0"/>
            </children>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../xs/XSSimpleTypeDefinition.class.xmi#//@classifiers.0/@members.11"/>
              </next>
              <target xsi:type="classifiers:Class" href="XSSimpleTypeDecl.class.xmi#//@classifiers.0"/>
            </children>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../xs/XSSimpleTypeDefinition.class.xmi#//@classifiers.0/@members.12"/>
              </next>
              <target xsi:type="classifiers:Class" href="XSSimpleTypeDecl.class.xmi#//@classifiers.0"/>
            </children>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getActualValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="content">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../ValidationContext.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../InvalidDatatypeValueException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//getAllowedFacets()</comments>
        <comments>//convert a String to Float form, we have to take care of cases specified in spec like INF, -INF and NaN</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.3"/>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          </returnValue>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../InvalidDatatypeValueException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="cvc-datatype-valid.1.2.1"/>
              <arguments xsi:type="arrays:ArrayInstantiationByValues">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <arrayInitializer>
                  <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
                  <initialValues xsi:type="references:StringReference" value="float"/>
                </arrayInitializer>
              </arguments>
            </throwable>
          </statements>
          <parameter name="ex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/NumberFormatException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="compare">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value1">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value2">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//getActualValue()</comments>
        <comments>// Can't call Float#compareTo method, because it's introduced in jdk 1.2</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.3/@members.3">
            <arguments xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.3"/>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
            </arguments>
          </next>
          <expression xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.3"/>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="XFloat">
      <members xsi:type="members:Field" name="value">
        <typeReference xsi:type="types:Float"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Constructor" name="XFloat">
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../../java/lang/Float.class.xmi#//@classifiers.0/@members.13"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.1/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/Float.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
          <catcheBlocks>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../../../../java/lang/Float.class.xmi#//@classifiers.0/@members.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/Float.class.xmi#//@classifiers.0"/>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.1/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:StringReference" value="INF"/>
                </next>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../../../../java/lang/Float.class.xmi#//@classifiers.0/@members.1"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/Float.class.xmi#//@classifiers.0"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.1/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                    <arguments xsi:type="references:StringReference" value="-INF"/>
                  </next>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../../../../../../../../../java/lang/Float.class.xmi#//@classifiers.0/@members.2"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/Float.class.xmi#//@classifiers.0"/>
                        </value>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.1/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:StringReference" value="NaN"/>
                    </next>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:Throw">
                      <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.1/@statements.0/@catcheBlocks.0/@parameter"/>
                    </statements>
                  </elseStatement>
                </elseStatement>
              </elseStatement>
            </statements>
            <parameter name="nfe">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/NumberFormatException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/NumberFormatException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
      </members>
      <members xsi:type="members:ClassMethod" name="equals">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="val">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.2/@parameters.0"/>
            <children xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.3"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.2/@parameters.0"/>
              </expression>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="oval">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.3"/>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.3"/>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.2/@parameters.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// NOTE: we don't distinguish 0.0 from -0.0</comments>
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.2/@statements.2/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.2/@statements.2/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.2/@statements.2/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
              </children>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="compareTo">
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="val">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.3"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="oval">
            <typeReference xsi:type="types:Float"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// this &lt; other</comments>
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </returnValue>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@statements.0/@variable"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// this > other</comments>
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@statements.0/@variable"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// this == other</comments>
          <comments>// NOTE: we don't distinguish 0.0 from -0.0</comments>
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@statements.0/@variable"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// one of the 2 values or both is/are NaN(s)</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <comments>// this = NaN = other</comments>
              <statement xsi:type="statements:Return">
                <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@statements.0/@variable"/>
              </condition>
            </statements>
            <statements xsi:type="statements:Return">
              <comments>// this is NaN &lt;> other</comments>
              <returnValue xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="TypeValidator.class.xmi#//@classifiers.0/@members.3"/>
              </returnValue>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <comments>// other is NaN &lt;> this</comments>
          <returnValue xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="TypeValidator.class.xmi#//@classifiers.0/@members.3"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:Field" name="canonical">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:ClassMethod" name="toString">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.4"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:StringReference" value="INF"/>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../../../../java/lang/Float.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/Float.class.xmi#//@classifiers.0"/>
                </children>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.4"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:StringReference" value="-INF"/>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../../../../java/lang/Float.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/Float.class.xmi#//@classifiers.0"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <comments>// NOTE: we don't distinguish 0.0 from -0.0</comments>
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.4"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:StringReference" value="NaN"/>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
                  </condition>
                  <elseStatement xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.4"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:StringReference" value="0.0E1"/>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </condition>
                    <elseStatement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.4">
                            <comments>// REVISIT: use the java algorithm for now, because we</comments>
                            <comments>// don't know what to output for 1.1f (which is no</comments>
                            <comments>// actually 1.1)</comments>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../../../../../../java/lang/Float.class.xmi#//@classifiers.0/@members.9"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/Float.class.xmi#//@classifiers.0"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <comments>// if it contains 'E', then it should be a valid schema</comments>
                        <comments>// canonical representation</comments>
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:LocalVariableStatement">
                            <variable name="len">
                              <typeReference xsi:type="types:Int"/>
                              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.4">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                                </next>
                              </initialValue>
                            </variable>
                          </statements>
                          <statements xsi:type="statements:LocalVariableStatement">
                            <variable name="chars">
                              <typeReference xsi:type="types:Char">
                                <comments>// at most 3 longer: E, -, 9</comments>
                              </typeReference>
                              <arrayDimensionsBefore/>
                              <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                                <typeReference xsi:type="types:Char"/>
                                <sizes xsi:type="expressions:AdditiveExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                                  <additiveOperators xsi:type="operators:Addition"/>
                                </sizes>
                              </initialValue>
                            </variable>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.4">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.29"/>
                                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable"/>
                                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                              </next>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:LocalVariableStatement">
                            <variable name="edp">
                              <typeReference xsi:type="types:Int">
                                <comments>// expected decimal point position</comments>
                              </typeReference>
                              <initialValue xsi:type="expressions:ConditionalExpression">
                                <child xsi:type="expressions:EqualityExpression">
                                  <equalityOperators xsi:type="operators:Equal"/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                    <arraySelectors>
                                      <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                    </arraySelectors>
                                  </children>
                                  <children xsi:type="literals:CharacterLiteral" value="45"/>
                                </child>
                                <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                                <expressionElse xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                              </initialValue>
                            </variable>
                          </statements>
                          <statements xsi:type="statements:Condition">
                            <comments>// for non-zero integer part</comments>
                            <statement xsi:type="statements:Block">
                              <statements xsi:type="statements:LocalVariableStatement">
                                <variable name="dp">
                                  <typeReference xsi:type="types:Int">
                                    <comments>// decimal point position</comments>
                                  </typeReference>
                                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.4">
                                    <next xsi:type="references:MethodCall">
                                      <target xsi:type="members:ClassMethod" href="../../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.45"/>
                                      <arguments xsi:type="literals:CharacterLiteral" value="46"/>
                                    </next>
                                  </initialValue>
                                </variable>
                              </statements>
                              <statements xsi:type="statements:ForLoop">
                                <comments>// move the digits: ddd.d --> d.ddd</comments>
                                <statement xsi:type="statements:Block">
                                  <statements xsi:type="statements:ExpressionStatement">
                                    <expression xsi:type="expressions:AssignmentExpression">
                                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                        <arraySelectors>
                                          <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@statement/@statements.1/@init"/>
                                        </arraySelectors>
                                      </child>
                                      <assignmentOperator xsi:type="operators:Assignment"/>
                                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                        <arraySelectors>
                                          <position xsi:type="expressions:AdditiveExpression">
                                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@statement/@statements.1/@init"/>
                                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                            <additiveOperators xsi:type="operators:Subtraction"/>
                                          </position>
                                        </arraySelectors>
                                      </value>
                                    </expression>
                                  </statements>
                                </statement>
                                <condition xsi:type="expressions:RelationExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@statement/@statements.1/@init"/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.3/@variable"/>
                                  <relationOperators xsi:type="operators:GreaterThan"/>
                                </condition>
                                <init xsi:type="variables:LocalVariable" name="i">
                                  <typeReference xsi:type="types:Int"/>
                                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@statement/@statements.0/@variable"/>
                                </init>
                                <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@statement/@statements.1/@init"/>
                                  <operator xsi:type="operators:MinusMinus"/>
                                </updates>
                              </statements>
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                    <arraySelectors>
                                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.3/@variable"/>
                                    </arraySelectors>
                                  </child>
                                  <assignmentOperator xsi:type="operators:Assignment"/>
                                  <value xsi:type="literals:CharacterLiteral" value="46"/>
                                </expression>
                              </statements>
                              <statements xsi:type="statements:WhileLoop">
                                <comments>// trim trailing zeros: d00.0 --> d.000 --> d.</comments>
                                <statement xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                                    <operator xsi:type="operators:MinusMinus"/>
                                  </expression>
                                </statement>
                                <condition xsi:type="expressions:EqualityExpression">
                                  <equalityOperators xsi:type="operators:Equal"/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                    <arraySelectors>
                                      <position xsi:type="expressions:AdditiveExpression">
                                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                        <additiveOperators xsi:type="operators:Subtraction"/>
                                      </position>
                                    </arraySelectors>
                                  </children>
                                  <children xsi:type="literals:CharacterLiteral" value="48"/>
                                </condition>
                              </statements>
                              <statements xsi:type="statements:Condition">
                                <comments>// add the last zero if necessary: d. --> d.0</comments>
                                <statement xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                                    <operator xsi:type="operators:PlusPlus"/>
                                  </expression>
                                </statement>
                                <condition xsi:type="expressions:EqualityExpression">
                                  <equalityOperators xsi:type="operators:Equal"/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                    <arraySelectors>
                                      <position xsi:type="expressions:AdditiveExpression">
                                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                        <additiveOperators xsi:type="operators:Subtraction"/>
                                      </position>
                                    </arraySelectors>
                                  </children>
                                  <children xsi:type="literals:CharacterLiteral" value="46"/>
                                </condition>
                              </statements>
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                    <comments>// append E: d.dd --> d.ddE</comments>
                                    <arraySelectors>
                                      <position xsi:type="expressions:SuffixUnaryModificationExpression">
                                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                                        <operator xsi:type="operators:PlusPlus"/>
                                      </position>
                                    </arraySelectors>
                                  </child>
                                  <assignmentOperator xsi:type="operators:Assignment"/>
                                  <value xsi:type="literals:CharacterLiteral" value="69"/>
                                </expression>
                              </statements>
                              <statements xsi:type="statements:LocalVariableStatement">
                                <variable name="shift">
                                  <typeReference xsi:type="types:Int">
                                    <comments>// how far we shifted the decimal point</comments>
                                  </typeReference>
                                  <initialValue xsi:type="expressions:AdditiveExpression">
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@statement/@statements.0/@variable"/>
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.3/@variable"/>
                                    <additiveOperators xsi:type="operators:Subtraction"/>
                                  </initialValue>
                                </variable>
                              </statements>
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                    <comments>// append the exponent --> d.ddEd</comments>
                                    <comments>// the exponent is at most 7</comments>
                                    <arraySelectors>
                                      <position xsi:type="expressions:SuffixUnaryModificationExpression">
                                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                                        <operator xsi:type="operators:PlusPlus"/>
                                      </position>
                                    </arraySelectors>
                                  </child>
                                  <assignmentOperator xsi:type="operators:Assignment"/>
                                  <value xsi:type="expressions:CastExpression">
                                    <typeReference xsi:type="types:Char"/>
                                    <child xsi:type="expressions:NestedExpression">
                                      <expression xsi:type="expressions:AdditiveExpression">
                                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@statement/@statements.6/@variable"/>
                                        <children xsi:type="literals:CharacterLiteral" value="48"/>
                                        <additiveOperators xsi:type="operators:Addition"/>
                                      </expression>
                                    </child>
                                  </value>
                                </expression>
                              </statements>
                            </statement>
                            <condition xsi:type="expressions:ConditionalOrExpression">
                              <children xsi:type="expressions:RelationExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
                                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                              </children>
                              <children xsi:type="expressions:RelationExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.0"/>
                                <children xsi:type="expressions:UnaryExpression">
                                  <operators xsi:type="operators:Subtraction"/>
                                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                </children>
                                <relationOperators xsi:type="operators:LessThanOrEqual"/>
                              </children>
                            </condition>
                            <elseStatement xsi:type="statements:Block">
                              <statements xsi:type="statements:LocalVariableStatement">
                                <variable name="nzp">
                                  <typeReference xsi:type="types:Int">
                                    <comments>// non-zero digit point</comments>
                                  </typeReference>
                                  <initialValue xsi:type="expressions:AdditiveExpression">
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.3/@variable"/>
                                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                    <additiveOperators xsi:type="operators:Addition"/>
                                  </initialValue>
                                </variable>
                              </statements>
                              <statements xsi:type="statements:WhileLoop">
                                <comments>// skip zeros: 0.003</comments>
                                <statement xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@elseStatement/@statements.0/@variable"/>
                                    <operator xsi:type="operators:PlusPlus"/>
                                  </expression>
                                </statement>
                                <condition xsi:type="expressions:EqualityExpression">
                                  <equalityOperators xsi:type="operators:Equal"/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                    <arraySelectors>
                                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@elseStatement/@statements.0/@variable"/>
                                    </arraySelectors>
                                  </children>
                                  <children xsi:type="literals:CharacterLiteral" value="48"/>
                                </condition>
                              </statements>
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                    <comments>// put the first non-zero digit to the left of '.'</comments>
                                    <arraySelectors>
                                      <position xsi:type="expressions:AdditiveExpression">
                                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.3/@variable"/>
                                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                        <additiveOperators xsi:type="operators:Subtraction"/>
                                      </position>
                                    </arraySelectors>
                                  </child>
                                  <assignmentOperator xsi:type="operators:Assignment"/>
                                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                    <arraySelectors>
                                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@elseStatement/@statements.0/@variable"/>
                                    </arraySelectors>
                                  </value>
                                </expression>
                              </statements>
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                    <arraySelectors>
                                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.3/@variable"/>
                                    </arraySelectors>
                                  </child>
                                  <assignmentOperator xsi:type="operators:Assignment"/>
                                  <value xsi:type="literals:CharacterLiteral" value="46"/>
                                </expression>
                              </statements>
                              <statements xsi:type="statements:ForLoop">
                                <comments>// move other digits (non-zero) to the right of '.'</comments>
                                <statement xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="expressions:AssignmentExpression">
                                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                      <arraySelectors>
                                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@elseStatement/@statements.4/@init/@additionalLocalVariables.0"/>
                                      </arraySelectors>
                                    </child>
                                    <assignmentOperator xsi:type="operators:Assignment"/>
                                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                      <arraySelectors>
                                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@elseStatement/@statements.4/@init"/>
                                      </arraySelectors>
                                    </value>
                                  </expression>
                                </statement>
                                <condition xsi:type="expressions:RelationExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@elseStatement/@statements.4/@init"/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                                  <relationOperators xsi:type="operators:LessThan"/>
                                </condition>
                                <init xsi:type="variables:LocalVariable" name="i">
                                  <typeReference xsi:type="types:Int"/>
                                  <initialValue xsi:type="expressions:AdditiveExpression">
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@elseStatement/@statements.0/@variable"/>
                                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                    <additiveOperators xsi:type="operators:Addition"/>
                                  </initialValue>
                                  <additionalLocalVariables name="j">
                                    <initialValue xsi:type="expressions:AdditiveExpression">
                                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.3/@variable"/>
                                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                      <additiveOperators xsi:type="operators:Addition"/>
                                    </initialValue>
                                  </additionalLocalVariables>
                                </init>
                                <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@elseStatement/@statements.4/@init"/>
                                  <operator xsi:type="operators:PlusPlus"/>
                                </updates>
                                <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@elseStatement/@statements.4/@init/@additionalLocalVariables.0"/>
                                  <operator xsi:type="operators:PlusPlus"/>
                                </updates>
                              </statements>
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable">
                                    <comments>// adjust the length</comments>
                                  </child>
                                  <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                                  <value xsi:type="expressions:AdditiveExpression">
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@elseStatement/@statements.0/@variable"/>
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.3/@variable"/>
                                    <additiveOperators xsi:type="operators:Subtraction"/>
                                  </value>
                                </expression>
                              </statements>
                              <statements xsi:type="statements:Condition">
                                <comments>// append 0 if nessary: 0.03 --> 3. --> 3.0</comments>
                                <statement xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="expressions:AssignmentExpression">
                                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                      <arraySelectors>
                                        <position xsi:type="expressions:SuffixUnaryModificationExpression">
                                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                                          <operator xsi:type="operators:PlusPlus"/>
                                        </position>
                                      </arraySelectors>
                                    </child>
                                    <assignmentOperator xsi:type="operators:Assignment"/>
                                    <value xsi:type="literals:CharacterLiteral" value="48"/>
                                  </expression>
                                </statement>
                                <condition xsi:type="expressions:EqualityExpression">
                                  <equalityOperators xsi:type="operators:Equal"/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                                  <children xsi:type="expressions:AdditiveExpression">
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.3/@variable"/>
                                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                    <additiveOperators xsi:type="operators:Addition"/>
                                  </children>
                                </condition>
                              </statements>
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                    <comments>// append E-: d.dd --> d.ddE-</comments>
                                    <arraySelectors>
                                      <position xsi:type="expressions:SuffixUnaryModificationExpression">
                                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                                        <operator xsi:type="operators:PlusPlus"/>
                                      </position>
                                    </arraySelectors>
                                  </child>
                                  <assignmentOperator xsi:type="operators:Assignment"/>
                                  <value xsi:type="literals:CharacterLiteral" value="69"/>
                                </expression>
                              </statements>
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                    <arraySelectors>
                                      <position xsi:type="expressions:SuffixUnaryModificationExpression">
                                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                                        <operator xsi:type="operators:PlusPlus"/>
                                      </position>
                                    </arraySelectors>
                                  </child>
                                  <assignmentOperator xsi:type="operators:Assignment"/>
                                  <value xsi:type="literals:CharacterLiteral" value="45"/>
                                </expression>
                              </statements>
                              <statements xsi:type="statements:LocalVariableStatement">
                                <variable name="shift">
                                  <typeReference xsi:type="types:Int">
                                    <comments>// how far we shifted the decimal point</comments>
                                  </typeReference>
                                  <initialValue xsi:type="expressions:AdditiveExpression">
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@elseStatement/@statements.0/@variable"/>
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.3/@variable"/>
                                    <additiveOperators xsi:type="operators:Subtraction"/>
                                  </initialValue>
                                </variable>
                              </statements>
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="expressions:AssignmentExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable">
                                    <comments>// append the exponent --> d.ddEd</comments>
                                    <comments>// the exponent is at most 3</comments>
                                    <arraySelectors>
                                      <position xsi:type="expressions:SuffixUnaryModificationExpression">
                                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                                        <operator xsi:type="operators:PlusPlus"/>
                                      </position>
                                    </arraySelectors>
                                  </child>
                                  <assignmentOperator xsi:type="operators:Assignment"/>
                                  <value xsi:type="expressions:CastExpression">
                                    <typeReference xsi:type="types:Char"/>
                                    <child xsi:type="expressions:NestedExpression">
                                      <expression xsi:type="expressions:AdditiveExpression">
                                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.4/@elseStatement/@statements.9/@variable"/>
                                        <children xsi:type="literals:CharacterLiteral" value="48"/>
                                        <additiveOperators xsi:type="operators:Addition"/>
                                      </expression>
                                    </child>
                                  </value>
                                </expression>
                              </statements>
                            </elseStatement>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.4"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="instantiations:NewConstructorCall">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.1/@variable"/>
                                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.5/@statements.0/@statement/@statements.0/@elseStatement/@elseStatement/@elseStatement/@elseStatement/@statements.1/@statement/@statements.0/@variable"/>
                              </value>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.4">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.45"/>
                              <arguments xsi:type="literals:CharacterLiteral" value="69"/>
                            </next>
                          </children>
                          <children xsi:type="expressions:UnaryExpression">
                            <operators xsi:type="operators:Subtraction"/>
                            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          </children>
                        </condition>
                      </statements>
                    </elseStatement>
                  </elseStatement>
                </elseStatement>
              </elseStatement>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.4"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.4"/>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>//compare()</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Represent the schema type &quot;float&quot;&#xA; *&#xA; * @author Neeraj Bajaj, Sun Microsystems, inc.&#xA; * @author Sandy Gao, IBM&#xA; *&#xA; * @version $Id: FloatDV.java,v 1.6 2003/02/17 13:45:57 sandygao Exp $&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="TypeValidator.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
