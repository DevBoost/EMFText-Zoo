<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../../../java.ecore#/16" name="IncrementalSAXSource.java">
  <comments>/*&#xA; * Copyright 1999-2004 The Apache Software Foundation.&#xA; *&#xA; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#xA; * you may not use this file except in compliance with the License.&#xA; * You may obtain a copy of the License at&#xA; *&#xA; *     http://www.apache.org/licenses/LICENSE-2.0&#xA; *&#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <comments>/*&#xA; * $Id: IncrementalSAXSource.java,v 1.6 2004/02/16 23:06:11 minchau Exp $&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>dtm</namespaces>
  <namespaces>ref</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/ContentHandler.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/InputSource.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="IncrementalSAXSource">
    <members xsi:type="members:InterfaceMethod" name="setContentHandler">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="handler">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/ContentHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ------------------------------------------------------------------</comments>
        <comments>// SAX Output API</comments>
        <comments>// ------------------------------------------------------------------</comments>
        <comments>/** Register a SAX-style content handler for us to output to&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setLexicalHandler">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="handler">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>xml</namespaces>
          <namespaces>sax</namespaces>
          <namespaces>ext</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/ext/LexicalHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**  Register a SAX-style lexical handler for us to output to&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setDTDHandler">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="handler">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>xml</namespaces>
          <namespaces>sax</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../../org/xml/sax/DTDHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**  Register a SAX-style DTD handler for us to output to&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="deliverMoreNodes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parsemore">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ------------------------------------------------------------------</comments>
        <comments>// Command Input API</comments>
        <comments>// ------------------------------------------------------------------</comments>
        <comments>/** deliverMoreNodes() is a simple API which tells the thread in which the&#xA;   * IncrementalSAXSource is running to deliver more events (true),&#xA;   * or stop delivering events and close out its input (false).&#xA;   *&#xA;   * This is intended to be called from one of our partner coroutines,&#xA;   * and serves to encapsulate the coroutine communication protocol.&#xA;   *&#xA;   * @param parsemore If true, tells the incremental SAX stream to deliver&#xA;   * another chunk of events. If false, finishes out the stream.&#xA;   *&#xA;   * @return Boolean.TRUE if the IncrementalSAXSource believes more data&#xA;   * may be available for further parsing. Boolean.FALSE if parsing&#xA;   * ran to completion, or was ended by deliverMoreNodes(false).&#xA;   * */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="startParse">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="source">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/InputSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../org/xml/sax/SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ------------------------------------------------------------------</comments>
        <comments>// Parse Thread Convenience API</comments>
        <comments>// ------------------------------------------------------------------</comments>
        <comments>/** Launch an XMLReader's parsing operation, feeding events to this&#xA;   * IncrementalSAXSource. In some implementations, this may launch a&#xA;   * thread which runs the previously supplied XMLReader's parse() operation.&#xA;   * In others, it may do other forms of initialization.&#xA;   *&#xA;   * @throws SAXException is parse thread is already in progress&#xA;   * or parsing can not be started.&#xA;   * */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** &lt;p>IncrementalSAXSource is an API that delivers a small number of&#xA; * SAX events each time a request is made from a &quot;controller&quot;&#xA; * coroutine.  See IncrementalSAXFilter and IncrementalSAXFilter_Xerces&#xA; * for examples.&#xA; * &#xA; * Note that interaction is via the deliverMoreNodes&#xA; * method, and therefore coroutine support is not exposed&#xA; * here.&lt;/p>&#xA; * */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
