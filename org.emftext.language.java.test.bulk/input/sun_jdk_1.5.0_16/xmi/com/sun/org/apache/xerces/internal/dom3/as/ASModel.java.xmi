<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../../../java.ecore#/16" name="ASModel.java">
  <comments>/*&#xA; * Copyright (c) 2001 World Wide Web Consortium,&#xA; * (Massachusetts Institute of Technology, Institut National de&#xA; * Recherche en Informatique et en Automatique, Keio University). All&#xA; * Rights Reserved. This program is distributed under the W3C's Software&#xA; * Intellectual Property License. This program is distributed in the&#xA; * hope that it will be useful, but WITHOUT ANY WARRANTY; without even&#xA; * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR&#xA; * PURPOSE.&#xA; * See W3C License http://www.w3.org/Consortium/Legal/ for more details.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xerces</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>dom3</namespaces>
  <namespaces>as</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ASModel">
    <members xsi:type="members:InterfaceMethod" name="getIsNamespaceAware">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;code>true&lt;/code> if this &lt;code>ASModel&lt;/code> defines the document &#xA;     * structure in terms of namespaces and local names ; &lt;code>false&lt;/code> &#xA;     * if the document structure is defined only in terms of &#xA;     * &lt;code>QNames&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUsageLocation">
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  0 if used internally, 1 if used externally, 2 if not all. An exception &#xA;     * will be raised if it is incompatibly shared or in use as an internal &#xA;     * subset. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAsLocation">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The URI reference. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAsLocation">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="asLocation">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The URI reference. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAsHint">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The hint to locating an ASModel. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAsHint">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="asHint">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The hint to locating an ASModel. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getElementDeclarations">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASNamedObjectMap.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Instead of returning an all-in-one &lt;code>ASObject&lt;/code> with &#xA;     * &lt;code>ASModel&lt;/code> methods, have discernible top-level/&quot;global&quot; &#xA;     * element declarations. If one attempts to add, set, or remove a node &#xA;     * type other than the intended one, a hierarchy exception (or &#xA;     * equivalent is thrown). &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributeDeclarations">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASNamedObjectMap.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Instead of returning an all-in-one &lt;code>ASObject&lt;/code> with &#xA;     * &lt;code>ASModel&lt;/code> methods, have discernible top-level/&quot;global&quot; &#xA;     * attribute declarations. If one attempts to add, set, or remove a node &#xA;     * type other than the intended one, a hierarchy exception (or &#xA;     * equivalent is thrown). &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNotationDeclarations">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASNamedObjectMap.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Instead of returning an all-in-one &lt;code>ASObject&lt;/code> with &#xA;     * &lt;code>ASModel&lt;/code> methods, have discernible top-level/&quot;global&quot; &#xA;     * notation declarations. If one attempts to add, set, or remove a node &#xA;     * type other than the intended one, a hierarchy exception (or &#xA;     * equivalent is thrown). &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getEntityDeclarations">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASNamedObjectMap.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Instead of returning an all-in-one &lt;code>ASObject&lt;/code> with &#xA;     * &lt;code>ASModel&lt;/code> methods, have discernible top-level/&quot;global&quot; &#xA;     * entity declarations. If one attempts to add, set, or remove a node &#xA;     * type other than the intended one, a hierarchy exception (or &#xA;     * equivalent is thrown). &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getContentModelDeclarations">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASNamedObjectMap.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Instead of returning an all-in-one &lt;code>ASObject&lt;/code> with &#xA;     * &lt;code>ASModel&lt;/code> methods, have discernible top-level/&quot;global &#xA;     * content model declarations. If one attempts to add, set, or remove a &#xA;     * node type other than the intended one, a hierarchy exception (or &#xA;     * equivalent is thrown). &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addASModel">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="abstractSchema">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method will allow the nesting or &quot;importation&quot; of ASModels. &#xA;     * @param abstractSchema ASModel to be set. Subsequent calls will nest &#xA;     *   the ASModels within the specified &lt;code>ownerASModel&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getASModels">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASObjectList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * To retrieve a list of nested ASModels without reference to names. &#xA;     * @return A list of ASModels. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeAS">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="as">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes only the specified &lt;code>ASModel&lt;/code> from the list of &#xA;     * &lt;code>ASModel&lt;/code>s.&#xA;     * @param as AS to be removed.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="validate">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines if an &lt;code>ASModel&lt;/code> itself is valid, i.e., confirming &#xA;     * that it's well-formed and valid per its own formal grammar. &#xA;     * @return &lt;code>true&lt;/code> if the &lt;code>ASModel&lt;/code> is valid, &#xA;     *   &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createASElementDeclaration">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASElementDeclaration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an element declaration for the element type specified.&#xA;     * @param namespaceURI The &lt;code>namespace URI&lt;/code> of the element type &#xA;     *   being declared. &#xA;     * @param name The name of the element. The format of the name could be &#xA;     *   an NCName as defined by XML Namespaces or a Name as defined by XML &#xA;     *   1.0; it's ASModel-dependent. &#xA;     * @return A new &lt;code>ASElementDeclaration&lt;/code> object with &#xA;     *   &lt;code>name&lt;/code> attribute set to &lt;code>tagname&lt;/code> and &#xA;     *   &lt;code>namespaceURI&lt;/code> set to &lt;code>systemId&lt;/code>. Other &#xA;     *   attributes of the element declaration are set through &#xA;     *   &lt;code>ASElementDeclaration&lt;/code> interface methods.&#xA;     * @exception DOMException&#xA;     *   INVALID_CHARACTER_ERR: Raised if the specified name contains an &#xA;     *   illegal character.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createASAttributeDeclaration">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASAttributeDeclaration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an attribute declaration.&#xA;     * @param namespaceURI The namespace URI of the attribute being declared.&#xA;     * @param name The name of the attribute. The format of the name could be &#xA;     *   an NCName as defined by XML Namespaces or a Name as defined by XML &#xA;     *   1.0; it's ASModel-dependent. &#xA;     * @return A new &lt;code>ASAttributeDeclaration&lt;/code> object with &#xA;     *   appropriate attributes set by input parameters.&#xA;     * @exception DOMException&#xA;     *   INVALID_CHARACTER_ERR: Raised if the input &lt;code>name&lt;/code> &#xA;     *   parameter contains an illegal character.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createASNotationDeclaration">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASNotationDeclaration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="systemId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="publicId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new notation declaration. &#xA;     * @param namespaceURI The namespace URI of the notation being declared.&#xA;     * @param name The name of the notation. The format of the name could be &#xA;     *   an NCName as defined by XML Namespaces or a Name as defined by XML &#xA;     *   1.0; it's ASModel-dependent. &#xA;     * @param systemId The system identifier for the notation declaration.&#xA;     * @param publicId The public identifier for the notation declaration.&#xA;     * @return A new &lt;code>ASNotationDeclaration&lt;/code> object with &#xA;     *   &lt;code>notationName&lt;/code> attribute set to &lt;code>name&lt;/code> and &#xA;     *   &lt;code>publicId&lt;/code> and &lt;code>systemId&lt;/code> set to the &#xA;     *   corresponding fields.&#xA;     * @exception DOMException&#xA;     *   INVALID_CHARACTER_ERR: Raised if the specified name contains an &#xA;     *   illegal character.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createASEntityDeclaration">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASEntityDeclaration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../../org/w3c/dom/DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an ASEntityDeclaration. &#xA;     * @param name The name of the entity being declared.&#xA;     * @return A new &lt;code>ASEntityDeclaration&lt;/code> object with &#xA;     *   &lt;code>entityName&lt;/code> attribute set to name.&#xA;     * @exception DOMException&#xA;     *   INVALID_CHARACTER_ERR: Raised if the specified name contains an &#xA;     *   illegal character.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createASContentModel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ASContentModel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minOccurs">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maxOccurs">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="operator">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMASException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an object which describes part of an &#xA;     * &lt;code>ASElementDeclaration&lt;/code>'s content model. &#xA;     * @param minOccurs The minimum occurrence for the subModels of this &#xA;     *   &lt;code>ASContentModel&lt;/code>.&#xA;     * @param maxOccurs The maximum occurrence for the subModels of this &#xA;     *   &lt;code>ASContentModel&lt;/code>.&#xA;     * @param operator operator of type &lt;code>AS_CHOICE&lt;/code>, &#xA;     *   &lt;code>AS_SEQUENCE&lt;/code>, &lt;code>AS_ALL&lt;/code> or &#xA;     *   &lt;code>AS_NONE&lt;/code>.&#xA;     * @return A new &lt;code>ASContentModel&lt;/code> object.&#xA;     * @exception DOMASException&#xA;     *   A DOMASException, e.g., &lt;code>minOccurs &amp;gt; maxOccurs&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * @deprecated&#xA; *  To begin with, an abstract schema is a generic structure that could &#xA; * contain both internal and external subsets. An &lt;code>ASModel&lt;/code> is an &#xA; * abstract object that could map to a DTD , an XML Schema , a database &#xA; * schema, etc. An &lt;code>ASModel&lt;/code> could represent either an internal &#xA; * or an external subset; hence an abstract schema could be composed of an &#xA; * &lt;code>ASModel&lt;/code> representing the internal subset and an &#xA; * &lt;code>ASModel&lt;/code> representing the external subset. Note that the &#xA; * &lt;code>ASModel&lt;/code> representing the external subset could consult the &#xA; * &lt;code>ASModel&lt;/code> representing the internal subset. Furthermore, the &#xA; * &lt;code>ASModel&lt;/code> representing the internal subset could be set to &#xA; * null by the &lt;code>setInternalAS&lt;/code> method as a mechanism for &#xA; * &quot;removal&quot;. In addition, only one &lt;code>ASModel&lt;/code> representing the &#xA; * external subset can be specified as &quot;active&quot; and it is possible that none &#xA; * are &quot;active&quot;. Finally, the &lt;code>ASModel&lt;/code> contains the factory &#xA; * methods needed to create a various types of ASObjects like &#xA; * &lt;code>ASElementDeclaration&lt;/code>, &lt;code>ASAttributeDeclaration&lt;/code>, &#xA; * etc. &#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2001/WD-DOM-Level-3-ASLS-20011025'>Document Object Model (DOM) Level 3 Abstract Schemas and Load&#xA;and Save Specification&lt;/a>.&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="ASObject.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
