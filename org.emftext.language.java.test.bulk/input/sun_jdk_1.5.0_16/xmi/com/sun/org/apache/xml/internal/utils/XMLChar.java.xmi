<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../../java.ecore#/5 http://www.emftext.org/java/literals ../../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../../../../java.ecore#/17" name="XMLChar.java">
  <comments>/*&#xA; * Copyright 1999-2004 The Apache Software Foundation.&#xA; *&#xA; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#xA; * you may not use this file except in compliance with the License.&#xA; * You may obtain a copy of the License at&#xA; *&#xA; *     http://www.apache.org/licenses/LICENSE-2.0&#xA; *&#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <comments>/*&#xA; * $Id$&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>internal</namespaces>
  <namespaces>utils</namespaces>
  <classifiers xsi:type="classifiers:Class" name="XMLChar">
    <members xsi:type="members:Field" name="CHARS">
      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
        <typeReference xsi:type="types:Byte"/>
        <sizes xsi:type="expressions:ShiftExpression">
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
          <shiftOperators xsi:type="operators:LeftShift"/>
        </sizes>
      </initialValue>
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Constants</comments>
        <comments>//</comments>
        <comments>/** Character flags. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MASK_VALID">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Valid character mask. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MASK_SPACE">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Space character mask. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MASK_NAME_START">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="4"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Name start character mask. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MASK_NAME">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="8"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Name character mask. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MASK_PUBID">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="16"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Pubid character mask. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MASK_CONTENT">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="32"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Content character mask. Special characters are those that can&#xA;     * be considered the start of markup, such as '&amp;lt;' and '&amp;amp;'. &#xA;     * The various newline characters are considered special as well.&#xA;     * All other valid XML characters can be considered content.&#xA;     * &lt;p>&#xA;     * This is an optimization for the inner loop of character scanning.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MASK_NCNAME_START">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="64"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** NCName start character mask. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MASK_NCNAME">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** NCName character mask. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="charRange">
          <typeReference xsi:type="types:Int">
            <comments>//</comments>
            <comments>// [2] Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] |</comments>
            <comments>//              [#xE000-#xFFFD] | [#x10000-#x10FFFF]</comments>
            <comments>//</comments>
          </typeReference>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="9"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="10"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="13"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="13"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="32"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="55295"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="57344"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="65533"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="spaceChar">
          <typeReference xsi:type="types:Int">
            <comments>//</comments>
            <comments>// [3] S ::= (#x20 | #x9 | #xD | #xA)+</comments>
            <comments>//</comments>
          </typeReference>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="32"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="9"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="13"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="10"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nameChar">
          <typeReference xsi:type="types:Int">
            <comments>//</comments>
            <comments>// [4] NameChar ::= Letter | Digit | '.' | '-' | '_' | ':' |</comments>
            <comments>//                  CombiningChar | Extender</comments>
            <comments>//</comments>
          </typeReference>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <comments>// '-' and '.'</comments>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="45"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="46"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nameStartChar">
          <typeReference xsi:type="types:Int">
            <comments>//</comments>
            <comments>// [5] Name ::= (Letter | '_' | ':') (NameChar)*</comments>
            <comments>//</comments>
          </typeReference>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <comments>// ':' and '_'</comments>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="58"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="95"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="pubidChar">
          <typeReference xsi:type="types:Int">
            <comments>//</comments>
            <comments>// [13] PubidChar ::= #x20 | 0xD | 0xA | [a-zA-Z0-9] | [-'()+,./:=?;!*#@$_%]</comments>
            <comments>//</comments>
          </typeReference>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="10"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="13"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="32"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="33"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="35"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="36"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="37"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="61"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="95"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="pubidRange">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="39"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="59"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="63"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="90"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="97"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="122"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="letterRange">
          <typeReference xsi:type="types:Int">
            <comments>//</comments>
            <comments>// [84] Letter ::= BaseChar | Ideographic</comments>
            <comments>//</comments>
          </typeReference>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="65">
                <comments>// BaseChar</comments>
              </initialValues>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="90"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="97"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="122"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="192"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="214"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="216"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="246"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="248"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="305"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="308"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="318"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="321"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="328"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="330"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="382"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="384"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="451"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="461"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="496"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="500"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="501"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="506"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="535"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="592"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="680"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="699"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="705"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="904"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="906"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="910"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="929"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="931"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="974"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="976"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="982"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="994"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1011"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1025"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1036"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1038"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1103"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1105"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1116"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1118"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1153"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1168"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1220"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1223"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1224"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1227"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1228"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1232"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1259"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1262"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1269"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1272"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1273"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1329"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1366"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1377"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1414"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1488"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1514"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1520"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1522"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1569"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1594"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1601"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1610"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1649"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1719"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1722"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1726"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1728"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1742"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1744"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1747"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1765"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1766"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2309"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2361"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2392"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2401"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2437"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2444"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2447"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2448"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2451"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2472"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2474"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2480"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2486"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2489"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2524"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2525"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2527"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2529"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2544"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2545"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2565"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2570"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2575"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2576"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2579"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2600"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2602"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2608"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2610"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2611"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2613"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2614"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2616"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2617"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2649"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2652"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2674"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2676"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2693"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2699"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2703"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2705"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2707"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2728"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2730"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2736"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2738"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2739"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2741"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2745"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2821"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2828"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2831"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2832"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2835"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2856"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2858"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2864"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2866"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2867"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2870"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2873"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2908"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2909"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2911"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2913"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2949"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2954"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2958"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2960"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2962"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2965"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2969"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2970"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2974"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2975"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2979"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2980"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2984"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2986"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2990"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2997"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2999"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3001"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3077"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3084"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3086"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3088"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3090"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3112"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3114"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3123"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3125"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3129"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3168"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3169"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3205"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3212"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3214"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3216"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3218"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3240"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3242"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3251"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3253"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3257"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3296"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3297"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3333"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3340"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3342"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3344"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3346"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3368"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3370"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3385"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3424"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3425"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3585"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3630"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3634"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3635"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3648"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3653"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3713"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3714"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3719"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3720"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3732"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3735"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3737"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3743"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3745"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3747"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3754"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3755"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3757"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3758"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3762"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3763"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3776"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3780"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3904"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3911"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3913"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3945"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4256"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4293"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4304"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4342"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4354"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4355"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4357"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4359"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4363"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4364"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4366"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4370"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4436"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4437"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4447"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4449"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4461"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4462"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4466"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4467"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4526"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4527"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4535"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4536"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4540"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4546"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="7680"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="7835"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="7840"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="7929"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="7936"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="7957"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="7960"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="7965"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="7968"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8005"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8008"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8013"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8016"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8023"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8031"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8061"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8064"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8116"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8118"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8124"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8130"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8132"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8134"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8140"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8144"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8147"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8150"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8155"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8160"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8172"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8178"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8180"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8182"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8188"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8490"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8491"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8576"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8578"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12353"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12436"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12449"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12538"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12549"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12588"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="44032"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="55203"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12321">
                <comments>// Ideographic</comments>
              </initialValues>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12329"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="19968"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="40869"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="letterChar">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="902">
                <comments>// BaseChar</comments>
              </initialValues>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="908"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="986"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="988"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="990"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="992"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1369"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1749"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2365"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2482"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2654"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2701"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2749"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2784"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2877"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2972"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3294"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3632"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3716"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3722"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3725"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3749"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3751"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3760"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3773"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4352"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4361"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4412"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4414"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4416"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4428"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4430"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4432"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4441"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4451"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4453"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4455"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4457"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4469"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4510"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4520"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4523"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4538"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4587"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4592"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4601"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8025"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8027"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8029"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8126"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8486"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8494"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12295">
                <comments>// Ideographic</comments>
              </initialValues>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="combiningCharRange">
          <typeReference xsi:type="types:Int">
            <comments>//</comments>
            <comments>// [87] CombiningChar ::= ...</comments>
            <comments>//</comments>
          </typeReference>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="768"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="837"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="864"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="865"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1155"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1158"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1425"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1441"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1443"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1465"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1467"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1469"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1473"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1474"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1611"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1618"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1750"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1756"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1757"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1759"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1760"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1764"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1767"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1768"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1770"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1773"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2305"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2307"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2366"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2380"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2385"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2388"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2402"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2403"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2433"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2435"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2496"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2500"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2503"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2504"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2507"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2509"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2530"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2531"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2624"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2626"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2631"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2632"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2635"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2637"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2672"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2673"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2689"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2691"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2750"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2757"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2759"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2761"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2763"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2765"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2817"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2819"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2878"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2883"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2887"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2888"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2891"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2893"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2902"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2903"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2946"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2947"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3006"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3010"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3014"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3016"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3018"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3021"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3073"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3075"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3134"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3140"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3142"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3144"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3146"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3149"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3157"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3158"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3202"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3203"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3262"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3268"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3270"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3272"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3274"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3277"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3285"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3286"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3330"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3331"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3390"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3395"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3398"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3400"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3402"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3405"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3636"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3642"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3655"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3662"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3764"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3769"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3771"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3772"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3784"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3789"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3864"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3865"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3953"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3972"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3974"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3979"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3984"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3989"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3993"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4013"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4017"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4023"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8400"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8412"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12330"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12335"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="combiningCharChar">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1471"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1476"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1648"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2364"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2381"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2492"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2494"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2495"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2519"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2562"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2620"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2622"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2623"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2748"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2876"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3031"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3415"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3633"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3761"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3893"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3895"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3897"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3902"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3903"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3991"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="4025"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="8417"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12441"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12442"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="digitRange">
          <typeReference xsi:type="types:Int">
            <comments>//</comments>
            <comments>// [88] Digit ::= ...</comments>
            <comments>//</comments>
          </typeReference>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="48"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="57"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1632"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1641"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1776"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1785"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2406"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2415"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2534"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2543"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2662"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2671"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2790"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2799"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2918"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="2927"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3047"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3055"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3174"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3183"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3302"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3311"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3430"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3439"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3664"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3673"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3792"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3801"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3872"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3881"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="extenderRange">
          <typeReference xsi:type="types:Int">
            <comments>//</comments>
            <comments>// [89] Extender ::= ...</comments>
            <comments>//</comments>
          </typeReference>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12337"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12341"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12445"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12446"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12540"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12542"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="extenderChar">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="183"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="720"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="721"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="903"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="1600"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3654"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="3782"/>
              <initialValues xsi:type="literals:HexIntegerLiteral" hexValue="12293"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="specialChar">
          <typeReference xsi:type="types:Int">
            <comments>//</comments>
            <comments>// SpecialChar ::= '&lt;', '&amp;', '\n', '\r', ']'</comments>
            <comments>//</comments>
          </typeReference>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:CharacterLiteral" value="60"/>
              <initialValues xsi:type="literals:CharacterLiteral" value="38"/>
              <initialValues xsi:type="literals:CharacterLiteral" value="10"/>
              <initialValues xsi:type="literals:CharacterLiteral" value="13"/>
              <initialValues xsi:type="literals:CharacterLiteral" value="93"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>//</comments>
        <comments>// Initialize</comments>
        <comments>//</comments>
        <comments>// set valid characters</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.14/@statement/@statements.0/@init"/>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:AssignmentOr"/>
                  <value xsi:type="expressions:InclusiveOrExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.14/@statement/@statements.0/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.14/@init"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </position>
                </arraySelectors>
              </children>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="j">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.14/@init"/>
                </arraySelectors>
              </initialValue>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.14/@statement/@statements.0/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.14/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.14/@init"/>
          <assignmentOperator xsi:type="operators:AssignmentPlus"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// remove special characters</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.13/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.15/@init"/>
                    </arraySelectors>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.13/@variable">
                          <arraySelectors>
                            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.15/@init"/>
                          </arraySelectors>
                        </position>
                      </arraySelectors>
                    </children>
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Complement"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                    </children>
                  </expression>
                </child>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.15/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.13/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.15/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// set space characters</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.1/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.16/@init"/>
                    </arraySelectors>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:AssignmentOr"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.16/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.1/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.16/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// set name start characters</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.3/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.17/@init"/>
                    </arraySelectors>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:AssignmentOr"/>
              <value xsi:type="expressions:InclusiveOrExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.17/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.3/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.17/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.18/@statement/@statements.0/@init"/>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:AssignmentOr"/>
                  <value xsi:type="expressions:InclusiveOrExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.18/@statement/@statements.0/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.6/@variable">
                <arraySelectors>
                  <position xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.18/@init"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </position>
                </arraySelectors>
              </children>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="j">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.6/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.18/@init"/>
                </arraySelectors>
              </initialValue>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.18/@statement/@statements.0/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.18/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.6/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.18/@init"/>
          <assignmentOperator xsi:type="operators:AssignmentPlus"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.7/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.19/@init"/>
                    </arraySelectors>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:AssignmentOr"/>
              <value xsi:type="expressions:InclusiveOrExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.19/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.7/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.19/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// set name characters</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.20/@init"/>
                    </arraySelectors>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:AssignmentOr"/>
              <value xsi:type="expressions:InclusiveOrExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.20/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.20/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.21/@statement/@statements.0/@init"/>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:AssignmentOr"/>
                  <value xsi:type="expressions:InclusiveOrExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.21/@statement/@statements.0/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.10/@variable">
                <arraySelectors>
                  <position xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.21/@init"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </position>
                </arraySelectors>
              </children>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="j">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.10/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.21/@init"/>
                </arraySelectors>
              </initialValue>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.21/@statement/@statements.0/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.21/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.10/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.21/@init"/>
          <assignmentOperator xsi:type="operators:AssignmentPlus"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.22/@statement/@statements.0/@init"/>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:AssignmentOr"/>
                  <value xsi:type="expressions:InclusiveOrExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.22/@statement/@statements.0/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.8/@variable">
                <arraySelectors>
                  <position xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.22/@init"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </position>
                </arraySelectors>
              </children>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="j">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.8/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.22/@init"/>
                </arraySelectors>
              </initialValue>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.22/@statement/@statements.0/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.22/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.8/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.22/@init"/>
          <assignmentOperator xsi:type="operators:AssignmentPlus"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.9/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.23/@init"/>
                    </arraySelectors>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:AssignmentOr"/>
              <value xsi:type="expressions:InclusiveOrExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.23/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.9/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.23/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.24/@statement/@statements.0/@init"/>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:AssignmentOr"/>
                  <value xsi:type="expressions:InclusiveOrExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.24/@statement/@statements.0/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.11/@variable">
                <arraySelectors>
                  <position xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.24/@init"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </position>
                </arraySelectors>
              </children>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="j">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.11/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.24/@init"/>
                </arraySelectors>
              </initialValue>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.24/@statement/@statements.0/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.24/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.11/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.24/@init"/>
          <assignmentOperator xsi:type="operators:AssignmentPlus"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.12/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.25/@init"/>
                    </arraySelectors>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:AssignmentOr"/>
              <value xsi:type="expressions:InclusiveOrExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.25/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.12/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.25/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
            <comments>// remove ':' from allowable MASK_NCNAME_START and MASK_NCNAME chars</comments>
            <arraySelectors>
              <position xsi:type="literals:CharacterLiteral" value="58"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:AssignmentAnd"/>
          <value xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Complement"/>
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:InclusiveOrExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
              </expression>
            </child>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// set Pubid characters</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.4/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.27/@init"/>
                    </arraySelectors>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:AssignmentOr"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.27/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.4/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.27/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.28/@statement/@statements.0/@init"/>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:AssignmentOr"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.28/@statement/@statements.0/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@variable">
                <arraySelectors>
                  <position xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.28/@init"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </position>
                </arraySelectors>
              </children>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="j">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.28/@init"/>
                </arraySelectors>
              </initialValue>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.28/@statement/@statements.0/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.28/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.28/@init"/>
          <assignmentOperator xsi:type="operators:AssignmentPlus"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
        </updates>
      </statements>
      <modifiers xsi:type="modifiers:Static">
        <comments>//</comments>
        <comments>// Static initialization</comments>
        <comments>//</comments>
      </modifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="isSupplemental">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// &lt;clinit>()</comments>
        <comments>//</comments>
        <comments>// Public static methods</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Returns true if the specified character is a supplemental character.&#xA;     *&#xA;     * @param c The character to check.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="65536"/>
              <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
            </children>
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="1114111"/>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </children>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="supplemental">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="h">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns true the supplemental character corresponding to the given&#xA;     * surrogates.&#xA;     *&#xA;     * @param h The high surrogate.&#xA;     * @param l The low surrogate.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="expressions:MultiplicativeExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="55296"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </expression>
            </children>
            <children xsi:type="literals:HexIntegerLiteral" hexValue="1024"/>
            <multiplicativeOperators xsi:type="operators:Multiplication"/>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="56320"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </expression>
          </children>
          <children xsi:type="literals:HexIntegerLiteral" hexValue="65536"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="highSurrogate">
      <typeReference xsi:type="types:Char"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the high surrogate of a supplemental character&#xA;     *&#xA;     * @param c The supplemental character to &quot;split&quot;.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Char"/>
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AdditiveExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ShiftExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
                      <children xsi:type="literals:HexIntegerLiteral" hexValue="65536"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
                  <shiftOperators xsi:type="operators:RightShift"/>
                </expression>
              </children>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="55296"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </expression>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="lowSurrogate">
      <typeReference xsi:type="types:Char"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the low surrogate of a supplemental character&#xA;     *&#xA;     * @param c The supplemental character to &quot;split&quot;.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Char"/>
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AdditiveExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AndExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
                      <children xsi:type="literals:HexIntegerLiteral" hexValue="65536"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="1023"/>
                </expression>
              </children>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="56320"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </expression>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isHighSurrogate">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns whether the given character is a high surrogate&#xA;     *&#xA;     * @param c The character to check.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="literals:HexIntegerLiteral" hexValue="55296"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </children>
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="56319"/>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </children>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isLowSurrogate">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns whether the given character is a low surrogate&#xA;     *&#xA;     * @param c The character to check.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="literals:HexIntegerLiteral" hexValue="56320"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </children>
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="57343"/>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </children>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isValid">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns true if the specified character is valid. This method&#xA;     * also checks the surrogate character range from 0x10000 to 0x10FFFF.&#xA;     * &lt;p>&#xA;     * If the program chooses to apply the mask directly to the&#xA;     * &lt;code>CHARS&lt;/code> array, then they are responsible for checking&#xA;     * the surrogate character range.&#xA;     *&#xA;     * @param c The character to check.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="65536"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
                      </arraySelectors>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  </expression>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="literals:HexIntegerLiteral" hexValue="65536"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
                <relationOperators xsi:type="operators:LessThanOrEqual"/>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="1114111"/>
                <relationOperators xsi:type="operators:LessThanOrEqual"/>
              </children>
            </expression>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isInvalid">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// isValid(int):boolean</comments>
        <comments>/**&#xA;     * Returns true if the specified character is invalid.&#xA;     *&#xA;     * @param c The character to check.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isContent">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// isInvalid(int):boolean</comments>
        <comments>/**&#xA;     * Returns true if the specified character can be considered content.&#xA;     *&#xA;     * @param c The character to check.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="65536"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
                      </arraySelectors>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                  </expression>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="literals:HexIntegerLiteral" hexValue="65536"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
                <relationOperators xsi:type="operators:LessThanOrEqual"/>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="1114111"/>
                <relationOperators xsi:type="operators:LessThanOrEqual"/>
              </children>
            </expression>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isMarkup">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// isContent(int):boolean</comments>
        <comments>/**&#xA;     * Returns true if the specified character can be considered markup.&#xA;     * Markup characters include '&amp;lt;', '&amp;amp;', and '%'.&#xA;     *&#xA;     * @param c The character to check.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
            <children xsi:type="literals:CharacterLiteral" value="60"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
            <children xsi:type="literals:CharacterLiteral" value="38"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
            <children xsi:type="literals:CharacterLiteral" value="37"/>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isSpace">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// isMarkup(int):boolean</comments>
        <comments>/**&#xA;     * Returns true if the specified character is a space character&#xA;     * as defined by production [3] in the XML 1.0 specification.&#xA;     *&#xA;     * @param c The character to check.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
            <children xsi:type="literals:HexIntegerLiteral" hexValue="65536"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
                  </arraySelectors>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              </expression>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isNameStart">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// isSpace(int):boolean</comments>
        <comments>/**&#xA;     * Returns true if the specified character is a valid name start&#xA;     * character as defined by production [5] in the XML 1.0&#xA;     * specification.&#xA;     *&#xA;     * @param c The character to check.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
            <children xsi:type="literals:HexIntegerLiteral" hexValue="65536"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
                  </arraySelectors>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              </expression>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isName">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// isNameStart(int):boolean</comments>
        <comments>/**&#xA;     * Returns true if the specified character is a valid name&#xA;     * character as defined by production [4] in the XML 1.0&#xA;     * specification.&#xA;     *&#xA;     * @param c The character to check.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
            <children xsi:type="literals:HexIntegerLiteral" hexValue="65536"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
                  </arraySelectors>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
              </expression>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isNCNameStart">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// isName(int):boolean</comments>
        <comments>/**&#xA;     * Returns true if the specified character is a valid NCName start&#xA;     * character as defined by production [4] in Namespaces in XML&#xA;     * recommendation.&#xA;     *&#xA;     * @param c The character to check.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0"/>
            <children xsi:type="literals:HexIntegerLiteral" hexValue="65536"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0"/>
                  </arraySelectors>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              </expression>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isNCName">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// isNCNameStart(int):boolean</comments>
        <comments>/**&#xA;     * Returns true if the specified character is a valid NCName&#xA;     * character as defined by production [5] in Namespaces in XML&#xA;     * recommendation.&#xA;     *&#xA;     * @param c The character to check.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
            <children xsi:type="literals:HexIntegerLiteral" hexValue="65536"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
                  </arraySelectors>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
              </expression>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isPubid">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// isNCName(int):boolean</comments>
        <comments>/**&#xA;     * Returns true if the specified character is a valid Pubid&#xA;     * character as defined by production [13] in the XML 1.0&#xA;     * specification.&#xA;     *&#xA;     * @param c The character to check.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
            <children xsi:type="literals:HexIntegerLiteral" hexValue="65536"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
                  </arraySelectors>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
              </expression>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isValidName">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// isPubid(int):boolean</comments>
        <comments>/*&#xA;     * [5] Name ::= (Letter | '_' | ':') (NameChar)*&#xA;     */</comments>
        <comments>/**&#xA;     * Check to see if a string is a valid Name according to [5]&#xA;     * in the XML 1.0 Recommendation&#xA;     *&#xA;     * @param name string to check&#xA;     * @return true if name is a valid Name&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="ch">
          <typeReference xsi:type="types:Char"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.21">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.1/@variable"/>
          </children>
          <children xsi:type="literals:BooleanLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@init"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.22">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.1/@variable"/>
              </children>
              <children xsi:type="literals:BooleanLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isValidNCName">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ncName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// isValidName(String):boolean</comments>
        <comments>/*&#xA;     * from the namespace rec&#xA;     * [4] NCName ::= (Letter | '_') (NCNameChar)*&#xA;     */</comments>
        <comments>/**&#xA;     * Check to see if a string is a valid NCName according to [4]&#xA;     * from the XML Namespaces 1.0 Recommendation&#xA;     *&#xA;     * @param name string to check&#xA;     * @return true if name is a valid NCName&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="ch">
          <typeReference xsi:type="types:Char"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.23">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable"/>
          </children>
          <children xsi:type="literals:BooleanLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.3/@init"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.24">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable"/>
              </children>
              <children xsi:type="literals:BooleanLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.3/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.3/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isValidNmtoken">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nmtoken">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// isValidNCName(String):boolean</comments>
        <comments>/*&#xA;     * [7] Nmtoken ::= (NameChar)+&#xA;     */</comments>
        <comments>/**&#xA;     * Check to see if a string is a valid Nmtoken according to [7]&#xA;     * in the XML 1.0 Recommendation&#xA;     *&#xA;     * @param nmtoken string to check&#xA;     * @return true if nmtoken is a valid Nmtoken &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="ch">
              <typeReference xsi:type="types:Char"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.1/@init"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.22">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.1/@statement/@statements.0/@variable"/>
              </child>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.1/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.1/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isValidIANAEncoding">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ianaEncoding">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// isValidName(String):boolean</comments>
        <comments>// encodings</comments>
        <comments>/**&#xA;     * Returns true if the encoding name is a valid IANA encoding.&#xA;     * This method does not verify that there is a decoder available&#xA;     * for this encoding, only that the characters are valid for an&#xA;     * IANA encoding name.&#xA;     *&#xA;     * @param ianaEncoding The IANA encoding name.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="length">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="c">
                  <typeReference xsi:type="types:Char"/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ForLoop">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.1/@statement/@statements.0/@init"/>
                            </next>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:Return">
                            <returnValue xsi:type="literals:BooleanLiteral"/>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:ConditionalAndExpression">
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:ConditionalOrExpression">
                              <children xsi:type="expressions:RelationExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                                <children xsi:type="literals:CharacterLiteral" value="65"/>
                                <relationOperators xsi:type="operators:LessThan"/>
                              </children>
                              <children xsi:type="expressions:RelationExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                                <children xsi:type="literals:CharacterLiteral" value="90"/>
                                <relationOperators xsi:type="operators:GreaterThan"/>
                              </children>
                            </expression>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:ConditionalOrExpression">
                              <children xsi:type="expressions:RelationExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                                <children xsi:type="literals:CharacterLiteral" value="97"/>
                                <relationOperators xsi:type="operators:LessThan"/>
                              </children>
                              <children xsi:type="expressions:RelationExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                                <children xsi:type="literals:CharacterLiteral" value="122"/>
                                <relationOperators xsi:type="operators:GreaterThan"/>
                              </children>
                            </expression>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:ConditionalOrExpression">
                              <children xsi:type="expressions:RelationExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                                <children xsi:type="literals:CharacterLiteral" value="48"/>
                                <relationOperators xsi:type="operators:LessThan"/>
                              </children>
                              <children xsi:type="expressions:RelationExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                                <children xsi:type="literals:CharacterLiteral" value="57"/>
                                <relationOperators xsi:type="operators:GreaterThan"/>
                              </children>
                            </expression>
                          </children>
                          <children xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:NotEqual"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="46"/>
                          </children>
                          <children xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:NotEqual"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="95"/>
                          </children>
                          <children xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:NotEqual"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="45"/>
                          </children>
                        </condition>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.1/@statement/@statements.0/@init"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.0/@variable"/>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </condition>
                    <init xsi:type="variables:LocalVariable" name="i">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </init>
                    <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.1/@statement/@statements.0/@init"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </updates>
                  </statements>
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                        <children xsi:type="literals:CharacterLiteral" value="65"/>
                        <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                      </children>
                      <children xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                        <children xsi:type="literals:CharacterLiteral" value="90"/>
                        <relationOperators xsi:type="operators:LessThanOrEqual"/>
                      </children>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                        <children xsi:type="literals:CharacterLiteral" value="97"/>
                        <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                      </children>
                      <children xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                        <children xsi:type="literals:CharacterLiteral" value="122"/>
                        <relationOperators xsi:type="operators:LessThanOrEqual"/>
                      </children>
                    </expression>
                  </children>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isValidJavaEncoding">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="javaEncoding">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// isValidIANAEncoding(String):boolean</comments>
        <comments>/**&#xA;     * Returns true if the encoding name is a valid Java encoding.&#xA;     * This method does not verify that there is a decoder available&#xA;     * for this encoding, only that the characters are valid for an&#xA;     * Java encoding name.&#xA;     *&#xA;     * @param javaEncoding The Java encoding name.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="length">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ForLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="c">
                      <typeReference xsi:type="types:Char"/>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.1/@statement/@statements.0/@init"/>
                        </next>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="literals:BooleanLiteral"/>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ConditionalOrExpression">
                          <children xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="65"/>
                            <relationOperators xsi:type="operators:LessThan"/>
                          </children>
                          <children xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="90"/>
                            <relationOperators xsi:type="operators:GreaterThan"/>
                          </children>
                        </expression>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ConditionalOrExpression">
                          <children xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="97"/>
                            <relationOperators xsi:type="operators:LessThan"/>
                          </children>
                          <children xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="122"/>
                            <relationOperators xsi:type="operators:GreaterThan"/>
                          </children>
                        </expression>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ConditionalOrExpression">
                          <children xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="48"/>
                            <relationOperators xsi:type="operators:LessThan"/>
                          </children>
                          <children xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="57"/>
                            <relationOperators xsi:type="operators:GreaterThan"/>
                          </children>
                        </expression>
                      </children>
                      <children xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                        <children xsi:type="literals:CharacterLiteral" value="46"/>
                      </children>
                      <children xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                        <children xsi:type="literals:CharacterLiteral" value="95"/>
                      </children>
                      <children xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                        <children xsi:type="literals:CharacterLiteral" value="45"/>
                      </children>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.1/@statement/@statements.0/@init"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.0/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <init xsi:type="variables:LocalVariable" name="i">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </init>
                <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.1/@statement/@statements.0/@init"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </updates>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isValidQName">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// isValidIANAEncoding(String):boolean</comments>
        <comments>/**&#xA;     * Simple check to determine if qname is legal. If it returns false&#xA;     * then &lt;param>str&lt;/param> is illegal; if it returns true then &#xA;     * &lt;param>str&lt;/param> is legal.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="colon">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.45"/>
              <arguments xsi:type="literals:CharacterLiteral" value="58"/>
            </next>
          </initialValue>
          <annotationsAndModifiers xsi:type="modifiers:Final"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@variable"/>
            <children xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </children>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="prefix">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.56"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@variable"/>
                </next>
              </initialValue>
              <annotationsAndModifiers xsi:type="modifiers:Final"/>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="localPart">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.55"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
              </initialValue>
              <annotationsAndModifiers xsi:type="modifiers:Final"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.27">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.2/@statement/@statements.0/@variable"/>
              </children>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.27">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.2/@statement/@statements.1/@variable"/>
              </children>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.27">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class defines the basic XML character properties. The data&#xA; * in this class can be used to verify that a character is a valid&#xA; * XML character or if the character is a space, name start, or name&#xA; * character.&#xA; * &lt;p>&#xA; * A series of convenience methods are supplied to ease the burden&#xA; * of the developer. Because inlining the checks can improve per&#xA; * character performance, the tables of character properties are&#xA; * public. Using the character as an index into the &lt;code>CHARS&lt;/code>&#xA; * array and applying the appropriate mask flag (e.g.&#xA; * &lt;code>MASK_VALID&lt;/code>), yields the same results as calling the&#xA; * convenience methods. There is one exception: check the comments&#xA; * for the &lt;code>isValid&lt;/code> method for details.&#xA; *&#xA; * @author Glenn Marcy, IBM&#xA; * @author Andy Clark, IBM&#xA; * @author Eric Ye, IBM&#xA; * @author Arnaud  Le Hors, IBM&#xA; * @author Rahul Srivastava, Sun Microsystems Inc.&#xA; *&#xA; * @version $Id: XMLChar.java,v 1.7 2002/01/29 01:15:18 lehors Exp $&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
