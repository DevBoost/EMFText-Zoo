<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../java.ecore#/5 http://www.emftext.org/java/instantiations ../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../../java.ecore#/17" name="JPEGQTable.java">
  <comments>/*&#xA; * @(#)JPEGQTable.java&#x9;1.9 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <comments>/**********************************************************************&#xA; **********************************************************************&#xA; **********************************************************************&#xA; *** COPYRIGHT (c) 1997-1998 Eastman Kodak Company.                 ***&#xA; *** As  an unpublished  work pursuant to Title 17 of the United    ***&#xA; *** States Code.  All rights reserved.                             ***&#xA; **********************************************************************&#xA; **********************************************************************&#xA; **********************************************************************/</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>image</namespaces>
  <namespaces>codec</namespaces>
  <namespaces>jpeg</namespaces>
  <classifiers xsi:type="classifiers:Class" name="JPEGQTable">
    <members xsi:type="members:Field" name="quantval">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsAfter/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Quantization step for each coefficient in zig-zag order */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="QTABLESIZE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="64"/>
      <typeReference xsi:type="types:Byte"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** The number of coefficients in a DCT block */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="StdLuminance">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;&#x9; * This is the sample luminance quantization table given in the&#xA;&#x9; * JPEG spec section K.1, expressed in zigzag order. The spec says&#xA;&#x9; * that the values given produce &quot;good&quot; quality, and when divided&#xA;&#x9; * by 2, &quot;very good&quot; quality.&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lumVals">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="11"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="12"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="14"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="12"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="14"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="13"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="14"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="18"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="17"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="19"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="40"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="26"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="22"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="22"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="49"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="35"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="37"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="29"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="40"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="58"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="51"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="61"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="60"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="57"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="51"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="56"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="55"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="64"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="72"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="92"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="78"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="64"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="68"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="87"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="69"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="55"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="56"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="80"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="109"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="81"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="87"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="95"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="98"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="103"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="104"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="103"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="62"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="77"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="113"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="121"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="112"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="120"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="92"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="101"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="103"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@variable"/>
        </expression>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="StdChrominance">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;&#x9; * This is the sample luminance quantization table given in the&#xA;&#x9; * JPEG spec section K.1, expressed in zigzag order. The spec says&#xA;&#x9; * that the values given produce &quot;good&quot; quality, and when divided&#xA;&#x9; * by 2, &quot;very good&quot; quality.&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="chromVals">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="17"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="18"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="18"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="21"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="47"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="26"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="26"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="47"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="66"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="56"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="66"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
              <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable"/>
        </expression>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Constructor" name="JPEGQTable">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Int"/>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </value>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &#xA;&#x9; * Constructs an empty quantization table. This is used to create&#xA;&#x9; * the Std Q-Tables.&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="JPEGQTable">
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Quantization table is the wrong size."/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Int"/>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="table">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;&#x9; * Constructs an quantization table from the array that was&#xA;&#x9; * passed.  The coefficents must be in zig-zag order. The array&#xA;&#x9; * must be of length 64.&#xA;&#x9; *  @param table the quantization table (this is copied).&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getTable">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;&#x9; * Returns the current quantization table as an array of ints in&#xA;&#x9; * zig zag order.&#xA;&#x9; *  @return A copy of the contained quantization table.&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="table">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Int"/>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getScaledInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scaleFactor">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="forceBaseline">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;&#x9; * Returns a new Quantization table where the values are&#xA;&#x9; * multiplied by scaleFactor and then clamped to the range&#xA;&#x9; * 1..32767 (or to 1..255 if forceBaseline is 'true'). &lt;P>&#xA;&#xA;&#x9; * Values less than one tend to improve the quality level of the&#xA;&#x9; * table, and values greater than one degrade the quality level of&#xA;&#x9; * the table.&#xA;&#xA;&#x9; * @param scaleFactor the multiplication factor for the table&#xA;&#x9; * @param forceBaseline if true the values will be clamped&#xA;&#x9; * to the range  [1 .. 255]&#xA;&#x9; * @return A new Q-Table that is a linear multiple of this Q-Table&#xA;&#x9; */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="max">
          <typeReference xsi:type="types:Long"/>
          <initialValue xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
            </child>
            <expressionIf xsi:type="literals:DecimalLongLiteral" decimalValue="255"/>
            <expressionElse xsi:type="literals:DecimalLongLiteral" decimalValue="32767"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="ret">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Int"/>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="holder">
              <typeReference xsi:type="types:Long"/>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Long"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:MultiplicativeExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                          <arraySelectors>
                            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@init"/>
                          </arraySelectors>
                        </children>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
                        <multiplicativeOperators xsi:type="operators:Multiplication"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:DecimalDoubleLiteral" decimalValue="0.5"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </expression>
                </child>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// limit to valid range</comments>
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@statement/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:DecimalLongLiteral" decimalValue="1"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:DecimalLongLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// Max quantizer for 12 bits</comments>
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@statement/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@statement/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.1/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@init"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Int"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@statement/@statements.0/@variable"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.1/@variable"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** Class to encapsulate the JPEG quantization tables.&#xA; * &lt;p>&#xA; * Note that the classes in the com.sun.image.codec.jpeg package are not&#xA; * part of the core Java APIs.  They are a part of Sun's JDK and JRE&#xA; * distributions.  Although other licensees may choose to distribute these&#xA; * classes, developers cannot depend on their availability in non-Sun&#xA; * implementations.  We expect that equivalent functionality will eventually&#xA; * be available in a core API or standard extension.&#xA; * &lt;p>&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
