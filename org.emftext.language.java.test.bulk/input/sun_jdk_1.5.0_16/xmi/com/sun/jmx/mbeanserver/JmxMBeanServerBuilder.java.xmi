<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="JmxMBeanServerBuilder.java">
  <comments>/*&#xA; * @(#)JmxMBeanServerBuilder.java&#x9;1.17 03/12/19&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>jmx</namespaces>
  <namespaces>mbeanserver</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../javax/management/MBeanServer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../javax/management/MBeanServerDelegate.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../javax/management/MBeanServerBuilder.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="JmxMBeanServerBuilder">
    <members xsi:type="members:ClassMethod" name="newMBeanServerDelegate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/management/MBeanServerDelegate.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method creates a new MBeanServerDelegate for a new MBeanServer.&#xA;     * When creating a new MBeanServer the &#xA;     * {@link javax.management.MBeanServerFactory} first calls this method&#xA;     * in order to create a new MBeanServerDelegate.&#xA;     * &lt;br>Then it calls &#xA;     * &lt;code>newMBeanServer(defaultDomain,outer,delegate)&lt;/code>&#xA;     * passing the &lt;var>delegate&lt;/var> that should be used by the MBeanServer &#xA;     * implementation.&#xA;     * &lt;p>Note that the passed &lt;var>delegate&lt;/var> might not be directly the &#xA;     * MBeanServerDelegate that was returned by this method. It could&#xA;     * be, for instance, a new object wrapping the previously &#xA;     * returned object.&#xA;     *&#xA;     * @return A new {@link javax.management.MBeanServerDelegate}.&#xA;     **/</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="JmxMBeanServer.class.xmi#//@classifiers.0/@members.55"/>
          </next>
          <target xsi:type="classifiers:Class" href="JmxMBeanServer.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="newMBeanServer">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../javax/management/MBeanServer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaultDomain">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="outer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../javax/management/MBeanServer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegate">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../javax/management/MBeanServerDelegate.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method creates a new MBeanServer implementation object.&#xA;     * When creating a new MBeanServer the &#xA;     * {@link javax.management.MBeanServerFactory} first calls  &#xA;     * &lt;code>newMBeanServerDelegate()&lt;/code> in order to obtain a new &#xA;     * {@link javax.management.MBeanServerDelegate} for the new &#xA;     * MBeanServer. Then it calls &#xA;     * &lt;code>newMBeanServer(defaultDomain,outer,delegate)&lt;/code>&#xA;     * passing the &lt;var>delegate&lt;/var> that should be used by the &#xA;     * MBeanServer  implementation.&#xA;     * &lt;p>Note that the passed &lt;var>delegate&lt;/var> might not be directly the &#xA;     * MBeanServerDelegate that was returned by this implementation. It could&#xA;     * be, for instance, a new object wrapping the previously &#xA;     * returned delegate.&#xA;     * &lt;p>The &lt;var>outer&lt;/var> parameter is a pointer to the MBeanServer that&#xA;     * should be passed to the {@link javax.management.MBeanRegistration} &#xA;     * interface when registering MBeans inside the MBeanServer.&#xA;     * If &lt;var>outer&lt;/var> is &lt;code>null&lt;/code>, then the MBeanServer &#xA;     * implementation is free to use its own &lt;code>this&lt;/code> pointer when&#xA;     * invoking the {@link javax.management.MBeanRegistration} interface.&#xA;     * &lt;p>This makes it possible for a MBeanServer implementation to wrap&#xA;     * another MBeanServer implementation, in order to implement, e.g,&#xA;     * security checks, or to prevent access to the actual MBeanServer&#xA;     * implementation by returning a pointer to a wrapping object.&#xA;     * &lt;p>&#xA;     * This MBeanServerBuilder makes it possible to create MBeanServer&#xA;     * which support {@link com.sun.jmx.interceptor.MBeanServerInterceptor}s.&#xA;     *&#xA;     * @param defaultDomain Default domain of the new MBeanServer.&#xA;     * @param outer A pointer to the MBeanServer object that must be&#xA;     *        passed to the MBeans when invoking their&#xA;     *        {@link javax.management.MBeanRegistration} interface.&#xA;     * @param delegate A pointer to the MBeanServerDelegate associated&#xA;     *        with the new MBeanServer. The new MBeanServer must register&#xA;     *        this MBean in its MBean repository.&#xA;     *&#xA;     * @return A new private implementation of an MBeanServer.&#xA;     **/</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="JmxMBeanServer.class.xmi#//@classifiers.0/@members.56"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.2"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          </next>
          <target xsi:type="classifiers:Class" href="JmxMBeanServer.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class represents a builder that creates &#xA; * {@link javax.management.MBeanServer} implementations. &#xA; * The JMX {@link javax.management.MBeanServerFactory} allows &#xA; * for applications to provide their custom MBeanServer &#xA; * implementation. This class is not used when the whole Sun Reference JMX &#xA; * Implementation is used. However it may be used to substitute Sun&#xA; * MBeanServer implementation to another JMX implementation. &#xA; * &lt;p>&#xA; * Contrarily to the default {@link javax.management.MBeanServerBuilder&#xA; * javax.management.MBeanServerBuilder} this MBeanServerBuilder returns&#xA; * MBeanServers on which &#xA; * {@link com.sun.jmx.interceptor.MBeanServerInterceptor}s are enabled.&#xA; *&#xA; * @since 1.5&#xA; * @since.unbundled JMX RI 1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../../../../javax/management/MBeanServerBuilder.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
