<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../java.ecore#/16" name="CommunicatorServerMBean.java">
  <comments>/*&#xA; * @(#)file      CommunicatorServerMBean.java&#xA; * @(#)author    Sun Microsystems, Inc.&#xA; * @(#)version   1.25&#xA; * @(#)lastedit      03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; *&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>jmx</namespaces>
  <namespaces>snmp</namespaces>
  <namespaces>daemon</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="CommunicatorServerMBean">
    <members xsi:type="members:InterfaceMethod" name="start">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Starts this &lt;CODE>CommunicatorServer&lt;/CODE>.&#xA;     * &lt;p>&#xA;     * Has no effect if this &lt;CODE>CommunicatorServer&lt;/CODE> is &lt;CODE>ONLINE&lt;/CODE> or &#xA;     * &lt;CODE>STOPPING&lt;/CODE>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="stop">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Stops this &lt;CODE>CommunicatorServer&lt;/CODE>.&#xA;     * &lt;p> &#xA;     * Has no effect if this &lt;CODE>CommunicatorServer&lt;/CODE> is &lt;CODE>OFFLINE&lt;/CODE> or &#xA;     * &lt;CODE>STOPPING&lt;/CODE>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isActive">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if the &lt;CODE>CommunicatorServer&lt;/CODE> is active.&#xA;     *&#xA;     * @return True if connector is &lt;CODE>ONLINE&lt;/CODE>; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="waitState">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="state">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timeOut">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Waits untill either the State attribute of this MBean equals the specified &lt;VAR>state&lt;/VAR> parameter, &#xA;     * or the specified  &lt;VAR>timeOut&lt;/VAR> has elapsed. The method &lt;CODE>waitState&lt;/CODE> returns with a boolean value indicating whether&#xA;     * the specified &lt;VAR>state&lt;/VAR> parameter equals the value of this MBean's State attribute at the time the method terminates.&#xA;     *&#xA;     * Two special cases for the &lt;VAR>timeOut&lt;/VAR> parameter value are:&#xA;     * &lt;UL>&lt;LI> if &lt;VAR>timeOut&lt;/VAR> is negative then &lt;CODE>waitState&lt;/CODE> returns immediately (i.e. does not wait at all),&lt;/LI>&#xA;     * &lt;LI> if &lt;VAR>timeOut&lt;/VAR> equals zero then &lt;CODE>waitState&lt;/CODE> waits untill the value of this MBean's State attribute &#xA;     * is the same as the &lt;VAR>state&lt;/VAR> parameter (i.e. will wait indefinitely if this condition is never met).&lt;/LI>&lt;/UL>&#xA;     * &#xA;     * @param state The value of this MBean's State attribute &#xA;     *        to wait for. &lt;VAR>state&lt;/VAR> can be one of:&#xA;     * &lt;ul>&#xA;     * &lt;li>&lt;CODE>CommunicatorServer.OFFLINE&lt;/CODE>,&lt;/li> &#xA;     * &lt;li>&lt;CODE>CommunicatorServer.ONLINE&lt;/CODE>,&lt;/li>&#xA;     * &lt;li>&lt;CODE>CommunicatorServer.STARTING&lt;/CODE>,&lt;/li> &#xA;     * &lt;li>&lt;CODE>CommunicatorServer.STOPPING&lt;/CODE>.&lt;/li>&#xA;     * &lt;/ul>&#xA;     * @param timeOut The maximum time to wait for, in&#xA;     *        milliseconds, if positive. &#xA;     * Infinite time out if 0, or no waiting at all if negative.&#xA;     *&#xA;     * @return true if the value of this MBean's State attribute is the &#xA;     *  same as the &lt;VAR>state&lt;/VAR> parameter; false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getState">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the state of this &lt;CODE>CommunicatorServer&lt;/CODE> as an integer.&#xA;     *&#xA;     * @return &lt;CODE>ONLINE&lt;/CODE>, &lt;CODE>OFFLINE&lt;/CODE>, &lt;CODE>STARTING&lt;/CODE> or &lt;CODE>STOPPING&lt;/CODE>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStateString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the state of this &lt;CODE>CommunicatorServer&lt;/CODE> as a string.&#xA;     *&#xA;     * @return One of the strings &quot;ONLINE&quot;, &quot;OFFLINE&quot;, &quot;STARTING&quot; or &quot;STOPPING&quot;.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getHost">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the host name used by this &lt;CODE>CommunicatorServer&lt;/CODE>.&#xA;     *&#xA;     * @return The host name used by this &lt;CODE>CommunicatorServer&lt;/CODE>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPort">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the port number used by this &lt;CODE>CommunicatorServer&lt;/CODE>.&#xA;     *&#xA;     * @return The port number used by this &lt;CODE>CommunicatorServer&lt;/CODE>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setPort">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="port">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>lang</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/IllegalStateException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the port number used by this &lt;CODE>CommunicatorServer&lt;/CODE>.&#xA;     *&#xA;     * @param port The port number used by this &lt;CODE>CommunicatorServer&lt;/CODE>.&#xA;     *&#xA;     * @exception java.lang.IllegalStateException This method has been invoked&#xA;     * while the communicator was ONLINE or STARTING.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getProtocol">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the protocol being used by this &lt;CODE>CommunicatorServer&lt;/CODE>.&#xA;     * @return The protocol as a string.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Defines generic behaviour for the server &#xA; * part of a connector or an adaptor. Most connectors or adaptors extend &lt;CODE>CommunicatorServer&lt;/CODE>&#xA; * and inherit this behaviour. Connectors or adaptors that do not fit into this model do not extend &#xA; * &lt;CODE>CommunicatorServer&lt;/CODE>.&#xA; * &lt;p>&#xA; * An &lt;CODE>CommunicatorServer&lt;/CODE> is an active object, it listens for client requests&#xA; * and processes them in its own thread. When necessary, a &lt;CODE>CommunicatorServer&lt;/CODE>&#xA; * creates other threads to process multiple requests concurrently.&#xA; * &lt;p>&#xA; * A &lt;CODE>CommunicatorServer&lt;/CODE> object can be stopped by calling the &lt;CODE>stop&lt;/CODE>&#xA; * method. When it is stopped, the &lt;CODE>CommunicatorServer&lt;/CODE> no longer listens to client &#xA; * requests and no longer holds any thread or communication resources.&#xA; * It can be started again by calling the &lt;CODE>start&lt;/CODE> method.&#xA; * &lt;p>&#xA; * A &lt;CODE>CommunicatorServer&lt;/CODE> has a &lt;CODE>state&lt;/CODE> property which reflects its &#xA; * activity.&#xA; * &lt;p>&#xA; * &lt;TABLE>&#xA; * &lt;TR>&lt;TH>CommunicatorServer&lt;/TH>            &lt;TH>State&lt;/TH>&lt;/TR>&#xA; * &lt;TR>&lt;TD>&lt;CODE>stopped&lt;/CODE>&lt;/TD>          &lt;TD>&lt;CODE>OFFLINE&lt;/CODE>&lt;/TD>&lt;/TR>&#xA; * &lt;TR>&lt;TD>&lt;CODE>starting&lt;/CODE>&lt;/TD>         &lt;TD>&lt;CODE>STARTING&lt;/CODE>&lt;/TD>&lt;/TR>&#xA; * &lt;TR>&lt;TD>&lt;CODE>running&lt;/CODE>&lt;/TD>          &lt;TD>&lt;CODE>ONLINE&lt;/CODE>&lt;/TD>&lt;/TR>&#xA; * &lt;TR>&lt;TD>&lt;CODE>stopping&lt;/CODE>&lt;/TD>         &lt;TD>&lt;CODE>STOPPING&lt;/CODE>&lt;/TD>&lt;/TR>&#xA; * &lt;/TABLE>&#xA; * &lt;p>&#xA; * The &lt;CODE>STARTING&lt;/CODE> state marks the transition from &lt;CODE>OFFLINE&lt;/CODE> to&#xA; * &lt;CODE>ONLINE&lt;/CODE>.&#xA; * &lt;p>&#xA; * The &lt;CODE>STOPPING&lt;/CODE> state marks the transition from &lt;CODE>ONLINE&lt;/CODE> to&#xA; * &lt;CODE>OFFLINE&lt;/CODE>. This occurs when the &lt;CODE>CommunicatorServer&lt;/CODE> is &#xA; * finishing or interrupting active requests.&#xA; * &lt;p>&#xA; * A &lt;CODE>CommunicatorServer&lt;/CODE> may serve several clients concurrently. The &#xA; * number of concurrent clients can be limited using the property &#xA; * &lt;CODE>maxActiveClientCount&lt;/CODE>. The default value of this property is&#xA; * defined by the subclasses.&#xA; * &lt;p>&#xA; * When a &lt;CODE>CommunicatorServer&lt;/CODE> is unregistered from the MBeanServer,&#xA; * it is stopped automatically.&#xA; *&#xA; * &lt;p>&lt;b>This API is a Sun Microsystems internal API  and is subject &#xA; * to change without notice.&lt;/b>&lt;/p>&#xA; * @version     1.25     12/19/03&#xA; * @author      Sun Microsystems, Inc&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
