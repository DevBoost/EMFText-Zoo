<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../java.ecore#/16" name="SnmpAdaptorServerMBean.java">
  <comments>/*&#xA; * @(#)file      SnmpAdaptorServerMBean.java&#xA; * @(#)author    Sun Microsystems, Inc.&#xA; * @(#)version   1.45&#xA; * @(#)date      08/05/28&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; *&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>jmx</namespaces>
  <namespaces>snmp</namespaces>
  <namespaces>daemon</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <comments>// java import</comments>
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../java/net/InetAddress.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <comments>// jmx imports</comments>
    <comments>//</comments>
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../SnmpPduFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SnmpVarBindList.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SnmpTimeticks.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SnmpIpAddress.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SnmpPduPacket.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../InetAddressAcl.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SnmpPeer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <comments>// SNMP Runtime imports</comments>
    <comments>//</comments>
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <namespaces>agent</namespaces>
    <classifier xsi:type="classifiers:Class" href="../agent/SnmpMibAgent.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <namespaces>agent</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../agent/SnmpMibHandler.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <namespaces>agent</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../agent/SnmpUserDataFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="SnmpAdaptorServerMBean">
    <members xsi:type="members:InterfaceMethod" name="getInetAddressAcl">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../InetAddressAcl.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// GETTERS AND SETTERS</comments>
        <comments>//--------------------</comments>
        <comments>/**&#xA;     * Returns the Ip address based ACL used by this SNMP protocol adaptor.&#xA;     * @return The &lt;CODE>InetAddressAcl&lt;/CODE> implementation.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTrapPort">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the port used by this SNMP protocol adaptor for sending traps.&#xA;     * By default, port 162 is used.&#xA;     * &#xA;     * @return The port number for sending SNMP traps.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setTrapPort">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="port">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the port used by this SNMP protocol adaptor for sending traps.&#xA;     *&#xA;     * @param port The port number for sending SNMP traps.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getInformPort">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the port used by this SNMP protocol adaptor for sending inform requests.&#xA;     * By default, port 162 is used.&#xA;     * &#xA;     * @return The port number for sending SNMP inform requests.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setInformPort">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="port">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the port used by this SNMP protocol adaptor for sending inform requests.&#xA;     *&#xA;     * @param port The port number for sending SNMP inform requests.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServedClientCount">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the number of managers that have been processed by this SNMP protocol adaptor &#xA;     * since its creation.&#xA;     *&#xA;     * @return The number of managers handled by this SNMP protocol adaptor&#xA;     * since its creation. This counter is not reset by the &lt;CODE>stop&lt;/CODE> method.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getActiveClientCount">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the number of managers currently being processed by this &#xA;     * SNMP protocol adaptor.&#xA;     *&#xA;     * @return The number of managers currently being processed by this &#xA;     * SNMP protocol adaptor.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMaxActiveClientCount">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the maximum number of managers that this SNMP protocol adaptor can &#xA;     * process concurrently.&#xA;     *&#xA;     * @return The maximum number of managers that this SNMP protocol adaptor can &#xA;     * process concurrently.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setMaxActiveClientCount">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>lang</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/IllegalStateException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the maximum number of managers this SNMP protocol adaptor can &#xA;     * process concurrently.&#xA;     *&#xA;     * @param c The number of managers.&#xA;     *&#xA;     * @exception java.lang.IllegalStateException This method has been invoked&#xA;     * while the communicator was &lt;CODE>ONLINE&lt;/CODE> or &lt;CODE>STARTING&lt;/CODE>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getProtocol">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the protocol of this SNMP protocol adaptor.&#xA;     *&#xA;     * @return The string &quot;snmp&quot;.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBufferSize">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the buffer size of this SNMP protocol adaptor.&#xA;     * By default, buffer size 1024 is used.&#xA;     *&#xA;     * @return The buffer size.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setBufferSize">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>lang</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/IllegalStateException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the buffer size of this SNMP protocol adaptor.&#xA;     *&#xA;     * @param s The buffer size.&#xA;     *&#xA;     * @exception java.lang.IllegalStateException This method has been invoked&#xA;     * while the communicator was &lt;CODE>ONLINE&lt;/CODE> or &lt;CODE>STARTING&lt;/CODE>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMaxTries">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the number of times to try sending an inform request before giving up.&#xA;     * @return The maximun number of tries.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setMaxTries">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newMaxTries">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Changes the maximun number of times to try sending an inform request before giving up.&#xA;     * @param newMaxTries The maximun number of tries.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTimeout">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the timeout to wait for an inform response from the manager.&#xA;     * @return The value of the timeout property.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setTimeout">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newTimeout">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Changes the timeout to wait for an inform response from the manager.&#xA;     * @param newTimeout The timeout (in milliseconds).&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPduFactory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../SnmpPduFactory.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the message factory of this SNMP protocol adaptor.&#xA;     *&#xA;     * @return The factory object.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setPduFactory">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="factory">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../SnmpPduFactory.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the message factory of this SNMP protocol adaptor.&#xA;     *&#xA;     * @param factory The factory object (null means the default factory).&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setUserDataFactory">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="factory">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../agent/SnmpUserDataFactory.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the user-data factory of this SNMP protocol adaptor.&#xA;     *&#xA;     * @param factory The factory object (null means no factory).&#xA;     * @see com.sun.jmx.snmp.agent.SnmpUserDataFactory&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUserDataFactory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../agent/SnmpUserDataFactory.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the user-data factory associated with this SNMP protocol adaptor.&#xA;     *&#xA;     * @return The factory object (null means no factory).&#xA;     * @see com.sun.jmx.snmp.agent.SnmpUserDataFactory&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAuthTrapEnabled">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;CODE>true&lt;/CODE> if authentication traps are enabled.&#xA;     * &lt;P>&#xA;     * When this feature is enabled, the SNMP protocol adaptor sends &#xA;     * an &lt;CODE>authenticationFailure&lt;/CODE> trap each time an authentication fails.&#xA;     * &lt;P>&#xA;     * The default behaviour is to send authentication traps.&#xA;     * &#xA;     * @return &lt;CODE>true&lt;/CODE> if authentication traps are enabled, &lt;CODE>false&lt;/CODE> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAuthTrapEnabled">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="enabled">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the flag indicating if traps need to be sent in case of authentication failure.&#xA;     * &#xA;     * @param enabled Flag indicating if traps need to be sent.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAuthRespEnabled">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> if this SNMP protocol adaptor sends a response in case&#xA;     * of authentication failure.&#xA;     * &lt;P>&#xA;     * When this feature is enabled, the SNMP protocol adaptor sends a response with &lt;CODE>noSuchName&lt;/CODE>&#xA;     * or &lt;CODE>readOnly&lt;/CODE> when the authentication failed. If the flag is disabled, the&#xA;     * SNMP protocol adaptor trashes the PDU silently.&#xA;     * &lt;P>&#xA;     * The default behavior is to send responses.&#xA;     * &#xA;     * @return &lt;code>true&lt;/code> if responses are sent.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAuthRespEnabled">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="enabled">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the flag indicating if responses need to be sent in case of authentication failure.&#xA;     * &#xA;     * @param enabled Flag indicating if responses need to be sent.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getEnterpriseOid">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the enterprise OID. It is used by {@link #snmpV1Trap snmpV1Trap} to fill&#xA;     * the 'enterprise' field of the trap request.&#xA;     * &#xA;     * @return The OID in string format &quot;x.x.x.x&quot;.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setEnterpriseOid">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oid">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the enterprise OID.&#xA;     *&#xA;     * @param oid The OID in string format &quot;x.x.x.x&quot;.&#xA;     *&#xA;     * @exception IllegalArgumentException The string format is incorrect&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMibs">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the names of the MIBs available in this SNMP protocol adaptor.&#xA;     * &#xA;     * @return An array of MIB names.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpOutTraps">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// GETTERS FOR SNMP GROUP (MIBII)</comments>
        <comments>//-------------------------------</comments>
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpOutTraps&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpOutTraps&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpOutGetResponses">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpOutGetResponses&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpOutGetResponses&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpOutGenErrs">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpOutGenErrs&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpOutGenErrs&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpOutBadValues">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpOutBadValues&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpOutBadValues&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpOutNoSuchNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpOutNoSuchNames&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpOutNoSuchNames&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpOutTooBigs">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpOutTooBigs&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpOutTooBigs&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpInASNParseErrs">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpInASNParseErrs&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpInASNParseErrs&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpInBadCommunityUses">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpInBadCommunityUses&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpInBadCommunityUses&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpInBadCommunityNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpInBadCommunityNames&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpInBadCommunityNames&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpInBadVersions">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpInBadVersions&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpInBadVersions&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpOutPkts">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpOutPkts&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpOutPkts&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpInPkts">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpInPkts&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpInPkts&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpInGetRequests">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpInGetRequests&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpInGetRequests&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpInGetNexts">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpInGetNexts&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpInGetNexts&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpInSetRequests">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpInSetRequests&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpInSetRequests&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpInTotalSetVars">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpInTotalSetVars&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpInTotalSetVars&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpInTotalReqVars">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpInTotalReqVars&lt;/CODE> value defined in MIB-II.&#xA;     * &#xA;     * @return The &lt;CODE>snmpInTotalReqVars&lt;/CODE> value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpSilentDrops">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpSilentDrops&lt;/CODE> value defined in rfc 1907 NMPv2-MIB .&#xA;     * &#xA;     * @return The &lt;CODE>snmpSilentDrops&lt;/CODE> value.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpProxyDrops">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;CODE>snmpProxyDrops&lt;/CODE> value defined in rfc 1907 NMPv2-MIB .&#xA;     * &#xA;     * @return The &lt;CODE>snmpProxyDrops&lt;/CODE> value.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addMib">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../agent/SnmpMibHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mib">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../agent/SnmpMibAgent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// PUBLIC METHODS</comments>
        <comments>//---------------</comments>
        <comments>/**&#xA;     * Adds a new MIB in the SNMP MIB handler. &#xA;     * This method is called automatically by {@link com.sun.jmx.snmp.agent.SnmpMibAgent#setSnmpAdaptor(SnmpMibHandler)}  &#xA;     * and {@link com.sun.jmx.snmp.agent.SnmpMibAgent#setSnmpAdaptorName(ObjectName)}&#xA;     * and should not be called directly.&#xA;     * &#xA;     * @param mib The MIB to add.&#xA;     * &#xA;     * @return A reference to the SNMP MIB handler. &#xA;     *&#xA;     * @exception IllegalArgumentException If the parameter is null.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addMib">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../agent/SnmpMibHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mib">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../agent/SnmpMibAgent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oids">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a new MIB in the SNMP MIB handler. &#xA;     * &#xA;     * @param mib The MIB to add.&#xA;     * @param oids The set of OIDs this agent implements.&#xA;     * &#xA;     * @return A reference to the SNMP MIB handler. &#xA;     *&#xA;     * @exception IllegalArgumentException If the parameter is null.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeMib">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mib">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../agent/SnmpMibAgent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the specified MIB from the SNMP protocol adaptor. &#xA;     * This method is called automatically by {@link com.sun.jmx.snmp.agent.SnmpMibAgent#setSnmpAdaptor(SnmpMibHandler)}  &#xA;     * and {@link com.sun.jmx.snmp.agent.SnmpMibAgent#setSnmpAdaptorName(ObjectName)}&#xA;     * and should not be called directly.&#xA;     * &#xA;     * @param mib The MIB to be removed.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the specified &lt;CODE>mib&lt;/CODE> was a MIB included in the SNMP MIB handler, &#xA;     * &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="snmpV1Trap">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="generic">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="specific">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="varBindList">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpVarBindList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sends a trap using SNMP V1 trap format.&#xA;     * &lt;BR>The trap is sent to each destination defined in the ACL file (if available).&#xA;     * If no ACL file or no destinations are available, the trap is sent to the local host.&#xA;     * &#xA;     * @param generic The generic number of the trap.&#xA;     * @param specific The specific number of the trap.&#xA;     * @param varBindList A list of &lt;CODE>SnmpVarBind&lt;/CODE> instances or null.&#xA;     *&#xA;     * @exception IOException An I/O error occured while sending the trap.&#xA;     * @exception SnmpStatusException If the trap exceeds the limit defined by &lt;CODE>bufferSize&lt;/CODE>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="snmpV1Trap">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="address">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/net/InetAddress.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="generic">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="specific">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="varBindList">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpVarBindList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sends a trap using SNMP V1 trap format.&#xA;     * &lt;BR>The trap is sent to the specified &lt;CODE>InetAddress&lt;/CODE> destination&#xA;     * using the specified community string (and the ACL file is not used).&#xA;     * &#xA;     * @param address The &lt;CODE>InetAddress&lt;/CODE> destination of the trap.&#xA;     * @param cs The community string to be used for the trap.&#xA;     * @param generic The generic number of the trap.&#xA;     * @param specific The specific number of the trap.&#xA;     * @param varBindList A list of &lt;CODE>SnmpVarBind&lt;/CODE> instances or null.&#xA;     *&#xA;     * @exception IOException An I/O error occurred while sending the trap.&#xA;     * @exception SnmpStatusException If the trap exceeds the limit defined by &lt;CODE>bufferSize&lt;/CODE>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="snmpV1Trap">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="peer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpPeer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="agentAddr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpIpAddress.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="enterpOid">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="generic">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="specific">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="varBindList">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpVarBindList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="time">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpTimeticks.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sends a trap using SNMP V1 trap format.&#xA;     * &lt;BR>The trap is sent to the specified &lt;CODE>SnmpPeer&lt;/CODE> destination.&#xA;     * The community string used is the one located in the &lt;CODE>SnmpPeer&lt;/CODE> parameters (&lt;CODE>SnmpParameters.getRdCommunity() &lt;/CODE>).&#xA;     * &#xA;     * @param peer The &lt;CODE>SnmpPeer&lt;/CODE> destination of the trap.&#xA;     * @param agentAddr The agent address to be used for the trap.&#xA;     * @param enterpOid The enterprise OID to be used for the trap.&#xA;     * @param generic The generic number of the trap.&#xA;     * @param specific The specific number of the trap.&#xA;     * @param varBindList A list of &lt;CODE>SnmpVarBind&lt;/CODE> instances or null.&#xA;     * @param time The time stamp (overwrite the current time).&#xA;     *&#xA;     * @exception IOException An I/O error occurred while sending the trap.&#xA;     * @exception SnmpStatusException If the trap exceeds the limit defined by &lt;CODE>bufferSize&lt;/CODE>.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="snmpV2Trap">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="peer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpPeer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="trapOid">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="varBindList">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpVarBindList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="time">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpTimeticks.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sends a trap using SNMP V2 trap format.&#xA;     * &lt;BR>The trap is sent to the specified &lt;CODE>SnmpPeer&lt;/CODE> destination.&#xA;     * &lt;BR>The community string used is the one located in the &lt;CODE>SnmpPeer&lt;/CODE> parameters (&lt;CODE>SnmpParameters.getRdCommunity() &lt;/CODE>).&#xA;     * &lt;BR>The variable list included in the outgoing trap is composed of the following items:&#xA;     * &lt;UL>&#xA;     * &lt;LI>&lt;CODE>sysUpTime.0&lt;/CODE> with the value specified by &lt;CODE>time&lt;/CODE>&#xA;     * &lt;LI>&lt;CODE>snmpTrapOid.0&lt;/CODE> with the value specified by &lt;CODE>trapOid&lt;/CODE>&#xA;     * &lt;LI>&lt;CODE>all the (oid,values)&lt;/CODE> from the specified &lt;CODE>varBindList&lt;/CODE>&#xA;     * &lt;/UL>&#xA;     * &#xA;     * @param peer The &lt;CODE>SnmpPeer&lt;/CODE> destination of the trap.&#xA;     * @param trapOid The OID identifying the trap.&#xA;     * @param varBindList A list of &lt;CODE>SnmpVarBind&lt;/CODE> instances or null.&#xA;     * @param time The time stamp (overwrite the current time).&#xA;     *&#xA;     * @exception IOException An I/O error occurred while sending the trap.&#xA;     * @exception SnmpStatusException If the trap exceeds the limit defined by &lt;CODE>bufferSize&lt;/CODE>.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="snmpV2Trap">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="trapOid">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="varBindList">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpVarBindList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sends a trap using SNMP V2 trap format.&#xA;     * &lt;BR>The trap is sent to each destination defined in the ACL file (if available).&#xA;     * If no ACL file or no destinations are available, the trap is sent to the local host.&#xA;     * &lt;BR>The variable list included in the outgoing trap is composed of the following items:&#xA;     * &lt;UL>&#xA;     * &lt;LI>&lt;CODE>sysUpTime.0&lt;/CODE> with its current value&#xA;     * &lt;LI>&lt;CODE>snmpTrapOid.0&lt;/CODE> with the value specified by &lt;CODE>trapOid&lt;/CODE>&#xA;     * &lt;LI>&lt;CODE>all the (oid,values)&lt;/CODE> from the specified &lt;CODE>varBindList&lt;/CODE>&#xA;     * &lt;/UL>&#xA;     * &#xA;     * @param trapOid The OID identifying the trap.&#xA;     * @param varBindList A list of &lt;CODE>SnmpVarBind&lt;/CODE> instances or null.&#xA;     *&#xA;     * @exception IOException An I/O error occured while sending the trap.&#xA;     * @exception SnmpStatusException If the trap exceeds the limit defined by &lt;CODE>bufferSize&lt;/CODE>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="snmpV2Trap">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="address">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/net/InetAddress.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="trapOid">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="varBindList">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpVarBindList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sends a trap using SNMP V2 trap format.&#xA;     * &lt;BR>The trap is sent to the specified &lt;CODE>InetAddress&lt;/CODE> destination&#xA;     * using the specified community string (and the ACL file is not used).&#xA;     * &lt;BR>The variable list included in the outgoing trap is composed of the following items:&#xA;     * &lt;UL>&#xA;     * &lt;LI>&lt;CODE>sysUpTime.0&lt;/CODE> with its current value&#xA;     * &lt;LI>&lt;CODE>snmpTrapOid.0&lt;/CODE> with the value specified by &lt;CODE>trapOid&lt;/CODE>&#xA;     * &lt;LI>&lt;CODE>all the (oid,values)&lt;/CODE> from the specified &lt;CODE>varBindList&lt;/CODE>&#xA;     * &lt;/UL>&#xA;     * &#xA;     * @param address The &lt;CODE>InetAddress&lt;/CODE> destination of the trap.&#xA;     * @param cs The community string to be used for the trap.&#xA;     * @param trapOid The OID identifying the trap.&#xA;     * @param varBindList A list of &lt;CODE>SnmpVarBind&lt;/CODE> instances or null.&#xA;     *&#xA;     * @exception IOException An I/O error occurred while sending the trap.&#xA;     * @exception SnmpStatusException If the trap exceeds the limit defined by &lt;CODE>bufferSize&lt;/CODE>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="snmpPduTrap">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="address">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/net/InetAddress.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pdu">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpPduPacket.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Send the specified trap PDU to the passed &lt;CODE>InetAddress&lt;/CODE>.&#xA;     * @param address The destination address.&#xA;     * @param pdu The pdu to send.&#xA;     * @exception IOException An I/O error occurred while sending the trap.&#xA;     * @exception SnmpStatusException If the trap exceeds the limit defined by &lt;CODE>bufferSize&lt;/CODE>.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="snmpPduTrap">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="peer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpPeer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pdu">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpPduPacket.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Send the specified trap PDU to the passed &lt;CODE>SnmpPeer&lt;/CODE>.&#xA;     * @param peer The destination peer. The Read community string is used of &lt;CODE>SnmpParameters&lt;/CODE> is used as the trap community string.&#xA;     * @param pdu The pdu to send.&#xA;     * @exception IOException An I/O error occurred while sending the trap.&#xA;     * @exception SnmpStatusException If the trap exceeds the limit defined by &lt;CODE>bufferSize&lt;/CODE>.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="snmpInformRequest">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SnmpInformHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="trapOid">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="varBindList">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpVarBindList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/IllegalStateException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sends an inform using SNMP V2 inform request format.&#xA;     * &lt;BR>The inform request is sent to each destination defined in the ACL file (if available).&#xA;     * If no ACL file or no destinations are available, the inform request is sent to the local host.&#xA;     * &lt;BR>The variable list included in the outgoing inform request is composed of the following items:&#xA;     * &lt;UL>&#xA;     * &lt;LI>&lt;CODE>sysUpTime.0&lt;/CODE> with its current value&#xA;     * &lt;LI>&lt;CODE>snmpTrapOid.0&lt;/CODE> with the value specified by &lt;CODE>trapOid&lt;/CODE>&#xA;     * &lt;LI>&lt;CODE>all the (oid,values)&lt;/CODE> from the specified &lt;CODE>varBindList&lt;/CODE>&#xA;     * &lt;/UL>&#xA;     * To send an inform request, the SNMP adaptor server must be active.&#xA;     * &#xA;     * @param cb The callback that is invoked when a request is complete.&#xA;     * @param trapOid The OID identifying the trap.&#xA;     * @param varBindList A list of &lt;CODE>SnmpVarBind&lt;/CODE> instances or null.&#xA;     *&#xA;     * @return A vector of {@link com.sun.jmx.snmp.daemon.SnmpInformRequest} objects.&#xA;     * &lt;P>If there is no destination host for this inform request, the returned vector will be empty.&#xA;     *&#xA;     * @exception IllegalStateException  This method has been invoked while the SNMP adaptor server was not active.&#xA;     * @exception IOException An I/O error occurred while sending the inform request.&#xA;     * @exception SnmpStatusException If the inform request exceeds the limit defined by &lt;CODE>bufferSize&lt;/CODE>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="snmpInformRequest">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SnmpInformRequest.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="address">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/net/InetAddress.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SnmpInformHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="trapOid">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="varBindList">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpVarBindList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/IllegalStateException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sends an inform using SNMP V2 inform request format.&#xA;     * &lt;BR>The inform is sent to the specified &lt;CODE>InetAddress&lt;/CODE> destination&#xA;     * using the specified community string.&#xA;     * &lt;BR>The variable list included in the outgoing inform request is composed of the following items:&#xA;     * &lt;UL>&#xA;     * &lt;LI>&lt;CODE>sysUpTime.0&lt;/CODE> with its current value&#xA;     * &lt;LI>&lt;CODE>snmpTrapOid.0&lt;/CODE> with the value specified by &lt;CODE>trapOid&lt;/CODE>&#xA;     * &lt;LI>&lt;CODE>all the (oid,values)&lt;/CODE> from the specified &lt;CODE>varBindList&lt;/CODE>&#xA;     * &lt;/UL>&#xA;     * To send an inform request, the SNMP adaptor server must be active.&#xA;     * &#xA;     * @param address The &lt;CODE>InetAddress&lt;/CODE> destination for this inform request.&#xA;     * @param cs The community string to be used for the inform request.&#xA;     * @param cb The callback that is invoked when a request is complete.&#xA;     * @param trapOid The OID identifying the trap.&#xA;     * @param varBindList A list of &lt;CODE>SnmpVarBind&lt;/CODE> instances or null.&#xA;     *&#xA;     * @return The inform request object.&#xA;     *&#xA;     * @exception IllegalStateException  This method has been invoked while the SNMP adaptor server was not active.&#xA;     * @exception IOException An I/O error occurred while sending the inform request.&#xA;     * @exception SnmpStatusException If the inform request exceeds the limit defined by &lt;CODE>bufferSize&lt;/CODE>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="snmpInformRequest">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SnmpInformRequest.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="peer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpPeer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SnmpInformHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="trapOid">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="varBindList">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpVarBindList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/IllegalStateException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sends an inform using SNMP V2 inform request format.&#xA;     * &lt;BR>The inform is sent to the specified &lt;CODE>SnmpPeer&lt;/CODE> destination.&#xA;     * &lt;BR> The community string used is the one located in the &lt;CODE>SnmpPeer&lt;/CODE> parameters (&lt;CODE>SnmpParameters.getInformCommunity() &lt;/CODE>).&#xA;     * &lt;BR>The variable list included in the outgoing inform is composed of the following items:&#xA;     * &lt;UL>&#xA;     * &lt;LI>&lt;CODE>sysUpTime.0&lt;/CODE> with its current value&#xA;     * &lt;LI>&lt;CODE>snmpTrapOid.0&lt;/CODE> with the value specified by &lt;CODE>trapOid&lt;/CODE>&#xA;     * &lt;LI>&lt;CODE>all the (oid,values)&lt;/CODE> from the specified &lt;CODE>varBindList&lt;/CODE>&#xA;     * &lt;/UL>&#xA;     * To send an inform request, the SNMP adaptor server must be active.&#xA;     * &#xA;     * @param peer The &lt;CODE>SnmpPeer&lt;/CODE> destination for this inform request.&#xA;     * @param cb The callback that is invoked when a request is complete.&#xA;     * @param trapOid The OID identifying the trap.&#xA;     * @param varBindList A list of &lt;CODE>SnmpVarBind&lt;/CODE> instances or null.&#xA;     *&#xA;     * @return The inform request object.&#xA;     *&#xA;     * @exception IllegalStateException  This method has been invoked while the SNMP adaptor server was not active.&#xA;     * @exception IOException An I/O error occurred while sending the inform request.&#xA;     * @exception SnmpStatusException If the inform request exceeds the limit defined by &lt;CODE>bufferSize&lt;/CODE>.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Exposes the remote management interface of the {@link SnmpAdaptorServer} MBean.&#xA; * &lt;p>&lt;b>This API is a Sun Microsystems internal API  and is subject &#xA; * to change without notice.&lt;/b>&lt;/p>&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="CommunicatorServerMBean.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
