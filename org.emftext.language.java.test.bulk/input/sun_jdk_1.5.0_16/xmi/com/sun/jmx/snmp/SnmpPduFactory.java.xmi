<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="SnmpPduFactory.java">
  <comments>/*&#xA; * @(#)file      SnmpPduFactory.java&#xA; * @(#)author    Sun Microsystems, Inc.&#xA; * @(#)version   4.23&#xA; * @(#)date      08/05/28&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; *&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>jmx</namespaces>
  <namespaces>snmp</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="SnmpPduFactory">
    <members xsi:type="members:InterfaceMethod" name="decodeSnmpPdu">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SnmpPdu.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="msg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="SnmpMsg.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Decodes the specified &lt;CODE>SnmpMsg&lt;/CODE> and returns the &#xA;     * resulting &lt;CODE>SnmpPdu&lt;/CODE>. If this method returns&#xA;     * &lt;CODE>null&lt;/CODE>, the message will be considered unsafe &#xA;     * and will be dropped.&#xA;     *&#xA;     * @param msg The &lt;CODE>SnmpMsg&lt;/CODE> to be decoded.&#xA;     * @return Null or a fully initialized &lt;CODE>SnmpPdu&lt;/CODE>.&#xA;     * @exception SnmpStatusException If the encoding is invalid.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="encodeSnmpPdu">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SnmpMsg.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="SnmpPdu.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maxDataLength">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SnmpTooBigException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Encodes the specified &lt;CODE>SnmpPdu&lt;/CODE> and&#xA;     * returns the resulting &lt;CODE>SnmpMsg&lt;/CODE>. If this&#xA;     * method returns null, the specified &lt;CODE>SnmpPdu&lt;/CODE> &#xA;     * will be dropped and the current SNMP request will be&#xA;     * aborted.&#xA;     *&#xA;     * @param p The &lt;CODE>SnmpPdu&lt;/CODE> to be encoded.&#xA;     * @param maxDataLength The size limit of the resulting encoding.&#xA;     * @return Null or a fully encoded &lt;CODE>SnmpMsg&lt;/CODE>.&#xA;     * @exception SnmpStatusException If &lt;CODE>pdu&lt;/CODE> contains&#xA;     *            illegal values and cannot be encoded.&#xA;     * @exception SnmpTooBigException If the resulting encoding does not&#xA;     *            fit into &lt;CODE>maxPktSize&lt;/CODE> bytes.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Defines the interface of the object in charge of encoding and decoding SNMP packets.&#xA; * &lt;P>&#xA; * You will not usually need to use this interface, except if you&#xA; * decide to replace the default implementation &lt;CODE>SnmpPduFactoryBER&lt;/CODE>.&#xA; * &lt;P>&#xA; * An &lt;CODE>SnmpPduFactory&lt;/CODE> object is attached to an &#xA; * {@link com.sun.jmx.snmp.daemon.SnmpAdaptorServer SNMP protocol adaptor}&#xA; * or an {@link com.sun.jmx.snmp.SnmpPeer SnmpPeer}.&#xA; * It is used each time an SNMP packet needs to be encoded or decoded.&#xA; * &lt;BR>{@link com.sun.jmx.snmp.SnmpPduFactoryBER SnmpPduFactoryBER} is the default &#xA; * implementation.&#xA; * It simply applies the standard ASN.1 encoding and decoding&#xA; * on the bytes of the SNMP packet.&#xA; * &lt;P>&#xA; * It's possible to implement your own &lt;CODE>SnmpPduFactory&lt;/CODE>&#xA; * object and to add authentication and/or encryption to the&#xA; * default encoding/decoding process.&#xA; *&#xA; * &lt;p>&lt;b>This API is a Sun Microsystems internal API  and is subject &#xA; * to change without notice.&lt;/b>&lt;/p>&#xA; * @see SnmpPduFactory&#xA; * @see SnmpPduPacket&#xA; * @see SnmpMessage&#xA; *&#xA; * @version     1.8     08/13/98&#xA; * @author      Sun Microsystems, Inc&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
