<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../java.ecore#/16" name="SnmpMibAgentMBean.java">
  <comments>/*&#xA; * @(#)file      SnmpMibAgentMBean.java&#xA; * @(#)author    Sun Microsystems, Inc.&#xA; * @(#)version   1.24&#xA; * @(#)date      08/05/28&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; *&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>jmx</namespaces>
  <namespaces>snmp</namespaces>
  <namespaces>agent</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <comments>// java imports</comments>
    <comments>//</comments>
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <comments>// jmx imports</comments>
    <comments>//</comments>
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../javax/management/MBeanServer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../javax/management/ObjectName.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../javax/management/MalformedObjectNameException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../javax/management/InstanceNotFoundException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../javax/management/ServiceNotFoundException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="SnmpMibAgentMBean">
    <members xsi:type="members:InterfaceMethod" name="get">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="req">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SnmpMibRequest.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// PUBLIC METHODS</comments>
        <comments>//---------------</comments>
        <comments>/**&#xA;     * Processes a &lt;CODE>get&lt;/CODE> operation.&#xA;     * This method must not be called from remote.&#xA;     * &#xA;     * @param req The SnmpMibRequest object holding the list of variables to&#xA;     *            be retrieved. This list is composed of &#xA;     *            &lt;CODE>SnmpVarBind&lt;/CODE> objects.&#xA;     *&#xA;     * @exception SnmpStatusException An error occured during the operation.&#xA;     * @see SnmpMibAgent#get(SnmpMibRequest)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNext">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="req">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SnmpMibRequest.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Processes a &lt;CODE>getNext&lt;/CODE> operation.&#xA;     * This method must not be called from remote.&#xA;     * &#xA;     * @param req The SnmpMibRequest object holding the list of variables to&#xA;     *            be retrieved. This list is composed of &#xA;     *            &lt;CODE>SnmpVarBind&lt;/CODE> objects.&#xA;     *&#xA;     * @exception SnmpStatusException An error occured during the operation.&#xA;     * @see SnmpMibAgent#getNext(SnmpMibRequest)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBulk">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="req">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SnmpMibRequest.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nonRepeat">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maxRepeat">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Processes a &lt;CODE>getBulk&lt;/CODE> operation.&#xA;     * This method must not be called from remote.&#xA;     * &#xA;     * @param req The SnmpMibRequest object holding the list of variables to&#xA;     *            be retrieved. This list is composed of &#xA;     *            &lt;CODE>SnmpVarBind&lt;/CODE> objects.&#xA;     *&#xA;     * @param nonRepeat The number of variables, starting with the first &#xA;     *    variable in the variable-bindings, for which a single &#xA;     *    lexicographic successor is requested.&#xA;     *&#xA;     * @param maxRepeat The number of lexicographic successors requested &#xA;     *    for each of the last R variables. R is the number of variables &#xA;     *    following the first &lt;CODE>nonRepeat&lt;/CODE> variables for which &#xA;     *    multiple lexicographic successors are requested.&#xA;     *&#xA;     * @exception SnmpStatusException An error occured during the operation.&#xA;     * @see SnmpMibAgent#getBulk(SnmpMibRequest,int,int)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="set">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="req">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SnmpMibRequest.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Processes a &lt;CODE>set&lt;/CODE> operation.&#xA;     * This method must not be called from remote.&#xA;     * &#xA;     * @param req The SnmpMibRequest object holding the list of variables to&#xA;     *            be set. This list is composed of &#xA;     *            &lt;CODE>SnmpVarBind&lt;/CODE> objects.&#xA;     *&#xA;     * @exception SnmpStatusException An error occured during the operation.&#xA;     * @see SnmpMibAgent#set(SnmpMibRequest)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="check">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="req">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SnmpMibRequest.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Checks if a &lt;CODE>set&lt;/CODE> operation can be performed.&#xA;     * If the operation cannot be performed, the method should emit a&#xA;     * &lt;CODE>SnmpStatusException&lt;/CODE>.&#xA;     * &#xA;     * @param req The SnmpMibRequest object holding the list of variables to&#xA;     *            be set. This list is composed of &#xA;     *            &lt;CODE>SnmpVarBind&lt;/CODE> objects.&#xA;     *&#xA;     * @exception SnmpStatusException The &lt;CODE>set&lt;/CODE> operation &#xA;     *    cannot be performed.&#xA;     * @see SnmpMibAgent#check(SnmpMibRequest)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMBeanServer">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../javax/management/MBeanServer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// GETTERS AND SETTERS</comments>
        <comments>//--------------------</comments>
        <comments>/**&#xA;     * Gets the reference to the MBean server in which the SNMP MIB is &#xA;     * registered.&#xA;     *&#xA;     * @return The MBean server or null if the MIB is not registered in any &#xA;     *         MBean server.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpAdaptor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="SnmpMibHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the reference to the SNMP protocol adaptor to which the MIB is &#xA;     * bound.&#xA;     * &lt;BR>This method is used for accessing the SNMP MIB handler property &#xA;     * of the SNMP MIB agent in case of a standalone agent.&#xA;     *&#xA;     * @return The SNMP MIB handler.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSnmpAdaptor">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stack">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SnmpMibHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the reference to the SNMP protocol adaptor through which the &#xA;     * MIB will be SNMP accessible and add this new MIB in the SNMP MIB &#xA;     * handler.&#xA;     * &lt;BR>This method is used for setting the SNMP MIB handler property of &#xA;     * the SNMP MIB agent in case of a standalone agent.&#xA;     *&#xA;     * @param stack The SNMP MIB handler.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSnmpAdaptor">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stack">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SnmpMibHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oids">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the reference to the SNMP protocol adaptor through which the MIB &#xA;     * will be SNMP accessible and add this new MIB in the SNMP MIB handler.&#xA;     * This method is to be called to set a specific agent to a specific OID.&#xA;     * This can be useful when dealing with MIB overlapping. &#xA;     * Some OID can be implemented in more than one MIB. In this case, the&#xA;     * OID nearer agent will be used on SNMP operations.&#xA;     * @param stack The SNMP MIB handler.&#xA;     * @param oids The set of OIDs this agent implements.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSnmpAdaptor">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stack">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SnmpMibHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="contextName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the reference to the SNMP protocol adaptor through which the MIB &#xA;     * will be SNMP accessible and add this new MIB in the SNMP MIB handler.&#xA;     * Adds a new contextualized MIB in the SNMP MIB handler.&#xA;     * &#xA;     * @param stack The SNMP MIB handler.&#xA;     * @param contextName The MIB context name. If null is passed, will be &#xA;     *        registered in the default context.&#xA;     *&#xA;     * @exception IllegalArgumentException If the parameter is null.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSnmpAdaptor">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stack">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SnmpMibHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="contextName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oids">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the reference to the SNMP protocol adaptor through which the MIB &#xA;     * will be SNMP accessible and adds this new MIB in the SNMP MIB handler.&#xA;     * Adds a new contextualized MIB in the SNMP MIB handler.&#xA;     * &#xA;     * @param stack The SNMP MIB handler.&#xA;     * @param contextName The MIB context name. If null is passed, will be &#xA;     *        registered in the default context.&#xA;     * @param oids The set of OIDs this agent implements.&#xA;     * @exception IllegalArgumentException If the parameter is null.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSnmpAdaptorName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/management/ObjectName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the object name of the SNMP protocol adaptor to which the MIB is &#xA;     * bound.&#xA;     *&#xA;     * @return The name of the SNMP protocol adaptor.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSnmpAdaptorName">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../javax/management/ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/management/InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/management/ServiceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the reference to the SNMP protocol adaptor through which the MIB &#xA;     * will be SNMP accessible and add this new MIB in the SNMP MIB handler &#xA;     * associated to the specified &lt;CODE>name&lt;/CODE>.&#xA;     *&#xA;     * @param name The object name of the SNMP MIB handler.&#xA;     *&#xA;     * @exception InstanceNotFoundException The MBean does not exist in the&#xA;     *        MBean server.&#xA;     * @exception ServiceNotFoundException This SNMP MIB is not registered &#xA;     *        in the MBean server or the requested service is not supported.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSnmpAdaptorName">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../javax/management/ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oids">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/management/InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/management/ServiceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the reference to the SNMP protocol adaptor through which the MIB&#xA;     * will be SNMP accessible and add this new MIB in the SNMP MIB handler &#xA;     * associated to the specified &lt;CODE>name&lt;/CODE>.&#xA;     * This method is to be called to set a specific agent to a specific OID.&#xA;     * This can be useful when dealing with MIB overlapping. &#xA;     * Some OID can be implemented in more than one MIB. In this case, the &#xA;     * OID nearer agent will be used on SNMP operations.&#xA;     * @param name The name of the SNMP protocol adaptor.&#xA;     * @param oids The set of OIDs this agent implements.&#xA;     * @exception InstanceNotFoundException The SNMP protocol adaptor does&#xA;     *     not exist in the MBean server.&#xA;     *&#xA;     * @exception ServiceNotFoundException This SNMP MIB is not registered &#xA;     *     in the MBean server or the requested service is not supported.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSnmpAdaptorName">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../javax/management/ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="contextName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/management/InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/management/ServiceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the reference to the SNMP protocol adaptor through which the MIB&#xA;     * will be SNMP accessible and add this new MIB in the SNMP MIB handler &#xA;     * associated to the specified &lt;CODE>name&lt;/CODE>.&#xA;     *&#xA;     * @param name The name of the SNMP protocol adaptor.&#xA;     * @param contextName The MIB context name. If null is passed, will be &#xA;     *     registered in the default context.&#xA;     * @exception InstanceNotFoundException The SNMP protocol adaptor does&#xA;     *     not exist in the MBean server.&#xA;     *&#xA;     * @exception ServiceNotFoundException This SNMP MIB is not registered &#xA;     *     in the MBean server or the requested service is not supported.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSnmpAdaptorName">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../javax/management/ObjectName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="contextName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oids">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/management/InstanceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/management/ServiceNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the reference to the SNMP protocol adaptor through which the MIB&#xA;     * will be SNMP accessible and add this new MIB in the SNMP MIB handler &#xA;     * associated to the specified &lt;CODE>name&lt;/CODE>.&#xA;     *&#xA;     * @param name The name of the SNMP protocol adaptor.&#xA;     * @param contextName The MIB context name. If null is passed, will be &#xA;     *        registered in the default context.&#xA;     * @param oids The set of OIDs this agent implements.&#xA;     * @exception InstanceNotFoundException The SNMP protocol adaptor does&#xA;     *     not exist in the MBean server.&#xA;     *&#xA;     * @exception ServiceNotFoundException This SNMP MIB is not registered &#xA;     *     in the MBean server or the requested service is not supported.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBindingState">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates whether or not the MIB module is bound to a SNMP protocol &#xA;     * adaptor.&#xA;     * As a reminder, only bound MIBs can be accessed through SNMP protocol &#xA;     * adaptor.&#xA;     *&#xA;     * @return &lt;CODE>true&lt;/CODE> if the MIB module is bound, &#xA;     *         &lt;CODE>false&lt;/CODE> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMibName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the MIB name.&#xA;     *&#xA;     * @return The MIB name.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Exposes the remote management interface of the &lt;CODE>SnmpMibAgent&lt;/CODE> MBean.&#xA; * &#xA; * &lt;p>&lt;b>This API is a Sun Microsystems internal API  and is subject &#xA; * to change without notice.&lt;/b>&lt;/p>&#xA; * @version     1.24     12/19/03&#xA; * @author      Sun Microsystems, Inc&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
