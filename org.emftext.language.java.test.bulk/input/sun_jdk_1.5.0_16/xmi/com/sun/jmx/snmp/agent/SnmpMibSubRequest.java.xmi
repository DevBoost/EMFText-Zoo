<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../java.ecore#/16" name="SnmpMibSubRequest.java">
  <comments>/*&#xA; * @(#)file      SnmpMibSubRequest.java&#xA; * @(#)author    Sun Microsystems, Inc.&#xA; * @(#)version   1.13&#xA; * @(#)date      08/05/28&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>jmx</namespaces>
  <namespaces>snmp</namespaces>
  <namespaces>agent</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SnmpVarBind.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>jmx</namespaces>
    <namespaces>snmp</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="SnmpMibSubRequest">
    <members xsi:type="members:InterfaceMethod" name="getElements">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return the list of varbind to be handled by the SNMP MIB node.&#xA;     * &lt;p>&#xA;     * &lt;b>Note:&lt;/b> &lt;ul>&#xA;     * &lt;i>In case of SET operation, if this node is a table row which &#xA;     * contains a control variable (as identified by the table's &#xA;     * isRowStatus() method) the control variable will not&#xA;     * be included in this list: it will be obtained by calling&#xA;     * getRowStatusVarBind(). This will allow you to handle the control&#xA;     * variable specifically.&lt;/i>&lt;br>&#xA;     * You will never need to worry about this unless you need to&#xA;     * implement a non standard mechanism for handling row&#xA;     * creation and deletion.&#xA;     * &lt;/ul>&#xA;     * &lt;p>&#xA;     * @return The elements of the enumeration are instances of &#xA;     *         {@link com.sun.jmx.snmp.SnmpVarBind} &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSubList">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return the list of varbind to be handled by the SNMP MIB node.&#xA;     * &lt;p>&#xA;     * &lt;b>Note:&lt;/b> &lt;ul>&#xA;     * &lt;i>In case of SET operation, if this node is a table row which &#xA;     * contains a control variable (as identified by the table's &#xA;     * isRowStatus() method) the control variable will not&#xA;     * be included in this list: it will be obtained by calling&#xA;     * getRowStatusVarBind(). This will allow you to handle the control&#xA;     * variable specifically.&lt;/i>&lt;br>&#xA;     * You will never need to worry about this unless you need to&#xA;     * implement a non standard mechanism for handling row&#xA;     * creation and deletion.&#xA;     * &lt;/ul>&#xA;     * &lt;p>&#xA;     * @return The elements of the vector are instances of &#xA;     *         {@link com.sun.jmx.snmp.SnmpVarBind} &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getEntryOid">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpOid.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return the part of the OID identifying the table entry involved.&#xA;     * &lt;p>&#xA;     *&#xA;     * @return {@link com.sun.jmx.snmp.SnmpOid} or &lt;CODE>null&lt;/CODE>&#xA;     *         if the request is not directed to an entry.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isNewEntry">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicate whether the entry involved is a new entry.&#xA;     * This method will return &lt;CODE>true&lt;/CODE> if the entry was not&#xA;     * found when the request was processed. As a consequence, &lt;CODE>&#xA;     * true&lt;/CODE> means that either the entry does not exist yet,&#xA;     * or it has been created while processing this request.&#xA;     * The result of this method is only significant when an entry&#xA;     * is involved.&#xA;     *&#xA;     * &lt;p>&#xA;     * @return &lt;CODE>true&lt;/CODE> If the entry did not exist, &#xA;     *  or &lt;CODE>false&lt;/CODE> if the entry involved was found.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRowStatusVarBind">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpVarBind.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return the varbind that holds the RowStatus variable.&#xA;     * It corresponds to the varbind that was identified by &#xA;     * the &lt;code>isRowStatus()&lt;/code> method generated by mibgen&#xA;     * on {@link com.sun.jmx.snmp.agent.SnmpMibTable} derivatives.&#xA;     * &lt;ul>&lt;li>In SMIv2, it is the varbind which contains the columnar &#xA;     *         object implementing the RowStatus TEXTUAL-CONVENTION.&lt;/li>&#xA;     *      &lt;li>In SMIv1 nothing special is generated&lt;/li>&#xA;     *      &lt;ul>You may however subclass the generated table metadata&#xA;     *          class in order to provide your own implementation of&#xA;     *          isRowStatus(), getRowAction(), isRowReady() and &#xA;     *          setRowStatus()&#xA;     *          (see  {@link com.sun.jmx.snmp.agent.SnmpMibTable}).&lt;/ul>&#xA;     * &lt;/ul>&#xA;     * &lt;p>&#xA;     * @return a varbind that serves to control the table modification.&#xA;     *         &lt;code>null&lt;/code> means that no such varbind could be&#xA;     *         identified.&lt;br>&#xA;     *         &lt;b>Note:&lt;/b>&lt;i>The runtime will only try to identify&#xA;     *         the RowStatus varbind when processing an&#xA;     *         SNMP SET request. In this case, the identified&#xA;     *         varbind will not be included in the set of varbinds &#xA;     *         returned by getSubList() and getElements().&#xA;     *         &lt;/i>&#xA;     *                 &#xA;     **/</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="registerGetException">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="varbind">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpVarBind.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exception">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method should be called when a status exception needs to&#xA;     * be raised for a given varbind of an SNMP GET request. This method&#xA;     * performs all the necessary conversions (SNMPv1 &lt;=> SNMPv2) and&#xA;     * propagates the exception if needed:&#xA;     * If the version is SNMP v1, the exception is propagated.&#xA;     * If the version is SNMP v2, the exception is stored in the varbind.&#xA;     * This method also takes care of setting the correct value of the&#xA;     * index field.&#xA;     * &lt;p>&#xA;     *&#xA;     * @param varbind The varbind for which the exception is&#xA;     *        registered. Note that this varbind &lt;b>must&lt;/b> have &#xA;     *        been obtained from the enumeration returned by&#xA;     *        &lt;CODE>getElements()&lt;/CODE>, or from the vector&#xA;     *        returned by &lt;CODE>getSubList()&lt;/CODE>&#xA;     *&#xA;     * @param exception The exception to be registered for the given varbind.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="registerSetException">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="varbind">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpVarBind.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exception">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method should be called when a status exception needs to&#xA;     * be raised for a given varbind of an SNMP SET request. This method&#xA;     * performs all the necessary conversions (SNMPv1 &lt;=> SNMPv2) and&#xA;     * propagates the exception if needed.&#xA;     * This method also takes care of setting the correct value of the&#xA;     * index field.&#xA;     * &lt;p>&#xA;     *&#xA;     * @param varbind The varbind for which the exception is&#xA;     *        registered. Note that this varbind &lt;b>must&lt;/b> have &#xA;     *        been obtained from the enumeration returned by&#xA;     *        &lt;CODE>getElements()&lt;/CODE>, or from the vector&#xA;     *        returned by &lt;CODE>getSubList()&lt;/CODE>&#xA;     *&#xA;     * @param exception The exception to be registered for the given varbind.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="registerCheckException">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="varbind">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpVarBind.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exception">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SnmpStatusException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method should be called when a status exception needs to&#xA;     * be raised when checking a given varbind for an SNMP SET request. &#xA;     * This method performs all the necessary conversions (SNMPv1 &lt;=> &#xA;     * SNMPv2) and propagates the exception if needed.&#xA;     * This method also takes care of setting the correct value of the&#xA;     * index field.&#xA;     * &lt;p>&#xA;     *&#xA;     * @param varbind The varbind for which the exception is&#xA;     *        registered. Note that this varbind &lt;b>must&lt;/b> have &#xA;     *        been obtained from the enumeration returned by&#xA;     *        &lt;CODE>getElements()&lt;/CODE>, or from the vector&#xA;     *        returned by &lt;CODE>getSubList()&lt;/CODE>&#xA;     *&#xA;     * @param exception The exception to be registered for the given varbind.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>// import com.sun.jmx.snmp.SnmpIndex;</comments>
      <comments>/**&#xA; * This interface models an SNMP sub request to be performed on a specific &#xA; * SNMP MIB node. The node involved can be either an SNMP group, an SNMP table,&#xA; * or an SNMP table entry (conceptual row). The conceptual row may or may not &#xA; * already exist. If the row did not exist at the time when the request&#xA; * was received, the &lt;CODE>isNewEntry()&lt;/CODE> method will return &lt;CODE>&#xA; * true&lt;/CODE>. &#xA; * &lt;p>&#xA; * Objects implementing this interface will be allocated by the SNMP engine. &#xA; * You will never need to implement this interface. You will only use it. &#xA; * &lt;/p>&#xA; * &lt;p>&lt;b>This API is a Sun Microsystems internal API  and is subject &#xA; * to change without notice.&lt;/b>&lt;/p>&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="SnmpMibRequest.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
