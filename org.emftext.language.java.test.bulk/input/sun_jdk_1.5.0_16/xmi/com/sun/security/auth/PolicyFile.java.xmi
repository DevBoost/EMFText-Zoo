<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../../../java.ecore#/0 http://www.emftext.org/java/arrays ../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../java.ecore#/17" name="PolicyFile.java">
  <comments>/*&#xA; * @(#)PolicyFile.java&#x9;1.34 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>security</namespaces>
  <namespaces>auth</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/lang/RuntimePermission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>reflect</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/net/MalformedURLException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/security/Identity.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/security/IdentityScope.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/security/KeyStore.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/security/KeyStoreException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/security/Permission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/security/Permissions.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/security/PermissionCollection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../java/security/Principal.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/security/UnresolvedPermission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/security/Security.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <namespaces>cert</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/security/cert/Certificate.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <namespaces>cert</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../java/security/cert/X509Certificate.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>security</namespaces>
    <namespaces>auth</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../javax/security/auth/Subject.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>security</namespaces>
    <namespaces>auth</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../javax/security/auth/PrivateCredentialPermission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>security</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../sun/security/util/PropertyExpander.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="PolicyFile">
    <members xsi:type="members:Field" name="rb">
      <initialValue xsi:type="expressions:CastExpression">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>util</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <child xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>java</namespaces>
                    <namespaces>security</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../java/security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <anonymousClass>
                    <members xsi:type="members:ClassMethod" name="run">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <annotationsAndModifiers xsi:type="modifiers:Public"/>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="expressions:NestedExpression">
                          <expression xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.19"/>
                                  <arguments xsi:type="references:StringReference" value="sun.security.util.AuthResources"/>
                                </next>
                                <target xsi:type="classifiers:Class" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0"/>
                              </next>
                            </next>
                          </expression>
                        </returnValue>
                      </statements>
                    </members>
                  </anonymousClass>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </child>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>util</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="debug">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.5"/>
                <arguments xsi:type="references:StringReference" value="policy"/>
                <arguments xsi:type="references:StringReference" value="&#x9;[Auth Policy]"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </next>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>sun</namespaces>
        <namespaces>security</namespaces>
        <namespaces>util</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// needs to be package private</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="AUTH_POLICY">
      <initialValue xsi:type="references:StringReference" value="java.security.auth.policy"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SECURITY_MANAGER">
      <initialValue xsi:type="references:StringReference" value="java.security.manager"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="AUTH_POLICY_URL">
      <initialValue xsi:type="references:StringReference" value="auth.policy.url."/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="policyEntries">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="aliasMapping">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="initialized">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="expandProperties">
      <initialValue xsi:type="literals:BooleanLiteral" value="true"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="ignoreIdentityScope">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="PARAMS">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="references:IdentifierReference">
            <next xsi:type="references:ReflectiveClassReference"/>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </initialValues>
          <initialValues xsi:type="references:IdentifierReference">
            <next xsi:type="references:ReflectiveClassReference"/>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </initialValues>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// for use with the reflection API</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="PolicyFile">
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="prop">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// initialize Policy if either the AUTH_POLICY or</comments>
              <comments>// SECURITY_MANAGER properties are set</comments>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/System.class.xmi#//@classifiers.0/@members.25"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/lang/System.class.xmi#//@classifiers.0/@members.25"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../java/lang/System.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.12"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Initializes the Policy object and reads the default policy &#xA;     * configuration file(s) into the Policy object.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="init">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="11"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="refresh">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Refreshes the policy object by re-reading all the policy files.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @exception SecurityException if the caller doesn't have permission&#xA;     *&#x9;&#x9;to refresh the &lt;code>Policy&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>java</namespaces>
            <namespaces>lang</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/lang/SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>javax</namespaces>
                    <namespaces>security</namespaces>
                    <namespaces>auth</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../javax/security/auth/AuthPermission.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:StringReference" value="refreshPolicy"/>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7">
            <comments>// XXX</comments>
            <comments>//</comments>
            <comments>// 1)&#x9;if code instantiates PolicyFile directly, then it will need</comments>
            <comments>// &#x9;all the permissions required for the PolicyFile initialization</comments>
            <comments>// 2)&#x9;if code calls Policy.getPolicy, then it simply needs</comments>
            <comments>//&#x9;AuthPermission(getPolicy), and the javax.security.auth.Policy</comments>
            <comments>//&#x9;implementation instantiates PolicyFile in a doPrivileged block</comments>
            <comments>// 3)&#x9;if after instantiating a Policy (either via #1 or #2),</comments>
            <comments>//&#x9;code calls refresh, it simply needs</comments>
            <comments>//&#x9;AuthPermission(refreshPolicy).  then PolicyFile wraps</comments>
            <comments>//&#x9;the refresh in a doPrivileged block.</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>java</namespaces>
                    <namespaces>security</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../java/security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <anonymousClass>
                    <members xsi:type="members:ClassMethod" name="run">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <annotationsAndModifiers xsi:type="modifiers:Public"/>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.12"/>
                      </statements>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="literals:NullLiteral"/>
                      </statements>
                    </members>
                  </anonymousClass>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="initKeyStore">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/security/KeyStore.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="policyUrl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keyStoreName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keyStoreType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="keyStoreUrl">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <comments>/*&#xA;&#x9;&#x9; * location of keystore is specified as absolute URL in policy&#xA;&#x9;&#x9; * file, or is relative to URL of policy file&#xA;&#x9;&#x9; */</comments>
                    <target xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="literals:NullLiteral"/>
              </variable>
            </statements>
            <statements xsi:type="statements:TryBlock">
              <comments>// absolute URL</comments>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@statement/@statements.0/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
                  </value>
                </expression>
              </statements>
              <catcheBlocks>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@statement/@statements.0/@statements.0/@variable">
                      <comments>// relative URL</comments>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
                    </value>
                  </expression>
                </statements>
                <parameter name="e">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>java</namespaces>
                    <namespaces>net</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/net/MalformedURLException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </parameter>
              </catcheBlocks>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                      <arguments xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:StringReference" value="reading keystore"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@statement/@statements.0/@statements.0/@variable"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </arguments>
                    </next>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="inStream">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/io/BufferedInputStream.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.19">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@statement/@statements.0/@statements.0/@variable"/>
                  </arguments>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="ks">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/security/KeyStore.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@statement/@statements.0/@statements.4/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/security/KeyStore.class.xmi#//@classifiers.0/@members.6"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.2"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../java/security/KeyStore.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.2"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
              <elseStatement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@statement/@statements.0/@statements.4/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/security/KeyStore.class.xmi#//@classifiers.0/@members.6"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../java/security/KeyStore.class.xmi#//@classifiers.0/@members.9"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../java/security/KeyStore.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../java/security/KeyStore.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </elseStatement>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@statement/@statements.0/@statements.4/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/security/KeyStore.class.xmi#//@classifiers.0/@members.28"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@statement/@statements.0/@statements.3/@variable"/>
                  <arguments xsi:type="literals:NullLiteral"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@statement/@statements.0/@statements.3/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/io/InputStream.class.xmi#//@classifiers.0/@members.8"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@statement/@statements.0/@statements.4/@variable"/>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:Condition">
                <comments>// ignore, treat it like we have no keystore</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@statement/@statements.0/@catcheBlocks.0/@parameter">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.14"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:NullLiteral"/>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="initPolicyFile">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="prop">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/security/Security.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="references:StringReference" value="policy.expandProperties"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../java/security/Security.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.36"/>
                <arguments xsi:type="references:StringReference" value="true"/>
              </next>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="iscp">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/security/Security.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="references:StringReference" value="policy.ignoreIdentityScope"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../java/security/Security.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.2/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.36"/>
                <arguments xsi:type="references:StringReference" value="true"/>
              </next>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.2/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="allowSys">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/security/Security.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="references:StringReference" value="policy.allowSystemProperty"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../java/security/Security.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="extra_policy">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/lang/System.class.xmi#//@classifiers.0/@members.25"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../java/lang/System.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="overrideAll">
                  <typeReference xsi:type="types:Boolean"/>
                  <initialValue xsi:type="literals:BooleanLiteral"/>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.1/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:BooleanLiteral" value="true"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.55"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        </next>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.42"/>
                    <arguments xsi:type="references:StringReference" value="="/>
                  </next>
                </condition>
              </statements>
              <statements xsi:type="statements:TryBlock">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/PropertyExpander.class.xmi#//@classifiers.0/@members.1"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.0/@variable"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../sun/security/util/PropertyExpander.class.xmi#//@classifiers.0"/>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="policyURL">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </variable>
                </statements>
                <statements xsi:type="statements:EmptyStatement"/>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="policyFile">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.0/@variable"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.1/@statement/@statements.2/@statements.1/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:StringReference" value="file:"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.1/@statement/@statements.2/@statements.3/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../java/io/File.class.xmi#//@classifiers.0/@members.26"/>
                              </next>
                            </children>
                            <additiveOperators xsi:type="operators:Addition"/>
                          </arguments>
                        </value>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.1/@statement/@statements.2/@statements.3/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/io/File.class.xmi#//@classifiers.0/@members.33"/>
                    </next>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.1/@statement/@statements.2/@statements.1/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.0/@variable"/>
                        </value>
                      </expression>
                    </statements>
                  </elseStatement>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:StringReference" value="reading "/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.1/@statement/@statements.2/@statements.1/@variable"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                      </next>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.1/@statement/@statements.2/@statements.1/@variable"/>
                  </expression>
                </statements>
                <catcheBlocks>
                  <statements xsi:type="statements:Condition">
                    <comments>// ignore. </comments>
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                            <arguments xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:StringReference" value="caught exception: "/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.1/@statement/@statements.2/@catcheBlocks.0/@parameter"/>
                              <additiveOperators xsi:type="operators:Addition"/>
                            </arguments>
                          </next>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                  </statements>
                  <parameter name="e">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </parameter>
                </catcheBlocks>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                            <arguments xsi:type="references:StringReference" value="overriding other policies!"/>
                          </next>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Return"/>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.1/@statement/@statements.0/@variable"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.4/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.4/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.36"/>
              <arguments xsi:type="references:StringReference" value="true"/>
            </next>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="n">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="loaded_one">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="policy_url">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.8/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.59"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../java/io/File.class.xmi#//@classifiers.0/@members.3"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
                      </arguments>
                      <arguments xsi:type="literals:CharacterLiteral" value="47"/>
                    </next>
                    <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/PropertyExpander.class.xmi#//@classifiers.0/@members.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.8/@variable"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../sun/security/util/PropertyExpander.class.xmi#//@classifiers.0"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:StringReference" value="reading "/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.8/@variable"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.8/@variable"/>
                </arguments>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.7/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:BooleanLiteral" value="true"/>
              </expression>
            </statements>
            <catcheBlocks>
              <comments>// ignore that policy</comments>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:StringReference" value="error reading policy "/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.9/@statement/@statements.0/@catcheBlocks.0/@parameter"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.9/@statement/@statements.0/@catcheBlocks.0/@parameter">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.14"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.6/@variable"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.8/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/security/Security.class.xmi#//@classifiers.0/@members.22"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.6/@variable"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../java/security/Security.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <comments>// do not load a static policy</comments>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.7/@variable"/>
          <children xsi:type="literals:BooleanLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:Field" name="scope">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/security/IdentityScope.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** the scope to check */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="checkForTrustedIdentity">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cert">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/cert/Certificate.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Checks public key. If it is marked as trusted in &#xA;     * the identity database, add it to the policy&#xA;     * with the AllPermission.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>// XXX&#x9;JAAS has no way to access the SUN package.</comments>
        <comments>//&#x9;we'll add this back in when JAAS goes into core.</comments>
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="init">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="policy">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &#xA;     * Reads a policy configuration into the Policy object using a&#xA;     * Reader object.&#xA;     * &#xA;     * @param policyFile the policy Reader object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="pp">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="PolicyParser.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="PolicyParser.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="isr">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/io/InputStreamReader.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/io/InputStreamReader.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.19">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
              </arguments>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="PolicyParser.class.xmi#//@classifiers.0/@members.12"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@statements.0/@variable"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/io/InputStreamReader.class.xmi#//@classifiers.0/@members.9"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="keyStore">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/security/KeyStore.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="PolicyParser.class.xmi#//@classifiers.0/@members.16"/>
                </next>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="PolicyParser.class.xmi#//@classifiers.0/@members.18"/>
                </next>
              </arguments>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="enum_">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="PolicyParser.class.xmi#//@classifiers.0/@members.20"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="ge">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>PolicyParser</namespaces>
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>PolicyParser</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@statements.4/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </child>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.21">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@statements.5/@statement/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@statements.3/@variable"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@statements.4/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </condition>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.11"/>
                        <arguments xsi:type="references:StringReference" value=": error parsing "/>
                      </next>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
                <target xsi:type="members:Field" href="../../../../java/lang/System.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.11"/>
                        <arguments xsi:type="references:StringReference" value=": "/>
                      </next>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@catcheBlocks.0/@parameter">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.9"/>
                      </next>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
                <target xsi:type="members:Field" href="../../../../java/lang/System.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@catcheBlocks.0/@parameter">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <parameter name="pe">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>PolicyParser</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="PolicyParser$ParsingException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:StringReference" value="error parsing "/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@catcheBlocks.1/@parameter">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.13"/>
                      </next>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@catcheBlocks.1/@parameter">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getInputStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="url">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * Fast path reading from file urls in order to avoid calling&#xA;     * FileURLConnection.connect() which can be quite slow the first time&#xA;     * it is called. We really should clean up FileURLConnection so that&#xA;     * this is not a problem but in the meantime this fix helps reduce&#xA;     * start up time noticeably for the new launcher. -- DAC&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="path">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.59"/>
                    <arguments xsi:type="literals:CharacterLiteral" value="47"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../java/io/File.class.xmi#//@classifiers.0/@members.3"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../../java/net/URL.class.xmi#//@classifiers.0/@members.35"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/io/FileInputStream.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@statement/@statements.0/@variable"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="references:StringReference" value="file">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/net/URL.class.xmi#//@classifiers.0/@members.33"/>
              </next>
            </arguments>
          </next>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/net/URL.class.xmi#//@classifiers.0/@members.45"/>
              </next>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCodeSource">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Given a PermissionEntry, create a codeSource.&#xA;     *&#xA;     * @return null if signedBy alias is not recognized&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ge">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>PolicyParser</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keyStore">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/KeyStore.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>net</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/net/MalformedURLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="certs">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/security/cert/Certificate.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.23">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.1"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </arguments>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <comments>// we don't have a key for this alias,</comments>
                <comments>// just return</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:StringReference" value=" no certs for alias "/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0/@members.0"/>
                            </next>
                          </children>
                          <children xsi:type="references:StringReference" value=", ignoring."/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:NullLiteral"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="location">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </arguments>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:NullLiteral"/>
          </expression>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
                </arguments>
                <arguments xsi:type="literals:BooleanLiteral"/>
              </expression>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0/@members.2"/>
              </next>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/util/LinkedList.class.xmi#//@classifiers.0/@members.12"/>
                </next>
                <target xsi:type="members:Field" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0/@members.2"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="literals:NullLiteral"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
                </arguments>
                <arguments xsi:type="literals:BooleanLiteral"/>
              </expression>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addGrantEntry">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ge">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>PolicyParser</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keyStore">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/KeyStore.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Add one policy entry to the vector. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                <arguments xsi:type="references:StringReference" value="Adding policy entry: "/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="  signedBy "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </children>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="  codeBase "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </children>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="li">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../java/util/ListIterator.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/util/AbstractList.class.xmi#//@classifiers.0/@members.12"/>
                      </next>
                      <target xsi:type="members:Field" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:WhileLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="pppe">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <namespaces>PolicyParser</namespaces>
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <namespaces>PolicyParser</namespaces>
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statement/@statements.3/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:InterfaceMethod" href="../../../../java/util/ListIterator.class.xmi#//@classifiers.0/@members.1"/>
                          </next>
                        </child>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:StringReference" value="  "/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statement/@statements.3/@statement/@statements.1/@statement/@statements.0/@variable">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0/@members.2"/>
                            </next>
                          </children>
                          <children xsi:type="references:StringReference" value=" "/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statement/@statements.3/@statement/@statements.1/@statement/@statements.0/@variable">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0/@members.3"/>
                            </next>
                          </children>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statement/@statements.3/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../java/util/ListIterator.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </children>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/util/LinkedList.class.xmi#//@classifiers.0/@members.12"/>
                    </next>
                    <target xsi:type="members:Field" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.8"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="codesource">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.20">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.1"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// skip if signedBy alias was unknown...</comments>
          <statement xsi:type="statements:Return"/>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="entry">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.32"/>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.32"/>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.0/@variable"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="enum_">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="PolicyParser$GrantEntry.class.xmi#//@classifiers.0/@members.9"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="pe">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>PolicyParser</namespaces>
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>PolicyParser</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.3/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </child>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:TryBlock">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="perm">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <comments>// XXX special case PrivateCredentialPermission-SELF</comments>
                      <target xsi:type="classifiers:Class" href="../../../../java/security/Permission.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.1/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.22">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.0"/>
                          </next>
                        </arguments>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.1"/>
                            </next>
                          </children>
                          <children xsi:type="references:StringReference" value=" &quot;self&quot;"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.2"/>
                          </next>
                        </arguments>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                        <arguments xsi:type="references:StringReference" value="javax.security.auth.PrivateCredentialPermission"/>
                      </next>
                      <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.43"/>
                        <arguments xsi:type="references:StringReference" value=" self"/>
                      </next>
                      <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.1/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.22">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.0"/>
                          </next>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.1"/>
                          </next>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.2"/>
                          </next>
                        </arguments>
                      </value>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.2/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.32/@members.3">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.1/@statements.0/@variable"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:StringReference" value="  "/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.1/@statements.0/@variable"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <catcheBlocks>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="certs">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../java/security/cert/Certificate.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arrayDimensionsAfter/>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.1/@catcheBlocks.0/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.23">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.1"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.3"/>
                          </next>
                        </arguments>
                      </value>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.3"/>
                      </next>
                    </children>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                  <elseStatement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.1/@catcheBlocks.0/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:NullLiteral"/>
                    </expression>
                  </elseStatement>
                </statements>
                <statements xsi:type="statements:Condition">
                  <comments>// only add if we had no signer or we had a</comments>
                  <comments>// a signer and found the keys for it.</comments>
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="perm">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../java/security/Permission.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <initialValue xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../java/security/UnresolvedPermission.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.0"/>
                            </next>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.1"/>
                            </next>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.2"/>
                            </next>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.1/@catcheBlocks.0/@statements.0/@variable"/>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.2/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.32/@members.3">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.1/@catcheBlocks.0/@statements.2/@statement/@statements.0/@variable"/>
                        </next>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                              <arguments xsi:type="expressions:AdditiveExpression">
                                <children xsi:type="references:StringReference" value="  "/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.1/@catcheBlocks.0/@statements.2/@statement/@statements.0/@variable"/>
                                <additiveOperators xsi:type="operators:Addition"/>
                              </arguments>
                            </next>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                        <children xsi:type="literals:NullLiteral"/>
                      </condition>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:ConditionalOrExpression">
                    <children xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.1/@catcheBlocks.0/@statements.0/@variable"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </children>
                    <children xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.3"/>
                        </next>
                      </children>
                      <children xsi:type="literals:NullLiteral"/>
                    </children>
                  </condition>
                </statements>
                <parameter name="cnfe">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </parameter>
              </catcheBlocks>
              <catcheBlocks>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.11"/>
                              <arguments xsi:type="references:StringReference" value=": error adding Permission "/>
                            </next>
                          </children>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.0"/>
                            </next>
                          </children>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.11"/>
                              <arguments xsi:type="references:StringReference" value=" "/>
                            </next>
                          </children>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.1/@catcheBlocks.1/@parameter">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../java/lang/reflect/InvocationTargetException.class.xmi#//@classifiers.0/@members.5"/>
                            </next>
                          </children>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                      </next>
                      <target xsi:type="members:Field" href="../../../../java/lang/System.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                  </expression>
                </statements>
                <parameter name="ite">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>java</namespaces>
                    <namespaces>lang</namespaces>
                    <namespaces>reflect</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/lang/reflect/InvocationTargetException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </parameter>
              </catcheBlocks>
              <catcheBlocks>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.11"/>
                              <arguments xsi:type="references:StringReference" value=": error adding Permission "/>
                            </next>
                          </children>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.0/@variable">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="PolicyParser$PermissionEntry.class.xmi#//@classifiers.0/@members.0"/>
                            </next>
                          </children>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.11"/>
                              <arguments xsi:type="references:StringReference" value=" "/>
                            </next>
                          </children>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.4/@statement/@statements.1/@catcheBlocks.2/@parameter"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                      </next>
                      <target xsi:type="members:Field" href="../../../../java/lang/System.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                  </expression>
                </statements>
                <parameter name="e">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </parameter>
              </catcheBlocks>
            </statements>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.3/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.28"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.2/@variable"/>
            </next>
          </expression>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.11"/>
                        <arguments xsi:type="references:StringReference" value=": error adding Entry "/>
                      </next>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.11"/>
                        <arguments xsi:type="references:StringReference" value=" "/>
                      </next>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@catcheBlocks.0/@parameter"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
                <target xsi:type="members:Field" href="../../../../java/lang/System.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.8"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/security/Permission.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="actions">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/InstantiationException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/NoSuchMethodException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/reflect/InvocationTargetException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns a new Permission object of the given Type. The Permission is&#xA;     * created by getting the &#xA;     * Class object using the &lt;code>Class.forName&lt;/code> method, and using &#xA;     * the reflection API to invoke the (String name, String actions) &#xA;     * constructor on the&#xA;     * object.&#xA;     *&#xA;     * @param type the type of Permission being created.&#xA;     * @param name the name of the Permission being created.&#xA;     * @param actions the actions of the Permission being created.&#xA;     *&#xA;     * @exception  ClassNotFoundException  if the particular Permission&#xA;     *             class could not be found.&#xA;     *&#xA;     * @exception  IllegalAccessException  if the class or initializer is&#xA;     *               not accessible.&#xA;     *&#xA;     * @exception  InstantiationException  if getInstance tries to&#xA;     *               instantiate an abstract class or an interface, or if the&#xA;     *               instantiation fails for some other reason.&#xA;     *&#xA;     * @exception  NoSuchMethodException if the (String, String) constructor&#xA;     *               is not found.&#xA;     *&#xA;     * @exception  InvocationTargetException if the underlying Permission &#xA;     *               constructor throws an exception.&#xA;     *               &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="pc">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>//XXX we might want to keep a hash of created factories...</comments>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.32"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="c">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/reflect/Constructor.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.79"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/security/Permission.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/reflect/Constructor.class.xmi#//@classifiers.0/@members.29"/>
              <arguments xsi:type="arrays:ArrayInstantiationByValues">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <arrayInitializer>
                  <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.1"/>
                  <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.2"/>
                </arrayInitializer>
              </arguments>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCertificates">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Fetch all certs associated with this alias. &#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../java/security/cert/Certificate.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keyStore">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/KeyStore.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="aliases">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="vcerts">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="st">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/util/StringTokenizer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/util/StringTokenizer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.1"/>
            <arguments xsi:type="references:StringReference" value=","/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="n">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="alias">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.71"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../../java/util/StringTokenizer.class.xmi#//@classifiers.0/@members.18"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.2/@variable"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="cert">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/security/cert/Certificate.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="literals:NullLiteral"/>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.3/@statement/@statements.2/@variable">
                <comments>//See if this alias's cert has already been cached</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/security/cert/Certificate.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.25"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.3/@statement/@statements.0/@variable"/>
                  </next>
                </child>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:TryBlock">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.3/@statement/@statements.2/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/security/KeyStore.class.xmi#//@classifiers.0/@members.14"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.3/@statement/@statements.0/@variable"/>
                      </next>
                    </value>
                  </expression>
                </statements>
                <catcheBlocks>
                  <comments>// never happens, because keystore has already been loaded</comments>
                  <comments>// when we call this</comments>
                  <parameter name="kse">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../java/security/KeyStoreException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </parameter>
                </catcheBlocks>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.3/@statement/@statements.0/@variable"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.3/@statement/@statements.2/@variable"/>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.27"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.3/@statement/@statements.2/@variable"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.3/@statement/@statements.0/@variable"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.3/@statement/@statements.2/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.3/@statement/@statements.2/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.28"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.3/@statement/@statements.2/@variable"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.3/@statement/@statements.2/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.1/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../java/util/StringTokenizer.class.xmi#//@classifiers.0/@members.17"/>
          </next>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// make sure n == vcerts.size, since we are doing a logical *and*</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="certs">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/security/cert/Certificate.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/security/cert/Certificate.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </sizes>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.4/@statement/@statements.0/@variable"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.4/@statement/@statements.0/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.2/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </children>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="elements">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Enumerate all the entries in the global policy object. &#xA;     * This method is used by policy admin tools.   The tools&#xA;     * should use the Enumeration methods on the returned object&#xA;     * to fetch the elements sequentially. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.16"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPermissions">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/security/PermissionCollection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="subject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../javax/security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codesource">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Examines this &lt;code>Policy&lt;/code> and returns the Permissions granted&#xA;     * to the specified &lt;code>Subject&lt;/code> and &lt;code>CodeSource&lt;/code>.&#xA;     *&#xA;     * &lt;p> Permissions for a particular &lt;i>grant&lt;/i> entry are returned&#xA;     * if the &lt;code>CodeSource&lt;/code> constructed using the codebase and&#xA;     * signedby values specified in the entry &lt;code>implies&lt;/code>&#xA;     * the &lt;code>CodeSource&lt;/code> provided to this method, and if the&#xA;     * &lt;code>Subject&lt;/code> provided to this method contains all of the&#xA;     * Principals specified in the entry.&#xA;     *&#xA;     * &lt;p> The &lt;code>Subject&lt;/code> provided to this method contains all&#xA;     * of the Principals specified in the entry if, for each&#xA;     * &lt;code>Principal&lt;/code>, &quot;P1&quot;, specified in the &lt;i>grant&lt;/i> entry&#xA;     * one of the following two conditions is met:&#xA;     *&#xA;     * &lt;p>&#xA;     * &lt;ol>&#xA;     * &lt;li> the &lt;code>Subject&lt;/code> has a&#xA;     *      &lt;code>Principal&lt;/code>, &quot;P2&quot;, where&#xA;     *      &lt;code>P2.getClass().getName()&lt;/code> equals the&#xA;     *      P1's class name, and where&#xA;     *      &lt;code>P2.getName()&lt;/code> equals the P1's name.&#xA;     *&#xA;     * &lt;li> P1 implements&#xA;     *      &lt;code>com.sun.security.auth.PrincipalComparator&lt;/code>,&#xA;     *      and &lt;code>P1.implies&lt;/code> the provided &lt;code>Subject&lt;/code>.&#xA;     * &lt;/ol>&#xA;     *&#xA;     * &lt;p> Note that this &lt;code>Policy&lt;/code> implementation has&#xA;     * special handling for PrivateCredentialPermissions.&#xA;     * When this method encounters a &lt;code>PrivateCredentialPermission&lt;/code>&#xA;     * which specifies &quot;self&quot; as the &lt;code>Principal&lt;/code> class and name,&#xA;     * it does not add that &lt;code>Permission&lt;/code> to the returned&#xA;     * &lt;code>PermissionCollection&lt;/code>.  Instead, it builds&#xA;     * a new &lt;code>PrivateCredentialPermission&lt;/code>&#xA;     * for each &lt;code>Principal&lt;/code> associated with the provided&#xA;     * &lt;code>Subject&lt;/code>.  Each new &lt;code>PrivateCredentialPermission&lt;/code>&#xA;     * contains the same Credential class as specified in the&#xA;     * originally granted permission, as well as the Class and name&#xA;     * for the respective &lt;code>Principal&lt;/code>.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @param subject the Permissions granted to this &lt;code>Subject&lt;/code>&#xA;     *&#x9;&#x9;and the additionally provided &lt;code>CodeSource&lt;/code>&#xA;     *&#x9;&#x9;are returned. &lt;p>&#xA;     *&#xA;     * @param codesource the Permissions granted to this &lt;code>CodeSource&lt;/code>&#xA;     *&#x9;&#x9;and the additionally provided &lt;code>Subject&lt;/code>&#xA;     *&#x9;&#x9;are returned.&#xA;     *&#xA;     * @return the Permissions granted to the provided &lt;code>Subject&lt;/code>&#xA;     *&#x9;&#x9;&lt;code>CodeSource&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>// XXX&#x9;when JAAS goes into the JDK core,</comments>
        <comments>//&#x9;we can remove this method and simply</comments>
        <comments>//&#x9;rely on the getPermissions variant that takes a codesource,</comments>
        <comments>//&#x9;which no one can use at this point in time.</comments>
        <comments>//&#x9;at that time, we can also make SubjectCodeSource a public</comments>
        <comments>//&#x9;class.</comments>
        <comments>// XXX</comments>
        <comments>//</comments>
        <comments>// 1)&#x9;if code instantiates PolicyFile directly, then it will need</comments>
        <comments>// &#x9;all the permissions required for the PolicyFile initialization</comments>
        <comments>// 2)&#x9;if code calls Policy.getPolicy, then it simply needs</comments>
        <comments>//&#x9;AuthPermission(getPolicy), and the javax.security.auth.Policy</comments>
        <comments>//&#x9;implementation instantiates PolicyFile in a doPrivileged block</comments>
        <comments>// 3)&#x9;if after instantiating a Policy (either via #1 or #2),</comments>
        <comments>//&#x9;code calls getPermissions, PolicyFile wraps the call</comments>
        <comments>//&#x9;in a doPrivileged block.</comments>
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/security/PermissionCollection.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                  <arguments xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <namespaces>java</namespaces>
                      <namespaces>security</namespaces>
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="../../../../java/security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <anonymousClass>
                      <members xsi:type="members:ClassMethod" name="run">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <annotationsAndModifiers xsi:type="modifiers:Public"/>
                        <statements xsi:type="statements:LocalVariableStatement">
                          <variable name="scs">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <initialValue xsi:type="instantiations:NewConstructorCall">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences>
                                  <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                                </classifierReferences>
                              </typeReference>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
                              <arguments xsi:type="literals:NullLiteral"/>
                              <arguments xsi:type="expressions:ConditionalExpression">
                                <child xsi:type="expressions:EqualityExpression">
                                  <equalityOperators xsi:type="operators:Equal"/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.1"/>
                                  <children xsi:type="literals:NullLiteral"/>
                                </child>
                                <expressionIf xsi:type="literals:NullLiteral"/>
                                <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.1">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.10"/>
                                  </next>
                                </expressionElse>
                              </arguments>
                              <arguments xsi:type="expressions:ConditionalExpression">
                                <child xsi:type="expressions:EqualityExpression">
                                  <equalityOperators xsi:type="operators:Equal"/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.1"/>
                                  <children xsi:type="literals:NullLiteral"/>
                                </child>
                                <expressionIf xsi:type="literals:NullLiteral"/>
                                <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.1">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.11"/>
                                  </next>
                                </expressionElse>
                              </arguments>
                            </initialValue>
                          </variable>
                        </statements>
                        <statements xsi:type="statements:Condition">
                          <statement xsi:type="statements:Return">
                            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.27">
                              <arguments xsi:type="instantiations:NewConstructorCall">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../../../../java/security/Permissions.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                              </arguments>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@returnValue/@child/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@variable"/>
                            </returnValue>
                          </statement>
                          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                          <elseStatement xsi:type="statements:Return">
                            <returnValue xsi:type="instantiations:NewConstructorCall">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.1"/>
                              </typeReference>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
                                <next xsi:type="references:SelfReference">
                                  <self xsi:type="literals:This"/>
                                </next>
                              </arguments>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@returnValue/@child/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@variable"/>
                            </returnValue>
                          </elseStatement>
                        </statements>
                      </members>
                    </anonymousClass>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
              </next>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPermissions">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Examines the global policy for the specified CodeSource, and&#xA;     * creates a PermissionCollection object with&#xA;     * the set of permissions for that principal's protection domain.&#xA;     *&#xA;     * @param CodeSource the codesource associated with the caller.&#xA;     * This encapsulates the original location of the code (where the code&#xA;     * came from) and the public key(s) of its signer.&#xA;     *&#xA;     * @return the set of permissions according to the policy.  &#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../java/security/PermissionCollection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codesource">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.27">
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/security/Permissions.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
          </returnValue>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
        <elseStatement xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.1"/>
            </typeReference>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
          </returnValue>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPermissions">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Examines the global policy for the specified CodeSource, and&#xA;     * creates a PermissionCollection object with&#xA;     * the set of permissions for that principal's protection domain.&#xA;     *&#xA;     * @param permissions the permissions to populate&#xA;     * @param codesource the codesource associated with the caller.&#xA;     * This encapsulates the original location of the code (where the code&#xA;     * came from) and the public key(s) of its signer.&#xA;     *&#xA;     * @return the set of permissions according to the policy.  &#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../java/security/Permissions.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="perms">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/Permissions.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.12"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="codesource">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="literals:NullLiteral"/>
            </arrayInitializer>
          </initialValue>
          <annotationsAndModifiers xsi:type="modifiers:Final"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.1"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="evaluate("/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable">
                    <arraySelectors>
                      <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </arraySelectors>
                  </children>
                  <children xsi:type="references:StringReference" value=")&#xA;"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// needs to be in a begin/endPrivileged block because</comments>
        <comments>// codesource.implies calls URL.equals which does an</comments>
        <comments>// InetAddress lookup</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="entry">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.32"/>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.32"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@init"/>
                  </next>
                </child>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:StringReference" value="PolicyFile CodeSource implies: "/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@statement/@statements.0/@variable">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.16"/>
                          </next>
                        </next>
                      </children>
                      <children xsi:type="references:StringReference" value="&#xA;&#xA;"/>
                      <children xsi:type="references:StringReference" value="&#x9;"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.16"/>
                        </next>
                        <arraySelectors>
                          <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        </arraySelectors>
                      </children>
                      <children xsi:type="references:StringReference" value="&#xA;&#xA;"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ForLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="p">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../java/security/Permission.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../java/security/Permission.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@statement/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.1">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@statement/@statements.2/@statement/@statements.0/@init"/>
                            </next>
                          </next>
                        </child>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                            <arguments xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:StringReference" value="  granting "/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@statement/@statements.2/@statement/@statements.0/@statement/@statements.0/@variable"/>
                              <additiveOperators xsi:type="operators:Addition"/>
                            </arguments>
                          </next>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0">
                          <comments>// we could check for duplicates</comments>
                          <comments>// before adding new permissions,</comments>
                          <comments>// but the SubjectDomainCombiner</comments>
                          <comments>// already checks for duplicates later</comments>
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../java/security/Permissions.class.xmi#//@classifiers.0/@members.6"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@statement/@statements.2/@statement/@statements.0/@statement/@statements.0/@variable"/>
                          </next>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.28">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@statement/@statements.2/@statement/@statements.0/@statement/@statements.0/@variable"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@statement/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.0"/>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable">
                          <arraySelectors>
                            <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          </arraySelectors>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
                      </child>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@statement/@statements.2/@statement/@statements.0/@init"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@statement/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.1">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                      </next>
                    </next>
                  </children>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <init xsi:type="variables:LocalVariable" name="j">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </init>
                <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@statement/@statements.2/@statement/@statements.0/@init"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </updates>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@statement/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.13"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable">
                    <arraySelectors>
                      <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </arraySelectors>
                  </arguments>
                </next>
              </next>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
            </next>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.4/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// now see if any of the keys are trusted ids.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="certs">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/security/cert/Certificate.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arrayDimensionsAfter/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.11"/>
                </next>
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ForLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0">
                          <comments>// checkForTrustedIdentity added it</comments>
                          <comments>// to the policy for us. next time</comments>
                          <comments>// around we'll find it. This time</comments>
                          <comments>// around we need to add it.</comments>
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../java/security/Permissions.class.xmi#//@classifiers.0/@members.6"/>
                            <arguments xsi:type="instantiations:NewConstructorCall">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <namespaces>java</namespaces>
                                <namespaces>security</namespaces>
                                <classifierReferences>
                                  <target xsi:type="classifiers:Class" href="../../../../java/security/AllPermission.class.xmi#//@classifiers.0"/>
                                </classifierReferences>
                              </typeReference>
                            </arguments>
                          </next>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../java/util/Hashtable.class.xmi#//@classifiers.0/@members.25"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.5/@statement/@statements.0/@variable">
                                <arraySelectors>
                                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.5/@statement/@statements.1/@statement/@statements.0/@init"/>
                                </arraySelectors>
                              </arguments>
                            </next>
                          </children>
                          <children xsi:type="literals:NullLiteral"/>
                        </expression>
                      </children>
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.5/@statement/@statements.0/@variable">
                          <arraySelectors>
                            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.5/@statement/@statements.1/@statement/@statements.0/@init"/>
                          </arraySelectors>
                        </arguments>
                      </children>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.5/@statement/@statements.1/@statement/@statements.0/@init"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.5/@statement/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <init xsi:type="variables:LocalVariable" name="k">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </init>
                <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.5/@statement/@statements.1/@statement/@statements.0/@init"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </updates>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.5/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addSelfPermissions">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/Permission.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="entryCs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="accCs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="perms">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/Permissions.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns true if 'Self' permissions were added to the provided&#xA;     * 'perms', and false otherwise.&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @param p check to see if this Permission is a &quot;SELF&quot;&#xA;     *&#x9;&#x9;&#x9;PrivateCredentialPermission. &lt;p>&#xA;     *&#xA;     * @param entryCs the codesource for the Policy entry.&#xA;     *&#xA;     * @param accCs the codesource for from the current AccessControlContext.&#xA;     *&#xA;     * @param perms the PermissionCollection where the individual&#xA;     *&#x9;&#x9;&#x9;PrivateCredentialPermissions will be added.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../javax/security/auth/PrivateCredentialPermission.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
            </expression>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.1"/>
            </expression>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="pcp">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../javax/security/auth/PrivateCredentialPermission.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../javax/security/auth/PrivateCredentialPermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="scs">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="pPrincipals">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// see if it is a SELF permission</comments>
              <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.2/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../javax/security/auth/PrivateCredentialPermission.class.xmi#//@classifiers.0/@members.9"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <comments>// regular PrivateCredentialPermission</comments>
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.4/@variable">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.4/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.36"/>
                <arguments xsi:type="references:StringReference" value="self"/>
              </next>
              <arraySelectors>
                <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </arraySelectors>
              <arraySelectors>
                <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </arraySelectors>
            </child>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.4/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.36"/>
                <arguments xsi:type="references:StringReference" value="self"/>
              </next>
              <arraySelectors>
                <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </arraySelectors>
              <arraySelectors>
                <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </arraySelectors>
            </child>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <comments>// granted a SELF permission - create a</comments>
            <comments>// PrivateCredentialPermission for each</comments>
            <comments>// of the Policy entry's CodeSource Principals</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <comments>// XXX SubjectCodeSource has no Subject???</comments>
                <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.3/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="SubjectCodeSource.class.xmi#//@classifiers.0/@members.8"/>
                </next>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="pli">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../../../../java/util/ListIterator.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.3/@variable">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../java/util/AbstractList.class.xmi#//@classifiers.0/@members.12"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="SubjectCodeSource.class.xmi#//@classifiers.0/@members.8"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="principal">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>PolicyParser</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <namespaces>PolicyParser</namespaces>
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.5/@elseStatement/@statements.1/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../../java/util/ListIterator.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </child>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="principalInfo">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <comments>// XXX</comments>
                      <comments>//&#x9;if the Policy entry's Principal does not contain a</comments>
                      <comments>//&#x9;&#x9;WILDCARD for the Principal name, then a</comments>
                      <comments>//&#x9;&#x9;new PrivateCredentialPermission is created</comments>
                      <comments>//&#x9;&#x9;for the Principal listed in the Policy entry.</comments>
                      <comments>//&#x9;if the Policy entry's Principal contains a WILDCARD</comments>
                      <comments>//&#x9;&#x9;for the Principal name, then a new</comments>
                      <comments>//&#x9;&#x9;PrivateCredentialPermission is created</comments>
                      <comments>//&#x9;&#x9;for each Principal associated with the Subject</comments>
                      <comments>//&#x9;&#x9;in the current ACC.</comments>
                      <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arrayDimensionsBefore/>
                  <arrayDimensionsBefore/>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.5/@elseStatement/@statements.2/@statement/@statements.0/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.2"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ForLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="newPcp">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <comments>// here's the new PrivateCredentialPermission</comments>
                          <target xsi:type="classifiers:Class" href="../../../../javax/security/auth/PrivateCredentialPermission.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../javax/security/auth/PrivateCredentialPermission.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.2/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../javax/security/auth/PrivateCredentialPermission.class.xmi#//@classifiers.0/@members.8"/>
                            </next>
                          </children>
                          <children xsi:type="references:StringReference" value=" "/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.5/@elseStatement/@statements.2/@statement/@statements.1/@variable">
                            <arraySelectors>
                              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.5/@elseStatement/@statements.2/@statement/@statements.2/@init"/>
                            </arraySelectors>
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                            </arraySelectors>
                          </children>
                          <children xsi:type="references:StringReference" value=" "/>
                          <children xsi:type="references:StringReference" value="&quot;"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.5/@elseStatement/@statements.2/@statement/@statements.1/@variable">
                            <arraySelectors>
                              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.5/@elseStatement/@statements.2/@statement/@statements.2/@init"/>
                            </arraySelectors>
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            </arraySelectors>
                          </children>
                          <children xsi:type="references:StringReference" value="&quot;"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                        <arguments xsi:type="references:StringReference" value="read"/>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                            <arguments xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:StringReference" value="adding SELF permission: "/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.5/@elseStatement/@statements.2/@statement/@statements.2/@statement/@statements.0/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../../../java/security/Permission.class.xmi#//@classifiers.0/@members.10"/>
                                </next>
                              </children>
                              <additiveOperators xsi:type="operators:Addition"/>
                            </arguments>
                          </next>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.3">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/security/Permissions.class.xmi#//@classifiers.0/@members.6"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.5/@elseStatement/@statements.2/@statement/@statements.2/@statement/@statements.0/@variable"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.5/@elseStatement/@statements.2/@statement/@statements.2/@init"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.5/@elseStatement/@statements.2/@statement/@statements.1/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <init xsi:type="variables:LocalVariable" name="i">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </init>
                <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.5/@elseStatement/@statements.2/@statement/@statements.2/@init"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </updates>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.5/@elseStatement/@statements.1/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../java/util/ListIterator.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </condition>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPrincipalInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="principal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>PolicyParser</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="accCs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * return the principal class/name pair in the 2D array.&#xA;     * array[x][y]:&#x9;x corresponds to the array length.&#xA;     *&#x9;&#x9;&#x9;if (y == 0), it's the principal class.&#xA;     *&#x9;&#x9;&#x9;if (y == 1), it's the principal name.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// there are 3 possibilities:</comments>
        <comments>// 1) the entry's Principal class and name are not wildcarded</comments>
        <comments>// 2) the entry's Principal name is wildcarded only</comments>
        <comments>// 3) the entry's Principal class and name are wildcarded</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="info">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// build a PrivateCredentialPermission for the principal</comments>
                  <comments>// from the Policy entry</comments>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arrayDimensionsBefore/>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.0/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0/@members.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="PolicyParser.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
                <target xsi:type="members:Field" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0/@members.2"/>
              </next>
            </child>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="PolicyParser.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
                <target xsi:type="members:Field" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0/@members.3"/>
              </next>
            </child>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="scs">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <comments>// build a PrivateCredentialPermission for all</comments>
                    <comments>// the Subject's principals that are instances of principalClass</comments>
                    <comments>// the accCs is guaranteed to be a SubjectCodeSource</comments>
                    <comments>// because the earlier CodeSource.implies succeeded</comments>
                    <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.1"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="principalSet">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../../java/util/Set.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="literals:NullLiteral"/>
              </variable>
            </statements>
            <statements xsi:type="statements:TryBlock">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="pClass">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0/@members.2"/>
                        </next>
                      </arguments>
                      <arguments xsi:type="literals:BooleanLiteral"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../java/lang/ClassLoader.class.xmi#//@classifiers.0/@members.64"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../javax/security/auth/Subject.class.xmi#//@classifiers.0/@members.19"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.2/@statements.0/@variable"/>
                      </next>
                      <target xsi:type="members:ClassMethod" href="SubjectCodeSource.class.xmi#//@classifiers.0/@members.9"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <catcheBlocks>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../sun/security/util/Debug.class.xmi#//@classifiers.0/@members.7"/>
                          <arguments xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:StringReference" value="problem finding Principal Class "/>
                            <children xsi:type="references:StringReference" value="when expanding SELF permission: "/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.2/@catcheBlocks.0/@parameter">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.13"/>
                              </next>
                            </children>
                            <additiveOperators xsi:type="operators:Addition"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                          </arguments>
                        </next>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                </statements>
                <parameter name="e">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </parameter>
              </catcheBlocks>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Return">
                  <comments>// error</comments>
                  <returnValue xsi:type="arrays:ArrayInstantiationBySize">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </returnValue>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.1/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="info">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Set.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </sizes>
                  <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="pIterator">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>java</namespaces>
                  <namespaces>util</namespaces>
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Set.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="i">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </variable>
            </statements>
            <statements xsi:type="statements:WhileLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="p">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="../../../../java/security/Principal.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Interface" href="../../../../java/security/Principal.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.5/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.1"/>
                        </next>
                      </child>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.4/@variable">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.6/@variable"/>
                      </arraySelectors>
                      <arraySelectors>
                        <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </arraySelectors>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.7/@statement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.44"/>
                        </next>
                        <target xsi:type="members:ClassMethod" href="../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
                      </next>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.4/@variable">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.6/@variable"/>
                      </arraySelectors>
                      <arraySelectors>
                        <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </arraySelectors>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.7/@statement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../../java/security/Principal.class.xmi#//@classifiers.0/@members.3"/>
                      </next>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.6/@variable"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.5/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </condition>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@statement/@statements.4/@variable"/>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0/@members.0"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="PolicyParser.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                  <target xsi:type="members:Field" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </child>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="PolicyParser.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
                <target xsi:type="members:Field" href="PolicyParser$PrincipalEntry.class.xmi#//@classifiers.0/@members.3"/>
              </next>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="scs">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <comments>// build a PrivateCredentialPermission for every</comments>
                    <comments>// one of the current Subject's principals</comments>
                    <comments>// the accCs is guaranteed to be a SubjectCodeSource</comments>
                    <comments>// because the earlier CodeSource.implies succeeded</comments>
                    <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.1"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="principalSet">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../../java/util/Set.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@elseStatement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../javax/security/auth/Subject.class.xmi#//@classifiers.0/@members.18"/>
                    </next>
                    <target xsi:type="members:ClassMethod" href="SubjectCodeSource.class.xmi#//@classifiers.0/@members.9"/>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="info">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@elseStatement/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Set.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </sizes>
                  <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="pIterator">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>java</namespaces>
                  <namespaces>util</namespaces>
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@elseStatement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Set.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="i">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </variable>
            </statements>
            <statements xsi:type="statements:WhileLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="p">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="../../../../java/security/Principal.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Interface" href="../../../../java/security/Principal.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@elseStatement/@statements.3/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.1"/>
                        </next>
                      </child>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@elseStatement/@statements.2/@variable">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@elseStatement/@statements.4/@variable"/>
                      </arraySelectors>
                      <arraySelectors>
                        <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </arraySelectors>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@elseStatement/@statements.5/@statement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.44"/>
                        </next>
                        <target xsi:type="members:ClassMethod" href="../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
                      </next>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@elseStatement/@statements.2/@variable">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@elseStatement/@statements.4/@variable"/>
                      </arraySelectors>
                      <arraySelectors>
                        <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </arraySelectors>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@elseStatement/@statements.5/@statement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../../java/security/Principal.class.xmi#//@classifiers.0/@members.3"/>
                      </next>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@elseStatement/@statements.4/@variable"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@elseStatement/@statements.3/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Iterator.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </condition>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@elseStatement/@elseStatement/@statements.2/@variable"/>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getSignerCertificates">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/*&#xA;     * Returns the signer certificates from the list of certificates associated&#xA;     * with the given code source.&#xA;     *&#xA;     * The signer certificates are those certificates that were used to verify&#xA;     * signed code originating from the codesource location.&#xA;     *&#xA;     * This method assumes that in the given code source, each signer&#xA;     * certificate is followed by its supporting certificate chain&#xA;     * (which may be empty), and that the signer certificate and its&#xA;     * supporting certificate chain are ordered bottom-to-top (i.e., with the&#xA;     * signer certificate first and the (root) certificate authority last).&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../java/security/cert/Certificate.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="certs">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/security/cert/Certificate.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.11"/>
                </next>
              </value>
            </expression>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.11"/>
                </next>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/security/cert/X509Certificate.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.2/@init"/>
                    </arraySelectors>
                  </child>
                </expression>
              </child>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="i">
          <typeReference xsi:type="types:Int">
            <comments>// Do we have to do anything?</comments>
          </typeReference>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="count">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@variable"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </expression>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <relationOperators xsi:type="operators:LessThan"/>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../java/security/Principal.class.xmi#//@classifiers.0/@members.0"/>
                    <arguments xsi:type="expressions:NestedExpression">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/security/cert/X509Certificate.class.xmi#//@classifiers.0/@members.10"/>
                      </next>
                      <expression xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../java/security/cert/X509Certificate.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
                          <arraySelectors>
                            <position xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable"/>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                              <additiveOperators xsi:type="operators:Addition"/>
                            </position>
                          </arraySelectors>
                        </child>
                      </expression>
                    </arguments>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../../java/security/cert/X509Certificate.class.xmi#//@classifiers.0/@members.8"/>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/security/cert/X509Certificate.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable"/>
                    </arraySelectors>
                  </child>
                </expression>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <comments>// Done</comments>
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@variable"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="userCertList">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/util/ArrayList.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/util/ArrayList.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.7/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/util/ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable"/>
                  </arraySelectors>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </expression>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <relationOperators xsi:type="operators:LessThan"/>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../java/security/Principal.class.xmi#//@classifiers.0/@members.0"/>
                    <arguments xsi:type="expressions:NestedExpression">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/security/cert/X509Certificate.class.xmi#//@classifiers.0/@members.10"/>
                      </next>
                      <expression xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../java/security/cert/X509Certificate.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
                          <arraySelectors>
                            <position xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable"/>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                              <additiveOperators xsi:type="operators:Addition"/>
                            </position>
                          </arraySelectors>
                        </child>
                      </expression>
                    </arguments>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../../java/security/cert/X509Certificate.class.xmi#//@classifiers.0/@members.8"/>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/security/cert/X509Certificate.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable"/>
                    </arraySelectors>
                  </child>
                </expression>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="userCerts">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/security/cert/Certificate.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/security/cert/Certificate.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.7/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/util/ArrayList.class.xmi#//@classifiers.0/@members.8"/>
              </next>
            </sizes>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.7/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../java/util/ArrayList.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.10/@variable"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.10/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="canonicalizeCodebase">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="extractSignerCerts">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="canonCs">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="path">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.59"/>
                        <arguments xsi:type="literals:CharacterLiteral" value="47"/>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../../../../java/io/File.class.xmi#//@classifiers.0/@members.3"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
                        </arguments>
                      </next>
                      <target xsi:type="members:ClassMethod" href="../../../../java/net/URL.class.xmi#//@classifiers.0/@members.35"/>
                    </next>
                    <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.10"/>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="csUrl">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/net/URL.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="literals:NullLiteral"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.0/@variable">
                      <comments>// remove trailing '*' because it causes canonicalization</comments>
                      <comments>// to fail on win32</comments>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.56"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                            </next>
                          </children>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </arguments>
                      </next>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="appendFileSep">
                    <typeReference xsi:type="types:Boolean"/>
                    <initialValue xsi:type="literals:BooleanLiteral"/>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.2/@statement/@statements.1/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:BooleanLiteral" value="true"/>
                    </expression>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.43"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../java/io/File.class.xmi#//@classifiers.0/@members.4"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </condition>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../java/lang/System.class.xmi#//@classifiers.0/@members.25"/>
                            <arguments xsi:type="references:StringReference" value="user.dir"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                        </value>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:StringReference" value=""/>
                    </next>
                  </condition>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="f">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.0/@variable"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.2/@statement/@statements.4/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/io/File.class.xmi#//@classifiers.0/@members.26"/>
                      </next>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="sb">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.0/@variable"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <comments>// reappend '*' to canonicalized filename (note that</comments>
                  <comments>// canonicalization may have removed trailing file</comments>
                  <comments>// separator, so we have to check for that, too)</comments>
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.2/@statement/@statements.6/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../../../../java/io/File.class.xmi#//@classifiers.0/@members.3"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
                        </arguments>
                      </next>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.43"/>
                          <arguments xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="../../../../java/io/File.class.xmi#//@classifiers.0/@members.4"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
                          </arguments>
                        </next>
                      </child>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ConditionalOrExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.2/@statement/@statements.1/@variable"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.2/@statement/@statements.4/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../java/io/File.class.xmi#//@classifiers.0/@members.34"/>
                          </next>
                        </children>
                      </expression>
                    </children>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.2/@statement/@statements.6/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                      <arguments xsi:type="literals:CharacterLiteral" value="42"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.2/@statement/@statements.6/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
                      </next>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.43"/>
                  <arguments xsi:type="references:StringReference" value="*"/>
                </next>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/io/File.class.xmi#//@classifiers.0/@members.26"/>
                      </next>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.0/@variable"/>
                    </value>
                  </expression>
                </statements>
              </elseStatement>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.1/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../java/io/File.class.xmi#//@classifiers.0/@members.29"/>
                  </next>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.0/@variable"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="scs">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.4/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="SubjectCodeSource.class.xmi#//@classifiers.0/@members.9"/>
                            </next>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.4/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="SubjectCodeSource.class.xmi#//@classifiers.0/@members.8"/>
                            </next>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.1/@variable"/>
                          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.4/@statement/@statements.0/@variable"/>
                          </arguments>
                        </value>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.1"/>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.4/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="SubjectCodeSource.class.xmi#//@classifiers.0/@members.9"/>
                            </next>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.4/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="SubjectCodeSource.class.xmi#//@classifiers.0/@members.8"/>
                            </next>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.1/@variable"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.4/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.11"/>
                            </next>
                          </arguments>
                        </value>
                      </expression>
                    </statements>
                  </elseStatement>
                </statements>
              </statement>
              <condition xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.1/@variable"/>
                          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
                          </arguments>
                        </value>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.1"/>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@statements.1/@variable"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.11"/>
                            </next>
                          </arguments>
                        </value>
                      </expression>
                    </statements>
                  </elseStatement>
                </statements>
              </elseStatement>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:Condition">
                <comments>// leave codesource as it is, unless we have to extract its</comments>
                <comments>// signer certificates</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="instantiations:NewConstructorCall">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.10"/>
                              </next>
                            </arguments>
                            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
                            </arguments>
                          </value>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:InstanceOfExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
                        </expression>
                      </child>
                    </condition>
                    <elseStatement xsi:type="statements:Block">
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="scs">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <initialValue xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="instantiations:NewConstructorCall">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@catcheBlocks.0/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="SubjectCodeSource.class.xmi#//@classifiers.0/@members.9"/>
                              </next>
                            </arguments>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@catcheBlocks.0/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="SubjectCodeSource.class.xmi#//@classifiers.0/@members.8"/>
                              </next>
                            </arguments>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@catcheBlocks.0/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.10"/>
                              </next>
                            </arguments>
                            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@statement/@statements.0/@catcheBlocks.0/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                            </arguments>
                          </value>
                        </expression>
                      </statements>
                    </elseStatement>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.1"/>
              </statements>
              <parameter name="ioe">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.10"/>
              </next>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/lang/String.class.xmi#//@classifiers.0/@members.36"/>
                  <arguments xsi:type="references:StringReference" value="file"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../../java/net/URL.class.xmi#//@classifiers.0/@members.33"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.10"/>
            </next>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.10"/>
                          </next>
                        </arguments>
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
                        </arguments>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:InstanceOfExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
                    </expression>
                  </child>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="scs">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="SubjectCodeSource.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@elseStatement/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="SubjectCodeSource.class.xmi#//@classifiers.0/@members.9"/>
                          </next>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@elseStatement/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="SubjectCodeSource.class.xmi#//@classifiers.0/@members.8"/>
                          </next>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@elseStatement/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0/@members.10"/>
                          </next>
                        </arguments>
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.1/@elseStatement/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                        </arguments>
                      </value>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.1"/>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="PolicyEntry">
      <members xsi:type="members:Field" name="codesource">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:Field" name="permissions">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:Constructor" name="PolicyEntry">
        <comments>/**&#xA;&#x9; * Given a Permission and a CodeSource, create a policy entry.&#xA;&#x9; * &#xA;&#x9; * XXX Decide if/how to add validity fields and &quot;purpose&quot; fields to&#xA;&#x9; * XXX policy entries &#xA;&#x9; * &#xA;&#x9; * @param cs the CodeSource, which encapsulates the URL and the public&#xA;&#x9; *        key&#xA;&#x9; *        attributes from the policy config file.   Validity checks are&#xA;&#x9; *        performed on the public key before PolicyEntry is called. &#xA;&#x9; * &#xA;&#x9; */</comments>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.2/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </value>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="cs">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:ClassMethod" name="add">
        <typeReference xsi:type="types:Void">
          <comments>/**&#xA;&#x9; * add a Permission object to this entry.&#xA;&#x9; */</comments>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../java/security/Permission.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.28"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.3/@parameters.0"/>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getCodeSource">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <comments>/**&#xA;&#x9; * Return the CodeSource for this policy entry&#xA;&#x9; */</comments>
            <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.0"/>
            <self xsi:type="literals:This"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="toString">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="sb">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.5/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.11"/>
                  <arguments xsi:type="references:StringReference" value="("/>
                </next>
              </arguments>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.5/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.18"/>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.32/@members.4"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.5/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
              <arguments xsi:type="references:StringReference" value="&#xA;"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="p">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../java/security/Permission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/security/Permission.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.5/@statements.4/@init"/>
                    </next>
                  </child>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.5/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.11"/>
                      <arguments xsi:type="references:StringReference" value=" "/>
                    </next>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.5/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.11"/>
                      <arguments xsi:type="references:StringReference" value=" "/>
                    </next>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.5/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.18"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.5/@statements.4/@statement/@statements.0/@variable"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.5/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.11"/>
                      <arguments xsi:type="references:StringReference" value="&#xA;"/>
                    </next>
                  </arguments>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.5/@statements.4/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="j">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.5/@statements.4/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.5/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.11"/>
                  <arguments xsi:type="references:StringReference" value=")"/>
                </next>
              </arguments>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.5/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.11"/>
                  <arguments xsi:type="references:StringReference" value="&#xA;"/>
                </next>
              </arguments>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@members.5/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Each entry in the policy configuration file is represented by a&#xA;     * PolicyEntry object.  &lt;p>&#xA;     *&#xA;     * A PolicyEntry is a (CodeSource,Permission) pair.  The&#xA;     * CodeSource contains the (URL, PublicKey) that together identify&#xA;     * where the Java bytecodes come from and who (if anyone) signed&#xA;     * them.  The URL could refer to localhost.  The URL could also be&#xA;     * null, meaning that this policy entry is given to all comers, as&#xA;     * long as they match the signer field.  The signer could be null,&#xA;     * meaning the code is not signed. &lt;p>&#xA;     * &#xA;     * The Permission contains the (Type, Name, Action) triplet. &lt;p>&#xA;     * &#xA;     * For now, the Policy object retrieves the public key from the&#xA;     * X.509 certificate on disk that corresponds to the signedBy&#xA;     * alias specified in the Policy config file.  For reasons of&#xA;     * efficiency, the Policy object keeps a hashtable of certs already&#xA;     * read in.  This could be replaced by a secure internal key&#xA;     * store.&#xA;     * &#xA;     * &lt;p>&#xA;     * For example, the entry&#xA;     * &lt;pre>&#xA;     * &#x9;&#x9;permission java.io.File &quot;/tmp&quot;, &quot;read,write&quot;,&#xA;     *&#x9;&#x9;signedBy &quot;Duke&quot;;&#x9;&#xA;     * &lt;/pre>&#xA;     * is represented internally &#xA;     * &lt;pre>&#xA;     * &#xA;     * FilePermission f = new FilePermission(&quot;/tmp&quot;, &quot;read,write&quot;);&#xA;     * PublicKey p = publickeys.get(&quot;Duke&quot;);&#xA;     * URL u = InetAddress.getLocalHost();&#xA;     * CodeBase c = new CodeBase( p, u );&#xA;     * pe = new PolicyEntry(f, c);&#xA;     * &lt;/pre>&#xA;     * &#xA;     * @author Marianne Mueller&#xA;     * @author Roland Schemers&#xA;     * @version 1.6, 03/04/97&#xA;     * @see java.security.CodeSource&#xA;     * @see java.security.Policy&#xA;     * @see java.security.Permissions&#xA;     * @see java.security.ProtectionDomain&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
      <comments>/**&#xA; * This class represents a default implementation for&#xA; * &lt;code>javax.security.auth.Policy&lt;/code>.&#xA; *&#xA; * &lt;p> This object stores the policy for entire Java runtime,&#xA; * and is the amalgamation of multiple static policy&#xA; * configurations that resides in files.&#xA; * The algorithm for locating the policy file(s) and reading their&#xA; * information into this &lt;code>Policy&lt;/code> object is:&#xA; *&#xA; * &lt;ol>&#xA; * &lt;li>&#xA; *   Loop through the &lt;code>java.security.Security&lt;/code> properties,&#xA; *   &lt;i>auth.policy.url.1&lt;/i>, &lt;i>auth.policy.url.2&lt;/i>, ...,&#xA; *   &lt;i>auth.policy.url.X&lt;/i>&quot;.  These properties are set&#xA; *   in the Java security properties file, which is located in the file named&#xA; *   &amp;lt;JAVA_HOME&amp;gt;/lib/security/java.security, where &amp;lt;JAVA_HOME&amp;gt;&#xA; *   refers to the directory where the JDK was installed.&#xA; *   Each property value specifies a &lt;code>URL&lt;/code> pointing to a&#xA; *   policy file to be loaded.  Read in and load each policy.&#xA; *   &#xA; * &lt;li>&#xA; *   The &lt;code>java.lang.System&lt;/code> property &lt;i>java.security.auth.policy&lt;/i>&#xA; *   may also be set to a &lt;code>URL&lt;/code> pointing to another policy file&#xA; *   (which is the case when a user uses the -D switch at runtime).&#xA; *   If this property is defined, and its use is allowed by the&#xA; *   security property file (the Security property,&#xA; *   &lt;i>policy.allowSystemProperty&lt;/i> is set to &lt;i>true&lt;/i>),&#xA; *   also load that policy.&#xA; *&#xA; * &lt;li>&#xA; *   If the &lt;i>java.security.auth.policy&lt;/i> property is defined using&#xA; *   &quot;==&quot; (rather than &quot;=&quot;), then ignore all other specified&#xA; *   policies and only load this policy.&#xA; * &lt;/ol>&#xA; * &#xA; * Each policy file consists of one or more grant entries, each of&#xA; * which consists of a number of permission entries.&#xA; *&#xA; * &lt;pre>&#xA; *   grant signedBy &quot;&lt;b>alias&lt;/b>&quot;, codeBase &quot;&lt;b>URL&lt;/b>&quot;,&#xA; *         principal &lt;b>principalClass&lt;/b> &quot;&lt;b>principalName&lt;/b>&quot;,&#xA; *         principal &lt;b>principalClass&lt;/b> &quot;&lt;b>principalName&lt;/b>&quot;,&#xA; *         ... {&#xA; *&#xA; *     permission &lt;b>Type&lt;/b> &quot;&lt;b>name&lt;/b> &quot;&lt;b>action&lt;/b>&quot;, &#xA; *         signedBy &quot;&lt;b>alias&lt;/b>&quot;;&#xA; *     permission &lt;b>Type&lt;/b> &quot;&lt;b>name&lt;/b> &quot;&lt;b>action&lt;/b>&quot;,&#xA; *         signedBy &quot;&lt;b>alias&lt;/b>&quot;;&#xA; *     ....&#xA; *   };&#xA; * &lt;/pre>&#xA; * &#xA; * All non-bold items above must appear as is (although case &#xA; * doesn't matter and some are optional, as noted below).&#xA; * Italicized items represent variable values.&#xA; *&#xA; * &lt;p> A grant entry must begin with the word &lt;code>grant&lt;/code>.&#xA; * The &lt;code>signedBy&lt;/code> and &lt;code>codeBase&lt;/code>&#xA; * name/value pairs are optional.&#xA; * If they are not present, then any signer (including unsigned code)&#xA; * will match, and any codeBase will match.  Note that the&#xA; * &lt;code>principal&lt;/code> name/value pair is not optional.&#xA; * This &lt;code>Policy&lt;/code> implementation only permits&#xA; * Principal-based grant entries.  Note that the &lt;i>principalClass&lt;/i>&#xA; * may be set to the wildcard value, *, which allows it to match&#xA; * any &lt;code>Principal&lt;/code> class.  In addition, the &lt;i>principalName&lt;/i>&#xA; * may also be set to the wildcard value, *, allowing it to match&#xA; * any &lt;code>Principal&lt;/code> name.  When setting the &lt;i>principalName&lt;/i>&#xA; * to the *, do not surround the * with quotes.&#xA; *&#xA; * &lt;p> A permission entry must begin with the word &lt;code>permission&lt;/code>. &#xA; * The word &lt;code>&lt;i>Type&lt;/i>&lt;/code> in the template above is&#xA; * a specific permission type, such as &lt;code>java.io.FilePermission&lt;/code>&#xA; * or &lt;code>java.lang.RuntimePermission&lt;/code>.&#xA; * &#xA; * &lt;p> The &quot;&lt;i>action&lt;/i>&quot; is required for&#xA; * many permission types, such as &lt;code>java.io.FilePermission&lt;/code>&#xA; * (where it specifies what type of file access that is permitted).&#xA; * It is not required for categories such as &#xA; * &lt;code>java.lang.RuntimePermission&lt;/code>&#xA; * where it is not necessary - you either have the &#xA; * permission specified by the &lt;code>&quot;&lt;i>name&lt;/i>&quot;&lt;/code> &#xA; * value following the type name or you don't.&#xA; * &#xA; * &lt;p> The &lt;code>signedBy&lt;/code> name/value pair for a permission entry &#xA; * is optional. If present, it indicates a signed permission. That is,&#xA; * the permission class itself must be signed by the given alias in&#xA; * order for it to be granted. For example,&#xA; * suppose you have the following grant entry:&#xA; * &#xA; * &lt;pre>&#xA; *   grant principal foo.com.Principal &quot;Duke&quot; {&#xA; *     permission Foo &quot;foobar&quot;, signedBy &quot;FooSoft&quot;;&#xA; *   }&#xA; * &lt;/pre>&#xA; * &#xA; * &lt;p> Then this permission of type &lt;i>Foo&lt;/i> is granted if the &#xA; * &lt;code>Foo.class&lt;/code> permission has been signed by the &#xA; * &quot;FooSoft&quot; alias, or if &lt;code>Foo.class&lt;/code> is a &#xA; * system class (i.e., is found on the CLASSPATH).&#xA; * &#xA; * &lt;p> Items that appear in an entry must appear in the specified order&#xA; * (&lt;code>permission&lt;/code>, &lt;i>Type&lt;/i>, &quot;&lt;i>name&lt;/i>&quot;, and &#xA; * &quot;&lt;i>action&lt;/i>&quot;). An entry is terminated with a semicolon.&#xA; * &#xA; * &lt;p> Case is unimportant for the identifiers (&lt;code>permission&lt;/code>, &#xA; * &lt;code>signedBy&lt;/code>, &lt;code>codeBase&lt;/code>, etc.) but is &#xA; * significant for the &lt;i>Type&lt;/i>&#xA; * or for any string that is passed in as a value. &lt;p>&#xA; * &#xA; * &lt;p> An example of two entries in a policy configuration file is&#xA; * &lt;pre>&#xA; *   // if the code is comes from &quot;foo.com&quot; and is running as &quot;Duke&quot;,&#xA; *   // grant it read/write to all files in /tmp.&#xA; *&#xA; *   grant codeBase &quot;foo.com&quot;, principal foo.com.Principal &quot;Duke&quot; {&#xA; * &#x9;&#x9;permission java.io.FilePermission &quot;/tmp/*&quot;, &quot;read,write&quot;;&#xA; *   };&#xA; *&#xA; *   // grant any code running as &quot;Duke&quot; permission to read&#xA; *   // the &quot;java.vendor&quot; Property.&#xA; *&#xA; *   grant principal foo.com.Principal &quot;Duke&quot; { &#xA; * &#x9;   permission java.util.PropertyPermission &quot;java.vendor&quot;;&#xA; * &lt;/pre> &#xA; *&#xA; * &lt;p> This &lt;code>Policy&lt;/code> implementation supports&#xA; * special handling for PrivateCredentialPermissions.&#xA; * If a grant entry is configured with a&#xA; * &lt;code>PrivateCredentialPermission&lt;/code>,&#xA; * and the &quot;Principal Class/Principal Name&quot; for that&#xA; * &lt;code>PrivateCredentialPermission&lt;/code> is &quot;self&quot;,&#xA; * then the entry grants the specified &lt;code>Subject&lt;/code> permission to&#xA; * access its own private Credential.  For example,&#xA; * the following grants the &lt;code>Subject&lt;/code> &quot;Duke&quot;&#xA; * access to its own a.b.Credential.&#xA; *&#xA; * &lt;pre>&#xA; *   grant principal foo.com.Principal &quot;Duke&quot; {&#xA; *&#x9;permission javax.security.auth.PrivateCredentialPermission&#xA; *&#x9;&#x9;&quot;a.b.Credential self&quot;,&#xA; *&#x9;&#x9;&quot;read&quot;;&#xA; *    };&#xA; * &lt;/pre>&#xA; *&#xA; * The following grants the &lt;code>Subject&lt;/code> &quot;Duke&quot;&#xA; * access to all of its own private Credentials:&#xA; *&#xA; * &lt;pre>&#xA; *   grant principal foo.com.Principal &quot;Duke&quot; {&#xA; *&#x9;permission javax.security.auth.PrivateCredentialPermission&#xA; *&#x9;&#x9;&quot;* self&quot;,&#xA; *&#x9;&#x9;&quot;read&quot;;&#xA; *    };&#xA; * &lt;/pre>&#xA; *&#xA; * The following grants all Subjects authenticated as a&#xA; * &lt;code>SolarisPrincipal&lt;/code> (regardless of their respective names)&#xA; * permission to access their own private Credentials:&#xA; *&#xA; * &lt;pre>&#xA; *   grant principal com.sun.security.auth.SolarisPrincipal * {&#xA; *&#x9;permission javax.security.auth.PrivateCredentialPermission&#xA; *&#x9;&#x9;&quot;* self&quot;,&#xA; *&#x9;&#x9;&quot;read&quot;;&#xA; *    };&#xA; * &lt;/pre>&#xA; * &#xA; * The following grants all Subjects permission to access their own&#xA; * private Credentials:&#xA; *&#xA; * &lt;pre>&#xA; *   grant principal * * {&#xA; *&#x9;permission javax.security.auth.PrivateCredentialPermission&#xA; *&#x9;&#x9;&quot;* self&quot;,&#xA; *&#x9;&#x9;&quot;read&quot;;&#xA; *    };&#xA; * &lt;/pre>&#xA; &#xA; * @deprecated As of JDK&amp;nbsp;1.4, replaced by &#xA; *             {@link sun.security.provider.PolicyFile}.&#xA; *             This class is entirely deprecated.&#xA; *&#xA; * @version 1.22, 01/25/00&#xA; * @see java.security.CodeSource&#xA; * @see java.security.Permissions&#xA; * @see java.security.ProtectionDomain &#xA; */</comments>
      <annotation xsi:type="classifiers:Annotation" href="../../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Public"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>javax</namespaces>
      <namespaces>security</namespaces>
      <namespaces>auth</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../../../../javax/security/auth/Policy.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
  <classifiers xsi:type="classifiers:Class" name="PolicyPermissions">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="1954188373270545523"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="codesource">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="perms">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/security/Permissions.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="policy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="notInit">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="additionalPerms">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// have we pulled in the policy permissions yet?</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="PolicyPermissions">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.6/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.6/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.4"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.5"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="policy">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codesource">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/CodeSource.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:ClassMethod" name="add">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="permission">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/Permission.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/lang/SecurityException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../java/util/ResourceBundle.class.xmi#//@classifiers.0/@members.11"/>
                  <arguments xsi:type="references:StringReference" value="attempt to add a Permission to a readonly PermissionCollection"/>
                </next>
              </next>
            </arguments>
          </throwable>
        </statement>
        <condition xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../../../../java/security/PermissionCollection.class.xmi#//@classifiers.0/@members.7"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.5"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/util/Vector.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </value>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.5"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.5">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.36"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.7/@parameters.0"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.2">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../java/security/Permissions.class.xmi#//@classifiers.0/@members.6"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.7/@parameters.0"/>
              </next>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="init">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.2"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../java/security/Permissions.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </value>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.2"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="e">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.5">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../java/util/Vector.class.xmi#//@classifiers.0/@members.16"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:WhileLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.2">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../java/security/Permissions.class.xmi#//@classifiers.0/@members.6"/>
                        <arguments xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../java/security/Permission.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.8/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.1"/>
                            </next>
                          </child>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.8/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../java/util/Enumeration.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.5"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:NullLiteral"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.5"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.3">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.27">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.2"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.1"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.4"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="implies">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="permission">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/security/Permission.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.1/@members.8"/>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.4"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.2">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../java/security/Permissions.class.xmi#//@classifiers.0/@members.7"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.9/@parameters.0"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="elements">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.1/@members.8"/>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.4"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.2">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../java/security/Permissions.class.xmi#//@classifiers.0/@members.8"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.1/@members.8"/>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.4"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.1/@members.2">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../java/security/PermissionCollection.class.xmi#//@classifiers.0/@members.8"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../../../../java/security/PermissionCollection.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
