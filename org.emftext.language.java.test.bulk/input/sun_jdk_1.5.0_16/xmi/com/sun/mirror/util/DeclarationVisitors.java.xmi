<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/instantiations ../../../../java.ecore#/8 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="DeclarationVisitors.java">
  <comments>/*&#xA; * @(#)DeclarationVisitors.java&#x9;1.4 04/07/13&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL.  Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>mirror</namespaces>
  <namespaces>util</namespaces>
  <classifiers xsi:type="classifiers:Class" name="DeclarationVisitors">
    <members xsi:type="members:Constructor" name="DeclarationVisitors">
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="NO_OP">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="SimpleDeclarationVisitor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DeclarationVisitor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// do not instantiate.</comments>
        <comments>/**&#xA;     * A visitor that has no side effects and keeps no state.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getDeclarationScanner">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DeclarationVisitor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pre">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DeclarationVisitor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="post">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DeclarationVisitor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return a &lt;tt>DeclarationVisitor&lt;/tt> that will scan the&#xA;     * declaration structure, visiting declarations contained in&#xA;     * another declaration.  For example, when visiting a class, the&#xA;     * fields, methods, constructors, etc. of the class are also&#xA;     * visited.  The order in which the contained declarations are scanned is&#xA;     * not specified.&#xA;     *&#xA;     * &lt;p>The &lt;tt>pre&lt;/tt> and &lt;tt>post&lt;/tt>&#xA;     * &lt;tt>DeclarationVisitor&lt;/tt> parameters specify,&#xA;     * respectively, the processing the scanner will do before or&#xA;     * after visiting the contained declarations.  If only one of pre&#xA;     * and post processing is needed, use {@link&#xA;     * DeclarationVisitors#NO_OP DeclarationVisitors.NO_OP} for the&#xA;     * other parameter.&#xA;     * &#xA;     * @param pre visitor representing processing to do before&#xA;     * visiting contained declarations.&#xA;     *&#xA;     * @param post visitor representing processing to do after&#xA;     * visiting contained declarations.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="DeclarationScanner.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getSourceOrderDeclarationScanner">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DeclarationVisitor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pre">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DeclarationVisitor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="post">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DeclarationVisitor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return a &lt;tt>DeclarationVisitor&lt;/tt> that will scan the&#xA;     * declaration structure, visiting declarations contained in&#xA;     * another declaration in source code order.  For example, when&#xA;     * visiting a class, the fields, methods, constructors, etc. of&#xA;     * the class are also visited.  The order in which the contained&#xA;     * declarations are visited is as close to source code order as&#xA;     * possible; declaration mirrors created from class files instead&#xA;     * of source code will not have source position information.&#xA;     *&#xA;     * &lt;p>The &lt;tt>pre&lt;/tt> and &lt;tt>post&lt;/tt>&#xA;     * &lt;tt>DeclarationVisitor&lt;/tt> parameters specify,&#xA;     * respectively, the processing the scanner will do before or&#xA;     * after visiting the contained declarations.  If only one of pre&#xA;     * and post processing is needed, use {@link&#xA;     * DeclarationVisitors#NO_OP DeclarationVisitors.NO_OP} for the other parameter.&#xA;     * &#xA;     * @param pre visitor representing processing to do before&#xA;     * visiting contained declarations.&#xA;     *&#xA;     * @param post visitor representing processing to do after&#xA;     * visiting contained declarations.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="SourceOrderDeclScanner.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Utilities to create specialized &lt;tt>DeclarationVisitor&lt;/tt> instances.&#xA; *&#xA; * @author Joseph D. Darcy&#xA; * @author Scott Seligman&#xA; * @version 1.4 04/07/13&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
