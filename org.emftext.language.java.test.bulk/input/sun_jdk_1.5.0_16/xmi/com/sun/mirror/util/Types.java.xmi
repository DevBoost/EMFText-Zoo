<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="Types.java">
  <comments>/*&#xA; * @(#)Types.java&#x9;1.3 04/06/07&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL.  Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>mirror</namespaces>
  <namespaces>util</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>mirror</namespaces>
    <namespaces>declaration</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>mirror</namespaces>
    <namespaces>type</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Types">
    <members xsi:type="members:InterfaceMethod" name="isSubtype">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Tests whether one type is a subtype of the another.&#xA;     * Any type is considered to be a subtype of itself.&#xA;     *&#xA;     * @param t1  the first type&#xA;     * @param t2  the second type&#xA;     * @return &lt;tt>true&lt;/tt> if and only if the first type is a subtype&#xA;     *&#x9;&#x9;of the second&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t1">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../type/TypeMirror.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t2">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../type/TypeMirror.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isAssignable">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Tests whether one type is assignable to another.&#xA;     *&#xA;     * @param t1  the first type&#xA;     * @param t2  the second type&#xA;     * @return &lt;tt>true&lt;/tt> if and only if the first type is assignable&#xA;     *&#x9;&#x9;to the second&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t1">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../type/TypeMirror.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t2">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../type/TypeMirror.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getErasure">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the erasure of a type.&#xA;     *&#xA;     * @param t  the type to be erased&#xA;     * @return the erasure of the given type&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../type/TypeMirror.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../type/TypeMirror.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPrimitiveType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns a primitive type.&#xA;     *&#xA;     * @param kind  the kind of primitive type to return&#xA;     * @return a primitive type&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../type/PrimitiveType.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="kind">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>PrimitiveType</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Enumeration" href="../type/PrimitiveType$Kind.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getVoidType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the pseudo-type representing the type of &lt;tt>void&lt;/tt>.&#xA;     *&#xA;     * @return the pseudo-type representing the type of &lt;tt>void&lt;/tt>&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../type/VoidType.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getArrayType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns an array type with the specified component type.&#xA;     *&#xA;     * @param componentType  the component type&#xA;     * @return an array type with the specified component type.&#xA;     * @throws IllegalArgumentException if the component type is not valid for&#xA;     *&#x9;&#x9;an array&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../type/ArrayType.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="componentType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../type/TypeMirror.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTypeVariable">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the type variable declared by a type parameter.&#xA;     *&#xA;     * @param tparam  the type parameter&#xA;     * @return the type variable declared by the type parameter&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../type/TypeVariable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tparam">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../declaration/TypeParameterDeclaration.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getWildcardType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns a new wildcard.&#xA;     * Either the wildcards's upper bounds or lower bounds may be&#xA;     * specified, or neither, but not both.&#xA;     *&#xA;     * @param upperBounds  the upper bounds of this wildcard,&#xA;     *&#x9;&#x9;or an empty collection if none&#xA;     * @param lowerBounds  the lower bounds of this wildcard,&#xA;     *&#x9;&#x9;or an empty collection if none&#xA;     * @return a new wildcard&#xA;     * @throws IllegalArgumentException if bounds are not valid&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../type/WildcardType.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="upperBounds">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../type/ReferenceType.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lowerBounds">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../type/ReferenceType.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDeclaredType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the type corresponding to a type declaration and&#xA;     * actual type arguments.&#xA;     * Given the declaration for &lt;tt>String&lt;/tt>, for example, this&#xA;     * method may be used to get the &lt;tt>String&lt;/tt> type.  It may&#xA;     * then be invoked a second time, with the declaration for &lt;tt>Set&lt;/tt>,&#xA;     * to make the parameterized type {@code Set&lt;String>}.&#xA;     *&#xA;     * &lt;p> The number of type arguments must either equal the&#xA;     * number of the declaration's formal type parameters, or must be&#xA;     * zero.  If zero, and if the declaration is generic,&#xA;     * then the declaration's raw type is returned.&#xA;     *&#xA;     * &lt;p> If a parameterized type is being returned, its declaration&#xA;     * must not be contained within a generic outer class.&#xA;     * The parameterized type {@code Outer&lt;String>.Inner&lt;Number>},&#xA;     * for example, may be constructed by first using this&#xA;     * method to get the type {@code Outer&lt;String>}, and then invoking&#xA;     * {@link #getDeclaredType(DeclaredType, TypeDeclaration, TypeMirror...)}.&#xA;     *&#xA;     * @param decl&#x9;the type declaration&#xA;     * @param typeArgs&#x9;the actual type arguments&#xA;     * @return the type corresponding to the type declaration and&#xA;     *&#x9;&#x9;actual type arguments&#xA;     * @throws IllegalArgumentException if too many or too few&#xA;     *&#x9;&#x9;type arguments are given, or if an inappropriate type&#xA;     *&#x9;&#x9;argument or declaration is provided&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../type/DeclaredType.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="decl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../declaration/TypeDeclaration.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:VariableLengthParameter" name="typeArgs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../type/TypeMirror.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDeclaredType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the type corresponding to a type declaration&#xA;     * and actual arguments, given a&#xA;     * {@linkplain DeclaredType#getContainingType() containing type}&#xA;     * of which it is a member.&#xA;     * The parameterized type {@code Outer&lt;String>.Inner&lt;Number>},&#xA;     * for example, may be constructed by first using&#xA;     * {@link #getDeclaredType(TypeDeclaration, TypeMirror...)}&#xA;     * to get the type {@code Outer&lt;String>}, and then invoking&#xA;     * this method.&#xA;     *&#xA;     * &lt;p> If the containing type is a parameterized type,&#xA;     * the number of type arguments must equal the&#xA;     * number of the declaration's formal type parameters.&#xA;     * If it is not parameterized or if it is &lt;tt>null&lt;/tt>, this method is&#xA;     * equivalent to &lt;tt>getDeclaredType(decl, typeArgs)&lt;/tt>.&#xA;     *&#xA;     * @param containing  the containing type, or &lt;tt>null&lt;/tt> if none&#xA;     * @param decl&#x9;  the type declaration&#xA;     * @param typeArgs&#x9;  the actual type arguments&#xA;     * @return the type corresponding to the type declaration and&#xA;     *&#x9;&#x9;actual type arguments,&#xA;     *&#x9;&#x9;contained within the given type&#xA;     * @throws IllegalArgumentException if too many or too few&#xA;     *&#x9;&#x9;type arguments are given, or if an inappropriate type&#xA;     *&#x9;&#x9;argument, declaration, or containing type is provided&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../type/DeclaredType.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="containing">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../type/DeclaredType.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="decl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../declaration/TypeDeclaration.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:VariableLengthParameter" name="typeArgs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../type/TypeMirror.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Utility methods for operating on types.&#xA; *&#xA; * @author Joseph D. Darcy&#xA; * @author Scott Seligman&#xA; * @version 1.3 04/06/07&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
