<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="TypeMirror.java">
  <comments>/*&#xA; * @(#)TypeMirror.java&#x9;1.3 04/07/16&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL.  Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>mirror</namespaces>
  <namespaces>type</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>mirror</namespaces>
    <namespaces>declaration</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../declaration/Declaration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>mirror</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../util/Types.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>mirror</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../util/TypeVisitor.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="TypeMirror">
    <members xsi:type="members:InterfaceMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns a string representation of this type.&#xA;     * Any names embedded in the expression are qualified.&#xA;     *&#xA;     * @return a string representation of this type&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="equals">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Tests whether two types represent the same type.&#xA;     *&#xA;     * @param obj the object to be compared with this type&#xA;     * @return &lt;tt>true&lt;/tt> if the specified object represents the same&#xA;     *&#x9;&#x9;type as this.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="accept">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Applies a visitor to this type.&#xA;     *&#xA;     * @param v the visitor operating on this type&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../util/TypeVisitor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Represents a type in the Java programming language.&#xA; * Types include primitive types, class and interface types, array&#xA; * types, and type variables.  Wildcard type arguments, and the&#xA; * pseudo-type representing the type of &lt;tt>void&lt;/tt>, are represented&#xA; * by type mirrors as well.&#xA; *&#xA; * &lt;p> Types may be compared using the utility methods in&#xA; * {@link Types}.&#xA; * There is no guarantee that any particular type will&#xA; * always be represented by the same object.&#xA; *&#xA; * @author Joseph D. Darcy&#xA; * @author Scott Seligman&#xA; * @version 1.3 04/07/16&#xA; *&#xA; * @see Declaration&#xA; * @see Types&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
