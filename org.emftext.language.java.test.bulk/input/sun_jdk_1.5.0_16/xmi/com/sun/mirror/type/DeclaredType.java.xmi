<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="DeclaredType.java">
  <comments>/*&#xA; * @(#)DeclaredType.java&#x9;1.6 04/06/07&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL.  Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>mirror</namespaces>
  <namespaces>type</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>mirror</namespaces>
    <namespaces>declaration</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../declaration/TypeDeclaration.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="DeclaredType">
    <members xsi:type="members:InterfaceMethod" name="getDeclaration">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the declaration of this type.&#xA;     *&#xA;     * &lt;p> Returns null if this type's declaration is unknown.  This may&#xA;     * be the result of a processing error, such as a missing class file.&#xA;     *&#xA;     * @return the declaration of this type, or null if unknown&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../declaration/TypeDeclaration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getContainingType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0">
          <comments>/**&#xA;     * Returns the type that contains this type as a member.&#xA;     * Returns &lt;tt>null&lt;/tt> if this is a top-level type.&#xA;     *&#xA;     * &lt;p> For example, the containing type of {@code O.I&lt;S>}&#xA;     * is the type {@code O}, and the containing type of&#xA;     * {@code O&lt;T>.I&lt;S>} is the type {@code O&lt;T>}.&#xA;     *&#xA;     * @return the type that contains this type,&#xA;     * or &lt;tt>null&lt;/tt> if this is a top-level type&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getActualTypeArguments">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns (in order) the actual type arguments of this type.&#xA;     * For a generic type nested within another generic type&#xA;     * (such as {@code Outer&lt;String>.Inner&lt;Number>}), only the type&#xA;     * arguments of the innermost type are included.&#xA;     *&#xA;     * @return the actual type arguments of this type, or an empty collection&#xA;     * if there are none&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="TypeMirror.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSuperinterfaces">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the interface types that are direct supertypes of this type.&#xA;     * These are the interface types implemented or extended&#xA;     * by this type's declaration, with any type arguments&#xA;     * substituted in.&#xA;     *&#xA;     * &lt;p> For example, the interface type extended by&#xA;     * {@code java.util.Set&lt;String>} is {@code java.util.Collection&lt;String>}.&#xA;     *&#xA;     * @return the interface types that are direct supertypes of this type,&#xA;     * or an empty collection if there are none&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="InterfaceType.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Represents a declared type, either a class type or an interface type.&#xA; * This includes parameterized types such as {@code java.util.Set&lt;String>}&#xA; * as well as raw types.&#xA; *&#xA; * &lt;p> While a &lt;tt>TypeDeclaration&lt;/tt> represents the &lt;i>declaration&lt;/i>&#xA; * of a class or interface, a &lt;tt>DeclaredType&lt;/tt> represents a class&#xA; * or interface &lt;i>type&lt;/i>, the latter being a use of the former.&#xA; * See {@link TypeDeclaration} for more on this distinction.&#xA; *&#xA; * &lt;p> A &lt;tt>DeclaredType&lt;/tt> may represent a type&#xA; * for which details (declaration, supertypes, &lt;i>etc.&lt;/i>) are unknown.&#xA; * This may be the result of a processing error, such as a missing class file,&#xA; * and is indicated by {@link #getDeclaration()} returning &lt;tt>null&lt;/tt>.&#xA; * Other method invocations on such an unknown type will not, in general,&#xA; * return meaningful results.&#xA; *&#xA; * @author Joseph D. Darcy&#xA; * @author Scott Seligman&#xA; * @version 1.6 04/06/07&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="ReferenceType.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
