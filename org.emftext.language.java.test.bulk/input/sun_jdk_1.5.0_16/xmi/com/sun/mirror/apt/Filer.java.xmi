<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="Filer.java">
  <comments>/*&#xA; * @(#)Filer.java&#x9;1.1 04/01/26&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL.  Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>mirror</namespaces>
  <namespaces>apt</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Filer">
    <members xsi:type="members:InterfaceMethod" name="createSourceFile">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Creates a new source file and returns a writer for it.&#xA;     * The file's name and path (relative to the root of all newly created&#xA;     * source files) is based on the type to be declared in that file.&#xA;     * If more than one type is being declared, the name of the principal&#xA;     * top-level type (the public one, for example) should be used.&#xA;     *&#xA;     * &lt;p> The {@linkplain java.nio.charset.Charset charset} used to&#xA;     * encode the file is determined by the implementation.&#xA;     * An annotation processing tool may have an &lt;tt>-encoding&lt;/tt>&#xA;     * flag or the like for specifying this.  It will typically use&#xA;     * the platform's default encoding if none is specified.&#xA;     *&#xA;     * @param name  canonical (fully qualified) name of the principal type&#xA;     *&#x9;&#x9;being declared in this file&#xA;     * @return a writer for the new file&#xA;     * @throws IOException if the file cannot be created&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../java/io/PrintWriter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createClassFile">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Creates a new class file, and returns a stream for writing to it.&#xA;     * The file's name and path (relative to the root of all newly created&#xA;     * class files) is based on the name of the type being written.&#xA;     *&#xA;     * @param name canonical (fully qualified) name of the type being written&#xA;     * @return a stream for writing to the new file&#xA;     * @throws IOException if the file cannot be created&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../java/io/OutputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createTextFile">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Creates a new text file, and returns a writer for it.&#xA;     * The file is located along with either the&#xA;     * newly created source or newly created binary files.  It may be&#xA;     * named relative to some package (as are source and binary files),&#xA;     * and from there by an arbitrary pathname.  In a loose sense, the&#xA;     * pathname of the new file will be the concatenation of&#xA;     * &lt;tt>loc&lt;/tt>, &lt;tt>pkg&lt;/tt>, and &lt;tt>relPath&lt;/tt>.&#xA;     *&#xA;     * &lt;p> A {@linkplain java.nio.charset.Charset charset} for&#xA;     * encoding the file may be provided.  If none is given, the&#xA;     * charset used to encode source files&#xA;     * (see {@link #createSourceFile(String)}) will be used.&#xA;     *&#xA;     * @param loc location of the new file&#xA;     * @param pkg package relative to which the file should be named,&#xA;     *&#x9;&#x9;or the empty string if none&#xA;     * @param relPath final pathname components of the file&#xA;     * @param charsetName the name of the charset to use, or null if none&#xA;     *&#x9;&#x9;is being explicitly specified&#xA;     * @return a writer for the new file&#xA;     * @throws IOException if the file cannot be created&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../java/io/PrintWriter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="loc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.4"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pkg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="relPath">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="charsetName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createBinaryFile">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Creates a new binary file, and returns a stream for writing to it.&#xA;     * The file is located along with either the&#xA;     * newly created source or newly created binary files.  It may be&#xA;     * named relative to some package (as are source and binary files),&#xA;     * and from there by an arbitrary pathname.  In a loose sense, the&#xA;     * pathname of the new file will be the concatenation of&#xA;     * &lt;tt>loc&lt;/tt>, &lt;tt>pkg&lt;/tt>, and &lt;tt>relPath&lt;/tt>.&#xA;     *&#xA;     * @param loc location of the new file&#xA;     * @param pkg package relative to which the file should be named,&#xA;     *&#x9;&#x9;or the empty string if none&#xA;     * @param relPath final pathname components of the file&#xA;     * @return a stream for writing to the new file&#xA;     * @throws IOException if the file cannot be created&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../java/io/OutputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="loc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.4"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pkg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="relPath">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/io/File.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="classifiers:Enumeration" name="Location">
      <comments>/**&#xA;     * Locations (subtrees within the file system) where new files are created.&#xA;     */</comments>
      <constants name="SOURCE_TREE">
        <comments>/** The location of new source files. */</comments>
      </constants>
      <constants name="CLASS_TREE">
        <comments>/** The location of new class files. */</comments>
      </constants>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This interface supports the creation of new files by an&#xA; * annotation processor.&#xA; * Files created in this way will be known to the annotation processing&#xA; * tool implementing this interface, better enabling the tool to manage them.&#xA; * Four kinds of files are distinguished:&#xA; * source files, class files, other text files, and other binary files.&#xA; * The latter two are collectively referred to as &lt;i>auxiliary&lt;/i> files.&#xA; *&#xA; * &lt;p> There are two distinguished locations (subtrees within the&#xA; * file system) where newly created files are placed:&#xA; * one for new source files, and one for new class files.&#xA; * (These might be specified on a tool's command line, for example,&#xA; * using flags such as &lt;tt>-s&lt;/tt> and &lt;tt>-d&lt;/tt>.)&#xA; * Auxiliary files may be created in either location.&#xA; *&#xA; * &lt;p> During each run of an annotation processing tool, a file&#xA; * with a given pathname may be created only once.  If that file already&#xA; * exists before the first attempt to create it, the old contents will&#xA; * be deleted.  Any subsequent attempt to create the same file during&#xA; * a run will fail.&#xA; *&#xA; * @author Joseph D. Darcy&#xA; * @author Scott Seligman&#xA; * @version 1.1 04/01/26&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
