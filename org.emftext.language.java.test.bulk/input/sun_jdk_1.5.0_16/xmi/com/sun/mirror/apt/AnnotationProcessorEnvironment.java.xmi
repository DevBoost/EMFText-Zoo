<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="AnnotationProcessorEnvironment.java">
  <comments>/*&#xA; * @(#)AnnotationProcessorEnvironment.java&#x9;1.7 04/07/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL.  Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>mirror</namespaces>
  <namespaces>apt</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../java/util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>mirror</namespaces>
    <namespaces>declaration</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>mirror</namespaces>
    <namespaces>util</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="AnnotationProcessorEnvironment">
    <members xsi:type="members:InterfaceMethod" name="getOptions">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the options passed to the annotation processing tool.&#xA;     * Options are returned in the form of a map from option name&#xA;     * (such as &lt;tt>&quot;-encoding&quot;&lt;/tt>) to option value.&#xA;     * For an option with no value (such as &lt;tt>&quot;-help&quot;&lt;/tt>), the&#xA;     * corresponding value in the map is &lt;tt>null&lt;/tt>.&#xA;     *&#xA;     * &lt;p> Options beginning with &lt;tt>&quot;-A&quot;&lt;/tt> are &lt;i>processor-specific.&lt;/i>&#xA;     * Such options are unrecognized by the tool, but intended to be used by&#xA;     * some annotation processor.&#xA;     *&#xA;     * @return the options passed to the tool&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMessager">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the messager used to report errors, warnings, and other&#xA;     * notices.&#xA;     *&#xA;     * @return the messager&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Messager.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFiler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the filer used to create new source, class, or auxiliary&#xA;     * files.&#xA;     *&#xA;     * @return the filer&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Filer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSpecifiedTypeDeclarations">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the declarations of the types specified when the&#xA;     * annotation processing tool was invoked.&#xA;     *&#xA;     * @return the types specified when the tool was invoked, or an&#xA;     * empty collection if there were none&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../declaration/TypeDeclaration.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPackage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the declaration of a package given its fully qualified name.&#xA;     *&#xA;     * @param name  fully qualified package name, or &quot;&quot; for the unnamed package&#xA;     * @return the declaration of the named package, or null if it cannot&#xA;     * be found&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../declaration/PackageDeclaration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTypeDeclaration">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the declaration of a type given its fully qualified name.&#xA;     *&#xA;     * @param name  fully qualified type name&#xA;     * @return the declaration of the named type, or null if it cannot be&#xA;     * found&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../declaration/TypeDeclaration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTypeDeclarations">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * A convenience method that returns the declarations of the types&#xA;     * {@linkplain AnnotationProcessorEnvironment &lt;i>included&lt;/i>}&#xA;     * in this invocation of the annotation processing tool.&#xA;     *&#xA;     * @return the declarations of the types included in this invocation&#xA;     * of the tool, or an empty collection if there are none&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../declaration/TypeDeclaration.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDeclarationsAnnotatedWith">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the declarations annotated with the given annotation type.&#xA;     * Only declarations of the types&#xA;     * {@linkplain AnnotationProcessorEnvironment &lt;i>included&lt;/i>}&#xA;     * in this invocation of the annotation processing tool, or&#xA;     * declarations of members, parameters, or type parameters&#xA;     * declared within those, are returned.&#xA;     *&#xA;     * @param a  annotation type being requested&#xA;     * @return the declarations annotated with the given annotation type,&#xA;     * or an empty collection if there are none&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../declaration/Declaration.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="a">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../declaration/AnnotationTypeDeclaration.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDeclarationUtils">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns an implementation of some utility methods for&#xA;     * operating on declarations.&#xA;     *&#xA;     * @return declaration utilities&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../util/Declarations.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTypeUtils">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns an implementation of some utility methods for&#xA;     * operating on types.&#xA;     *&#xA;     * @return type utilities&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../util/Types.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Add a listener.  If the listener is currently registered to listen,&#xA;     * adding it again will have no effect.&#xA;     *&#xA;     * @param listener The listener to add.&#xA;     * @throws NullPointerException if the listener is null&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="AnnotationProcessorListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Remove a listener.  If the listener is not currently listening,&#xA;     * the method call does nothing.&#xA;     *&#xA;     * @param listener The listener to remove.&#xA;     * @throws NullPointerException if the listener is null&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="AnnotationProcessorListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The environment encapsulating the state needed by an annotation processor.&#xA; * An annotation processing tool makes this environment available&#xA; * to all annotation processors.&#xA; *&#xA; * &lt;p> When an annotation processing tool is invoked, it is given a&#xA; * set of type declarations on which to operate.  These&#xA; * are refered to as the &lt;i>specified&lt;/i> types.&#xA; * The type declarations said to be &lt;i>included&lt;/i> in this invocation&#xA; * consist of the specified types and any types nested within them.&#xA; *&#xA; * &lt;p> {@link DeclarationFilter}&#xA; * provides a simple way to select just the items of interest&#xA; * when a method returns a collection of declarations.&#xA; *&#xA; * @author Joseph D. Darcy&#xA; * @author Scott Seligman&#xA; * @version 1.7 04/07/19&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
