<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="AnnotationProcessorFactory.java">
  <comments>/*&#xA; * @(#)AnnotationProcessorFactory.java&#x9;1.9 04/07/13&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL.  Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>mirror</namespaces>
  <namespaces>apt</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../java/util/Set.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>mirror</namespaces>
    <namespaces>declaration</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../declaration/AnnotationTypeDeclaration.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="AnnotationProcessorFactory">
    <members xsi:type="members:InterfaceMethod" name="supportedOptions">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the options recognized by this factory or by any of the&#xA;     * processors it may create.&#xA;     * Only {@linkplain AnnotationProcessorEnvironment#getOptions()&#xA;     * processor-specific} options are included, each of which begins&#xA;     * with &lt;tt>&quot;-A&quot;&lt;/tt>.  For example, if this factory recognizes&#xA;     * options such as &lt;tt>-Adebug -Aloglevel=3&lt;/tt>, it will&#xA;     * return the strings &lt;tt>&quot;-Adebug&quot;&lt;/tt> and &lt;tt>&quot;-Aloglevel&quot;&lt;/tt>.&#xA;     *&#xA;     * &lt;p> A tool might use this information to determine if any&#xA;     * options provided by a user are unrecognized by any processor,&#xA;     * in which case it may wish to report an error.&#xA;     *&#xA;     * @return the options recognized by this factory or by any of the&#xA;     * processors it may create, or an empty collection if none&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="supportedAnnotationTypes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the names of the annotation types supported by this factory.&#xA;     * An element of the result may be the canonical (fully qualified) name&#xA;     * of a supported annotation type.  Alternately it may be of the form&#xA;     * &lt;tt>&quot;&lt;i>name&lt;/i>.*&quot;&lt;/tt>&#xA;     * representing the set of all annotation types&#xA;     * with canonical names beginning with &lt;tt>&quot;&lt;i>name&lt;/i>.&quot;&lt;/tt>&#xA;     * Finally, &lt;tt>&quot;*&quot;&lt;/tt> by itself represents the set of all&#xA;     * annotation types.&#xA;     *&#xA;     * @return the names of the annotation types supported by this factory&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getProcessorFor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns an annotation processor for a set of annotation&#xA;     * types. The set will be empty if the factory supports&#xA;     * &amp;quot;&lt;tt>*&lt;/tt>&amp;quot; and the specified type declarations have&#xA;     * no annotations.  Note that the set of annotation types may be&#xA;     * empty for other reasons, such as giving the factory an&#xA;     * opportunity to register a listener.  An&#xA;     * &lt;tt>AnnotationProcessorFactory&lt;/tt> must gracefully handle an&#xA;     * empty set of annotations; an appropriate response to an empty&#xA;     * set will often be returning {@link AnnotationProcessors#NO_OP}.&#xA;     *&#xA;     * @param atds type declarations of the annotation types to be processed&#xA;     * @param env  environment to use during processing&#xA;     * @return an annotation processor for the given annotation types,&#xA;     *&#x9;&#x9;or &lt;tt>null&lt;/tt> if the types are not supported or the&#xA;     *&#x9;&#x9;processor cannot be created&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="AnnotationProcessor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="atds">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../declaration/AnnotationTypeDeclaration.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../../../../java/util/Set.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="env">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="AnnotationProcessorEnvironment.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A factory for creating annotation processors.&#xA; * Each factory is responsible for creating processors for one or more&#xA; * annotation types.&#xA; * The factory is said to &lt;i>support&lt;/i> these types.&#xA; *&#xA; * &lt;p> Each implementation of an &lt;tt>AnnotationProcessorFactory&lt;/tt>&#xA; * must provide a public no-argument constructor to be used by tools to&#xA; * instantiate the factory.&#xA; *&#xA; * @author Joseph D. Darcy&#xA; * @author Scott Seligman&#xA; * @version 1.9 04/07/13&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
