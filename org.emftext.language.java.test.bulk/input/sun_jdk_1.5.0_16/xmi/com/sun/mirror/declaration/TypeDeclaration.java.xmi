<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="TypeDeclaration.java">
  <comments>/*&#xA; * @(#)TypeDeclaration.java&#x9;1.4 04/04/30&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL.  Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>mirror</namespaces>
  <namespaces>declaration</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>mirror</namespaces>
    <namespaces>type</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="TypeDeclaration">
    <members xsi:type="members:InterfaceMethod" name="getPackage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the package within which this type is declared.&#xA;     *&#xA;     * @return the package within which this type is declared&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="PackageDeclaration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getQualifiedName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the fully qualified name of this class or interface&#xA;     * declaration.  More precisely, it returns the &lt;i>canonical&lt;/i>&#xA;     * name.&#xA;     * The name of a generic type does not include any reference&#xA;     * to its formal type parameters.&#xA;     * For example, the the fully qualified name of the interface declaration&#xA;     * {@code java.util.Set&lt;E>} is &lt;tt>&quot;java.util.Set&quot;&lt;/tt>.&#xA;     *&#xA;     * @return the fully qualified name of this class or interface declaration&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFormalTypeParameters">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the formal type parameters of this class or interface.&#xA;     *&#xA;     * @return the formal type parameters, or an empty collection&#xA;     * if there are none&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="TypeParameterDeclaration.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSuperinterfaces">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the interface types directly implemented by this class&#xA;     * or extended by this interface.&#xA;     *&#xA;     * @return the interface types directly implemented by this class&#xA;     * or extended by this interface, or an empty collection if there are none&#xA;     *&#xA;     * @see com.sun.mirror.util.DeclarationFilter&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../type/InterfaceType.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFields">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the fields that are directly declared by this class or&#xA;     * interface.  Includes enum constants.&#xA;     *&#xA;     * @return the fields that are directly declared,&#xA;     * or an empty collection if there are none&#xA;     *&#xA;     * @see com.sun.mirror.util.DeclarationFilter&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="FieldDeclaration.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMethods">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the methods that are directly declared by this class or&#xA;     * interface.  Includes annotation type elements.  Excludes&#xA;     * implicitly declared methods of an interface, such as&#xA;     * &lt;tt>toString&lt;/tt>, that correspond to the methods of&#xA;     * &lt;tt>java.lang.Object&lt;/tt>.&#xA;     *&#xA;     * @return the methods that are directly declared,&#xA;     * or an empty collection if there are none&#xA;     *&#xA;     * @see com.sun.mirror.util.DeclarationFilter&#xA;     */</comments>
          <typeArguments xsi:type="generics:ExtendsTypeArgument">
            <extendTypes xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="MethodDeclaration.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </extendTypes>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNestedTypes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the declarations of the nested classes and interfaces&#xA;     * that are directly declared by this class or interface.&#xA;     *&#xA;     * @return the declarations of the nested classes and interfaces,&#xA;     * or an empty collection if there are none&#xA;     *&#xA;     * @see com.sun.mirror.util.DeclarationFilter&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../java/util/Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Represents the declaration of a class or interface.&#xA; * Provides access to information about the type and its members.&#xA; * Note that an {@linkplain EnumDeclaration enum} is a kind of class,&#xA; * and an {@linkplain AnnotationTypeDeclaration annotation type} is&#xA; * a kind of interface.&#xA; *&#xA; * &lt;p> &lt;a name=&quot;DECL_VS_TYPE&quot;>&lt;/a>&#xA; * While a &lt;tt>TypeDeclaration&lt;/tt> represents the &lt;i>declaration&lt;/i>&#xA; * of a class or interface, a {@link DeclaredType} represents a class&#xA; * or interface &lt;i>type&lt;/i>, the latter being a use&#xA; * (or &lt;i>invocation&lt;/i>) of the former.&#xA; * The distinction is most apparent with generic types,&#xA; * for which a single declaration can define a whole&#xA; * family of types.  For example, the declaration of&#xA; * {@code java.util.Set} corresponds to the parameterized types&#xA; * {@code java.util.Set&lt;String>} and {@code java.util.Set&lt;Number>}&#xA; * (and many others), and to the raw type {@code java.util.Set}.&#xA; *&#xA; * &lt;p> {@link com.sun.mirror.util.DeclarationFilter}&#xA; * provides a simple way to select just the items of interest&#xA; * when a method returns a collection of declarations.&#xA; *&#xA; * @author Joseph D. Darcy&#xA; * @author Scott Seligman&#xA; * @version 1.4 04/04/30&#xA; *&#xA; * @see DeclaredType&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="MemberDeclaration.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
