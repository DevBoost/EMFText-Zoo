<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../java.ecore#/16" name="WindowsTextFieldUI.java">
  <comments>/*&#xA; * @(#)WindowsTextFieldUI.java&#x9;1.23 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>java</namespaces>
  <namespaces>swing</namespaces>
  <namespaces>plaf</namespaces>
  <namespaces>windows</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>beans</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/beans/PropertyChangeEvent.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>plaf</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>plaf</namespaces>
    <namespaces>basic</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../javax/swing/plaf/basic/BasicTextFieldUI.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>text</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <namespaces>plaf</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../javax/swing/plaf/UIResource.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>swing</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../sun/swing/DefaultLookup.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="WindowsTextFieldUI">
    <members xsi:type="members:ClassMethod" name="createUI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../javax/swing/plaf/ComponentUI.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../javax/swing/JComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a UI for a JTextField.&#xA;     *&#xA;     * @param c the text field&#xA;     * @return the UI&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="paintBackground">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="g">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/awt/Graphics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Paints a background for the view.  This will only be&#xA;     * called if isOpaque() on the associated component is&#xA;     * true.  The default is to paint the background color &#xA;     * of the component.&#xA;     *&#xA;     * @param g the graphics context&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../javax/swing/plaf/basic/BasicTextUI.class.xmi#//@classifiers.0/@members.29"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createCaret">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../javax/swing/text/Caret.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Creates the caret for a field.&#xA;     *&#xA;     * @return the caret&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.3"/>
          </typeReference>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="WindowsFieldCaret">
      <members xsi:type="members:Constructor" name="WindowsFieldCaret">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
      </members>
      <members xsi:type="members:ClassMethod" name="adjustVisibility">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="r">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Adjusts the visibility of the caret according to&#xA;&#x9; * the windows feel which seems to be to move the&#xA;&#x9; * caret out into the field by about a quarter of&#xA;&#x9; * a field length if not visible.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../javax/swing/SwingUtilities.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.3/@members.3"/>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.1/@parameters.0"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../javax/swing/SwingUtilities.class.xmi#//@classifiers.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getSelectionPainter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>Highlighter</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../javax/swing/text/Highlighter$HighlightPainter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Gets the painter for the Highlighter.&#xA;&#x9; *&#xA;&#x9; * @return the painter&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="WindowsTextUI.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="WindowsTextUI.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="classifiers:Class" name="SafeScroller">
        <members xsi:type="members:Constructor" name="SafeScroller">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.2"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.0/@parameters.0"/>
            </expression>
          </statements>
          <parameters xsi:type="parameters:OrdinaryParameter" name="r">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameters>
        </members>
        <members xsi:type="members:ClassMethod" name="run">
          <typeReference xsi:type="types:Void"/>
          <annotationsAndModifiers xsi:type="modifiers:Public"/>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="field">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../javax/swing/JTextField.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../javax/swing/JTextField.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../javax/swing/text/DefaultCaret.class.xmi#//@classifiers.0/@members.34"/>
                </child>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="ui">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../javax/swing/plaf/TextUI.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../javax/swing/text/JTextComponent.class.xmi#//@classifiers.0/@members.33"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="dot">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../javax/swing/text/DefaultCaret.class.xmi#//@classifiers.0/@members.69"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="bias">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <comments>// PENDING: We need to expose the bias in DefaultCaret.</comments>
                    <namespaces>Position</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../javax/swing/text/Position$Bias.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../javax/swing/text/Position$Bias.class.xmi#//@classifiers.0/@members.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../javax/swing/text/Position$Bias.class.xmi#//@classifiers.0"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../../../../../../javax/swing/text/Position.class.xmi#//@classifiers.0"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="startRect">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="literals:NullLiteral"/>
                </variable>
              </statements>
              <statements xsi:type="statements:TryBlock">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.3/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../javax/swing/plaf/TextUI.class.xmi#//@classifiers.0/@members.2"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.0/@variable"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.1/@variable"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.2/@variable"/>
                      </next>
                    </value>
                  </expression>
                </statements>
                <catcheBlocks>
                  <parameter name="ble">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../javax/swing/text/BadLocationException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </parameter>
                </catcheBlocks>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="vis">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../../javax/swing/BoundedRangeModel.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../javax/swing/JTextField.class.xmi#//@classifiers.0/@members.38"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="x">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.2">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../java/awt/Rectangle.class.xmi#//@classifiers.0/@members.0"/>
                      </next>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.5/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../../../../javax/swing/BoundedRangeModel.class.xmi#//@classifiers.0/@members.4"/>
                      </next>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="quarterSpan">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:MultiplicativeExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.5/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../../../../javax/swing/BoundedRangeModel.class.xmi#//@classifiers.0/@members.8"/>
                      </next>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                    <multiplicativeOperators xsi:type="operators:Division"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.5/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../../../../javax/swing/BoundedRangeModel.class.xmi#//@classifiers.0/@members.5"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.6/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.7/@variable"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.6/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.5/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../../../javax/swing/BoundedRangeModel.class.xmi#//@classifiers.0/@members.4"/>
                    </next>
                  </children>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.5/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../../../../../javax/swing/BoundedRangeModel.class.xmi#//@classifiers.0/@members.5"/>
                          <arguments xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.6/@variable"/>
                            <children xsi:type="expressions:NestedExpression">
                              <expression xsi:type="expressions:MultiplicativeExpression">
                                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.7/@variable"/>
                                <multiplicativeOperators xsi:type="operators:Multiplication"/>
                              </expression>
                            </children>
                            <additiveOperators xsi:type="operators:Subtraction"/>
                          </arguments>
                        </next>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.6/@variable"/>
                    <children xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.5/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../../../../../javax/swing/BoundedRangeModel.class.xmi#//@classifiers.0/@members.4"/>
                        </next>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.5/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../../../../../javax/swing/BoundedRangeModel.class.xmi#//@classifiers.0/@members.8"/>
                        </next>
                      </children>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </children>
                    <relationOperators xsi:type="operators:GreaterThan"/>
                  </condition>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Condition">
                <comments>// If we scroll, our visual location will have changed,</comments>
                <comments>// but we won't have updated our internal location as</comments>
                <comments>// the model hasn't changed. This checks for the change,</comments>
                <comments>// and if necessary, resets the internal location.</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:TryBlock">
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="endRect">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.9/@statement/@statements.0/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../javax/swing/plaf/TextUI.class.xmi#//@classifiers.0/@members.2"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.0/@variable"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.1/@variable"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.2/@variable"/>
                          </next>
                        </value>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../javax/swing/text/DefaultCaret.class.xmi#//@classifiers.0/@members.36"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.9/@statement/@statements.0/@statements.0/@variable"/>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:ConditionalAndExpression">
                        <children xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.9/@statement/@statements.0/@statements.0/@variable"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </children>
                        <children xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Negate"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.9/@statement/@statements.0/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../../../java/awt/Rectangle.class.xmi#//@classifiers.0/@members.48"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.3/@variable"/>
                            </next>
                          </child>
                        </children>
                      </condition>
                    </statements>
                    <catcheBlocks>
                      <parameter name="ble">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../javax/swing/text/BadLocationException.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                      </parameter>
                    </catcheBlocks>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.1/@statement/@statements.3/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.3/@members.1/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </members>
        <members xsi:type="members:Field" name="r">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/awt/Rectangle.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <annotationsAndModifiers xsi:type="modifiers:Private"/>
        </members>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <implements xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../java/lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </implements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * WindowsFieldCaret has different scrolling behavior than&#xA;     * DefaultCaret.&#xA;     */</comments>
      </annotationsAndModifiers>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../javax/swing/plaf/UIResource.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../javax/swing/text/DefaultCaret.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Provides the Windows look and feel for a text field.  This &#xA; * is basically the following customizations to the default&#xA; * look-and-feel.&#xA; * &lt;ul>&#xA; * &lt;li>The border is beveled (using the standard control color).&#xA; * &lt;li>The background is white by default.&#xA; * &lt;li>The highlight color is a dark color, blue by default.&#xA; * &lt;li>The foreground color is high contrast in the selected&#xA; *  area, white by default.  The unselected foreground is black.&#xA; * &lt;li>The cursor blinks at about 1/2 second intervals.&#xA; * &lt;li>The entire value is selected when focus is gained.&#xA; * &lt;li>Shift-left-arrow and shift-right-arrow extend selection&#xA; * &lt;li>Cntrl-left-arrow and cntrl-right-arrow act like home and &#xA; *   end respectively.&#xA; * &lt;/ul>&#xA; * &lt;p>&#xA; * &lt;strong>Warning:&lt;/strong>&#xA; * Serialized objects of this class will not be compatible with&#xA; * future Swing releases.  The current serialization support is appropriate&#xA; * for short term storage or RMI between applications running the same&#xA; * version of Swing.  A future release of Swing will provide support for&#xA; * long term persistence.&#xA; *&#xA; * @author  Timothy Prinzing&#xA; * @version 1.23 12/19/03&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../../../../../../javax/swing/plaf/basic/BasicTextFieldUI.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
