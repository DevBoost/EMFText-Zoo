<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ParameterizedType.java">
  <comments>/*&#xA; * @(#)ParameterizedType.java&#x9;1.5 04/04/30&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL.  Use is subject to license terms.&#xA; * &#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>javadoc</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="ParameterizedType">
    <members xsi:type="members:InterfaceMethod" name="asClassDoc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the generic class or interface that declared this type.&#xA;     *&#xA;     * @return the generic class or interface that declared this type.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="ClassDoc.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="typeArguments">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the actual type arguments of this type.&#xA;     * For a generic type that is nested within some other generic type&#xA;     * (such as {@code Outer&lt;T>.Inner&lt;S>}),&#xA;     * only the type arguments of the innermost type are included.&#xA;     *&#xA;     * @return the actual type arguments of this type.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="superclassType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the class type that is a direct supertype of this one.&#xA;     * This is the superclass of this type's declaring class,&#xA;     * with type arguments substituted in.&#xA;     * Return null if this is an interface type.&#xA;     *&#xA;     * &lt;p> For example, if this parameterized type is&#xA;     * {@code java.util.ArrayList&lt;String>}, the result will be&#xA;     * {@code java.util.AbstractList&lt;String>}.&#xA;     *&#xA;     * @return the class type that is a direct supertype of this one.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="interfaceTypes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the interface types directly implemented by or extended by this&#xA;     * parameterized type.&#xA;     * These are the interfaces directly implemented or extended&#xA;     * by this type's declaring class or interface,&#xA;     * with type arguments substituted in.&#xA;     * Return an empty array if there are no interfaces.&#xA;     *&#xA;     * &lt;p> For example, the interface extended by&#xA;     * {@code java.util.Set&lt;String>} is {@code java.util.Collection&lt;String>}.&#xA;     *&#xA;     * @return the interface types directly implemented by or extended by this&#xA;     * parameterized type.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="containingType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the type that contains this type as a member.&#xA;     * Return null is this is a top-level type.&#xA;     *&#xA;     * &lt;p> For example, the containing type of&#xA;     * {@code AnInterface.Nested&lt;Number>} is the &lt;code>ClassDoc&lt;/code>&#xA;     * representing {@code AnInterface}, and the containing type of&#xA;     * {@code Outer&lt;String>.Inner&lt;Number>} is the&#xA;     * &lt;code>ParameterizedType&lt;/code> representing {@code Outer&lt;String>}.&#xA;     *&#xA;     * @return the type that contains this type as a member.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Represents an invocation of a generic class or interface.  For example,&#xA; * given the generic interface {@code List&lt;E>}, possible invocations&#xA; * include:&#xA; * &lt;pre>&#xA; *&#x9;{@code List&lt;String>}&#xA; *&#x9;{@code List&lt;T extends Number>}&#xA; *&#x9;{@code List&lt;?>}&#xA; * &lt;/pre>&#xA; * A generic inner class {@code Outer&lt;T>.Inner&lt;S>} might be invoked as:&#xA; * &lt;pre>&#xA; *&#x9;{@code Outer&lt;Number>.Inner&lt;String>}&#xA; * &lt;/pre>&#xA; *&#xA; * @author Scott Seligman&#xA; * @version 1.5 04/04/30&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
