<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Doc.java">
  <comments>/*&#xA; * @(#)Doc.java&#x9;1.15 02/09/29&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>javadoc</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Doc">
    <members xsi:type="members:InterfaceMethod" name="commentText">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the text of the comment for this doc item.&#xA;     * Tags have been removed.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="tags">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return all tags in this Doc item.&#xA;     *&#xA;     * @return an array of {@link Tag} objects containing all tags on &#xA;     *         this Doc item.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Tag.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="tags">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return tags of the specified {@linkplain Tag#kind() kind} in &#xA;     * this Doc item.&#xA;     *&#xA;     * For example, if 'tagname' has value &quot;@serial&quot;, all tags in&#xA;     * this Doc item of kind &quot;@serial&quot; will be returned.&#xA;     *&#xA;     * @param tagname name of the tag kind to search for.&#xA;     * @return an array of Tag containing all tags whose 'kind()'&#xA;     * matches 'tagname'.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Tag.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tagname">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="seeTags">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the see also tags in this Doc item.&#xA;     *&#xA;     * @return an array of SeeTag containing all @see tags.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="SeeTag.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="inlineTags">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return comment as an array of tags. Includes inline tags&#xA;     * (i.e. {&amp;#64link &lt;i>reference&lt;/i>} tags)  but not&#xA;     * block tags.&#xA;     * Each section of plain text is represented as a {@link Tag}&#xA;     * of {@linkplain Tag#kind() kind} &quot;Text&quot;.&#xA;     * Inline tags are represented as a {@link SeeTag} of kind &quot;@see&quot;&#xA;     * and name &quot;@link&quot;.&#xA;     *&#xA;     * @return an array of {@link Tag}s representing the comment&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Tag.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="firstSentenceTags">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the first sentence of the comment as an array of tags.&#xA;     * Includes inline tags&#xA;     * (i.e. {&amp;#64link &lt;i>reference&lt;/i>} tags)  but not&#xA;     * block tags.&#xA;     * Each section of plain text is represented as a {@link Tag}&#xA;     * of {@linkplain Tag#kind() kind} &quot;Text&quot;.&#xA;     * Inline tags are represented as a {@link SeeTag} of kind &quot;@see&quot;&#xA;     * and name &quot;@link&quot;.&#xA;     * &lt;p>&#xA;     * If the locale is English language, the first sentence is&#xA;     * determined by the rules described in the Java Language&#xA;     * Specification (first version): &amp;quot;This sentence ends&#xA;     * at the first period that is followed by a blank, tab, or&#xA;     * line terminator or at the first tagline.&amp;quot;, in&#xA;     * addition a line will be terminated by block&#xA;     * HTML tags: &amp;lt;p&amp;gt;  &amp;lt;/p&amp;gt;  &amp;lt;h1&amp;gt;&#xA;     * &amp;lt;h2&amp;gt;  &amp;lt;h3&amp;gt; &amp;lt;h4&amp;gt;  &amp;lt;h5&amp;gt;  &amp;lt;h6&amp;gt;&#xA;     * &amp;lt;hr&amp;gt;  &amp;lt;pre&amp;gt;  or &amp;lt;/pre&amp;gt;.&#xA;     * If the locale is not English, the sentence end will be&#xA;     * determined by&#xA;     * {@link java.text.BreakIterator#getSentenceInstance(Locale)&#xA;     * java.text.BreakIterator.getSentenceInstance(Locale)}.&#xA;&#xA;     * @return an array of {@link Tag}s representing the&#xA;     * first sentence of the comment&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Tag.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRawCommentText">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the full unprocessed text of the comment.  Tags&#xA;     * are included as text.  Used mainly for store and retrieve&#xA;     * operations like internalization.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setRawCommentText">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Set the full unprocessed text of the comment.  Tags&#xA;     * are included as text.  Used mainly for store and retrieve&#xA;     * operations like internalization.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="rawDocumentation">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="name">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the non-qualified name of this Doc item.&#xA;     *&#xA;     * @return  the name&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="compareTo">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Compares this doc object with the specified object for order.  Returns a&#xA;     * negative integer, zero, or a positive integer as this doc object is less&#xA;     * than, equal to, or greater than the given object.&#xA;     * &lt;p>&#xA;     * This method satisfies the {@link java.lang.Comparable} interface.&#xA;     *&#xA;     * @param   obj  the &lt;code>Object&lt;/code> to be compared.&#xA;     * @return  a negative integer, zero, or a positive integer as this Object&#xA;     *      is less than, equal to, or greater than the given Object.&#xA;     * @exception ClassCastException the specified Object's type prevents it&#xA;     *        from being compared to this Object.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isField">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Is this Doc item a field (but not an enum constant)?&#xA;     *&#xA;     * @return true if it represents a field&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isEnumConstant">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Is this Doc item an enum constant?&#xA;     *&#xA;     * @return true if it represents an enum constant&#xA;     * @since 1.5&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isConstructor">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Is this Doc item a constructor?&#xA;     *&#xA;     * @return true if it represents a constructor&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isMethod">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Is this Doc item a method (but not a constructor or annotation&#xA;     * type element)?&#xA;     *&#xA;     * @return true if it represents a method&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isAnnotationTypeElement">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Is this Doc item an annotation type element?&#xA;     *&#xA;     * @return true if it represents an annotation type element&#xA;     * @since 1.5&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isInterface">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Is this Doc item an interface (but not an annotation type)?&#xA;     *&#xA;     * @return true if it represents an interface&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isException">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Is this Doc item an exception class?&#xA;     *&#xA;     * @return true if it represents an exception&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isError">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Is this Doc item an error class?&#xA;     *&#xA;     * @return true if it represents a error&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isEnum">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Is this Doc item an enum type?&#xA;     *&#xA;     * @return true if it represents an enum type&#xA;     * @since 1.5&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isAnnotationType">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Is this Doc item an annotation type?&#xA;     *&#xA;     * @return true if it represents an annotation type&#xA;     * @since 1.5&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isOrdinaryClass">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Is this Doc item an&#xA;     * &lt;a href=&quot;{@docRoot}/com/sun/javadoc/package-summary.html#class&quot;>ordinary&#xA;     * class&lt;/em>&lt;/a>?&#xA;     * (i.e. not an interface, annotation type, enum, exception, or error)?&#xA;     *&#xA;     * @return true if it represents an ordinary class&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isClass">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Is this Doc item a &#xA;     * &lt;a href=&quot;{@docRoot}/com/sun/javadoc/package-summary.html#class&quot;>class&lt;/a>&#xA;     * (and not an interface or annotation type)?&#xA;     * This includes ordinary classes, enums, errors and exceptions.&#xA;     *&#xA;     * @return true if it represents a class&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isIncluded">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Return true if this Doc item is &#xA;     * &lt;a href=&quot;{@docRoot}/com/sun/javadoc/package-summary.html#included&quot;>included&lt;/a>&#xA;     * in the result set.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="position">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the source position of the first line of the &#xA;     * corresponding declaration, or null if &#xA;     * no position is available.  A default constructor returns&#xA;     * null because it has no location in the source file.&#xA;     *&#xA;     * @since 1.4&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="SourcePosition.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Represents Java language constructs (package, class, constructor,&#xA; * method, field) which have comments and have been processed by this &#xA; * run of javadoc.  All Doc objects are unique, that is, they &#xA; * are == comparable.&#xA; *&#xA; * @since JDK1.2&#xA; * @author Robert Field&#xA; * @author Scott Seligman (generics, enums, annotations)&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <typeArguments xsi:type="generics:QualifiedTypeArgument">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </typeArguments>
        <target xsi:type="classifiers:Interface" href="../../../java/lang/Comparable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
