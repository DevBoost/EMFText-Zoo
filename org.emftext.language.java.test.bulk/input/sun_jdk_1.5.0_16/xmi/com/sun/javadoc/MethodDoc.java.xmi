<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="MethodDoc.java">
  <comments>/*&#xA; * @(#)MethodDoc.java&#x9;1.11 04/05/20&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>javadoc</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="MethodDoc">
    <members xsi:type="members:InterfaceMethod" name="isAbstract">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Return true if this method is abstract&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="returnType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Get return type.&#xA;     *&#xA;     * @return the return type of this method, null if it&#xA;     * is a constructor.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="overriddenClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the class containing the method that this method overrides.&#xA;     *&#xA;     * &lt;p> &lt;i>The &lt;code>overriddenClass&lt;/code> method cannot&#xA;     * accommodate certain generic type constructs.  The&#xA;     * &lt;code>overriddenType&lt;/code> method should be used instead.&lt;/i>&#xA;     *&#xA;     * @return a ClassDoc representing the superclass&#xA;     *         defining a method that this method overrides, or null if&#xA;     *         this method does not override.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="ClassDoc.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="overriddenType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the type containing the method that this method overrides.&#xA;     * It may be a &lt;code>ClassDoc&lt;/code> or a &lt;code>ParameterizedType&lt;/code>.&#xA;     *&#xA;     * @return the supertype whose method is overridden, or null if this&#xA;     *         method does not override another in a superclass&#xA;     * @since 1.5&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="overriddenMethod">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0">
          <comments>/**&#xA;     * Return the method that this method overrides.&#xA;     *&#xA;     * @return a MethodDoc representing a method definition&#xA;     * in a superclass this method overrides, null if&#xA;     * this method does not override.&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="overrides">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Tests whether this method overrides another.&#xA;     * The overridden method may be one declared in a superclass or&#xA;     * a superinterface (unlike {@link #overriddenMethod()}).&#xA;     *&#xA;     * &lt;p> When a non-abstract method overrides an abstract one, it is&#xA;     * also said to &lt;i>implement&lt;/i> the other.&#xA;     *&#xA;     * @param meth  the other method to examine&#xA;     * @return &lt;tt>true&lt;/tt> if this method overrides the other&#xA;     * @since 1.5&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="meth">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Represents a method of a java class.&#xA; *&#xA; * @since JDK1.2&#xA; * @author Robert Field&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="ExecutableMemberDoc.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
