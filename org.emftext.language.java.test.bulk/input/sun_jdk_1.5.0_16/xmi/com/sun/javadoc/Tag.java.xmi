<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Tag.java">
  <comments>/*&#xA; * @(#)Tag.java&#x9;1.12 02/10/15&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>javadoc</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Tag">
    <members xsi:type="members:InterfaceMethod" name="name">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the name of this tag.  The name is the string &#xA;     * starting with &quot;@&quot; that is used in a doc comment, such as &#xA;     * &lt;code>@return&lt;/code>.  For inline tags, such as &#xA;     * &lt;code>{&amp;#064;link}&lt;/code>, the curly brackets &#xA;     * are not part of the name, so in this example the name &#xA;     * would be simply &lt;code>@link&lt;/code>.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="holder">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the containing {@link Doc} of this Tag element.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Doc.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="kind">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the kind of this tag.&#xA;     * similar or synonymous tags.  For most tags, &#xA;     * &lt;code>kind()&amp;nbsp;==&amp;nbsp;name()&lt;/code>;&#xA;     * the following table lists those cases where there is more &#xA;     * than one tag of a given kind:&#xA;     * &lt;p>&#xA;     * &lt;table border=&quot;1&quot; cellpadding=&quot;4&quot; cellspacing=&quot;0&quot;>&#xA;     * &lt;tr>&lt;th>&lt;tt> kind()  &lt;/th>  &lt;th>&lt;tt> name()      &lt;/th>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;tt> @throws &lt;/td>  &lt;td>&lt;tt> @throws     &lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;tt> @throws &lt;/td>  &lt;td>&lt;tt> @exception  &lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;tt> @see    &lt;/td>  &lt;td>&lt;tt> @see        &lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;tt> @see    &lt;/td>  &lt;td>&lt;tt> @link       &lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;tt> @see    &lt;/td>  &lt;td>&lt;tt> @linkplain  &lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;tt> @serial &lt;/td>  &lt;td>&lt;tt> @serial     &lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;tt> @serial &lt;/td>  &lt;td>&lt;tt> @serialData &lt;/td>&lt;/tr>&#xA;     * &lt;/table>&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="text">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the text of this tag, that is, portion beyond tag name.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Convert this object to a string.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="inlineTags">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0">
          <comments>/**&#xA;     * For a documentation comment with embedded &lt;code>{&amp;#064;link}&lt;/code>&#xA;     * tags, return an array of &lt;code>Tag&lt;/code> objects.  The entire&#xA;     * doc comment is broken down into strings separated by &#xA;     * &lt;code>{&amp;#064;link}&lt;/code> tags, where each successive element&#xA;     * of the array represents either a string or&#xA;     * &lt;code>{&amp;#064;link}&lt;/code> tag, in order, from start to end.  &#xA;     * Each string is represented by a &lt;code>Tag&lt;/code> object of &#xA;     * name &quot;Text&quot;, where {@link #text()} returns the string.  Each &#xA;     * &lt;code>{&amp;#064;link}&lt;/code> tag is represented by a &#xA;     * {@link SeeTag} of name &quot;@link&quot; and kind &quot;@see&quot;.&#xA;     * For example, given the following comment&#xA;     * tag:&#xA;     * &lt;p>&#xA;     *  &lt;code>This is a {&amp;#064;link Doc commentlabel} example.&lt;/code>&#xA;     * &lt;p>&#xA;     * return an array of Tag objects:&#xA;     * &lt;ul>&#xA;     *    &lt;li> tags[0] is a {@link Tag} with name &quot;Text&quot; and text consisting&#xA;     *         of &quot;This is a &quot; &#xA;     *    &lt;li> tags[1] is a {@link SeeTag} with name &quot;@link&quot;, referenced &#xA;     *         class &lt;code>Doc&lt;/code> and label &quot;commentlabel&quot;&#xA;     *    &lt;li> tags[2] is a {@link Tag} with name &quot;Text&quot; and text consisting&#xA;     *         of &quot; example.&quot; &#xA;     * &lt;/ul>&#xA;     *&#xA;     * @return Tag[] array of tags&#xA;     * @see ParamTag&#xA;     * @see ThrowsTag&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="firstSentenceTags">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0">
          <comments>/**&#xA;     * Return the first sentence of the comment as an array of tags. &#xA;     * Includes inline tags &#xA;     * (i.e. {&amp;#64link &lt;i>reference&lt;/i>} tags)  but not&#xA;     * block tags.  &#xA;     * Each section of plain text is represented as a {@link Tag} &#xA;     * of kind &quot;Text&quot;.&#xA;     * Inline tags are represented as a {@link SeeTag} of kind &quot;@link&quot;.&#xA;     * If the locale is English language, the first sentence is &#xA;     * determined by the rules described in the Java Language &#xA;     * Specification (first version): &amp;quot;This sentence ends&#xA;     * at the first period that is followed by a blank, tab, or&#xA;     * line terminator or at the first tagline.&amp;quot;, in &#xA;     * addition a line will be terminated by paragraph and&#xA;     * section terminating HTML tags: &amp;lt;p&amp;gt;  &amp;lt;/p&amp;gt;  &amp;lt;h1&amp;gt; &#xA;     * &amp;lt;h2&amp;gt;  &amp;lt;h3&amp;gt; &amp;lt;h4&amp;gt;  &amp;lt;h5&amp;gt;  &amp;lt;h6&amp;gt; &#xA;     * &amp;lt;hr&amp;gt;  &amp;lt;pre&amp;gt;  or &amp;lt;/pre&amp;gt;.&#xA;     * If the locale is not English, the sentence end will be&#xA;     * determined by&#xA;     * {@link java.text.BreakIterator#getSentenceInstance(Locale) &#xA;     * java.text.BreakIterator.getSentenceInstance(Locale)}.&#xA;     *&#xA;     * @return an array of {@link Tag} objects representing the &#xA;     *         first sentence of the comment&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="position">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="SourcePosition.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return the source position of this tag.&#xA;     * @return the source position of this tag.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Represents a simple documentation tag, such as @since, @author, @version.&#xA; * Given a tag (e.g. &quot;@since 1.2&quot;), holds tag name (e.g. &quot;@since&quot;)&#xA; * and tag text (e.g. &quot;1.2&quot;).  Tags with structure or which require&#xA; * special processing are handled by subclasses such as ParamTag &#xA; * (for @param), SeeTag (for @see and {&amp;#064;link}), and ThrowsTag&#xA; * (for @throws).&#xA; *&#xA; * @author Robert Field&#xA; * @author Atul M Dambalkar&#xA; * @see SeeTag&#xA; * @see ParamTag&#xA; * @see ThrowsTag&#xA; * @see SerialFieldTag&#xA; * @see Doc#tags()&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
