<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Doclet.java">
  <comments>/*&#xA; * @(#)Doclet.java&#x9;1.15 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>javadoc</namespaces>
  <classifiers xsi:type="classifiers:Class" name="Doclet">
    <members xsi:type="members:ClassMethod" name="start">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="root">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="RootDoc.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Generate documentation here.&#xA;     * This method is required for all doclets.&#xA;     *&#xA;     * @return true on success.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="optionLength">
      <comments>// default is option unknown</comments>
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="option">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Check for doclet-added options.  Returns the number of &#xA;     * arguments you must specify on the command line for the&#xA;     * given option.  For example, &quot;-d docs&quot; would return 2.&#xA;     * &lt;P>&#xA;     * This method is required if the doclet contains any options.&#xA;     * If this method is missing, Javadoc will print an invalid flag &#xA;     * error for every option.&#xA;     *&#xA;     * @return number of arguments on the command line for an option&#xA;     *         including the option name itself.  Zero return means&#xA;     *         option not known.  Negative value means error occurred.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="validOptions">
      <comments>// default is options are valid</comments>
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="options">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsAfter/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="reporter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DocErrorReporter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Check that options have the correct arguments.&#xA;     * &lt;P>&#xA;     * This method is not required, but is recommended,&#xA;     * as every option will be considered valid if this method&#xA;     * is not present.  It will default gracefully (to true) &#xA;     * if absent.&#xA;     * &lt;P>&#xA;     * Printing option related error messages (using the provided&#xA;     * DocErrorReporter) is the responsibility of this method.&#xA;     *&#xA;     * @return true if the options are valid.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="languageVersion">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Enumeration" href="LanguageVersion.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return the version of the Java Programming Language supported&#xA;     * by this doclet.&#xA;     * &lt;p>&#xA;     * This method is required by any doclet supporting a language version&#xA;     * newer than 1.1.&#xA;     *&#xA;     * @return&#x9;the language version supported by this doclet.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:EnumConstant" href="LanguageVersion.class.xmi#//@classifiers.0/@constants.0"/>
          </next>
          <target xsi:type="classifiers:Enumeration" href="LanguageVersion.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This is an example of a starting class for a doclet,&#xA; * showing the entry-point methods.  A starting class must &#xA; * import com.sun.javadoc.* and implement the &#xA; * &lt;code>start(RootDoc)&lt;/code> method, as described in the &#xA; * &lt;a href=&quot;package-summary.html#package_description&quot;>package &#xA; * description&lt;/a>.  If the doclet takes command line options, &#xA; * it must also implement &lt;code>optionLength&lt;/code> and &#xA; * &lt;code>validOptions&lt;/code>.&#xA; *&#xA; * &lt;p> A doclet supporting the language features added since 1.1&#xA; * (such as generics and annotations) should indicate this&#xA; * by implementing &lt;code>languageVersion&lt;/code>.  In the absence of&#xA; * this the doclet should not invoke any of the Doclet API methods&#xA; * added since 1.5, and&#xA; * the results of several other methods are modified so as&#xA; * to conceal the new constructs (such as type parameters) from&#xA; * the doclet.&#xA; *&#xA; * &lt;p> To start the doclet, pass&#xA; * &lt;code>-doclet&lt;/code> followed by the fully-qualified&#xA; * name of the starting class on the javadoc tool command line.&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
