<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ExecutableMemberDoc.java">
  <comments>/*&#xA; * @(#)ExecutableMemberDoc.java&#x9;1.8 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>javadoc</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="ExecutableMemberDoc">
    <members xsi:type="members:InterfaceMethod" name="thrownExceptions">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return exceptions this method or constructor throws.&#xA;     * If the type of the exception is a type variable, return the&#xA;     * &lt;code>ClassDoc&lt;/code> of its erasure.&#xA;     *&#xA;     * &lt;p> &lt;i>The &lt;code>thrownExceptions&lt;/code> method cannot&#xA;     * accommodate certain generic type constructs.  The&#xA;     * &lt;code>thrownExceptionTypes&lt;/code> method should be used&#xA;     * instead.&lt;/i>&#xA;     *&#xA;     * @return an array of ClassDoc[] representing the exceptions&#xA;     *         thrown by this method.&#xA;     * @see #thrownExceptionTypes&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="ClassDoc.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="thrownExceptionTypes">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return exceptions this method or constructor throws.&#xA;     *&#xA;     * @return an array representing the exceptions thrown by this method.&#xA;     *         Each array element is either a &lt;code>ClassDoc&lt;/code> or a&#xA;     *         &lt;code>TypeVariable&lt;/code>.&#xA;     * @since 1.5&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isNative">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Return true if this method is native&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isSynchronized">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Return true if this method is synchronized&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isVarArgs">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return true if this method was declared to take a variable number&#xA;     * of arguments.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="parameters">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Get argument information.&#xA;     *&#xA;     * @see Parameter&#xA;     *&#xA;     * @return an array of Parameter, one element per argument&#xA;     * in the order the arguments are present.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Parameter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="throwsTags">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the throws tags in this method.&#xA;     *&#xA;     * @return an array of ThrowTag containing all &lt;code>&amp;#64exception&lt;/code>&#xA;     * and &lt;code>&amp;#64throws&lt;/code> tags.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="ThrowsTag.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="paramTags">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the param tags in this method, excluding the type&#xA;     * parameter tags.&#xA;     *&#xA;     * @return an array of ParamTag containing all &lt;code>&amp;#64param&lt;/code> tags&#xA;     * corresponding to the parameters of this method.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="ParamTag.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="typeParamTags">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the type parameter tags in this method.&#xA;     *&#xA;     * @return an array of ParamTag containing all &lt;code>&amp;#64param&lt;/code> tags&#xA;     * corresponding to the type parameters of this method.&#xA;     * @since 1.5&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="ParamTag.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="signature">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Get the signature. It is the parameter list, type is qualified.&#xA;     *      For instance, for a method &lt;code>mymethod(String x, int y)&lt;/code>,&#xA;     *      it will return &lt;code>(java.lang.String,int)&lt;/code>.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="flatSignature">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * get flat signature.  all types are not qualified.&#xA;     *      return a String, which is the flat signiture of this member.&#xA;     *      It is the parameter list, type is not qualified.&#xA;     *      For instance, for a method &lt;code>mymethod(String x, int y)&lt;/code>,&#xA;     *      it will return &lt;code>(String, int)&lt;/code>.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="typeParameters">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Return the formal type parameters of this method or constructor.&#xA;     * Return an empty array if this method or constructor is not generic.&#xA;     *&#xA;     * @return the formal type parameters of this method or constructor.&#xA;     * @since 1.5&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="TypeVariable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Represents a method or constructor of a java class.&#xA; *&#xA; * @since JDK1.2&#xA; * @author Robert Field&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="MemberDoc.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
