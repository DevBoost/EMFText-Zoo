<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="SeeTag.java">
  <comments>/*&#xA; * @(#)SeeTag.java&#x9;1.9 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>javadoc</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="SeeTag">
    <members xsi:type="members:InterfaceMethod" name="label">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Get the label of the &lt;code>@see&lt;/code> tag.&#xA;     * Return null if no label is present.&#xA;     * For example, for:&#xA;     * &lt;p>&#xA;     *    &amp;nbsp;&amp;nbsp;&lt;code>@see String#trim() the trim method&lt;/code>&#xA;     * &lt;/p>&#xA;     * return &quot;the trim method&quot;.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="referencedPackage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="PackageDoc.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the package doc when &lt;code>@see&lt;/code> references only a package.&#xA;     * Return null if the package cannot be found, or if&#xA;     * &lt;code>@see&lt;/code> references any other element (class, &#xA;     * interface, field, constructor, method) or non-element.&#xA;     * For example, for:&#xA;     * &lt;p>&#xA;     *   &amp;nbsp;&amp;nbsp;&lt;code>@see java.lang&lt;/code>&#xA;     * &lt;/p>&#xA;     * return the &lt;code>PackageDoc&lt;/code> for &lt;code>java.lang&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="referencedClassName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Get the class or interface name of the &lt;code>@see&lt;/code> reference.&#xA;     * The name is fully qualified if the name specified in the&#xA;     * original &lt;code>@see&lt;/code> tag was fully qualified, or if the class&#xA;     * or interface can be found; otherwise it is unqualified.&#xA;     * If &lt;code>@see&lt;/code> references only a package name, then return&#xA;     * the package name instead.&#xA;     * For example, for:&#xA;     * &lt;p>&#xA;     *   &amp;nbsp;&amp;nbsp;&lt;code>@see String#valueOf(java.lang.Object)&lt;/code>&#xA;     * &lt;/p>&#xA;     * return &quot;java.lang.String&quot;.&#xA;     * For &quot;&lt;code>@see java.lang&lt;/code>&quot;, return &quot;java.lang&quot;.&#xA;     * Return null if &lt;code>@see&lt;/code> references a non-element, such as&#xA;     * &lt;code>@see &amp;lt;a href=&quot;java.sun.com&quot;&amp;gt;&lt;/code>.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="referencedClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Get the class doc referenced by the class name part of @see.&#xA;     * Return null if the class cannot be found.&#xA;     * For example, for:&#xA;     * &lt;p>&#xA;     *   &amp;nbsp;&amp;nbsp;&lt;code>@see String#valueOf(java.lang.Object)&lt;/code>&#xA;     * &lt;/p>&#xA;     * return the &lt;code>ClassDoc&lt;/code> for &lt;code>java.lang.String&lt;/code>.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="ClassDoc.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="referencedMemberName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Get the field, constructor or method substring of the &lt;code>@see&lt;/code>&#xA;     * reference. Return null if the reference is to any other&#xA;     * element or to any non-element.&#xA;     * References to member classes (nested classes) return null.&#xA;     * For example, for:&#xA;     * &lt;p>&#xA;     *   &amp;nbsp;&amp;nbsp;&lt;code>@see String#startsWith(String)&lt;/code>&#xA;     * &lt;/p>&#xA;     * return &quot;startsWith(String)&quot;.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="referencedMember">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Get the member doc for the field, constructor or method&#xA;     * referenced by &lt;code>@see&lt;/code>. Return null if the member cannot&#xA;     * be found or if the reference is to any other element or to any &#xA;     * non-element.&#xA;     * References to member classes (nested classes) return null.&#xA;     * For example, for:&#xA;     * &lt;p>&#xA;     *   &amp;nbsp;&amp;nbsp;&lt;code>@see String#startsWith(java.lang.String)&lt;/code>&#xA;     * &lt;/p>&#xA;     * return the &lt;code>MethodDoc&lt;/code> for &lt;code>startsWith&lt;/code>.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="MemberDoc.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Represents a user-defined cross-reference to related documentation.&#xA; * The tag can reference a package, class or member, or can hold&#xA; * plain text.  (The plain text might be a reference&#xA; * to something not online, such as a printed book, or be a hard-coded&#xA; * HTML link.)  The reference can either be inline with the comment,&#xA; * using &lt;code>&amp;#123;@link}&lt;/code>, or a separate block comment, &#xA; * using &lt;code>@see&lt;/code>.&#xA; * Method &lt;code>name()&lt;/code> returns &quot;@link&quot; (no curly braces) or&#xA; * &quot;@see&quot;, depending on the tag.&#xA; * Method &lt;code>kind()&lt;/code> returns &quot;@see&quot; for both tags.&#xA; *&#xA; * @version 06/10/97&#xA; * @author Kaiyang Liu (original)&#xA; * @author Robert Field (rewrite)&#xA; * @author Atul M Dambalkar&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Tag.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
