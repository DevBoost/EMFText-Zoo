<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../java.ecore#/16" name="PIHandler.java">
  <comments>/*&#xA; * @(#)PIHandler.java&#x9;1.25 04/06/21&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>corba</namespaces>
  <namespaces>se</namespaces>
  <namespaces>spi</namespaces>
  <namespaces>protocol</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableInterceptor</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/PortableInterceptor/ObjectReferenceTemplate.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableInterceptor</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/PortableInterceptor/Interceptor.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableInterceptor</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/PortableInterceptor/Current.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableInterceptor</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/PortableInterceptor/PolicyFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableInterceptor</namespaces>
    <namespaces>ORBInitInfoPackage</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/PortableInterceptor/ORBInitInfoPackage/DuplicateName.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/NVList.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/Policy.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/PolicyError.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/portable/RemarshalException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>oa</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../oa/ObjectAdapter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>protocol</namespaces>
    <classifier xsi:type="classifiers:Interface" href="CorbaMessageMediator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>ior</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../ior/ObjectKeyTemplate.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <comments>// XXX These need to go away.</comments>
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>corba</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../impl/corba/RequestImpl.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>protocol</namespaces>
    <namespaces>giopmsgheaders</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../impl/protocol/giopmsgheaders/ReplyMessage.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="PIHandler">
    <members xsi:type="members:InterfaceMethod" name="initialize">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Complete the initialization of the PIHandler.  This will execute the methods&#xA;    * on the ORBInitializers, if any are defined.  This must be done here so that&#xA;    * the ORB can obtain the PIHandler BEFORE the ORBInitializers run, since they&#xA;    * will need access to the PIHandler through the ORB.&#xA;    */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="destroyInterceptors">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="objectAdapterCreated">
      <typeReference xsi:type="types:Void">
        <comments>/*&#xA;     ****************************&#xA;     * IOR interceptor PI hooks&#xA;     ****************************/</comments>
        <comments>/**&#xA;     * Called when a new object adapter is created.  &#xA;     *&#xA;     * @param oa The adapter associated with the interceptors to be&#xA;     *   invoked.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oa">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../oa/ObjectAdapter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="adapterManagerStateChanged">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Called whenever a state change occurs in an adapter manager.&#xA;     *&#xA;     * @param managerId managerId The adapter manager id&#xA;     * @param newState newState The new state of the adapter manager,&#xA;     * and by implication of all object adapters managed by this manager.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="managerId">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newState">
        <typeReference xsi:type="types:Short"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="adapterStateChanged">
      <typeReference xsi:type="types:Void">
        <comments>/** Called whenever a state change occurs in an object adapter that&#xA;    * was not caused by an adapter manager state change.&#xA;    *&#xA;    * @param templates The templates that are changing state.&#xA;    * @param newState The new state of the adapters identified by the &#xA;    * templates.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="templates">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/PortableInterceptor/ObjectReferenceTemplate.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newState">
        <typeReference xsi:type="types:Short"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="disableInterceptorsThisThread">
      <typeReference xsi:type="types:Void">
        <comments>/*&#xA;     *****************&#xA;     * Client PI hooks&#xA;     *****************/</comments>
        <comments>/**&#xA;     * Called for pseudo-ops to temporarily disable portable interceptor&#xA;     * hooks for calls on this thread.  Keeps track of the number of&#xA;     * times this is called and increments the disabledCount.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="enableInterceptorsThisThread">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Called for pseudo-ops to re-enable portable interceptor&#xA;     * hooks for calls on this thread.  Decrements the disabledCount.&#xA;     * If disabledCount is 0, interceptors are re-enabled.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="invokeClientPIStartingPoint">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Called when the send_request or send_poll portable interception point&#xA;     * is to be invoked for all appropriate client-side request interceptors.&#xA;     *&#xA;     * @exception RemarhsalException - Thrown when this request needs to&#xA;     *     be retried.&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/portable/RemarshalException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="invokeClientPIEndingPoint">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Called when the appropriate client ending interception point is&#xA;     * to be invoked for all apporpriate client-side request interceptors.&#xA;     *&#xA;     * @param replyStatus One of the constants in iiop.messages.ReplyMessage&#xA;     *     indicating which reply status to set.&#xA;     * @param exception The exception before ending interception points have&#xA;     *     been invoked, or null if no exception at the moment.&#xA;     * @return The exception to be thrown, after having gone through&#xA;     *     all ending points, or null if there is no exception to be&#xA;     *     thrown.  Note that this exception can be either the same or&#xA;     *     different from the exception set using setClientPIException.&#xA;     *     There are four possible return types: null (no exception),&#xA;     *     SystemException, UserException, or RemarshalException.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="replyStatus">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exception">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="initiateClientPIRequest">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Invoked when a request is about to be created.  Must be called before&#xA;     * any of the setClientPI* methods so that a new info object can be&#xA;     * prepared for information collection.&#xA;     *&#xA;     * @param diiRequest True if this is to be a DII request, or false if it&#xA;     *     is a &quot;normal&quot; request.  In the DII case, initiateClientPIRequest&#xA;     *     is called twice and we need to ignore the second one.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="diiRequest">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="cleanupClientPIRequest">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Invoked when a request is about to be cleaned up.  Must be called&#xA;     * after ending points are called so that the info object on the stack&#xA;     * can be deinitialized and popped from the stack at the appropriate&#xA;     * time.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setClientPIInfo">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Notifies PI of additional information for client-side interceptors.&#xA;     * PI will use this information as a source of information for the&#xA;     * ClientRequestInfo object.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="requestImpl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../impl/corba/RequestImpl.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setClientPIInfo">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Notify PI of the MessageMediator for the request.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="messageMediator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="CorbaMessageMediator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="invokeServerPIStartingPoint">
      <typeReference xsi:type="types:Void">
        <comments>/*&#xA;     *****************&#xA;     * Server PI hooks&#xA;     *****************/</comments>
        <comments>/**&#xA;     * Called when the appropriate server starting interception point is&#xA;     * to be invoked for all appropriate server-side request interceptors.&#xA;     *&#xA;     * @throws ForwardException Thrown if an interceptor raises&#xA;     *     ForwardRequest.  This is an unchecked exception so that we need&#xA;     *     not modify the entire execution path to declare throwing&#xA;     *     ForwardException.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="invokeServerPIIntermediatePoint">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Called when the appropriate server intermediate interception point is&#xA;     * to be invoked for all appropriate server-side request interceptors.&#xA;     *&#xA;     * @throws ForwardException Thrown if an interceptor raises&#xA;     *     ForwardRequest.  This is an unchecked exception so that we need&#xA;     *     not modify the entire execution path to declare throwing&#xA;     *     ForwardException.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="invokeServerPIEndingPoint">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Called when the appropriate server ending interception point is&#xA;     * to be invoked for all appropriate server-side request interceptors.&#xA;     *&#xA;     * @param replyMessage The iiop.messages.ReplyMessage containing the&#xA;     *     reply status.  &#xA;     * @throws ForwardException Thrown if an interceptor raises&#xA;     *     ForwardRequest.  This is an unchecked exception so that we need&#xA;     *     not modify the entire execution path to declare throwing&#xA;     *     ForwardException.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="replyMessage">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../impl/protocol/giopmsgheaders/ReplyMessage.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="initializeServerPIInfo">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Notifies PI to start a new server request and set initial&#xA;     * information for server-side interceptors.&#xA;     * PI will use this information as a source of information for the&#xA;     * ServerRequestInfo object.  poaimpl is declared as an Object so that&#xA;     * we need not introduce a dependency on the POA package.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="request">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="CorbaMessageMediator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oa">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../oa/ObjectAdapter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="objectId">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oktemp">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../ior/ObjectKeyTemplate.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setServerPIInfo">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Notifies PI of additional information reqired for ServerRequestInfo.&#xA;     *&#xA;     * @param servant The servant.  This is java.lang.Object because in the&#xA;     *     POA case, this will be a org.omg.PortableServer.Servant whereas&#xA;     *     in the ServerRequestDispatcher case this will be an ObjectImpl.&#xA;     * @param targetMostDerivedInterface.  The most derived interface.  This&#xA;     *     is passed in instead of calculated when needed because it requires&#xA;     *     extra information in the POA case that we didn't want to bother&#xA;     *     creating extra methods for to pass in.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="servant">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>lang</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="targetMostDerivedInterface">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setServerPIInfo">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Notifies PI of additional information required for ServerRequestInfo.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exception">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setServerPIInfo">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Notifies PI of additional information for server-side interceptors.&#xA;     * PI will use this information as a source of information for the&#xA;     * ServerRequestInfo object.  These are the arguments for a DSI request.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arguments">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/NVList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setServerPIExceptionInfo">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Notifies PI of additional information for server-side interceptors.&#xA;     * PI will use this information as a source of information for the&#xA;     * ServerRequestInfo object.  This is the exception of a DSI request.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exception">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setServerPIInfo">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Notifies PI of additional information for server-side interceptors.&#xA;     * PI will use this information as a source of information for the&#xA;     * ServerRequestInfo object.  This is the result of a DSI request.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="result">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="cleanupServerPIRequest">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Invoked when a request is about to be cleaned up.  Must be called&#xA;     * after ending points are called so that the info object on the stack&#xA;     * can be deinitialized and popped from the stack at the appropriate&#xA;     * time.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_policy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/Policy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="val">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/PolicyError.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="register_interceptor">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="interceptor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/PortableInterceptor/Interceptor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../org/omg/PortableInterceptor/ORBInitInfoPackage/DuplicateName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPICurrent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/PortableInterceptor/Current.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="registerPolicyFactory">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="factory">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/PortableInterceptor/PolicyFactory.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="allocateServerRequestId">
      <typeReference xsi:type="types:Int"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** This interface defines the PI interface that is used to interface the rest of the&#xA; * ORB to the PI implementation.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
