<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16" name="PresentationManager.java">
  <comments>/*&#xA; * @(#)PresentationManager.java&#x9;1.9 04/06/21&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>corba</namespaces>
  <namespaces>se</namespaces>
  <namespaces>spi</namespaces>
  <namespaces>presentation</namespaces>
  <namespaces>rmi</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../java/util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>reflect</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../java/lang/reflect/Method.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>reflect</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../java/lang/reflect/InvocationHandler.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>rmi</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../javax/rmi/CORBA/Tie.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>orb</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../orb/ORB.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>orbutil</namespaces>
    <namespaces>proxy</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../orbutil/proxy/InvocationHandlerFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="PresentationManager">
    <members xsi:type="classifiers:Interface" name="StubFactoryFactory">
      <members xsi:type="members:InterfaceMethod" name="getStubName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <comments>/** Return the standard name of a stub (according to the RMI-IIOP specification&#xA;&#x9; * and rmic).  This is needed so that the name of a stub is known for&#xA;&#x9; * standalone clients of the app server.&#xA;&#x9; */</comments>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="className">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:InterfaceMethod" name="createStubFactory">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <comments>/** Create a stub factory for stubs for the interface whose type is given by&#xA;&#x9; * className.  className may identify either an IDL interface or an RMI-IIOP&#xA;&#x9; * interface.  &#xA;&#x9; * @param className The name of the remote interface as a Java class name.&#xA;&#x9; * @param isIDLStub True if className identifies an IDL stub, else false.&#xA;&#x9; * @param remoteCodeBase The CodeBase to use for loading Stub classes, if&#xA;&#x9; * necessary (may be null or unused).&#xA;&#x9; * @param expectedClass The expected stub type (may be null or unused).&#xA;&#x9; * @param classLoader The classLoader to use (may be null).&#xA;&#x9; */</comments>
          <namespaces>PresentationManager</namespaces>
          <classifierReferences target="//@classifiers.0/@members.1"/>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="className">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="isIDLStub">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="remoteCodeBase">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="expectedClass">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="classLoader">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:InterfaceMethod" name="getTie">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <comments>/** Return a Tie for the given class.&#xA;&#x9; */</comments>
            <target xsi:type="classifiers:Interface" href="../../../../../../../javax/rmi/CORBA/Tie.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="cls">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:InterfaceMethod" name="createsDynamicStubs">
        <typeReference xsi:type="types:Boolean">
          <comments>/** Return whether or not this StubFactoryFactory creates StubFactory&#xA;&#x9; * instances that create dynamic stubs and ties.  At the top level, &#xA;&#x9; * true indicates that rmic -iiop is not needed for generating stubs&#xA;&#x9; * or ties.&#xA;&#x9; */</comments>
        </typeReference>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Creates StubFactory and Tie instances.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="classifiers:Interface" name="StubFactory">
      <members xsi:type="members:InterfaceMethod" name="makeStub">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <comments>/** Create a new dynamic stub.  It has the type that was&#xA;&#x9; * used to create this factory.&#xA;&#x9; */</comments>
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/omg/CORBA/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:InterfaceMethod" name="getTypeIds">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <comments>/** Return the repository ID information for all Stubs&#xA;&#x9; * created by this stub factory.&#xA;&#x9; */</comments>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Creates the actual stub needed for RMI-IIOP remote&#xA;     * references.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="classifiers:Interface" name="ClassData">
      <members xsi:type="members:InterfaceMethod" name="getMyClass">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <comments>/** Get the class used to create this ClassData instance&#xA;&#x9; */</comments>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:InterfaceMethod" name="getIDLNameTranslator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <comments>/** Get the IDLNameTranslator for the class used to create&#xA;&#x9; * this ClassData instance.&#xA;&#x9; */</comments>
            <target xsi:type="classifiers:Interface" href="IDLNameTranslator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:InterfaceMethod" name="getTypeIds">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <comments>/** Return the array of repository IDs for all of the remote&#xA;&#x9; * interfaces implemented by this class.&#xA;&#x9; */</comments>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </members>
      <members xsi:type="members:InterfaceMethod" name="getInvocationHandlerFactory">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <comments>/** Get the InvocationHandlerFactory that is used to create&#xA;&#x9; * an InvocationHandler for dynamic stubs of the type of the&#xA;&#x9; * ClassData.  &#xA;&#x9; */</comments>
            <target xsi:type="classifiers:Interface" href="../../orbutil/proxy/InvocationHandlerFactory.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:InterfaceMethod" name="getDictionary">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <comments>/** Get the dictionary for this ClassData instance.&#xA;&#x9; * This is used to hold class-specific information for a Class&#xA;&#x9; * in the class data.  This avoids the need to create other&#xA;&#x9; * caches for accessing the information.&#xA;&#x9; */</comments>
            <target xsi:type="classifiers:Interface" href="../../../../../../../java/util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getClassData">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.2">
          <comments>/** Get the ClassData for a particular class.&#xA;     * This class may be an implementation class, in which &#xA;     * case the IDLNameTranslator handles all Remote interfaces implemented by &#xA;     * the class.  If the class implements more than one remote interface, and not &#xA;     * all of the remote interfaces are related by inheritance, then the type &#xA;     * IDs have the implementation class as element 0.  &#xA;     */</comments>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cls">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDynamicMethodMarshaller">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** Given a particular method, return a DynamicMethodMarshaller &#xA;     * for that method.  This is used for dynamic stubs and ties.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="DynamicMethodMarshaller.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="method">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/reflect/Method.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStubFactoryFactory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.0">
          <comments>/** Return the registered StubFactoryFactory.&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="isDynamic">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setStubFactoryFactory">
      <typeReference xsi:type="types:Void">
        <comments>/** Register the StubFactoryFactory.  Note that&#xA;     * a static StubFactoryFactory is always required for IDL.  The&#xA;     * dynamic stubFactoryFactory is optional.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="isDynamic">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sff">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.0"/>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTie">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** Equivalent to getStubFactoryFactory( true ).getTie( null ).&#xA;     * Provided for compatibility with earlier versions of PresentationManager&#xA;     * as used in the app server.  The class argument is ignored in&#xA;     * the dynamic case, so this is safe.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../../../../../../../javax/rmi/CORBA/Tie.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="useDynamicStubs">
      <typeReference xsi:type="types:Boolean">
        <comments>/** Returns the value of the com.sun.CORBA.ORBUseDynamicStub&#xA;     * property.&#xA;     */</comments>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** Provides access to RMI-IIOP stubs and ties.  &#xA; * Any style of stub and tie generation may be used.  &#xA; * This includes compiler generated stubs and runtime generated stubs &#xA; * as well as compiled and reflective ties.  There is normally&#xA; * only one instance of this interface per VM.  The instance&#xA; * is obtained from the static method&#xA; * com.sun.corba.se.spi.orb.ORB.getPresentationManager.&#xA; * &lt;p>&#xA; * Note that&#xA; * the getClassData and getDynamicMethodMarshaller methods&#xA; * maintain caches to avoid redundant computation.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
