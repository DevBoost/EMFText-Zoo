<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16" name="FSM.java">
  <comments>/*&#xA; * @(#)FSM.java&#x9;1.8 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>corba</namespaces>
  <namespaces>se</namespaces>
  <namespaces>spi</namespaces>
  <namespaces>orbutil</namespaces>
  <namespaces>fsm</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="FSM">
    <members xsi:type="members:InterfaceMethod" name="getState">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="State.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Get the current state of this FSM.&#xA;    */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="doIt">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="in">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Input.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Perform the action and transition to the next state based&#xA;    * on the current state of the FSM and the input.&#xA;    */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An FSM is used to represent an instance of a finite state machine&#xA; * which has a transition function represented by an instance of&#xA; * StateEngine.  An instance of an FSM may be created either by calling&#xA; * StateEngine.makeFSM( startState ) on a state engine, or by extending FSMImpl and&#xA; * using a constructor.  Using FSMImpl as a base class is convenient if&#xA; * additional state is associated with the FSM beyond that encoded &#xA; * by the current state.  This is especially convenient if an action&#xA; * needs some additional information.  For example, counters are best&#xA; * handled by special actions rather than encoding a bounded counter&#xA; * in a state machine.  It is also possible to create a class that&#xA; * implements the FSM interface by delegating to an FSM instance&#xA; * created by StateEngine.makeFSM.&#xA; *&#xA; * @version @(#)FSM.java&#x9;1.8 03/12/19&#xA; * @author Ken Cavanaugh&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
