<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../../../java.ecore#/17" name="CDROutputStream_1_0.java">
  <comments>/*&#xA; * @(#)CDROutputStream_1_0.java&#x9;1.114 05/01/04&#xA; *&#xA; * Copyright 2005 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <comments>/*&#xA; * Licensed Materials - Property of IBM&#xA; * RMI-IIOP v1.0&#xA; * Copyright IBM Corp. 1998 1999  All Rights Reserved&#xA; *&#xA; * US Government Users Restricted Rights - Use, duplication or&#xA; * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>corba</namespaces>
  <namespaces>se</namespaces>
  <namespaces>impl</namespaces>
  <namespaces>encoding</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/io/ByteArrayOutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/io/ByteArrayOutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/io/ObjectOutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>reflect</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/lang/reflect/Method.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>reflect</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/lang/reflect/InvocationTargetException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>math</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>rmi</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../java/rmi/Remote.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../java/security/PrivilegedExceptionAction.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/security/PrivilegedActionException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/util/Stack.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>rmi</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>rmi</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../javax/rmi/CORBA/ValueHandler.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>rmi</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../javax/rmi/CORBA/ValueHandlerMultiFormat.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/CustomMarshal.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/DataOutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>TypeCodePackage</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/TypeCodePackage/BadKind.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/SystemException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/Object.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Principal.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/TypeCode.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/VM_CUSTOM.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/VM_TRUNCATABLE.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/VM_NONE.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/IDLEntity.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/CustomValue.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/StreamableValue.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/BoxedValueHelper.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/portable/OutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/ValueBase.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../org/omg/CORBA/portable/ValueHelper.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>pept</namespaces>
    <namespaces>protocol</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../pept/protocol/MessageMediator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>pept</namespaces>
    <namespaces>transport</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../pept/transport/ByteBufferPool.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>ior</namespaces>
    <namespaces>iiop</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>ior</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../spi/ior/IOR.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>ior</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../spi/ior/IORFactories.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>orb</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../spi/orb/ORB.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>orb</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../spi/orb/ORBVersionFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>orb</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../spi/orb/ORBVersion.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>protocol</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../spi/protocol/CorbaMessageMediator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>logging</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>encoding</namespaces>
    <classifier xsi:type="classifiers:Class" href="ByteBufferWithInfo.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>encoding</namespaces>
    <classifier xsi:type="classifiers:Interface" href="MarshalOutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>encoding</namespaces>
    <classifier xsi:type="classifiers:Class" href="CodeSetConversion.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>corba</namespaces>
    <classifier xsi:type="classifiers:Class" href="../corba/TypeCodeImpl.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>orbutil</namespaces>
    <classifier xsi:type="classifiers:Class" href="../orbutil/CacheTable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>orbutil</namespaces>
    <classifier xsi:type="classifiers:Class" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>orbutil</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../orbutil/RepositoryIdStrings.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>orbutil</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../orbutil/RepositoryIdUtility.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>orbutil</namespaces>
    <classifier xsi:type="classifiers:Class" href="../orbutil/RepositoryIdFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/Utility.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>logging</namespaces>
    <classifier xsi:type="classifiers:Class" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="CDROutputStream_1_0">
    <members xsi:type="members:Field" name="INDIRECTION_TAG">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="4294967295"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="littleEndian">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:Field" name="bufferManagerWrite">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BufferManagerWrite.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:Field" name="bbwi">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ByteBufferWithInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="orb">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../spi/orb/ORB.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:Field" name="wrapper">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:Field" name="debug">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:Field" name="blockSizeIndex">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:Field" name="blockSizePosition">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:Field" name="streamFormatVersion">
      <typeReference xsi:type="types:Byte"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:Field" name="DEFAULT_BUFFER_SIZE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1024"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="kWriteMethod">
      <initialValue xsi:type="references:StringReference" value="write"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="codebaseCache">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../orbutil/CacheTable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Codebase cache</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="valueCache">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../orbutil/CacheTable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Value cache</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="repositoryIdCache">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../orbutil/CacheTable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Repository ID cache</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="end_flag">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Write end flag</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="chunkedValueNestingLevel">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Beginning with the resolution to interop issue 3526,</comments>
        <comments>// only enclosing chunked valuetypes are taken into account</comments>
        <comments>// when computing the nesting level.  However, we still need</comments>
        <comments>// the old computation around for interoperability with our</comments>
        <comments>// older ORBs.</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="mustChunk">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="inBlock">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// In block marker</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="end_flag_position">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Last end tag position</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="end_flag_index">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="valueHandler">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../../javax/rmi/CORBA/ValueHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// ValueHandler</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="repIdUtil">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../orbutil/RepositoryIdUtility.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Repository ID handlers</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="repIdStrs">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../orbutil/RepositoryIdStrings.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="charConverter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>CodeSetConversion</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodeSetConversion$CTBConverter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Code set converters (created when first needed)</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="wcharConverter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>CodeSetConversion</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodeSetConversion$CTBConverter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:ClassMethod" name="init">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/ORB.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="littleEndian">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bufferManager">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="BufferManagerWrite.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="streamFormatVersion">
        <typeReference xsi:type="types:Byte"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="usePooledByteBuffers">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// REVISIT - This should be re-factored so that including whether</comments>
        <comments>// to use pool byte buffers or not doesn't need to be known.</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <self xsi:type="literals:This">
              <comments>// ORB must not be null.  See CDROutputStream constructor.</comments>
            </self>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../spi/orb/ORB.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.299"/>
              <arguments xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                <self xsi:type="literals:This"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0/@members.3"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../spi/orb/ORB.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </next>
            <self xsi:type="literals:This"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="ByteBufferWithInfo.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.4"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.3"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.28"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="init">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/ORB.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="littleEndian">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bufferManager">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="BufferManagerWrite.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="streamFormatVersion">
        <typeReference xsi:type="types:Byte"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.3"/>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createRepositoryIdHandlers">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                <comments>// Get the appropriate versions based on the ORB version.  The</comments>
                <comments>// ORB versioning info is only in the core ORB.</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../orbutil/RepositoryIdFactory.class.xmi#//@classifiers.0/@members.7"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                </next>
                <target xsi:type="classifiers:Class" href="../orbutil/RepositoryIdFactory.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../orbutil/RepositoryIdFactory.class.xmi#//@classifiers.0/@members.5"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                </next>
                <target xsi:type="classifiers:Class" href="../orbutil/RepositoryIdFactory.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                <comments>// Get the latest versions</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../orbutil/RepositoryIdFactory.class.xmi#//@classifiers.0/@members.6"/>
                </next>
                <target xsi:type="classifiers:Class" href="../orbutil/RepositoryIdFactory.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../orbutil/RepositoryIdFactory.class.xmi#//@classifiers.0/@members.4"/>
                </next>
                <target xsi:type="classifiers:Class" href="../orbutil/RepositoryIdFactory.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBufferManager">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BufferManagerWrite.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toByteArray">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="it">
          <typeReference xsi:type="types:Byte"/>
          <arrayDimensionsBefore/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Byte"/>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </sizes>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// Micro-benchmarks show ByteBuffer.get(int) out perform the bulk</comments>
        <comments>// ByteBuffer.get(byte[], offset, length).</comments>
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable">
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.2/@init"/>
              </arraySelectors>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.16"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.2/@init"/>
                </next>
                <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
              </next>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
            </next>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getGIOPVersion">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0/@members.0"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setHeaderPadding">
      <typeReference xsi:type="types:Void">
        <comments>// Called by Request and Reply message. Valid for GIOP versions >= 1.2 only.</comments>
        <comments>// Illegal for GIOP versions &lt; 1.2.</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="headerPadding">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.868"/>
          </next>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="handleSpecialChunkBegin">
      <comments>// No-op for GIOP 1.0</comments>
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="requiredSize">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:ClassMethod" name="handleSpecialChunkEnd">
      <comments>// No-op for GIOP 1.0</comments>
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:ClassMethod" name="computeAlignment">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="align">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="incr">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </expression>
                </children>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@statement/@statements.0/@variable"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="alignAndReserve">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="align">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="n">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </children>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
              </children>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.1"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.4"/>
            </next>
          </children>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="grow">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="align">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="n">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>//</comments>
        <comments>// Default implementation of grow.  Subclassers may override this.</comments>
        <comments>// Always grow the single buffer. This needs to delegate</comments>
        <comments>// fragmentation policy for IIOP 1.1.</comments>
        <comments>//</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.5"/>
            </next>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="BufferManagerWrite.class.xmi#//@classifiers.0/@members.8"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="putEndian">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/SystemException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="littleEndian">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="freeInternalCaches">
      <typeReference xsi:type="types:Void"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.23"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.23"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.23"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_longdouble">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// No such type in java</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1410"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
            </arguments>
          </next>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_octet">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Byte"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
          <comments>// The 'if' stmt is commented out since we need the alignAndReserve to</comments>
          <comments>// be called, particularly when the first body byte is written,</comments>
          <comments>// to induce header padding to align the body on a 8-octet boundary,</comments>
          <comments>// for GIOP versions 1.2 and above. Refer to internalWriteOctetArray()</comments>
          <comments>// method that also has a similar change.</comments>
          <comments>//if (bbwi.position() + 1 > bbwi.buflen)</comments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <comments>//      REVISIT - Should just use ByteBuffer.put(byte) and let it</comments>
          <comments>//                increment the ByteBuffer position. This is true</comments>
          <comments>//                for all write operations in this file.</comments>
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_boolean">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
          <arguments xsi:type="expressions:ConditionalExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
            <expressionIf xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:Byte"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </expressionIf>
            <expressionElse xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:Byte"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expressionElse>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_char">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="converter">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>CodeSetConversion</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="CodeSetConversion$CTBConverter.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.131"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="CodeSetConversion$CTBConverter.class.xmi#//@classifiers.0/@members.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// CORBA formal 99-10-07 15.3.1.6: &quot;In the case of multi-byte encodings</comments>
        <comments>// of characters, a single instance of the char type may only</comments>
        <comments>// hold one octet of any multi-byte character encoding.&quot;</comments>
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.690"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </throwable>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="CodeSetConversion$CTBConverter.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <arraySelectors>
                <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </arraySelectors>
              <target xsi:type="members:ClassMethod" href="CodeSetConversion$CTBConverter.class.xmi#//@classifiers.0/@members.7"/>
            </next>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeLittleEndianWchar">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// These wchar methods are only used when talking to</comments>
        <comments>// legacy ORBs, now.</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.0"/>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeBigEndianWchar">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeLittleEndianShort">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeBigEndianShort">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeLittleEndianLong">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeBigEndianLong">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeLittleEndianLongLong">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="5"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="40"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="48"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="7"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="56"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeBigEndianLongLong">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="56"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="48"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="40"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="5"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                        <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="7"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </expression>
                </child>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_wchar">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <comments>// Don't allow transmission of wchar/wstring data with</comments>
        <comments>// foreign ORBs since it's against the spec.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1226"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0/@members.13"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          </next>
          <target xsi:type="classifiers:Class" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
          <comments>// If it's one of our legacy ORBs, do what they did:</comments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_short">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.48">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_ushort">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_long">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_ulong">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_longlong">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_ulonglong">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.58">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_float">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Float.class.xmi#//@classifiers.0/@members.30"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Float.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_double">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.58">
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Double.class.xmi#//@classifiers.0/@members.29"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Double.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_string">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.63">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeString">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.446"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="converter">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>CodeSetConversion</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="CodeSetConversion$CTBConverter.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.131"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="CodeSetConversion$CTBConverter.class.xmi#//@classifiers.0/@members.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@parameters.0"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="len">
          <typeReference xsi:type="types:Int">
            <comments>// A string is encoded as an unsigned CORBA long for the</comments>
            <comments>// number of bytes to follow (including a terminating null).</comments>
            <comments>// There is only one octet per character in the string.</comments>
          </typeReference>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CodeSetConversion$CTBConverter.class.xmi#//@classifiers.0/@members.3"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.3/@variable"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.3/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="indirection">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="CodeSetConversion$CTBConverter.class.xmi#//@classifiers.0/@members.7"/>
            </next>
          </arguments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="CodeSetConversion$CTBConverter.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
          <comments>// Write the null ending</comments>
          <arguments xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:Byte"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.6/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_wstring">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.446"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Don't allow transmission of wchar/wstring data with</comments>
        <comments>// foreign ORBs since it's against the spec.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1226"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0/@members.13"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          </next>
          <target xsi:type="classifiers:Class" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="len">
          <typeReference xsi:type="types:Int">
            <comments>// When talking to our legacy ORBs, do what they did:</comments>
          </typeReference>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <comments>// This will only have an effect if we're already chunking</comments>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.2/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <multiplicativeOperators xsi:type="operators:Multiplication"/>
              </expression>
            </children>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.2/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.5/@init"/>
              </next>
            </arguments>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.5/@init"/>
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.2/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.5/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
          <comments>// Write the null ending</comments>
          <arguments xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:Short"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
          <comments>// This will only have an effect if we're already chunking</comments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="internalWriteOctetArray">
      <typeReference xsi:type="types:Void">
        <comments>// Performs no checks and doesn't tamper with chunking</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="n">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="align">
          <typeReference xsi:type="types:Boolean">
            <comments>// This flag forces the alignAndReserve method to be called the</comments>
            <comments>// first time an octet is written. This is necessary to ensure</comments>
            <comments>// that the body is aligned on an 8-octet boundary. Note the 'if'</comments>
            <comments>// condition inside the 'while' loop below. Also, refer to the</comments>
            <comments>// write_octet() method that has a similar change.</comments>
          </typeReference>
          <initialValue xsi:type="literals:BooleanLiteral" value="true"/>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="avail">
              <typeReference xsi:type="types:Int"/>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="bytes">
              <typeReference xsi:type="types:Int"/>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="wanted">
              <typeReference xsi:type="types:Int"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                      </next>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.4"/>
                    </next>
                  </children>
                  <relationOperators xsi:type="operators:GreaterThan"/>
                </expression>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.1/@variable"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.4"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.2"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </expression>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@variable"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.2/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
                    <relationOperators xsi:type="operators:LessThan"/>
                  </expression>
                </child>
                <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.2/@variable"/>
                <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.0/@variable"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.17"/>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                        </next>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.7/@init"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0">
                      <arraySelectors>
                        <position xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.7/@init"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </position>
                      </arraySelectors>
                    </arguments>
                  </next>
                  <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </expression>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.7/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.1/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.7/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.1/@variable"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@statement/@statements.1/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@variable"/>
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.2"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_octet_array">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.446"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <comments>// This will only have an effect if we're already chunking</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
          <comments>// This will only have an effect if we're already chunking</comments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_Principal">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Principal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.0">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:IdentifierReference"/>
              <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/Principal.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.66">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/Principal.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.0">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:IdentifierReference"/>
              <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/Principal.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_any">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="any">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.446"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.69">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0/@members.5"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_TypeCode">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.446"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="tci">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../corba/TypeCodeImpl.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../corba/TypeCodeImpl.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@parameters.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../corba/TypeCodeImpl.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@parameters.0"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../corba/TypeCodeImpl.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@parameters.0"/>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.1/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../corba/TypeCodeImpl.class.xmi#//@classifiers.0/@members.78"/>
            <arguments xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>org</namespaces>
                <namespaces>omg</namespaces>
                <namespaces>CORBA_2_3</namespaces>
                <namespaces>portable</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA_2_3/portable/OutputStream.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
              </child>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_Object">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ref">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="nullIOR">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../../spi/ior/IOR.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../spi/ior/IORFactories.class.xmi#//@classifiers.0/@members.4"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../spi/ior/IORFactories.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@statement/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../spi/ior/Writeable.class.xmi#//@classifiers.0/@members.0"/>
                <arguments xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// IDL to Java formal 01-06-06 1.21.4.2</comments>
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1254"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </throwable>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/LocalObject.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="ior">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../spi/ior/IOR.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0/@members.41"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.2/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../spi/ior/Writeable.class.xmi#//@classifiers.0/@members.0"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return"/>
    </members>
    <members xsi:type="members:ClassMethod" name="write_abstract_interface">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>lang</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ------------ RMI related methods --------------------------</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="corbaObject">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="theObject">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <comments>// Assume value type.</comments>
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Is it a CORBA.Object?</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@variable">
                <comments>// Yes.</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>org</namespaces>
                  <namespaces>omg</namespaces>
                  <namespaces>CORBA</namespaces>
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@parameters.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:InstanceOfExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>org</namespaces>
              <namespaces>omg</namespaces>
              <namespaces>CORBA</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@parameters.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
          <comments>// Write our flag...</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Now write out the object...</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.1/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable"/>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.78">
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>java</namespaces>
                    <namespaces>io</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@parameters.0"/>
                </arguments>
              </expression>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Throw">
                  <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.4/@elseStatement/@statements.0/@catcheBlocks.0/@parameter"/>
                </statement>
                <condition xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>java</namespaces>
                    <namespaces>io</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@parameters.0"/>
                </condition>
                <elseStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0/@members.36"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.44"/>
                          </next>
                          <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
                        </next>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0"/>
                  </expression>
                </elseStatement>
              </statements>
              <parameter name="cce">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/lang/ClassCastException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_value">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clz">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.78">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeWStringValue">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="string">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="indirection">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.112">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="literals:NullLiteral"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.110">
          <comments>// Write WStringValue's repository ID</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../orbutil/RepositoryIdStrings.class.xmi#//@classifiers.0/@members.7"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.109">
          <comments>// Add indirection for object to indirection table</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.0/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Write Value chunk</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.81"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
              <operator xsi:type="operators:MinusMinus"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
              <operator xsi:type="operators:MinusMinus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
        <elseStatement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
            <operator xsi:type="operators:MinusMinus"/>
          </expression>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.83"/>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.114">
          <comments>// Write end tag</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeArray">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="array">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clazz">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0/@members.11"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
              </next>
              <target xsi:type="classifiers:Class" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="indirection">
          <typeReference xsi:type="types:Int">
            <comments>//d11638</comments>
            <comments>// Write value_tag</comments>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.112">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0/@members.13"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0"/>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.110">
          <comments>// Write repository ID</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../orbutil/RepositoryIdStrings.class.xmi#//@classifiers.0/@members.4"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.1"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.109">
          <comments>// Add indirection for object to indirection table</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.1/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Write Value chunk</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.81"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
              <operator xsi:type="operators:MinusMinus"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
              <operator xsi:type="operators:MinusMinus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
        <elseStatement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
            <operator xsi:type="operators:MinusMinus"/>
          </expression>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="vh">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../../../../../../javax/rmi/CORBA/ValueHandlerMultiFormat.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../../../../javax/rmi/CORBA/ValueHandlerMultiFormat.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@statements.5/@statement/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../../javax/rmi/CORBA/ValueHandlerMultiFormat.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../../../../javax/rmi/CORBA/ValueHandlerMultiFormat.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
        </condition>
        <elseStatement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../../javax/rmi/CORBA/ValueHandler.class.xmi#//@classifiers.0/@members.0"/>
              <arguments xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.74/@parameters.0"/>
            </next>
          </expression>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.83"/>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.114">
          <comments>// Write end tag</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeValueBase">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <namespaces>portable</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/ValueBase.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clazz">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
            <comments>// _REVISIT_ could check to see whether chunking really needed </comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="indirection">
          <typeReference xsi:type="types:Int">
            <comments>// Write value_tag</comments>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.112">
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0/@members.13"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75/@parameters.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0"/>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="repId">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// Get rep id</comments>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:NestedExpression">
            <next xsi:type="references:MethodCall">
              <arraySelectors>
                <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </arraySelectors>
              <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/portable/ValueBase.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <expression xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/ValueBase.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75/@parameters.0"/>
            </expression>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.110">
          <comments>// Write rep id</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75/@statements.2/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.109">
          <comments>// Add indirection for object to indirection table</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75/@statements.1/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.81">
          <comments>// Write Value chunk</comments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.113">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75/@statements.2/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.83"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.114">
          <comments>// Write end tag</comments>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeRMIIIOPValueType">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clazz">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0/@members.11"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
              </next>
              <target xsi:type="classifiers:Class" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="key">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>//d11638</comments>
              <target xsi:type="classifiers:Interface" href="../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0">
            <comments>// Allow the ValueHandler to call writeReplace on</comments>
            <comments>// the Serializable (if the method is present)</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../../javax/rmi/CORBA/ValueHandler.class.xmi#//@classifiers.0/@members.5"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@statements.1/@variable"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
              <comments>// Write null tag and return</comments>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.130">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.19"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
              <statements xsi:type="statements:Return"/>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.18"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0"/>
                </next>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.1"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@statements.1/@variable"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../../javax/rmi/CORBA/ValueHandler.class.xmi#//@classifiers.0/@members.3"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.1"/>
            </next>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="indirection">
          <typeReference xsi:type="types:Int">
            <comments>// Write value_tag</comments>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.112">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0/@members.13"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0"/>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.110">
          <comments>// Write rep. id</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../orbutil/RepositoryIdStrings.class.xmi#//@classifiers.0/@members.2"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.1"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.109">
          <comments>// Add indirection for object to indirection table</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@statements.6/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@statements.1/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15">
                <comments>// Write Value chunk</comments>
              </child>
              <operator xsi:type="operators:MinusMinus"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
              <operator xsi:type="operators:MinusMinus"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.81"/>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
        <elseStatement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
            <operator xsi:type="operators:MinusMinus"/>
          </expression>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="vh">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../../../../../../javax/rmi/CORBA/ValueHandlerMultiFormat.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../../../../javax/rmi/CORBA/ValueHandlerMultiFormat.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@statements.10/@statement/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../../javax/rmi/CORBA/ValueHandlerMultiFormat.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../../../../javax/rmi/CORBA/ValueHandlerMultiFormat.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
        </condition>
        <elseStatement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../../javax/rmi/CORBA/ValueHandler.class.xmi#//@classifiers.0/@members.0"/>
              <arguments xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@parameters.0"/>
            </next>
          </expression>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.83"/>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.114">
          <comments>// Write end tag</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_value">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="repository_id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <comments>// Handle null references</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
              <comments>// Write null tag and return</comments>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Handle shared references</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.130">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.19"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
                </next>
              </arguments>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.18"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
            </next>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="clazz">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldMustChunk">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:BooleanLiteral" value="true"/>
          </expression>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.83"/>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.74">
              <comments>// Handle arrays</comments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.2/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.2/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.40"/>
          </next>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.75">
                <comments>// Handle IDL Value types</comments>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>org</namespaces>
                    <namespaces>omg</namespaces>
                    <namespaces>CORBA</namespaces>
                    <namespaces>portable</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/ValueBase.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.2/@variable"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:InstanceOfExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>org</namespaces>
              <namespaces>omg</namespaces>
              <namespaces>CORBA</namespaces>
              <namespaces>portable</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/ValueBase.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.119">
                  <arguments xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/IDLEntity.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.118">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.73">
                    <arguments xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
                    </arguments>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>java</namespaces>
                  <namespaces>lang</namespaces>
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.116">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.1"/>
                      <arguments xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
                      </arguments>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>java</namespaces>
                    <namespaces>lang</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.76">
                      <comments>// RMI-IIOP value type</comments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@parameters.0"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.2/@variable"/>
                    </expression>
                  </statements>
                </elseStatement>
              </elseStatement>
            </elseStatement>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.3/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Check to see if we need to start another block for a</comments>
        <comments>// possible outer value</comments>
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.81"/>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_value">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.77">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.78/@parameters.0"/>
          <arguments xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="literals:NullLiteral"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_value">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="factory">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <namespaces>portable</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/BoxedValueHelper.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <comments>// Handle null references</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
              <comments>// Write null tag and return</comments>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Handle shared references</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.130">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.19"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0"/>
                </next>
              </arguments>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.18"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0"/>
            </next>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldMustChunk">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="isCustom">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="modifier">
              <typeReference xsi:type="types:Short"/>
            </variable>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@statements.4/@statement/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/TypeCode.class.xmi#//@classifiers.0/@members.18"/>
                    </next>
                    <target xsi:type="members:InterfaceMethod" href="../../../../org/omg/CORBA/portable/ValueHelper.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="../../../../org/omg/CORBA/portable/ValueHelper.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.1"/>
                  </expression>
                </value>
              </expression>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@statements.4/@statement/@statements.0/@variable">
                    <comments>// tk_value_box</comments>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/VM_NONE.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                    <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/VM_NONE.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </statements>
              <parameter name="ex">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/TypeCodePackage/BadKind.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/CustomMarshal.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@statements.4/@statement/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/VM_CUSTOM.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/VM_CUSTOM.class.xmi#//@classifiers.0"/>
                </children>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:BooleanLiteral" value="true"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@statements.4/@statement/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/VM_TRUNCATABLE.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/VM_TRUNCATABLE.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../../org/omg/CORBA/portable/ValueHelper.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.1"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.83"/>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="indirection">
              <typeReference xsi:type="types:Int">
                <comments>// Write value_tag</comments>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.112">
                <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../spi/orb/ORBData.class.xmi#//@classifiers.0/@members.47"/>
                    </next>
                    <target xsi:type="members:ClassMethod" href="../../spi/orb/ORB.class.xmi#//@classifiers.0/@members.54"/>
                  </next>
                </arguments>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0/@members.13"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
                      </next>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0"/>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.110">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/portable/BoxedValueHelper.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../spi/orb/ORBData.class.xmi#//@classifiers.0/@members.47"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../spi/orb/ORB.class.xmi#//@classifiers.0/@members.54"/>
              </next>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.109">
              <comments>// Add indirection for object to indirection table</comments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@statements.5/@statement/@statements.1/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.81">
              <comments>// Write Value chunk</comments>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
              <operator xsi:type="operators:MinusMinus"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
              <operator xsi:type="operators:MinusMinus"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/CustomMarshal.class.xmi#//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
                  </arguments>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/CustomMarshal.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0"/>
                </expression>
              </expression>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@statements.3/@variable"/>
            <elseStatement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/portable/BoxedValueHelper.class.xmi#//@classifiers.0/@members.1"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0"/>
                </next>
              </expression>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.83"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.114">
              <comments>// Write end tag</comments>
              <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="indirection">
              <typeReference xsi:type="types:Int">
                <comments>// Write value_tag</comments>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.112">
                <arguments xsi:type="literals:BooleanLiteral"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../spi/orb/ORBData.class.xmi#//@classifiers.0/@members.47"/>
                    </next>
                    <target xsi:type="members:ClassMethod" href="../../spi/orb/ORB.class.xmi#//@classifiers.0/@members.54"/>
                  </next>
                </arguments>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0/@members.13"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
                      </next>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0"/>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.110">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/portable/BoxedValueHelper.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../spi/orb/ORBData.class.xmi#//@classifiers.0/@members.47"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../spi/orb/ORB.class.xmi#//@classifiers.0/@members.54"/>
              </next>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.109">
              <comments>// Add indirection for object to indirection table</comments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@statements.5/@elseStatement/@statements.0/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15">
                <comments>// Write Value chunk</comments>
              </child>
              <operator xsi:type="operators:MinusMinus"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.1">
              <comments>// no need to test for custom on the non-chunked path</comments>
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/portable/BoxedValueHelper.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@parameters.0"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.114">
              <comments>// Write end tag</comments>
              <arguments xsi:type="literals:BooleanLiteral"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79/@statements.2/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Check to see if we need to start another block for a</comments>
        <comments>// possible outer value</comments>
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.81"/>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="get_offset">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="start_block">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.133">
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="CDROutputStream_1_0 start_block, position"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
          <comments>//Move inBlock=true to after write_long since write_long might</comments>
          <comments>//trigger grow which will lead to erroneous behavior with a</comments>
          <comments>//missing blockSizeIndex.</comments>
          <comments>//inBlock = true;</comments>
          <comments>// Save space in the buffer for block size</comments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18">
            <comments>//Has to happen after write_long since write_long could</comments>
            <comments>//trigger grow which is overridden by supper classes to </comments>
            <comments>//depend on inBlock.</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7">
            <comments>// Remember where to put the size of the endblock less 4</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.133">
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="CDROutputStream_1_0 start_block, blockSizeIndex "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeLongWithoutAlign">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// Utility method which will hopefully decrease chunking complexity</comments>
        <comments>// by allowing us to end_block and update chunk lengths without</comments>
        <comments>// calling alignAndReserve.  Otherwise, it's possible to get into</comments>
        <comments>// recursive scenarios which lose the chunking state.</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.82/@parameters.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.82/@parameters.0"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="end_block">
      <comments>// System.out.println(&quot;      post end_block: &quot; + get_offset() + &quot; &quot; + bbwi.position());</comments>
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.133">
              <arguments xsi:type="references:StringReference" value="CDROutputStream_1_0.java end_block"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.133">
              <arguments xsi:type="references:StringReference" value="CDROutputStream_1_0.java end_block, in a block"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Test to see if the block was of zero length</comments>
        <comments>// If so, remove the block instead of ending it</comments>
        <comments>// (This can happen if the last field written </comments>
        <comments>//  in a value was another value)</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <comments>// Need to assert that blockSizeIndex == bbwi.position()?  REVISIT</comments>
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldSize">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.82">
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@statements.5/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.83/@statements.5/@variable"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="orb">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/ORB.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_boolean_array">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Boolean"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ------------ End RMI related methods --------------------------</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.446"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <comments>// This will only have an effect if we're already chunking</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@parameters.0">
              <arraySelectors>
                <position xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@parameters.1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@statements.2/@init"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.85/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
          <comments>// This will only have an effect if we're already chunking</comments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_char_array">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.446"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <comments>// This will only have an effect if we're already chunking</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.44">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@parameters.0">
              <arraySelectors>
                <position xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@parameters.1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@statements.2/@init"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.86/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
          <comments>// This will only have an effect if we're already chunking</comments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_wchar_array">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.446"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <comments>// This will only have an effect if we're already chunking</comments>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@parameters.2"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <multiplicativeOperators xsi:type="operators:Multiplication"/>
              </expression>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@parameters.0">
              <arraySelectors>
                <position xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@parameters.1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.2/@init"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.87/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
          <comments>// This will only have an effect if we're already chunking</comments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_short_array">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Short"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.446"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <comments>// This will only have an effect if we're already chunking</comments>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <multiplicativeOperators xsi:type="operators:Multiplication"/>
              </expression>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.0">
              <arraySelectors>
                <position xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.2/@init"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
          <comments>// This will only have an effect if we're already chunking</comments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_ushort_array">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Short"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.88">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89/@parameters.2"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_long_array">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.446"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <comments>// This will only have an effect if we're already chunking</comments>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@parameters.2"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                <multiplicativeOperators xsi:type="operators:Multiplication"/>
              </expression>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@parameters.0">
              <arraySelectors>
                <position xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@parameters.1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@statements.2/@init"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
          <comments>// This will only have an effect if we're already chunking</comments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_ulong_array">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.90">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.91/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.91/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.91/@parameters.2"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_longlong_array">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Long"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.446"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.92/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <comments>// This will only have an effect if we're already chunking</comments>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.92/@parameters.2"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                <multiplicativeOperators xsi:type="operators:Multiplication"/>
              </expression>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.58">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.92/@parameters.0">
              <arraySelectors>
                <position xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.92/@parameters.1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.92/@statements.2/@init"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.92/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.92/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.92/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
          <comments>// This will only have an effect if we're already chunking</comments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_ulonglong_array">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Long"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.92">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.93/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.93/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.93/@parameters.2"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_float_array">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Float"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.446"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <comments>// This will only have an effect if we're already chunking</comments>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@parameters.2"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                <multiplicativeOperators xsi:type="operators:Multiplication"/>
              </expression>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.60">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@parameters.0">
              <arraySelectors>
                <position xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@parameters.1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@statements.2/@init"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
          <comments>// This will only have an effect if we're already chunking</comments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_double_array">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Double"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.446"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.95/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <comments>// This will only have an effect if we're already chunking</comments>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.95/@parameters.2"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                <multiplicativeOperators xsi:type="operators:Multiplication"/>
              </expression>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.61">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.95/@parameters.0">
              <arraySelectors>
                <position xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.95/@parameters.1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.95/@statements.2/@init"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.95/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.95/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.95/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
          <comments>// This will only have an effect if we're already chunking</comments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_string_array">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.446"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.62">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@parameters.0">
              <arraySelectors>
                <position xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@parameters.1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.1/@init"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.1/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.96/@statements.1/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_wstring_array">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.446"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@parameters.0">
              <arraySelectors>
                <position xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@parameters.1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@statements.1/@init"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@statements.1/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.97/@statements.1/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_any_array">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.68">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@parameters.0">
              <arraySelectors>
                <position xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@parameters.1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@statements.0/@init"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@statements.0/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.98/@statements.0/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeTo">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/OutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//--------------------------------------------------------------------//</comments>
        <comments>// CDROutputStream state management.</comments>
        <comments>//</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="tmpBuf">
          <typeReference xsi:type="types:Byte"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.24"/>
                  </next>
                  <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.23"/>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="size">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Byte"/>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@statements.1/@elseStatement/@statements.0/@variable"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <comments>// Micro-benchmarks are showing a loop of ByteBuffer.get(int) is</comments>
            <comments>// faster than ByteBuffer.get(byte[], offset, length)</comments>
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@statements.0/@variable">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@statements.1/@elseStatement/@statements.2/@init"/>
                  </arraySelectors>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.16"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@statements.1/@elseStatement/@statements.2/@init"/>
                    </next>
                    <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </value>
              </expression>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@statements.1/@elseStatement/@statements.2/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@statements.1/@elseStatement/@statements.0/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@statements.1/@elseStatement/@statements.2/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../java/io/OutputStream.class.xmi#//@classifiers.0/@members.3"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.99/@statements.0/@variable"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeOctetSequenceTo">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <namespaces>portable</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/portable/OutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="buf">
          <typeReference xsi:type="types:Byte"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.100/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.24"/>
                  </next>
                  <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.23"/>
            </next>
            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="size">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.100/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Byte"/>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.100/@statements.1/@elseStatement/@statements.0/@variable"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <comments>// Micro-benchmarks are showing a loop of ByteBuffer.get(int) is</comments>
            <comments>// faster than ByteBuffer.get(byte[], offset, length)</comments>
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.100/@statements.0/@variable">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.100/@statements.1/@elseStatement/@statements.2/@init"/>
                  </arraySelectors>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.16"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.100/@statements.1/@elseStatement/@statements.2/@init"/>
                    </next>
                    <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </value>
              </expression>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.100/@statements.1/@elseStatement/@statements.2/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.100/@statements.1/@elseStatement/@statements.0/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.100/@statements.1/@elseStatement/@statements.2/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.100/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/portable/OutputStream.class.xmi#//@classifiers.0/@members.8"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.100/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/portable/OutputStream.class.xmi#//@classifiers.0/@members.19"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.100/@statements.0/@variable"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getSize">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getIndex">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isLittleEndian">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setIndex">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.104/@parameters.0"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getByteBufferWithInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ByteBufferWithInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setByteBufferWithInfo">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bbwi">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ByteBufferWithInfo.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.106/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getByteBuffer">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:EmptyStatement"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.107/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.107/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setByteBuffer">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="byteBuffer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.108/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="updateIndirectionTable">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="indirection">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>lang</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>lang</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <comments>// int indirection = get_offset();</comments>
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../orbutil/CacheTable.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
              <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.16"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.109/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.109/@parameters.0"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.16"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.109/@parameters.2"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.109/@parameters.0"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.109/@parameters.2"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.109/@parameters.1"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_repositoryId">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <comments>// Use an indirection if available</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.130">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.19"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.110/@parameters.0"/>
                </next>
              </arguments>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.18"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.110/@parameters.0"/>
            </next>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="indirection">
          <typeReference xsi:type="types:Int">
            <comments>// Write it as a string.  Note that we have already done the</comments>
            <comments>// special case conversion of non-Latin-1 characters to escaped</comments>
            <comments>// Latin-1 sequences in RepositoryId.</comments>
            <comments>// It's not a good idea to cache them now that we can have</comments>
            <comments>// multiple code sets.</comments>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.63">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.110/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Add indirection for id to indirection table</comments>
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../orbutil/CacheTable.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
              <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.16"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.110/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.110/@statements.1/@variable"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_codebase">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.130">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.19"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.111/@parameters.0"/>
                </next>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.18"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.111/@parameters.0"/>
            </next>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.62">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.111/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../orbutil/CacheTable.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                  <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                </value>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../orbutil/CacheTable.class.xmi#//@classifiers.0/@members.16"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.111/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.111/@parameters.1"/>
              </next>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeValueTag">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="chunkIt">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="useRepId">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codebase">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="indirection">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../orbutil/RepositoryIdUtility.class.xmi#//@classifiers.0/@members.6"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.2"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../orbutil/RepositoryIdUtility.class.xmi#//@classifiers.0/@members.7"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.111">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.2"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
                </expression>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.0"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.1"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../orbutil/RepositoryIdUtility.class.xmi#//@classifiers.0/@members.8"/>
                      </next>
                    </arguments>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.2"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../orbutil/RepositoryIdUtility.class.xmi#//@classifiers.0/@members.9"/>
                      </next>
                    </arguments>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.111">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.2"/>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
                  </expression>
                </statements>
              </elseStatement>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.1"/>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../orbutil/RepositoryIdUtility.class.xmi#//@classifiers.0/@members.12"/>
                        </next>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.2"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../orbutil/RepositoryIdUtility.class.xmi#//@classifiers.0/@members.13"/>
                        </next>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.111">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.2"/>
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.0"/>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.1"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:InterfaceMethod" href="../orbutil/RepositoryIdUtility.class.xmi#//@classifiers.0/@members.10"/>
                          </next>
                        </arguments>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </value>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.2"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:InterfaceMethod" href="../orbutil/RepositoryIdUtility.class.xmi#//@classifiers.0/@members.11"/>
                          </next>
                        </arguments>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </value>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.111">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.2"/>
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
                      </expression>
                    </statements>
                  </elseStatement>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.0"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@parameters.1"/>
              </condition>
            </elseStatement>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.112/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeIDLValue">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="repID">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/portable/Streamable.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
                </arguments>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/StreamableValue.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.113/@parameters.0"/>
              </expression>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/StreamableValue.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.113/@parameters.0"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/CustomMarshal.class.xmi#//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
                  </arguments>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/CustomValue.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.113/@parameters.0"/>
                </expression>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:InstanceOfExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/CustomValue.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.113/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="helper">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/BoxedValueHelper.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../util/Utility.class.xmi#//@classifiers.0/@members.18"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.113/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
                      </next>
                    </arguments>
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.113/@parameters.1"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../util/Utility.class.xmi#//@classifiers.0"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="isCustom">
                <typeReference xsi:type="types:Boolean"/>
                <initialValue xsi:type="literals:BooleanLiteral"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:TryBlock">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.113/@statements.0/@elseStatement/@elseStatement/@statements.1/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="literals:BooleanLiteral" value="true"/>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="expressions:NestedExpression">
                        <next xsi:type="references:MethodCall">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/TypeCode.class.xmi#//@classifiers.0/@members.18"/>
                          </next>
                          <target xsi:type="members:InterfaceMethod" href="../../../../org/omg/CORBA/portable/ValueHelper.class.xmi#//@classifiers.0/@members.2"/>
                        </next>
                        <expression xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Interface" href="../../../../org/omg/CORBA/portable/ValueHelper.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.113/@statements.0/@elseStatement/@elseStatement/@statements.0/@variable"/>
                        </expression>
                      </children>
                      <children xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/VM_CUSTOM.class.xmi#//@classifiers.0/@members.0"/>
                        </next>
                        <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/VM_CUSTOM.class.xmi#//@classifiers.0"/>
                      </children>
                    </condition>
                  </statements>
                  <catcheBlocks>
                    <statements xsi:type="statements:Throw">
                      <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1277"/>
                          <arguments xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.113/@statements.0/@elseStatement/@elseStatement/@statements.2/@statement/@statements.0/@catcheBlocks.0/@parameter"/>
                        </next>
                      </throwable>
                    </statements>
                    <parameter name="ex">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/TypeCodePackage/BadKind.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                    </parameter>
                  </catcheBlocks>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../org/omg/CORBA/portable/ValueHelper.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.113/@statements.0/@elseStatement/@elseStatement/@statements.0/@variable"/>
                </children>
                <children xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/CustomMarshal.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.113/@parameters.0"/>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/CustomMarshal.class.xmi#//@classifiers.0/@members.0"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
                    </arguments>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/CustomMarshal.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.113/@parameters.0"/>
                  </expression>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.113/@statements.0/@elseStatement/@elseStatement/@statements.1/@variable"/>
              <elseStatement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.113/@statements.0/@elseStatement/@elseStatement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/portable/BoxedValueHelper.class.xmi#//@classifiers.0/@members.1"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.113/@parameters.0"/>
                  </next>
                </expression>
              </elseStatement>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeEndTag">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="chunked">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Handles end tag compaction...</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                      <comments>// We are exactly at the same position and index as the</comments>
                      <comments>// end of the last end tag.  Thus, we can back up over it</comments>
                      <comments>// and compact the tags.</comments>
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.15"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                            </next>
                          </children>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <comments>// Special case in which we're at the beginning of a new</comments>
                  <comments>// fragment, but the position is the same.  We can't back up,</comments>
                  <comments>// so we just write the new end tag without compaction.  This</comments>
                  <comments>// occurs when a value ends and calls start_block to open a</comments>
                  <comments>// continuation chunk, but it's called at the very end of</comments>
                  <comments>// a fragment.</comments>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.115"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20">
                <comments>// Remember the last index and position.  These are only used when chunking.</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.114/@parameters.0"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15">
            <comments>// Increment the nesting level</comments>
          </child>
          <operator xsi:type="operators:PlusPlus"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeNestingLevel">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Handles ORB versioning of the end tag.  Should only&#xA;     * be called if chunking.&#xA;     *&#xA;     * If talking to our older ORBs (Standard Extension,&#xA;     * Kestrel, and Ladybird), write the end flag that takes&#xA;     * into account all enclosing valuetypes.&#xA;     *&#xA;     * If talking a newer or foreign ORB, or if the orb&#xA;     * instance is null, write the end flag that only takes&#xA;     * into account the enclosing chunked valuetypes.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../spi/orb/ORB.class.xmi#//@classifiers.0/@members.39"/>
                  </next>
                </arguments>
              </next>
              <target xsi:type="members:ClassMethod" href="../../spi/orb/ORBVersionFactory.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../spi/orb/ORBVersionFactory.class.xmi#//@classifiers.0"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../java/lang/Comparable.class.xmi#//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../spi/orb/ORB.class.xmi#//@classifiers.0/@members.39"/>
                    </next>
                  </arguments>
                </next>
                <target xsi:type="members:ClassMethod" href="../../spi/orb/ORBVersionFactory.class.xmi#//@classifiers.0/@members.5"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../spi/orb/ORBVersionFactory.class.xmi#//@classifiers.0"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeClass">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="repository_id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clz">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.116/@parameters.0"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../orbutil/RepositoryIdStrings.class.xmi#//@classifiers.0/@members.6"/>
              </next>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.116/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="indirection">
          <typeReference xsi:type="types:Int">
            <comments>// Write value_tag</comments>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.112">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="literals:NullLiteral"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.109">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.116/@statements.1/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.116/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.116/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.110">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.116/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.81">
              <comments>// Write Value chunk</comments>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
              <operator xsi:type="operators:MinusMinus"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
              <operator xsi:type="operators:MinusMinus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
        <elseStatement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
            <operator xsi:type="operators:MinusMinus"/>
          </expression>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.117">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.116/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.83"/>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.114">
          <comments>// Write end tag</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeClassBody">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clz">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Pre-Merlin/J2EE 1.3 ORBs wrote the repository ID</comments>
        <comments>// and codebase strings in the wrong order.  This handles</comments>
        <comments>// backwards compatibility.</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.78">
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0/@members.13"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.117/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0"/>
              </arguments>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.78">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../orbutil/RepositoryIdStrings.class.xmi#//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.117/@parameters.0"/>
                </next>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../spi/orb/ORB.class.xmi#//@classifiers.0/@members.39"/>
                  </next>
                </arguments>
              </next>
              <target xsi:type="members:ClassMethod" href="../../spi/orb/ORBVersionFactory.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../spi/orb/ORBVersionFactory.class.xmi#//@classifiers.0"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../java/lang/Comparable.class.xmi#//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../spi/orb/ORB.class.xmi#//@classifiers.0/@members.39"/>
                    </next>
                  </arguments>
                </next>
                <target xsi:type="members:ClassMethod" href="../../spi/orb/ORBVersionFactory.class.xmi#//@classifiers.0/@members.5"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../spi/orb/ORBVersionFactory.class.xmi#//@classifiers.0"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.78">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../orbutil/RepositoryIdStrings.class.xmi#//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.117/@parameters.0"/>
                </next>
              </arguments>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.78">
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0/@members.13"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.117/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0"/>
              </arguments>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="shouldWriteAsIDLEntity">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Casts and returns an Object as a Serializable</comments>
        <comments>// This is required for JDK 1.1 only to avoid VerifyErrors when</comments>
        <comments>// passing arrays as Serializable</comments>
        <comments>// private java.io.Serializable make_serializable(java.lang.Object object)</comments>
        <comments>// {</comments>
        <comments>//&#x9;return (java.io.Serializable)object;</comments>
        <comments>// }</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/IDLEntity.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.118/@parameters.0"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:InstanceOfExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/ValueBase.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.118/@parameters.0"/>
                  </expression>
                </child>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:InstanceOfExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <namespaces>org</namespaces>
                      <namespaces>omg</namespaces>
                      <namespaces>CORBA</namespaces>
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/Object.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.118/@parameters.0"/>
                  </expression>
                </child>
              </expression>
            </children>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeIDLEntity">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/IDLEntity.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
            <comments>// _REVISIT_ could check to see whether chunking really needed </comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="repository_id">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../orbutil/RepositoryIdStrings.class.xmi#//@classifiers.0/@members.1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@parameters.0"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="clazz">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="codebase">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0/@members.13"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.2/@variable"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../../javax/rmi/CORBA/Util.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="indirection">
          <typeReference xsi:type="types:Int">
            <comments>// Write value_tag</comments>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.112">
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.3/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.109">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.4/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.110">
          <comments>// Write rep. id</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.1/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15">
            <comments>// Write Value chunk</comments>
          </child>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.81"/>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <comments>// Write the IDLEntity using reflection </comments>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="clazzLoader">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.2/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </child>
                <expressionIf xsi:type="literals:NullLiteral"/>
                <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.2/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.46"/>
                  </next>
                </expressionElse>
              </expression>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="helperClass">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../util/Utility.class.xmi#//@classifiers.0/@members.17"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.2/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.44"/>
                    </next>
                  </children>
                  <children xsi:type="references:StringReference" value="Helper"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.3/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.10/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.2/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.10/@statements.0/@variable"/>
              </next>
              <target xsi:type="classifiers:Class" href="../util/Utility.class.xmi#//@classifiers.0"/>
            </initialValue>
            <annotationsAndModifiers xsi:type="modifiers:Final"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="argTypes">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arrayDimensionsAfter/>
            <initialValue xsi:type="arrays:ArrayInstantiationByValues">
              <arrayInitializer>
                <initialValues xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <next xsi:type="references:ReflectiveClassReference"/>
                          <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/portable/OutputStream.class.xmi#//@classifiers.0"/>
                        </next>
                      </next>
                    </next>
                  </next>
                </initialValues>
                <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.2/@variable"/>
              </arrayInitializer>
            </initialValue>
            <annotationsAndModifiers xsi:type="modifiers:Final"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="writeMethod">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <comments>// getDeclaredMethod requires RuntimePermission accessDeclaredMembers</comments>
                <comments>// if a different class loader is used (even though the javadoc says otherwise)</comments>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/reflect/Method.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="literals:NullLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.10/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/lang/reflect/Method.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../java/security/AccessController.class.xmi#//@classifiers.0/@members.3"/>
                    <arguments xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Interface" href="../../../../../../java/security/PrivilegedExceptionAction.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <anonymousClass>
                        <members xsi:type="members:ClassMethod" name="run">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <namespaces>java</namespaces>
                            <namespaces>lang</namespaces>
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <exceptions>
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/NoSuchMethodException.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </exceptions>
                          <annotationsAndModifiers xsi:type="modifiers:Public"/>
                          <statements xsi:type="statements:Return">
                            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.10/@statements.1/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Class.class.xmi#//@classifiers.0/@members.85"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.10/@statements.2/@variable"/>
                              </next>
                            </returnValue>
                          </statements>
                        </members>
                      </anonymousClass>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
                </child>
              </value>
            </expression>
          </statements>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <comments>// this gets caught below</comments>
              <throwable xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/lang/NoSuchMethodException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.10/@statements.4/@catcheBlocks.0/@parameter">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../java/security/PrivilegedActionException.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </child>
              </throwable>
            </statements>
            <parameter name="pae">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/security/PrivilegedActionException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="args">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>java</namespaces>
              <namespaces>lang</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arrayDimensionsAfter/>
            <initialValue xsi:type="arrays:ArrayInstantiationByValues">
              <arrayInitializer>
                <initialValues xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
                </initialValues>
                <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@parameters.0"/>
              </arrayInitializer>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.10/@statements.3/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/reflect/Method.class.xmi#//@classifiers.0/@members.36"/>
              <arguments xsi:type="literals:NullLiteral"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.10/@statements.5/@variable"/>
            </next>
          </expression>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1281"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.10/@catcheBlocks.0/@parameter"/>
              </next>
            </throwable>
          </statements>
          <parameter name="cnfe">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1281"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.10/@catcheBlocks.1/@parameter"/>
              </next>
            </throwable>
          </statements>
          <parameter name="nsme">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/NoSuchMethodException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1281"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.10/@catcheBlocks.2/@parameter"/>
              </next>
            </throwable>
          </statements>
          <parameter name="iae">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/IllegalAccessException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1281"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.119/@statements.10/@catcheBlocks.3/@parameter"/>
              </next>
            </throwable>
          </statements>
          <parameter name="ite">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/reflect/InvocationTargetException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.83"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.114">
          <comments>// Write end tag</comments>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_Abstract">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>lang</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* DataOutputStream methods */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.71">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.120/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_Value">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.78">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.121/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_fixed">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bigDecimal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>math</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="digits">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scale">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// This will stay a custom add-on until the java-rtf issue is resolved.</comments>
        <comments>// Then it should be declared in org.omg.CORBA.portable.OutputStream.</comments>
        <comments>//</comments>
        <comments>// Pads the string representation of bigDecimal with zeros to fit the given</comments>
        <comments>// digits and scale before it gets written to the stream.</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="string">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.92"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="integerPart">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="fractionPart">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="stringBuffer">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Get rid of the sign</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.55"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </next>
            </children>
            <children xsi:type="literals:CharacterLiteral" value="45"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </next>
            </children>
            <children xsi:type="literals:CharacterLiteral" value="43"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dotIndex">
          <typeReference xsi:type="types:Int">
            <comments>// Determine integer and fraction parts</comments>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.45"/>
              <arguments xsi:type="literals:CharacterLiteral" value="46"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.5/@variable"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.1/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.2/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.0/@variable"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.5/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.1/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.56"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.5/@variable"/>
                  </next>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.2/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.55"/>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.5/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                  </next>
                </value>
              </expression>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.3/@variable">
            <comments>// Pad both parts with zeros as necessary</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@parameters.1"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.3/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.2/@variable"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.2/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.3/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.26"/>
                <arguments xsi:type="literals:CharacterLiteral" value="48"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.3/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.6"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.3/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.40"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.1/@variable"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.1/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.3/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.45"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="literals:CharacterLiteral" value="48"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.3/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.6"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@parameters.1"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.124">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@statements.3/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.122/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.75"/>
              </next>
            </arguments>
          </next>
          <self xsi:type="literals:This">
            <comments>// This string contains no sign or dot</comments>
          </self>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_fixed">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bigDecimal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>math</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// This method should be remove by the java-rtf issue.</comments>
        <comments>// Right now the scale and digits information of the type code is lost.</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.124">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.123/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.92"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.123/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/math/BigDecimal.class.xmi#//@classifiers.0/@members.75"/>
              </next>
            </arguments>
          </next>
          <self xsi:type="literals:This">
            <comments>// This string might contain sign and/or dot</comments>
          </self>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write_fixed">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="string">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="signum">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// The string may contain a sign and dot</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="stringLength">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="doubleDigit">
          <typeReference xsi:type="types:Byte">
            <comments>// Each octet contains (up to) two decimal digits</comments>
          </typeReference>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="ch">
          <typeReference xsi:type="types:Char"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="digit">
          <typeReference xsi:type="types:Byte"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="numDigits">
          <typeReference xsi:type="types:Int">
            <comments>// First calculate the length of the string without optional sign and dot</comments>
          </typeReference>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.5/@init"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Continue"/>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.2/@variable"/>
                <children xsi:type="literals:CharacterLiteral" value="45"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.2/@variable"/>
                <children xsi:type="literals:CharacterLiteral" value="43"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.2/@variable"/>
                <children xsi:type="literals:CharacterLiteral" value="46"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.4/@variable"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.5/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.0/@variable"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.5/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.23"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.6/@init"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Continue"/>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.2/@variable"/>
                <children xsi:type="literals:CharacterLiteral" value="45"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.2/@variable"/>
                <children xsi:type="literals:CharacterLiteral" value="43"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.2/@variable"/>
                <children xsi:type="literals:CharacterLiteral" value="46"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Character.class.xmi#//@classifiers.0/@members.134"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.2/@variable"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Character.class.xmi#//@classifiers.0"/>
                </child>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1286"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                </throwable>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.3/@variable"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// If the fixed type has an odd number of decimal digits,</comments>
            <comments>// then the representation begins with the first (most significant) digit.</comments>
            <comments>// Otherwise, this first half-octet is all zero, and the first digit</comments>
            <comments>// is in the second half-octet.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentOr"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.3/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:SelfReference">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.1/@variable"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.4/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <multiplicativeOperators xsi:type="operators:Remainder"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentOr"/>
                  <value xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ShiftExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.3/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                      <shiftOperators xsi:type="operators:LeftShift"/>
                    </expression>
                  </value>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.4/@variable"/>
              <operator xsi:type="operators:MinusMinus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.6/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.0/@variable"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.6/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// The sign configuration, in the last half-octet of the representation,</comments>
        <comments>// is 0xD for negative numbers and 0xC for positive and zero values</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentOr"/>
              <value xsi:type="literals:HexIntegerLiteral" hexValue="13"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@parameters.1"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentOr"/>
              <value xsi:type="literals:HexIntegerLiteral" hexValue="12"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.124/@statements.1/@variable"/>
          </next>
          <self xsi:type="literals:This"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:Field" name="_id">
      <initialValue xsi:type="references:StringReference" value="IDL:omg.org/CORBA/DataOutputStream:1.0"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="_ids">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.125"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="_truncatable_ids">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.126"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.126">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.5"/>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="printBuffer">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* for debugging */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.129">
            <arguments xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="printBuffer">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bbwi">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ByteBufferWithInfo.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
              <arguments xsi:type="references:StringReference" value="+++++++ Output Buffer ++++++++"/>
            </next>
            <target xsi:type="members:Field" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.34"/>
            </next>
            <target xsi:type="members:Field" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Current position: "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Total length : "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.4"/>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.34"/>
            </next>
            <target xsi:type="members:Field" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="charBuf">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Char"/>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="j">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </variable>
            </statements>
            <statements xsi:type="statements:WhileLoop">
              <comments>// For every 16 bytes, there is one line</comments>
              <comments>// of output.  First, the hex output of</comments>
              <comments>// the 16 bytes with each byte separated</comments>
              <comments>// by a space.</comments>
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="k">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@parameters.0">
                      <next xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.16"/>
                          <arguments xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@init"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.0/@variable"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                          </arguments>
                        </next>
                        <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
                      </next>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="256"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </value>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <relationOperators xsi:type="operators:LessThan"/>
                  </condition>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="hex">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Integer.class.xmi#//@classifiers.0/@members.11"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.1/@statement/@statements.2/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:StringReference" value="0"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.1/@statement/@statements.2/@variable"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </value>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.1/@statement/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                      </next>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.32"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.1/@statement/@statements.2/@variable"/>
                          <children xsi:type="references:StringReference" value=" "/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                      </next>
                      <target xsi:type="members:Field" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.0/@variable"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </children>
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.0/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@init"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </children>
                  <relationOperators xsi:type="operators:LessThan"/>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:WhileLoop">
              <comments>// Add any extra spaces to align the</comments>
              <comments>// text column in case we didn't end</comments>
              <comments>// at 16</comments>
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.32"/>
                        <arguments xsi:type="references:StringReference" value="   "/>
                      </next>
                      <target xsi:type="members:Field" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.0/@variable"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="x">
                <typeReference xsi:type="types:Int">
                  <comments>// Now output the ASCII equivalents.  Non-ASCII</comments>
                  <comments>// characters are shown as periods.</comments>
                </typeReference>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </variable>
            </statements>
            <statements xsi:type="statements:WhileLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.5/@variable">
                        <arraySelectors>
                          <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.3/@variable"/>
                        </arraySelectors>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:Char"/>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@parameters.0">
                          <next xsi:type="references:IdentifierReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.16"/>
                              <arguments xsi:type="expressions:AdditiveExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@init"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.3/@variable"/>
                                <additiveOperators xsi:type="operators:Addition"/>
                              </arguments>
                            </next>
                            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
                          </next>
                        </child>
                      </value>
                    </expression>
                  </statement>
                  <condition xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0/@members.43"/>
                      <arguments xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:Char"/>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@parameters.0">
                          <next xsi:type="references:IdentifierReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.16"/>
                              <arguments xsi:type="expressions:AdditiveExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@init"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.3/@variable"/>
                                <additiveOperators xsi:type="operators:Addition"/>
                              </arguments>
                            </next>
                            <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
                          </next>
                        </child>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0"/>
                  </condition>
                  <elseStatement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.5/@variable">
                        <arraySelectors>
                          <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.3/@variable"/>
                        </arraySelectors>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:CharacterLiteral" value="46"/>
                    </expression>
                  </elseStatement>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.3/@variable"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.3/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </children>
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.3/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@init"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                    </next>
                  </children>
                  <relationOperators xsi:type="operators:LessThan"/>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                    <arguments xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.5/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@statement/@statements.3/@variable"/>
                    </arguments>
                  </next>
                  <target xsi:type="members:Field" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="i">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@statements.0/@init"/>
            <assignmentOperator xsi:type="operators:AssignmentPlus"/>
            <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
          </updates>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.129/@statements.6/@catcheBlocks.0/@parameter">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.14"/>
              </next>
            </expression>
          </statements>
          <parameter name="t">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Throwable.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
              <arguments xsi:type="references:StringReference" value="++++++++++++++++++++++++++++++"/>
            </next>
            <target xsi:type="members:Field" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeIndirection">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tag">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="posIndirectedTo">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <comments>// Must ensure that there are no chunks between the tag</comments>
          <comments>// and the actual indirection value.  This isn't talked about</comments>
          <comments>// in the spec, but seems to cause headaches in our code.</comments>
          <comments>// At the very least, this method isolates the indirection code</comments>
          <comments>// that was duplicated so often.</comments>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.35">
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
          <comments>// write indirection tag</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.130/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
          <comments>// write indirection</comments>
          <comments>// Use parent.getRealIndex() so that it can be overridden by TypeCodeOutputStreams</comments>
          <comments>/*&#xA;        System.out.println(&quot;CDROutputStream_1_0 writing indirection pos &quot; + posIndirectedTo +&#xA;                           &quot; - real index &quot; + parent.getRealIndex(get_offset()) + &quot; = &quot; +&#xA;                           (posIndirectedTo - parent.getRealIndex(get_offset())));&#xA;*/</comments>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.130/@parameters.1"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CDROutputStream.class.xmi#//@classifiers.0/@members.63"/>
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
              </next>
              <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
            </children>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCharConverter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>CodeSetConversion</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodeSetConversion$CTBConverter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CDROutputStream.class.xmi#//@classifiers.0/@members.75"/>
              </next>
              <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getWCharConverter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>CodeSetConversion</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodeSetConversion$CTBConverter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CDROutputStream.class.xmi#//@classifiers.0/@members.76"/>
              </next>
              <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="dprint">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="msg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0/@members.30"/>
              <arguments xsi:type="references:SelfReference">
                <self xsi:type="literals:This"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.133/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../orbutil/ORBUtility.class.xmi#//@classifiers.0"/>
          </expression>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="alignOnBoundary">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="octetBoundary">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.134/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="start_value">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="rep_id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.133">
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="start_value w/ rep id "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.135/@parameters.0"/>
                <children xsi:type="references:StringReference" value=" called at pos "/>
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
                <children xsi:type="references:StringReference" value=" position "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.83"/>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.112">
          <comments>// Write value_tag</comments>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          <arguments xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.110">
          <comments>// Write rep. id</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.135/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15">
            <comments>// Write Value chunk</comments>
          </child>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.81">
          <comments>// Make sure to chunk the custom data</comments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="end_value">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.133">
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="end_value called at pos "/>
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.80"/>
                <children xsi:type="references:StringReference" value=" position "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.83"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.114">
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Check to see if we need to start another block for a</comments>
        <comments>// possible outer value.  Since we're in the stream</comments>
        <comments>// format 2 custom type contained by another custom</comments>
        <comments>// type, mustChunk should always be true.</comments>
        <comments>//</comments>
        <comments>// Here's why we need to open a continuation chunk:</comments>
        <comments>//</comments>
        <comments>// We need to enclose the default data of the</comments>
        <comments>// next subclass down in chunks.  There won't be</comments>
        <comments>// an end tag separating the superclass optional</comments>
        <comments>// data and the subclass's default data.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.133">
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="mustChunk is "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.81"/>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="close">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
          <comments>// tell BufferManagerWrite to release any ByteBuffers</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="BufferManagerWrite.class.xmi#//@classifiers.0/@members.11"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// It's possible bbwi.byteBuffer is shared between</comments>
        <comments>// this OutputStream and an InputStream. Thus, we check</comments>
        <comments>// if the Input/Output streams are using the same ByteBuffer.</comments>
        <comments>// If they sharing the same ByteBuffer we need to ensure only</comments>
        <comments>// one of those ByteBuffers are released to the ByteBufferPool.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="bbHash">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.21"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="messageMediator">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../../pept/protocol/MessageMediator.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="CDROutputStream.class.xmi#//@classifiers.0/@members.59"/>
                </next>
                <target xsi:type="members:Field" href="CDROutputStreamBase.class.xmi#//@classifiers.0/@members.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="inputObj">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="CDRInputObject.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="CDRInputObject.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.1/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../pept/protocol/MessageMediator.class.xmi#//@classifiers.0/@members.9"/>
                      </next>
                    </child>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="inputBb">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.2/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="CDRInputStream.class.xmi#//@classifiers.0/@members.76"/>
                        </next>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="iBbHash">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.2/@statement/@statements.1/@statement/@statements.1/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.21"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.2/@statement/@statements.1/@statement/@statements.0/@variable"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <comments>// shared?</comments>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.2/@statement/@statements.0/@variable">
                              <comments>// Set InputStream's ByteBuffer and bbwi to null</comments>
                              <comments>// so its ByteBuffer cannot be released to the pool</comments>
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="CDRInputStream.class.xmi#//@classifiers.0/@members.77"/>
                                <arguments xsi:type="literals:NullLiteral"/>
                              </next>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.2/@statement/@statements.0/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="CDRInputStream.class.xmi#//@classifiers.0/@members.78"/>
                                <arguments xsi:type="literals:NullLiteral"/>
                              </next>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.2/@statement/@statements.1/@statement/@statements.1/@variable"/>
                        </condition>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.2/@statement/@statements.1/@statement/@statements.0/@variable"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.2/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.1/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="byteBufferPool">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// release this stream's ByteBuffer to the pool</comments>
                  <target xsi:type="classifiers:Interface" href="../../pept/transport/ByteBufferPool.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../spi/orb/ORB.class.xmi#//@classifiers.0/@members.76"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="bbAddress">
                  <typeReference xsi:type="types:Int">
                    <comments>// print address of ByteBuffer being released</comments>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.21"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
                        </next>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="sb">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="80"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.4/@statement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                    <arguments xsi:type="references:StringReference" value=".close - releasing ByteBuffer id ("/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.4/@statement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                      <arguments xsi:type="references:StringReference" value=") to ByteBufferPool."/>
                    </next>
                    <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.27"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.4/@statement/@statements.0/@variable"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="msg">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.4/@statement/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.133">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.4/@statement/@statements.4/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.137/@statements.1/@statement/@statements.3/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../pept/transport/ByteBufferPool.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.107"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="ByteBufferWithInfo.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.105"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.107"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="CDROutputStreamBase.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
