<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16" name="POAPolicyMediator.java">
  <comments>/*&#xA; * @(#)POAPolicyMediator.java&#x9;1.23 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>corba</namespaces>
  <namespaces>se</namespaces>
  <namespaces>impl</namespaces>
  <namespaces>oa</namespaces>
  <namespaces>poa</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableServer</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/Servant.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableServer</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/omg/PortableServer/ServantManager.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableServer</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/ForwardRequest.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableServer</namespaces>
    <namespaces>POAPackage</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/ObjectAlreadyActive.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableServer</namespaces>
    <namespaces>POAPackage</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/ServantAlreadyActive.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableServer</namespaces>
    <namespaces>POAPackage</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/ServantNotActive.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableServer</namespaces>
    <namespaces>POAPackage</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/NoServant.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableServer</namespaces>
    <namespaces>POAPackage</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableServer</namespaces>
    <namespaces>POAPackage</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/ObjectNotActive.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="POAPolicyMediator">
    <members xsi:type="members:InterfaceMethod" name="getPolicies">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** Return the policies object that was used to create this&#xA;    * POAPolicyMediator.&#xA;    */</comments>
          <target xsi:type="classifiers:Class" href="Policies.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getScid">
      <typeReference xsi:type="types:Int">
        <comments>/** Return the subcontract ID to use in the IIOP profile in IORs&#xA;    * created by this POAPolicyMediator's POA.  This is initialized&#xA;    * according to the policies and the POA used to construct this&#xA;    * POAPolicyMediator in the POAPolicyMediatorFactory.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServerId">
      <typeReference xsi:type="types:Int">
        <comments>/** Return the server ID to use in the IIOP profile in IORs&#xA;    * created by this POAPolicyMediator's POA.  This is initialized&#xA;    * according to the policies and the POA used to construct this&#xA;    * POAPolicyMediator in the POAPolicyMediatorFactory.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getInvocationServant">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/** Get the servant to use for an invocation with the &#xA;    * given id and operation.&#xA;    * @param id the object ID for which we are requesting a servant&#xA;    * @param operation the name of the operation to be performed on &#xA;    * the servant&#xA;    * @return the resulting Servant.&#xA;    */</comments>
        <namespaces>java</namespaces>
        <namespaces>lang</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="operation">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/ForwardRequest.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="returnServant">
      <typeReference xsi:type="types:Void">
        <comments>/** Release a servant that was obtained from getInvocationServant.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="etherealizeAll">
      <typeReference xsi:type="types:Void">
        <comments>/** Etherealize all servants associated with this POAPolicyMediator.&#xA;    * Does nothing if the retention policy is non-retain.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="clearAOM">
      <typeReference xsi:type="types:Void">
        <comments>/** Delete everything in the active object map.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServantManager">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** Return the servant manager.  Will throw WrongPolicy&#xA;    * if the request processing policy is not USE_SERVANT_MANAGER.&#xA;    */</comments>
          <target xsi:type="classifiers:Interface" href="../../../../../../../org/omg/PortableServer/ServantManager.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setServantManager">
      <typeReference xsi:type="types:Void">
        <comments>/** Set the servant manager.  Will throw WrongPolicy&#xA;    * if the request processing policy is not USE_SERVANT_MANAGER.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="servantManager">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/omg/PortableServer/ServantManager.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDefaultServant">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** Return the default servant.   Will throw WrongPolicy&#xA;    * if the request processing policy is not USE_DEFAULT_SERVANT.&#xA;    */</comments>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/Servant.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/NoServant.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setDefaultServant">
      <typeReference xsi:type="types:Void">
        <comments>/** Set the default servant.   Will throw WrongPolicy&#xA;    * if the request processing policy is not USE_DEFAULT_SERVANT.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="servant">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="activateObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="servant">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/ObjectAlreadyActive.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/ServantAlreadyActive.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="deactivateObject">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** Deactivate the object that is associated with the given id.&#xA;    * Returns the servant for id.&#xA;    */</comments>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/Servant.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/ObjectNotActive.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="newSystemId">
      <typeReference xsi:type="types:Byte">
        <comments>/** Allocate a new, unique system ID.  Requires the ID assignment policy&#xA;    * to be SYSTEM.&#xA;    */</comments>
      </typeReference>
      <arrayDimensionsBefore/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="servantToId">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="servant">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/ServantNotActive.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="idToServant">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/Servant.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/ObjectNotActive.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../../org/omg/PortableServer/POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** POAPolicyMediator defines an interface to which the POA delegates all&#xA; * policy specific operations.  This permits code paths for different&#xA; * policies to be optimized by creating the correct code at POA creation &#xA; * time.  Also note that as much as possible, this interface does not &#xA; * do any concurrency control, except as noted.  The POA is responsible&#xA; * for concurrency control.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
