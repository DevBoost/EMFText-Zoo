<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../../../java.ecore#/17" name="CodeSetConversion.java">
  <comments>/*&#xA; * @(#)CodeSetConversion.java&#x9;1.19 04/03/01&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>corba</namespaces>
  <namespaces>se</namespaces>
  <namespaces>impl</namespaces>
  <namespaces>encoding</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../java/util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/util/HashMap.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/nio/CharBuffer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/Charset.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/CharsetEncoder.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/CharsetDecoder.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/CharacterCodingException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/IllegalCharsetNameException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/MalformedInputException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/UnsupportedCharsetException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/UnmappableCharacterException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>logging</namespaces>
    <classifier xsi:type="classifiers:Class" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>logging</namespaces>
    <classifier xsi:type="classifiers:Class" href="../logging/OMGSystemException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>logging</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="CodeSetConversion">
    <members xsi:type="classifiers:Class" name="CTBConverter">
      <members xsi:type="members:InterfaceMethod" name="convert">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="chToConvert">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// Perform the conversion of the provided char or String,</comments>
          <comments>// allowing the caller to query for more information</comments>
          <comments>// before writing.</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      </members>
      <members xsi:type="members:InterfaceMethod" name="convert">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="strToConvert">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      </members>
      <members xsi:type="members:InterfaceMethod" name="getNumBytes">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// How many bytes resulted from the conversion?</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      </members>
      <members xsi:type="members:InterfaceMethod" name="getMaxBytesPerChar">
        <typeReference xsi:type="types:Float"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// What's the maximum number of bytes per character?</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      </members>
      <members xsi:type="members:InterfaceMethod" name="isFixedWidthEncoding">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      </members>
      <members xsi:type="members:InterfaceMethod" name="getAlignment">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// What byte boundary should the stream align to before</comments>
          <comments>// calling writeBytes?  For instance, a fixed width</comments>
          <comments>// encoding with 2 bytes per char in a stream which</comments>
          <comments>// doesn't encapsulate the char's bytes should align</comments>
          <comments>// on a 2 byte boundary.  (Ex:  UTF16 in GIOP1.1)</comments>
          <comments>//</comments>
          <comments>// Note: This has no effect on the converted bytes.  It</comments>
          <comments>// is just information available to the caller.</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      </members>
      <members xsi:type="members:InterfaceMethod" name="getBytes">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// Get the resulting bytes.  Warning:  You must use getNumBytes()</comments>
          <comments>// to determine the end of the data in the byte array instead</comments>
          <comments>// of array.length!  The array may be used internally, so don't</comments>
          <comments>// save references.</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Abstraction for char to byte conversion.&#xA;     *&#xA;     * Must be used in the proper sequence:&#xA;     *&#xA;     * 1)  convert&#xA;     * 2)  Optional getNumBytes and/or getAlignment (if necessary)&#xA;     * 3)  getBytes (see warning)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="classifiers:Class" name="BTCConverter">
      <members xsi:type="members:InterfaceMethod" name="isFixedWidthEncoding">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// In GIOP 1.1, interoperability can only be achieved with</comments>
          <comments>// fixed width encodings like UTF-16.  This is because wstrings</comments>
          <comments>// specified how many code points follow rather than specifying</comments>
          <comments>// the length in octets.</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      </members>
      <members xsi:type="members:InterfaceMethod" name="getFixedCharWidth">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      </members>
      <members xsi:type="members:InterfaceMethod" name="getNumChars">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// Called after getChars to determine the true size of the</comments>
          <comments>// converted array.</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      </members>
      <members xsi:type="members:InterfaceMethod" name="getChars">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="bytes">
          <typeReference xsi:type="types:Byte"/>
          <arrayDimensionsBefore/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="length">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// Perform the conversion using length bytes from the given</comments>
          <comments>// input stream.  Warning:  You must use getNumChars() to</comments>
          <comments>// determine the correct length of the resulting array.</comments>
          <comments>// The same array may be used internally over multiple</comments>
          <comments>// calls.</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Abstraction for byte to char conversion.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="classifiers:Class" name="JavaCTBConverter">
      <members xsi:type="members:Field" name="wrapper">
        <initialValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.300"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0/@members.3"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0"/>
            </arguments>
          </next>
          <target xsi:type="classifiers:Class" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="omgWrapper">
        <initialValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../logging/OMGSystemException.class.xmi#//@classifiers.0/@members.134"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0/@members.3"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0"/>
            </arguments>
          </next>
          <target xsi:type="classifiers:Class" href="../logging/OMGSystemException.class.xmi#//@classifiers.0"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../logging/OMGSystemException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="ctb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/CharsetEncoder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// nio.Charset.CharsetEncoder actually does the work here</comments>
          <comments>// have to use it directly rather than through String's interface</comments>
          <comments>// because we want to know when errors occur during the conversion.</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="alignment">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// Proper alignment for this type of converter.  For instance,</comments>
          <comments>// ASCII has alignment of 1 (1 byte per char) but UTF16 has</comments>
          <comments>// alignment of 2 (2 bytes per char)</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="chars">
        <initialValue xsi:type="literals:NullLiteral"/>
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// Char buffer to hold the input. </comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="numBytes">
        <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// How many bytes are generated from the conversion?</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="numChars">
        <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// How many characters were converted (temporary variable</comments>
          <comments>// for cross method communication)</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="buffer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// ByteBuffer holding the converted input.  This is necessary</comments>
          <comments>// since we have to do calculations that require the conversion</comments>
          <comments>// before writing the array to the stream.</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="codeset">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>OSFCodeSetRegistry</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// What code set are we using?</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Constructor" name="JavaCTBConverter">
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.2"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="CodeSetCache.class.xmi#//@classifiers.0/@members.5"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.5"/>
                    </next>
                  </arguments>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="tmpCharset">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/Charset.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/charset/Charset.class.xmi#//@classifiers.0/@members.22"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.5"/>
                        </next>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/Charset.class.xmi#//@classifiers.0"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.2"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9/@statements.0/@statements.1/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/charset/Charset.class.xmi#//@classifiers.0/@members.34"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="CodeSetCache.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.5"/>
                      </next>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.2"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.2"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <comments>// This can only happen if one of our Entries has</comments>
              <comments>// an invalid name.</comments>
              <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1059"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9/@statements.0/@catcheBlocks.0/@parameter"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.5"/>
                    </next>
                  </arguments>
                </next>
              </throwable>
            </statements>
            <parameter name="icne">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/IllegalCharsetNameException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <comments>// This can only happen if one of our Entries has</comments>
              <comments>// an unsupported name.</comments>
              <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1059"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9/@statements.0/@catcheBlocks.1/@parameter"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.5"/>
                    </next>
                  </arguments>
                </next>
              </throwable>
            </statements>
            <parameter name="ucne">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/UnsupportedCharsetException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.3"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9/@parameters.1"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="codeset">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>OSFCodeSetRegistry</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="alignmentForEncoding">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
      </members>
      <members xsi:type="members:ClassMethod" name="getMaxBytesPerChar">
        <typeReference xsi:type="types:Float"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.2">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/charset/CharsetEncoder.class.xmi#//@classifiers.0/@members.28"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="convert">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="chToConvert">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.4"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Char"/>
                <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.4"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.4">
              <comments>// The CharToByteConverter only takes a char[]</comments>
              <arraySelectors>
                <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </arraySelectors>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.11/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.17"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="convert">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="strToConvert">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <comments>// Try to save a memory allocation if possible.  Usual</comments>
          <comments>// space/time trade off.  If we could get the char[] out of</comments>
          <comments>// the String without copying, that would be great, but</comments>
          <comments>// it's forbidden since String is immutable.</comments>
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.4"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Char"/>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.12/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                </sizes>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:ConditionalOrExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.4"/>
              <children xsi:type="literals:NullLiteral"/>
            </children>
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.4">
                <next xsi:type="references:IdentifierReference"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.12/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </children>
              <relationOperators xsi:type="operators:LessThan"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.12/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.12/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0/@members.29"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.4"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.17"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getNumBytes">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAlignment">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.3"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isFixedWidthEncoding">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.7"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getBytes">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <comments>// Note that you can't use buffer.length since the buffer might</comments>
          <comments>// be larger than the actual number of converted bytes depending</comments>
          <comments>// on the encoding.</comments>
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.24"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="convertCharArray">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7">
                <comments>// Possible optimization of directly converting into the CDR buffer.</comments>
                <comments>// However, that means the CDR code would have to reserve</comments>
                <comments>// a 4 byte string length ahead of time, and we'd need a</comments>
                <comments>// confusing partial conversion scheme for when we couldn't</comments>
                <comments>// fit everything in the buffer but needed to know the</comments>
                <comments>// converted length before proceeding due to fragmentation.</comments>
                <comments>// Then there's the issue of the chunking code.</comments>
                <comments>//</comments>
                <comments>// For right now, this is less messy and basic tests don't</comments>
                <comments>// show more than a 1 ms penalty worst case.  Less than a</comments>
                <comments>// factor of 2 increase.</comments>
                <comments>// Convert the characters</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.2">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/charset/CharsetEncoder.class.xmi#//@classifiers.0/@members.35"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/CharBuffer.class.xmi#//@classifiers.0/@members.6"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.4"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/nio/CharBuffer.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5">
                <comments>// ByteBuffer returned by the encoder will set its limit</comments>
                <comments>// to byte immediately after the last written byte.</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/Buffer.class.xmi#//@classifiers.0/@members.9"/>
                </next>
              </value>
            </expression>
          </statements>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <comments>// an encoding operation is already in progress</comments>
              <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.887"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.17/@statements.0/@catcheBlocks.0/@parameter"/>
                </next>
              </throwable>
            </statements>
            <parameter name="ise">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/lang/IllegalStateException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <comments>// There were illegal Unicode char pairs</comments>
              <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.679"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.17/@statements.0/@catcheBlocks.1/@parameter"/>
                </next>
              </throwable>
            </statements>
            <parameter name="mie">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/MalformedInputException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <comments>// A character doesn't map to the desired code set</comments>
              <comments>// CORBA formal 00-11-03.</comments>
              <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../logging/OMGSystemException.class.xmi#//@classifiers.0/@members.421"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.17/@statements.0/@catcheBlocks.2/@parameter"/>
                </next>
              </throwable>
            </statements>
            <parameter name="uce">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/UnmappableCharacterException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <comments>// If this happens, then some other encoding error occured</comments>
              <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.887"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.17/@statements.0/@catcheBlocks.3/@parameter"/>
                </next>
              </throwable>
            </statements>
            <parameter name="cce">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/CharacterCodingException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Implementation of CTBConverter which uses a nio.Charset.CharsetEncoder&#xA;     * to do the real work.  Handles translation of exceptions to the &#xA;     * appropriate CORBA versions.&#xA;     */</comments>
      </annotationsAndModifiers>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.0"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="UTF16CTBConverter">
      <members xsi:type="members:Constructor" name="UTF16CTBConverter">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.8"/>
              </next>
              <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
            </arguments>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// Using this constructor, we will always write a BOM</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Constructor" name="UTF16CTBConverter">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="expressions:ConditionalExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@members.1/@parameters.0"/>
              <expressionIf xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.7"/>
                </next>
                <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
              </expressionIf>
              <expressionElse xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.6"/>
                </next>
                <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
              </expressionElse>
            </arguments>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="littleEndian">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// Using this constructor, we don't use a BOM and use the</comments>
          <comments>// byte order specified</comments>
        </annotationsAndModifiers>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Special UTF16 converter which can either always write a BOM&#xA;     * or use a specified byte order without one.&#xA;     */</comments>
      </annotationsAndModifiers>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.2"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="JavaBTCConverter">
      <members xsi:type="members:Field" name="wrapper">
        <initialValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.300"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0/@members.3"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0"/>
            </arguments>
          </next>
          <target xsi:type="classifiers:Class" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="omgWrapper">
        <initialValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../logging/OMGSystemException.class.xmi#//@classifiers.0/@members.134"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0/@members.3"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0"/>
            </arguments>
          </next>
          <target xsi:type="classifiers:Class" href="../logging/OMGSystemException.class.xmi#//@classifiers.0"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../logging/OMGSystemException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="btc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/CharsetDecoder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      </members>
      <members xsi:type="members:Field" name="buffer">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="resultingNumChars">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="codeset">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>OSFCodeSetRegistry</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Constructor" name="JavaBTCConverter">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.2">
              <comments>// Obtain a Decoder</comments>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.4/@members.11">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.6/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                </arguments>
              </next>
              <self xsi:type="literals:This"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.5"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.6/@parameters.0"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="codeset">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>OSFCodeSetRegistry</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
      </members>
      <members xsi:type="members:ClassMethod" name="isFixedWidthEncoding">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.7"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getFixedCharWidth">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// Should only be called if isFixedWidthEncoding is true</comments>
          <comments>// IMPORTANT: This calls OSFCodeSetRegistry.Entry, not</comments>
          <comments>//            CharsetDecoder.maxCharsPerByte().</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.5">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.8"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getNumChars">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.4"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getChars">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="bytes">
          <typeReference xsi:type="types:Byte"/>
          <arrayDimensionsBefore/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="numBytes">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:TryBlock">
          <comments>// Possible optimization of reading directly from the CDR</comments>
          <comments>// byte buffer.  The sun.io converter supposedly can handle</comments>
          <comments>// incremental conversions in which a char is broken across</comments>
          <comments>// two convert calls.</comments>
          <comments>//</comments>
          <comments>// Basic tests didn't show more than a 1 ms increase</comments>
          <comments>// worst case.  It's less than a factor of 2 increase.</comments>
          <comments>// Also makes the interface more difficult.</comments>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="byteBuf">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0/@members.9"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.10/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.10/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.10/@parameters.2"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../java/nio/ByteBuffer.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="charBuf">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/nio/CharBuffer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.2">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/charset/CharsetDecoder.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.10/@statements.0/@statements.0/@variable"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.4">
                <comments>// CharBuffer returned by the decoder will set its limit</comments>
                <comments>// to byte immediately after the last written byte.</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.10/@statements.0/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/Buffer.class.xmi#//@classifiers.0/@members.9"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// IMPORTANT - It's possible the underlying char[] in the</comments>
            <comments>//             CharBuffer returned by btc.decode(byteBuf)</comments>
            <comments>//             is longer in length than the number of characters</comments>
            <comments>//             decoded. Hence, the check below to ensure the</comments>
            <comments>//             char[] returned contains all the chars that have</comments>
            <comments>//             been decoded and no more.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.3"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.10/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/CharBuffer.class.xmi#//@classifiers.0/@members.26"/>
                    </next>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.10/@statements.0/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/Buffer.class.xmi#//@classifiers.0/@members.9"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.10/@statements.0/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/Buffer.class.xmi#//@classifiers.0/@members.6"/>
                </next>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.3"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="arrays:ArrayInstantiationBySize">
                    <typeReference xsi:type="types:Char"/>
                    <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.10/@statements.0/@statements.1/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/Buffer.class.xmi#//@classifiers.0/@members.9"/>
                      </next>
                    </sizes>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.10/@statements.0/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/Buffer.class.xmi#//@classifiers.0/@members.8"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </next>
                    <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/CharBuffer.class.xmi#//@classifiers.0/@members.18"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.3"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.10/@statements.0/@statements.1/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/Buffer.class.xmi#//@classifiers.0/@members.9"/>
                      </next>
                    </arguments>
                  </next>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.3"/>
          </statements>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <comments>// There were a decoding operation already in progress</comments>
              <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.891"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.10/@statements.0/@catcheBlocks.0/@parameter"/>
                </next>
              </throwable>
            </statements>
            <parameter name="ile">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/lang/IllegalStateException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <comments>// There were illegal Unicode char pairs</comments>
              <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.679"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.10/@statements.0/@catcheBlocks.1/@parameter"/>
                </next>
              </throwable>
            </statements>
            <parameter name="mie">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/MalformedInputException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <comments>// A character doesn't map to the desired code set.</comments>
              <comments>// CORBA formal 00-11-03.</comments>
              <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../logging/OMGSystemException.class.xmi#//@classifiers.0/@members.421"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.10/@statements.0/@catcheBlocks.2/@parameter"/>
                </next>
              </throwable>
            </statements>
            <parameter name="uce">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/UnmappableCharacterException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <comments>// If this happens, then a character decoding error occured.</comments>
              <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.891"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.10/@statements.0/@catcheBlocks.3/@parameter"/>
                </next>
              </throwable>
            </statements>
            <parameter name="cce">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/CharacterCodingException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getConverter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/CharsetDecoder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="javaCodeSetName">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;         * Utility method to find a CharsetDecoder in the&#xA;         * cache or create a new one if necessary.  Throws an&#xA;         * INTERNAL if the code set is unknown.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="result">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/CharsetDecoder.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="literals:NullLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.11/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="CodeSetCache.class.xmi#//@classifiers.0/@members.4"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.11/@parameters.0"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="tmpCharset">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/Charset.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/charset/Charset.class.xmi#//@classifiers.0/@members.22"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.11/@parameters.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/Charset.class.xmi#//@classifiers.0"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.11/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.11/@statements.1/@statements.1/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../java/nio/charset/Charset.class.xmi#//@classifiers.0/@members.33"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="CodeSetCache.class.xmi#//@classifiers.0/@members.6"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.11/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.11/@statements.0/@variable"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.11/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <catcheBlocks>
            <statements xsi:type="statements:Throw">
              <comments>// This can only happen if one of our charset entries has</comments>
              <comments>// an illegal name.</comments>
              <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1063"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.11/@statements.1/@catcheBlocks.0/@parameter"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.11/@parameters.0"/>
                </next>
              </throwable>
            </statements>
            <parameter name="icne">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../java/nio/charset/IllegalCharsetNameException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.11/@statements.0/@variable"/>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Implementation of BTCConverter which uses a sun.io.ByteToCharConverter&#xA;     * for the real work.  Handles translation of exceptions to the &#xA;     * appropriate CORBA versions.&#xA;     */</comments>
      </annotationsAndModifiers>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.1"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="UTF16BTCConverter">
      <members xsi:type="members:Field" name="defaultToLittleEndian">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="converterUsesBOM">
        <initialValue xsi:type="literals:BooleanLiteral" value="true"/>
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="UTF16_BE_MARKER">
        <initialValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Char"/>
          <child xsi:type="literals:HexIntegerLiteral" hexValue="65279"/>
        </initialValue>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="UTF16_LE_MARKER">
        <initialValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Char"/>
          <child xsi:type="literals:HexIntegerLiteral" hexValue="65534"/>
        </initialValue>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Constructor" name="UTF16BTCConverter">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.8"/>
              </next>
              <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
            </arguments>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.4/@parameters.0"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="defaultToLittleEndian">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// When there isn't a byte order marker, used the byte</comments>
          <comments>// order specified.</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="getChars">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="bytes">
          <typeReference xsi:type="types:Byte"/>
          <arrayDimensionsBefore/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="numBytes">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.5/@members.7">
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.8"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
                  </arguments>
                </expression>
              </statement>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.1"/>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.1"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:BooleanLiteral" value="true"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.4/@members.10">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.5/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.5/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.5/@parameters.2"/>
                </next>
                <self xsi:type="literals:Super"/>
              </returnValue>
            </statements>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.5/@members.6">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.5/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.5/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.5/@parameters.2"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.5/@members.7">
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.7"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </expression>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.0"/>
                  <elseStatement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.5/@members.7">
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.6"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </expression>
                  </elseStatement>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.1"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:BooleanLiteral"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.1"/>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.4/@members.10">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.5/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.5/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.5/@parameters.2"/>
                </next>
                <self xsi:type="literals:Super"/>
              </returnValue>
            </statements>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="hasUTF16ByteOrderMarker">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="array">
          <typeReference xsi:type="types:Byte"/>
          <arrayDimensionsBefore/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="length">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;         * Utility method for determining if a UTF-16 byte order marker is present.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <comments>// If there aren't enough bytes to represent the marker and data,</comments>
          <comments>// return false.</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="b1">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="expressions:AndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@parameters.0">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@parameters.1"/>
                    </arraySelectors>
                  </children>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="b2">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="expressions:AndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@parameters.0">
                    <arraySelectors>
                      <position xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@parameters.1"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </position>
                    </arraySelectors>
                  </children>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="marker">
                <typeReference xsi:type="types:Char"/>
                <initialValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:Char"/>
                  <child xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:InclusiveOrExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ShiftExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.0/@statement/@statements.0/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                          <shiftOperators xsi:type="operators:LeftShift"/>
                        </expression>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ShiftExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.0/@statement/@statements.1/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          <shiftOperators xsi:type="operators:LeftShift"/>
                        </expression>
                      </children>
                    </expression>
                  </child>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.0/@statement/@statements.2/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.2"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.0/@statement/@statements.2/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.3"/>
                  </children>
                </expression>
              </returnValue>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@parameters.2"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </condition>
          <elseStatement xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="switchToConverter">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="newCodeSet">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>OSFCodeSetRegistry</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;         * The current solution for dealing with UTF-16 in CORBA&#xA;         * is that if our sun.io converter requires byte order markers,&#xA;         * and then we see a CORBA wstring/wchar without them, we &#xA;         * switch to the sun.io converter that doesn't require them.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.2">
              <comments>// Use the getConverter method from our superclass.</comments>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.4/@members.11">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.7/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                </arguments>
              </next>
              <self xsi:type="literals:Super"/>
            </value>
          </expression>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Special converter for UTF16 since it's required to optionally&#xA;     * support a byte order marker while the internal Java converters&#xA;     * either require it or require that it isn't there.&#xA;     *&#xA;     * The solution is to check for the byte order marker, and if we&#xA;     * need to do something differently, switch internal converters.&#xA;     */</comments>
      </annotationsAndModifiers>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.4"/>
      </extends>
    </members>
    <members xsi:type="members:ClassMethod" name="getCTBConverter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codeset">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>OSFCodeSetRegistry</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * CTB converter factory for single byte or variable length encodings.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="alignment">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.7"/>
                  </next>
                </child>
              </child>
              <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.8"/>
                </next>
              </expressionElse>
            </expression>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCTBConverter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codeset">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>OSFCodeSetRegistry</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="littleEndian">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="useByteOrderMarkers">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * CTB converter factory for multibyte (mainly fixed) encodings.&#xA;     *&#xA;     * Because of the awkwardness with byte order markers and the possibility of &#xA;     * using UCS-2, you must specify both the endianness of the stream as well as &#xA;     * whether or not to use byte order markers if applicable.  UCS-2 has no byte &#xA;     * order markers.  UTF-16 has optional markers.&#xA;     *&#xA;     * If you select useByteOrderMarkers, there is no guarantee that the encoding&#xA;     * will use the endianness specified.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// UCS2 doesn't have byte order markers, and we're encoding it</comments>
        <comments>// as UTF-16 since UCS2 isn't available in all Java platforms.</comments>
        <comments>// They should be identical with only minor differences in</comments>
        <comments>// negative cases.</comments>
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.3"/>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.1"/>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.10"/>
            </next>
            <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// We can write UTF-16 with or without a byte order marker.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.3"/>
                </typeReference>
              </returnValue>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.2"/>
            <elseStatement xsi:type="statements:Return">
              <returnValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.3"/>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.1"/>
              </returnValue>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.8"/>
            </next>
            <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="alignment">
          <typeReference xsi:type="types:Int">
            <comments>// Everything else uses the generic JavaCTBConverter.</comments>
            <comments>//</comments>
            <comments>// Variable width encodings are aligned on 1 byte boundaries.</comments>
            <comments>// A fixed width encoding with a max. of 4 bytes/char should</comments>
            <comments>// align on a 4 byte boundary.  Note that UTF-16 is a special</comments>
            <comments>// case because of the optional byte order marker, so it's</comments>
            <comments>// handled above.</comments>
            <comments>//</comments>
            <comments>// This doesn't matter for GIOP 1.2 wchars and wstrings</comments>
            <comments>// since the encoded bytes are treated as an encapsulation.</comments>
          </typeReference>
          <initialValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.7"/>
                  </next>
                </child>
              </child>
              <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.8"/>
                </next>
              </expressionElse>
            </expression>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBTCConverter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.1"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codeset">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>OSFCodeSetRegistry</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * BTCConverter factory for single byte or variable width encodings.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.4"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBTCConverter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.1"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codeset">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>OSFCodeSetRegistry</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaultToLittleEndian">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * BTCConverter factory for fixed width multibyte encodings.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.5"/>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.8"/>
              </next>
              <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.10"/>
              </next>
              <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
            </children>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.4"/>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="selectEncoding">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="client">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>CodeSetComponentInfo</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="server">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>CodeSetComponentInfo</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &#xA;     * Follows the code set negotiation algorithm in CORBA formal 99-10-07 13.7.2.&#xA;     *&#xA;     * Returns the proper negotiated OSF character encoding number or&#xA;     * CodeSetConversion.FALLBACK_CODESET.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="serverNative">
          <typeReference xsi:type="types:Int">
            <comments>// A &quot;null&quot; value for the server's nativeCodeSet means that</comments>
            <comments>// the server desired not to indicate one.  We'll take that</comments>
            <comments>// to mean that it wants the first thing in its conversion list.</comments>
            <comments>// If it's conversion list is empty, too, then use the fallback</comments>
            <comments>// codeset.</comments>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1">
                  <next xsi:type="references:IdentifierReference">
                    <arraySelectors>
                      <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </arraySelectors>
                    <target xsi:type="members:Field" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </value>
              </expression>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference"/>
                  <target xsi:type="members:Field" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
            <elseStatement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
              </returnValue>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <comments>// Best case -- client and server don't have to convert</comments>
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// Is this client capable of converting to the server's</comments>
        <comments>// native code set?</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <comments>// The client will convert to the server's</comments>
                <comments>// native code set.</comments>
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                <next xsi:type="references:IdentifierReference">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@init"/>
                  </arraySelectors>
                  <target xsi:type="members:Field" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference"/>
              <target xsi:type="members:Field" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// Is the server capable of converting to the client's</comments>
        <comments>// native code set?</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <comments>// The server will convert to the client's</comments>
                <comments>// native code set.</comments>
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </returnValue>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1">
                <next xsi:type="references:IdentifierReference">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@init"/>
                  </arraySelectors>
                  <target xsi:type="members:Field" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference"/>
              <target xsi:type="members:Field" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// See if there are any code sets that both the server and client</comments>
        <comments>// support (giving preference to the server).  The order</comments>
        <comments>// of conversion sets is from most to least desired.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1">
                      <next xsi:type="references:IdentifierReference">
                        <arraySelectors>
                          <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.5/@init"/>
                        </arraySelectors>
                        <target xsi:type="members:Field" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </returnValue>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1">
                    <next xsi:type="references:IdentifierReference">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.5/@init"/>
                      </arraySelectors>
                      <target xsi:type="members:Field" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                    <next xsi:type="references:IdentifierReference">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.5/@statement/@statements.0/@init"/>
                      </arraySelectors>
                      <target xsi:type="members:Field" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </children>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.5/@statement/@statements.0/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference"/>
                  <target xsi:type="members:Field" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </children>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="y">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.5/@statement/@statements.0/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.5/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference"/>
              <target xsi:type="members:Field" href="CodeSetComponentInfo$CodeSetComponent.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.5/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>// Before using the fallback codesets, the spec calls for a</comments>
        <comments>// compatibility check on the native code sets.  It doesn't make</comments>
        <comments>// sense because loss free communication is always possible with</comments>
        <comments>// UTF8 and UTF16, the fall back code sets.  It's also a lot</comments>
        <comments>// of work to implement.  In the case of incompatibility, the</comments>
        <comments>// spec says to throw a CODESET_INCOMPATIBLE exception.</comments>
        <comments>// Use the fallback</comments>
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="negotiate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>CodeSetComponentInfo</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodeSetComponentInfo$CodeSetContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="client">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="CodeSetComponentInfo.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="server">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="CodeSetComponentInfo.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Perform the code set negotiation algorithm and come up with&#xA;     * the two encodings to use.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="charData">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CodeSetComponentInfo.class.xmi#//@classifiers.0/@members.11"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CodeSetComponentInfo.class.xmi#//@classifiers.0/@members.11"/>
              </next>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.6"/>
                  </next>
                  <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.9"/>
                </next>
                <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="wcharData">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CodeSetComponentInfo.class.xmi#//@classifiers.0/@members.12"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CodeSetComponentInfo.class.xmi#//@classifiers.0/@members.12"/>
              </next>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="OSFCodeSetRegistry$Entry.class.xmi#//@classifiers.0/@members.6"/>
                  </next>
                  <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.8"/>
                </next>
                <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@variable"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>CodeSetComponentInfo</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="CodeSetComponentInfo$CodeSetContext.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Constructor" name="CodeSetConversion">
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// No one should instantiate a CodeSetConversion but the singleton</comments>
        <comments>// instance method</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="classifiers:Class" name="CodeSetConversionHolder">
      <members xsi:type="members:Field" name="csc">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// initialize-on-demand holder</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="impl">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * CodeSetConversion is a singleton, and this is the access point.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13">
          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@members.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="implementation">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Singleton instance</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="FALLBACK_CODESET">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Number used internally to indicate the fallback code</comments>
        <comments>// set.</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="cache">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="CodeSetCache.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodeSetCache.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Provides a thread local cache for the sun.io</comments>
        <comments>// converters.</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Collection of classes, interfaces, and factory methods for&#xA; * CORBA code set conversion.&#xA; *&#xA; * This is mainly used to shield other code from the sun.io&#xA; * converters which might change, as well as provide some basic&#xA; * translation from conversion to CORBA error exceptions.  Some&#xA; * extra work is required here to facilitate the way CORBA&#xA; * says it uses UTF-16 as of the 00-11-03 spec.&#xA; *&#xA; * REVISIT - Since the nio.Charset and nio.Charset.Encoder/Decoder&#xA; *           use NIO ByteBuffer and NIO CharBuffer, the interaction&#xA; *           and interface between this class and the CDR streams&#xA; *           should be looked at more closely for optimizations to&#xA; *           avoid unnecessary copying of data between char[] &amp;&#xA; *           CharBuffer and byte[] &amp; ByteBuffer, especially&#xA; *           DirectByteBuffers.&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
