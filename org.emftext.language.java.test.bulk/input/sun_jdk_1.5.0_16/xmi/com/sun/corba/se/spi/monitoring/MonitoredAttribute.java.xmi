<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../java.ecore#/16" name="MonitoredAttribute.java">
  <comments>/*&#xA; * @(#)MonitoredAttribute.java&#x9;1.3 03/12/19&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>corba</namespaces>
  <namespaces>se</namespaces>
  <namespaces>spi</namespaces>
  <namespaces>monitoring</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>monitoring</namespaces>
    <classifier xsi:type="classifiers:Interface" href="MonitoredAttributeInfo.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="MonitoredAttribute">
    <members xsi:type="members:InterfaceMethod" name="getAttributeInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="MonitoredAttributeInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>///////////////////////////////////////</comments>
        <comments>// operations</comments>
        <comments>/**&#xA; * &lt;p>&#xA; * Gets the Monitored Attribute Info for the attribute.&#xA; * &lt;/p>&#xA; * &lt;p>&#xA; * &#xA; * @param monitoredAttributeInfo for this Monitored Attribute.&#xA; * &lt;/p>&#xA; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setValue">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA; * &lt;p>&#xA; * Sets the value for the Monitored Attribute if isWritable() is false, the&#xA; * method will throw ILLEGAL Operation exception.&#xA; * &#xA; * Also, the type of 'value' should be same as specified in the &#xA; * MonitoredAttributeInfo for a particular instance.&#xA; * &lt;/p>&#xA; * &lt;p>&#xA; * &#xA; * @param value should be any one of the Basic Java Type Objects which are&#xA; * Long, Double, Float, String, Integer, Short, Character, Byte.&#xA; * &lt;/p>&#xA; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA; * &lt;p>&#xA; * Gets the value of the Monitored Attribute. The value can be obtained&#xA; * from different parts of the module. User may choose to delegate the call&#xA; * to getValue() to other variables.&#xA; *&#xA; * NOTE: It is important to make sure that the type of Object returned in&#xA; * getvalue is same as the one specified in MonitoredAttributeInfo for this&#xA; * attribute.&#xA; * &lt;/p>&#xA; * &lt;p>&#xA; * &#xA; * &lt;/p>&#xA; * &lt;p>&#xA; * &#xA; * @param value is the current value for this MonitoredAttribute &#xA; * &lt;/p>&#xA; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA; * &lt;p>&#xA; * Gets the name of the Monitored Attribute.&#xA; * &lt;/p>&#xA; * &lt;p>&#xA; * &#xA; * @param name of this Attribute &#xA; * &lt;/p>&#xA; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="clearState">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA; * &lt;p>&#xA; * If this attribute needs to be cleared, the user needs to implement this&#xA; * method to reset the state to initial state. If the Monitored Attribute&#xA; * doesn't change like for example (ConnectionManager High Water Mark),&#xA; * then clearState() is a No Op.&#xA; * &lt;/p>&#xA; * &#xA; */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>&#xA; * &#xA; * @author Hemanth Puttaswamy&#xA; * &lt;/p>&#xA; * &lt;p>&#xA; * Monitored Attribute is the interface to represent a Monitorable&#xA; * Attribute. Using this interface, one can get the value of the attribute&#xA; * and set the value if it is a writeable attribute.&#xA; * &lt;/p>&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
