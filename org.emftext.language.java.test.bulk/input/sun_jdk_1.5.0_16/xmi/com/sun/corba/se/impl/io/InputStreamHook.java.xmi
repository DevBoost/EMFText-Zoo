<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../java.ecore#/16" name="InputStreamHook.java">
  <comments>/*&#xA; * @(#)InputStreamHook.java&#x9;1.20 05/01/04&#xA; *&#xA; * Copyright 2005 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <comments>/*&#xA; * Licensed Materials - Property of IBM&#xA; * RMI-IIOP v1.0&#xA; * Copyright IBM Corp. 1998 1999  All Rights Reserved&#xA; *&#xA; * US Government Users Restricted Rights - Use, duplication or&#xA; * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>corba</namespaces>
  <namespaces>se</namespaces>
  <namespaces>impl</namespaces>
  <namespaces>io</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/io/StreamCorruptedException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/io/NotActiveException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/io/ObjectInputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>reflect</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/lang/reflect/Array.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>reflect</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/lang/reflect/Constructor.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/ValueInputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>orb</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../spi/orb/ORB.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>orb</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../spi/orb/ORBVersion.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>orb</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../spi/orb/ORBVersionFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>logging</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>logging</namespaces>
    <classifier xsi:type="classifiers:Class" href="../logging/UtilSystemException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>logging</namespaces>
    <classifier xsi:type="classifiers:Class" href="../logging/OMGSystemException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="InputStreamHook">
    <members xsi:type="members:Field" name="omgWrapper">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../logging/OMGSystemException.class.xmi#//@classifiers.0/@members.134"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0"/>
          </arguments>
        </next>
        <target xsi:type="classifiers:Class" href="../logging/OMGSystemException.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../logging/OMGSystemException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>// These should be visible in all the nested classes</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="utilWrapper">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../logging/UtilSystemException.class.xmi#//@classifiers.0/@members.32"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0"/>
          </arguments>
        </next>
        <target xsi:type="classifiers:Class" href="../logging/UtilSystemException.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../logging/UtilSystemException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="classifiers:Class" name="HookGetFields">
      <members xsi:type="members:Field" name="fields">
        <initialValue xsi:type="literals:NullLiteral"/>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../java/util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Constructor" name="HookGetFields">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.1/@parameters.0"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="fields">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../../../../java/util/Map.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:ClassMethod" name="getObjectStreamClass">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/ObjectStreamClass.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Get the ObjectStreamClass that describes the fields in the stream.&#xA;         *&#xA;         * REVISIT!  This doesn't work since we have our own ObjectStreamClass.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="defaulted">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="name">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Return true if the named field is defaulted and has no value&#xA;&#x9; * in this stream.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../java/util/Map.class.xmi#//@classifiers.0/@members.2"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.3/@parameters.0"/>
                </next>
              </child>
            </expression>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="get">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="name">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="defvalue">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Get the value of the named boolean field from the persistent field.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.4/@parameters.1"/>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.3">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.4/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Boolean.class.xmi#//@classifiers.0/@members.8"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Boolean.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../java/util/Map.class.xmi#//@classifiers.0/@members.4"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.4/@parameters.0"/>
                  </next>
                </child>
              </expression>
            </returnValue>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="get">
        <typeReference xsi:type="types:Char"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="name">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="defvalue">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Get the value of the named char field from the persistent fields.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5/@parameters.1"/>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.3">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Character.class.xmi#//@classifiers.0/@members.72"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Character.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../java/util/Map.class.xmi#//@classifiers.0/@members.4"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5/@parameters.0"/>
                  </next>
                </child>
              </expression>
            </returnValue>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="get">
        <typeReference xsi:type="types:Byte"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="name">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="defvalue">
          <typeReference xsi:type="types:Byte"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Get the value of the named byte field from the persistent fields.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6/@parameters.1"/>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.3">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Byte.class.xmi#//@classifiers.0/@members.15"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Byte.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../java/util/Map.class.xmi#//@classifiers.0/@members.4"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6/@parameters.0"/>
                  </next>
                </child>
              </expression>
            </returnValue>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="get">
        <typeReference xsi:type="types:Short"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="name">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="defvalue">
          <typeReference xsi:type="types:Short"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Get the value of the named short field from the persistent fields.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7/@parameters.1"/>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.3">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Short.class.xmi#//@classifiers.0/@members.16"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Short.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../java/util/Map.class.xmi#//@classifiers.0/@members.4"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7/@parameters.0"/>
                  </next>
                </child>
              </expression>
            </returnValue>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="get">
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="name">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="defvalue">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Get the value of the named int field from the persistent fields.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8/@parameters.1"/>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.3">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Integer.class.xmi#//@classifiers.0/@members.27"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../java/util/Map.class.xmi#//@classifiers.0/@members.4"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8/@parameters.0"/>
                  </next>
                </child>
              </expression>
            </returnValue>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="get">
        <typeReference xsi:type="types:Long"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="name">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="defvalue">
          <typeReference xsi:type="types:Long"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Get the value of the named long field from the persistent fields.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9/@parameters.1"/>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.3">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Long.class.xmi#//@classifiers.0/@members.25"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Long.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../java/util/Map.class.xmi#//@classifiers.0/@members.4"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9/@parameters.0"/>
                  </next>
                </child>
              </expression>
            </returnValue>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="get">
        <typeReference xsi:type="types:Float"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="name">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="defvalue">
          <typeReference xsi:type="types:Float"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Get the value of the named float field from the persistent fields.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.10/@parameters.1"/>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.3">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.10/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Float.class.xmi#//@classifiers.0/@members.26"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Float.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../java/util/Map.class.xmi#//@classifiers.0/@members.4"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.10/@parameters.0"/>
                  </next>
                </child>
              </expression>
            </returnValue>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="get">
        <typeReference xsi:type="types:Double"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="name">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="defvalue">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Get the value of the named double field from the persistent field.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.11/@parameters.1"/>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.3">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.11/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Double.class.xmi#//@classifiers.0/@members.26"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Double.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../java/util/Map.class.xmi#//@classifiers.0/@members.4"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.11/@parameters.0"/>
                  </next>
                </child>
              </expression>
            </returnValue>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="get">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="name">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="defvalue">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Get the value of the named Object field from the persistent field.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.12/@parameters.1"/>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.3">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.12/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../../java/util/Map.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.12/@parameters.0"/>
              </next>
            </returnValue>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="toString">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.6"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <namespaces>ObjectInputStream</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/io/ObjectInputStream$GetField.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <members xsi:type="members:Constructor" name="InputStreamHook">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:ClassMethod" name="defaultReadObject">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/io/NotActiveException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.11/@members.2">
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.5"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.11/@members.3">
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="defaultReadObjectDelegate">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readFields">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fieldToValueMap">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>util</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../java/util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/io/InvalidClassException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/io/StreamCorruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="readFields">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>ObjectInputStream</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/io/ObjectInputStream$GetField.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/io/NotActiveException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// See java.io.ObjectInputStream.GetField</comments>
        <comments>// Remember that this is equivalent to defaultReadObject</comments>
        <comments>// in RMI-IIOP</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="fieldValueMap">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../java/util/HashMap.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/util/HashMap.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <comments>// We were treating readFields same as defaultReadObject. It is</comments>
          <comments>// incorrect if the state is readOptionalData. If this line</comments>
          <comments>// is uncommented, it will throw a stream corrupted exception.</comments>
          <comments>// _REVISIT_: The ideal fix would be to add a new state. In </comments>
          <comments>// writeObject user may do one of the following</comments>
          <comments>// 1. Call defaultWriteObject() </comments>
          <comments>// 2. Put out optional fields </comments>
          <comments>// 3. Call writeFields </comments>
          <comments>// We have the state defined for (1) and (2) but not for (3), so</comments>
          <comments>// we should ideally introduce a new state for 3 and have the</comments>
          <comments>// beginDefaultReadObject do nothing.</comments>
          <comments>//readObjectState.beginDefaultReadObject(this);</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.11/@members.3">
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setState">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newState">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.11"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// The following is a State pattern implementation of what</comments>
        <comments>// should be done when the sender's Serializable has a</comments>
        <comments>// writeObject method.  This was especially necessary for</comments>
        <comments>// RMI-IIOP stream format version 2.  Please see the</comments>
        <comments>// state diagrams in the docs directory of the workspace.    </comments>
        <comments>//</comments>
        <comments>// On the reader's side, the main factors are whether or not</comments>
        <comments>// we have a readObject method and whether or not the</comments>
        <comments>// sender wrote default data</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStreamFormatVersion">
      <typeReference xsi:type="types:Byte"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getOrbStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA_2_3</namespaces>
        <namespaces>portable</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA_2_3/portable/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="classifiers:Class" name="ReadObjectState">
      <members xsi:type="members:ClassMethod" name="beginUnmarshalCustomValue">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="calledDefaultWriteObject">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="hasReadObject">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
      </members>
      <members xsi:type="members:ClassMethod" name="endUnmarshalCustomValue">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
      </members>
      <members xsi:type="members:ClassMethod" name="beginDefaultReadObject">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
      </members>
      <members xsi:type="members:ClassMethod" name="endDefaultReadObject">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
      </members>
      <members xsi:type="members:ClassMethod" name="readData">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// Description of possible actions</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="readObjectState">
      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.11"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:Field" name="DEFAULT_STATE">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.20"/>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.11"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="IN_READ_OBJECT_OPT_DATA">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.25"/>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.11"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="IN_READ_OBJECT_NO_MORE_OPT_DATA">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.26"/>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.11"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="IN_READ_OBJECT_DEFAULTS_SENT">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.24"/>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.11"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NO_READ_OBJECT_DEFAULTS_SENT">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.27"/>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.11"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="IN_READ_OBJECT_REMOTE_NOT_CUSTOM_MARSHALED">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.21"/>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.11"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="IN_READ_OBJECT_PAST_DEFAULTS_REMOTE_NOT_CUSTOM">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.22"/>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.11"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="classifiers:Class" name="DefaultState">
      <members xsi:type="members:ClassMethod" name="beginUnmarshalCustomValue">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="calledDefaultWriteObject">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="hasReadObject">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.0/@parameters.0">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.0/@parameters.1"/>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:TryBlock">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:NestedExpression">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/portable/ValueInputStream.class.xmi#//@classifiers.0/@members.0"/>
                        </next>
                        <expression xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/ValueInputStream.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.0/@parameters.0">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.10"/>
                          </child>
                        </expression>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.0/@parameters.0">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.9"/>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                    </condition>
                  </statements>
                  <catcheBlocks>
                    <comments>// This will happen for Big Integer which uses </comments>
                    <comments>// writeFields in it's writeObject. We should be past</comments>
                    <comments>// start_value by now.</comments>
                    <comments>// NOTE: If we don't log any exception here we should</comments>
                    <comments>// be fine. If there is an error, it will be caught </comments>
                    <comments>// while reading the optional data.</comments>
                    <parameter name="e">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                    </parameter>
                  </catcheBlocks>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.0/@parameters.0">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
                    </next>
                  </expression>
                </statements>
              </elseStatement>
            </statements>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.0/@parameters.2"/>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.0/@parameters.0">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@members.0/@parameters.1"/>
              <elseStatement xsi:type="statements:Throw">
                <comments>// XXX I18N and logging needed.</comments>
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../java/io/StreamCorruptedException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:StringReference" value="No default data sent"/>
                </throwable>
              </elseStatement>
            </statements>
          </elseStatement>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.11"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="InReadObjectRemoteDidNotUseWriteObjectState">
      <members xsi:type="members:ClassMethod" name="beginUnmarshalCustomValue">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="calledDefaultWriteObject">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="hasReadObject">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/UtilSystemException.class.xmi#//@classifiers.0/@members.140"/>
            </next>
          </throwable>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="endDefaultReadObject">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.1/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="readData">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@members.2/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.23"/>
          </expression>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// REVISIT.  If a readObject exits here without reading</comments>
        <comments>// default data, we won't skip it.  This could be done automatically</comments>
        <comments>// as in line 1492 in IIOPInputStream.</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.11"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="InReadObjectPastDefaultsRemoteDidNotUseWOState">
      <members xsi:type="members:ClassMethod" name="beginUnmarshalCustomValue">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="calledDefaultWriteObject">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="hasReadObject">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/UtilSystemException.class.xmi#//@classifiers.0/@members.140"/>
            </next>
          </throwable>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="beginDefaultReadObject">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Throw">
          <comments>// XXX I18N and logging needed.</comments>
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/io/StreamCorruptedException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="Default data already read"/>
          </throwable>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="readData">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@members.2/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.23"/>
          </expression>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.11"/>
      </extends>
    </members>
    <members xsi:type="members:ClassMethod" name="throwOptionalDataIncompatibleException">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../logging/OMGSystemException.class.xmi#//@classifiers.0/@members.506"/>
          </next>
        </throwable>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="InReadObjectDefaultsSentState">
      <members xsi:type="members:ClassMethod" name="beginUnmarshalCustomValue">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="calledDefaultWriteObject">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="hasReadObject">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Throw">
          <comments>// This should never happen.</comments>
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/UtilSystemException.class.xmi#//@classifiers.0/@members.140"/>
            </next>
          </throwable>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="endUnmarshalCustomValue">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <comments>// In stream format version 2, we can skip over</comments>
          <comments>// the optional data this way.  In stream format version 1,</comments>
          <comments>// we will probably wind up with an error if we're</comments>
          <comments>// unmarshaling a superclass.</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/portable/ValueInputStream.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/ValueInputStream.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@members.1/@parameters.0">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.10"/>
                  </child>
                </expression>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/portable/ValueInputStream.class.xmi#//@classifiers.0/@members.1"/>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/ValueInputStream.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@members.1/@parameters.0">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.10"/>
                  </child>
                </expression>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@members.1/@parameters.0">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.9"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@members.1/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="endDefaultReadObject">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <comments>// Read the fake valuetype header in stream format version 2</comments>
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/portable/ValueInputStream.class.xmi#//@classifiers.0/@members.0"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/ValueInputStream.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@members.2/@parameters.0">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.10"/>
                </child>
              </expression>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@members.2/@parameters.0">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.9"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@members.2/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="readData">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="orb">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>org</namespaces>
              <namespaces>omg</namespaces>
              <namespaces>CORBA</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/ORB.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@members.3/@parameters.0">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/portable/InputStream.class.xmi#//@classifiers.0/@members.35"/>
                </next>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/io/StreamCorruptedException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="Default data must be read first"/>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalOrExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@members.3/@statements.0/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </expression>
            </children>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>com</namespaces>
                    <namespaces>sun</namespaces>
                    <namespaces>corba</namespaces>
                    <namespaces>se</namespaces>
                    <namespaces>spi</namespaces>
                    <namespaces>orb</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../spi/orb/ORB.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@members.3/@statements.0/@variable"/>
                </expression>
              </child>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="clientOrbVersion">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../spi/orb/ORBVersion.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../spi/orb/ORB.class.xmi#//@classifiers.0/@members.39"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>com</namespaces>
                  <namespaces>sun</namespaces>
                  <namespaces>corba</namespaces>
                  <namespaces>se</namespaces>
                  <namespaces>spi</namespaces>
                  <namespaces>orb</namespaces>
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../spi/orb/ORB.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@members.3/@statements.0/@variable"/>
              </expression>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// Fix Date interop bug. For older versions of the ORB don't do</comments>
          <comments>// anything for readData(). Before this used to throw </comments>
          <comments>// StreamCorruptedException for older versions of the ORB where</comments>
          <comments>// calledDefaultWriteObject always returns true.</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <comments>// XXX I18N and logging needed.</comments>
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../java/io/StreamCorruptedException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="Default data must be read first"/>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalOrExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../../../java/lang/Comparable.class.xmi#//@classifiers.0/@members.0"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@members.3/@statements.2/@variable"/>
                    </next>
                    <target xsi:type="members:ClassMethod" href="../../spi/orb/ORBVersionFactory.class.xmi#//@classifiers.0/@members.6"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../spi/orb/ORBVersionFactory.class.xmi#//@classifiers.0"/>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThanOrEqual"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@members.3/@statements.2/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0/@members.4"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../spi/orb/ORBVersionFactory.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../spi/orb/ORBVersionFactory.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </expression>
            </children>
          </condition>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.11"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="InReadObjectOptionalDataState">
      <members xsi:type="members:ClassMethod" name="beginUnmarshalCustomValue">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="calledDefaultWriteObject">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="hasReadObject">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Throw">
          <comments>// This should never happen.</comments>
          <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/UtilSystemException.class.xmi#//@classifiers.0/@members.140"/>
            </next>
          </throwable>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="endUnmarshalCustomValue">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/portable/ValueInputStream.class.xmi#//@classifiers.0/@members.1"/>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/ValueInputStream.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@members.1/@parameters.0">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.10"/>
                  </child>
                </expression>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@members.1/@parameters.0">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.9"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@members.1/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="beginDefaultReadObject">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Throw">
          <comments>// XXX I18N and logging needed.</comments>
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../java/io/StreamCorruptedException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="Default data not sent or already read/passed"/>
          </throwable>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.11"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="InReadObjectNoMoreOptionalDataState">
      <members xsi:type="members:ClassMethod" name="readData">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@members.0/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.23"/>
          </expression>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.25"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="NoReadObjectDefaultsSentState">
      <members xsi:type="members:ClassMethod" name="endUnmarshalCustomValue">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <comments>// Code should read default fields before calling this</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/portable/ValueInputStream.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/ValueInputStream.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.0/@parameters.0">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.10"/>
                  </child>
                </expression>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/CORBA/portable/ValueInputStream.class.xmi#//@classifiers.0/@members.1"/>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/CORBA/portable/ValueInputStream.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.0/@parameters.0">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.10"/>
                  </child>
                </expression>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.0/@parameters.0">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.9"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@members.0/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
            </next>
          </expression>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.11"/>
      </extends>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public"/>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../../../../../../java/io/ObjectInputStream.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
