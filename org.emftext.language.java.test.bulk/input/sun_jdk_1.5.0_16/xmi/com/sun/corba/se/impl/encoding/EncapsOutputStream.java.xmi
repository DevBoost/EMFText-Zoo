<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../java.ecore#/16" name="EncapsOutputStream.java">
  <comments>/*&#xA; * @(#)EncapsOutputStream.java&#x9;1.15 04/06/21&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>corba</namespaces>
  <namespaces>se</namespaces>
  <namespaces>impl</namespaces>
  <namespaces>encoding</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>orb</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../spi/orb/ORB.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>ior</namespaces>
    <namespaces>iiop</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>encoding</namespaces>
    <classifier xsi:type="classifiers:Class" href="CodeSetConversion.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>encoding</namespaces>
    <classifier xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>encoding</namespaces>
    <classifier xsi:type="classifiers:Class" href="CDROutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>encoding</namespaces>
    <classifier xsi:type="classifiers:Class" href="BufferManagerWrite.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>encoding</namespaces>
    <classifier xsi:type="classifiers:Class" href="BufferManagerFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>protocol</namespaces>
    <namespaces>giopmsgheaders</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../protocol/giopmsgheaders/Message.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>orbutil</namespaces>
    <classifier xsi:type="classifiers:Class" href="../orbutil/ORBConstants.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="EncapsOutputStream">
    <members xsi:type="members:Field" name="usePooledByteBuffers">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>// REVISIT - Right now, EncapsOutputStream's do not use</comments>
        <comments>// pooled byte buffers. This is controlled by the following</comments>
        <comments>// static constant. This should be re-factored such that</comments>
        <comments>// the EncapsOutputStream doesn't know it's using pooled</comments>
        <comments>// byte buffers.</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Constructor" name="EncapsOutputStream">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0"/>
          </arguments>
          <callTarget xsi:type="literals:This">
            <comments>// GIOP version 1.2 with no fragmentation, big endian,</comments>
            <comments>// UTF8 for char data and UTF-16 for wide char data;</comments>
          </callTarget>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../spi/orb/ORB.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// REVISIT - Right now, valuetypes in encapsulations will</comments>
        <comments>// only use stream format version 1, which may create problems</comments>
        <comments>// for service contexts or codecs (?).</comments>
        <comments>// corba/ORB</comments>
        <comments>// corba/ORBSingleton</comments>
        <comments>// iiop/ORB</comments>
        <comments>// iiop/GIOPImpl</comments>
        <comments>// corba/AnyImpl</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="EncapsOutputStream">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
          <arguments xsi:type="literals:BooleanLiteral"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../spi/orb/ORB.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="version">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// CDREncapsCodec</comments>
        <comments>//</comments>
        <comments>// REVISIT.  A UTF-16 encoding with GIOP 1.1 will not work</comments>
        <comments>// with byte order markers.</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="EncapsOutputStream">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.1"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../spi/orb/ORB.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="isLittleEndian">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Used by IIOPProfileTemplate</comments>
        <comments>// </comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="EncapsOutputStream">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../protocol/giopmsgheaders/Message.class.xmi#//@classifiers.0/@members.11"/>
            </next>
            <target xsi:type="classifiers:Interface" href="../protocol/giopmsgheaders/Message.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="BufferManagerFactory.class.xmi#//@classifiers.0/@members.6"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="BufferManagerFactory.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="BufferManagerFactory.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../protocol/giopmsgheaders/Message.class.xmi#//@classifiers.0/@members.11"/>
                </next>
                <target xsi:type="classifiers:Interface" href="../protocol/giopmsgheaders/Message.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="BufferManagerFactory.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../orbutil/ORBConstants.class.xmi#//@classifiers.0/@members.149"/>
            </next>
            <target xsi:type="classifiers:Class" href="../orbutil/ORBConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../spi/orb/ORB.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="version">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="isLittleEndian">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:ClassMethod" name="create_input_stream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>portable</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/portable/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="CDROutputStream.class.xmi#//@classifiers.0/@members.77"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="EncapsInputStream.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="CDROutputStream.class.xmi#//@classifiers.0/@members.40"/>
          </arguments>
          <arguments xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="CDROutputStream.class.xmi#//@classifiers.0/@members.65"/>
          </arguments>
          <arguments xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="CDROutputStream.class.xmi#//@classifiers.0/@members.61"/>
          </arguments>
          <arguments xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="CDROutputStream.class.xmi#//@classifiers.0/@members.67"/>
          </arguments>
          <arguments xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="CDROutputStream.class.xmi#//@classifiers.0/@members.73"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createCharCTBConverter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>CodeSetConversion</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodeSetConversion$CTBConverter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="CodeSetConversion.class.xmi#//@classifiers.0/@members.3"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="members:ClassMethod" href="CodeSetConversion.class.xmi#//@classifiers.0/@members.10"/>
          </next>
          <target xsi:type="classifiers:Class" href="CodeSetConversion.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createWCharCTBConverter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>CodeSetConversion</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodeSetConversion$CTBConverter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1226"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/CompletionStatus.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="members:Field" href="CDROutputStream.class.xmi#//@classifiers.0/@members.2"/>
          </throwable>
        </statement>
        <condition xsi:type="references:MethodCall">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0/@members.18"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0/@members.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0"/>
            </arguments>
          </next>
          <target xsi:type="members:ClassMethod" href="CDROutputStream.class.xmi#//@classifiers.0/@members.73"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// In the case of GIOP 1.1, we take the byte order of the stream and don't</comments>
        <comments>// use byte order markers since we're limited to a 2 byte fixed width encoding.</comments>
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CodeSetConversion.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.8"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="CDROutputStream.class.xmi#//@classifiers.0/@members.67"/>
                </arguments>
                <arguments xsi:type="literals:BooleanLiteral"/>
              </next>
              <target xsi:type="members:ClassMethod" href="CodeSetConversion.class.xmi#//@classifiers.0/@members.10"/>
            </next>
            <target xsi:type="classifiers:Class" href="CodeSetConversion.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statement>
        <condition xsi:type="references:MethodCall">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0/@members.18"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0/@members.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../spi/ior/iiop/GIOPVersion.class.xmi#//@classifiers.0"/>
            </arguments>
          </next>
          <target xsi:type="members:ClassMethod" href="CDROutputStream.class.xmi#//@classifiers.0/@members.73"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="useBOM">
          <typeReference xsi:type="types:Boolean">
            <comments>// Assume anything else meets GIOP 1.2 requirements</comments>
            <comments>//</comments>
            <comments>// Use byte order markers?  If not, use big endian in GIOP 1.2.  </comments>
            <comments>// (formal 00-11-03 15.3.16)</comments>
          </typeReference>
          <initialValue xsi:type="expressions:NestedExpression">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../spi/orb/ORBData.class.xmi#//@classifiers.0/@members.23"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../spi/orb/ORB.class.xmi#//@classifiers.0/@members.54"/>
            </next>
            <expression xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../spi/orb/ORB.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CDROutputStream.class.xmi#//@classifiers.0/@members.40"/>
              </child>
            </expression>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="CodeSetConversion.class.xmi#//@classifiers.0/@members.4"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0/@members.8"/>
                </next>
                <target xsi:type="classifiers:Class" href="OSFCodeSetRegistry.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="literals:BooleanLiteral"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@variable"/>
            </next>
            <target xsi:type="members:ClassMethod" href="CodeSetConversion.class.xmi#//@classifiers.0/@members.10"/>
          </next>
          <target xsi:type="classifiers:Class" href="CodeSetConversion.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Encapsulations are supposed to explicitly define their&#xA; * code sets and GIOP version.  The original resolution to issue 2784 &#xA; * said that the defaults were UTF-8 and UTF-16, but that was not&#xA; * agreed upon.&#xA; *&#xA; * These streams currently use CDR 1.2 with ISO8859-1 for char/string and&#xA; * UTF16 for wchar/wstring.  If no byte order marker is available,&#xA; * the endianness of the encapsulation is used.&#xA; *&#xA; * When more encapsulations arise that have their own special code&#xA; * sets defined, we can make all constructors take such parameters.&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="CDROutputStream.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
