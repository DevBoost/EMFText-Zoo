<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../../../java.ecore#/17" name="DynSequenceImpl.java">
  <comments>/*&#xA; * @(#)DynSequenceImpl.java&#x9;1.8 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>corba</namespaces>
  <namespaces>se</namespaces>
  <namespaces>impl</namespaces>
  <namespaces>dynamicany</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/TypeCode.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/BAD_OPERATION.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>TypeCodePackage</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/TypeCodePackage/BadKind.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>TypeCodePackage</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/TypeCodePackage/Bounds.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/portable/InputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/portable/OutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>DynamicAny</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>DynamicAny</namespaces>
    <namespaces>DynAnyPackage</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/DynamicAny/DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>DynamicAny</namespaces>
    <namespaces>DynAnyPackage</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/DynamicAny/DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>DynamicAny</namespaces>
    <namespaces>DynAnyFactoryPackage</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../org/omg/DynamicAny/DynAnyFactoryPackage/InconsistentTypeCode.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>orb</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../spi/orb/ORB.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>spi</namespaces>
    <namespaces>logging</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../spi/logging/CORBALogDomains.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>impl</namespaces>
    <namespaces>logging</namespaces>
    <classifier xsi:type="classifiers:Class" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="DynSequenceImpl">
    <members xsi:type="members:Constructor" name="DynSequenceImpl">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="literals:NullLiteral"/>
          </arguments>
          <arguments xsi:type="literals:BooleanLiteral"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>//</comments>
        <comments>// Constructors</comments>
        <comments>//</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DynSequenceImpl">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.2"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../spi/orb/ORB.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="any">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="copyValue">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:Constructor" name="DynSequenceImpl">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../spi/orb/ORB.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="typeCode">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// Sets the current position to -1 and creates an empty sequence.</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="initializeComponentsFromAny">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// Initializes components and anys representation</comments>
        <comments>// from the Any representation</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="typeCode">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// This typeCode is of kind tk_sequence.</comments>
              <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/TypeCode.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.6"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="length">
          <typeReference xsi:type="types:Int"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="contentType">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/TypeCode.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="DynAnyCollectionImpl.class.xmi#//@classifiers.0/@members.5"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="input">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/portable/InputStream.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.3/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0/@members.7"/>
              </next>
              <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.6"/>
            </value>
          </expression>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/BAD_OPERATION.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.3/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/portable/InputStream.class.xmi#//@classifiers.0/@members.7"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.8"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/DynamicAny/DynAny.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="DynAnyCollectionImpl.class.xmi#//@classifiers.0/@members.0"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <comments>// _REVISIT_ Could use read_xxx_array() methods on InputStream for efficiency</comments>
                <comments>// but only for primitive types</comments>
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.8/@init"/>
                </arraySelectors>
                <target xsi:type="members:Field" href="DynAnyCollectionImpl.class.xmi#//@classifiers.0/@members.0"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DynAnyUtil.class.xmi#//@classifiers.0/@members.5"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.2/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.3/@variable"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.4"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="DynAnyUtil.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference">
                  <comments>// Creates the appropriate subtype without copying the Any</comments>
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.8/@init"/>
                  </arraySelectors>
                  <target xsi:type="members:Field" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.8"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="DynAnyUtil.class.xmi#//@classifiers.0/@members.3"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.8/@init"/>
                      </arraySelectors>
                      <target xsi:type="members:Field" href="DynAnyCollectionImpl.class.xmi#//@classifiers.0/@members.0"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.4"/>
                    </arguments>
                    <arguments xsi:type="literals:BooleanLiteral"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="DynAnyUtil.class.xmi#//@classifiers.0"/>
                </value>
              </expression>
            </statements>
            <catcheBlocks>
              <comments>// impossible</comments>
              <parameter name="itc">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../org/omg/DynamicAny/DynAnyFactoryPackage/InconsistentTypeCode.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.8/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@variable"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.8/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="initializeComponentsFromTypeCode">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// Sets the current position to -1 and creates an empty sequence.</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <comments>// already done in the type code constructor</comments>
            <target xsi:type="members:Field" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.8"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/DynamicAny/DynAny.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="DynAnyCollectionImpl.class.xmi#//@classifiers.0/@members.0"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="initializeAnyFromComponents">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// Collapses the whole DynAny hierarchys values into one single streamed Any</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="out">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/portable/OutputStream.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0/@members.6"/>
            </next>
            <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.6"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable">
          <comments>// Writing the length first is the only difference to supers implementation</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/portable/OutputStream.class.xmi#//@classifiers.0/@members.8"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference"/>
              <target xsi:type="members:Field" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.8"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.16"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="DynAnyImpl.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@init"/>
                      </arraySelectors>
                      <target xsi:type="members:Field" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.8"/>
                    </child>
                  </expression>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="DynAnyImpl.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@init"/>
                </arraySelectors>
                <target xsi:type="members:Field" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.8"/>
              </child>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference">
                  <comments>// Not our implementation. Nothing we can do to prevent copying.</comments>
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0/@members.5"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable"/>
                    </next>
                    <target xsi:type="members:InterfaceMethod" href="../../../../../../org/omg/DynamicAny/DynAnyOperations.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@init"/>
                  </arraySelectors>
                  <target xsi:type="members:Field" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.8"/>
                </expression>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@init"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference"/>
            <target xsi:type="members:Field" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.8"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0/@members.4"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/portable/OutputStream.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.6"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.6"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="get_length">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// DynSequence interface methods</comments>
        <comments>//</comments>
        <comments>// Returns the current length of the sequence</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1452"/>
              </next>
              <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.5"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.7"/>
          </children>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.3"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalExpression">
            <child xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.22"/>
            </child>
            <expressionIf xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference"/>
              <target xsi:type="members:Field" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.8"/>
            </expressionIf>
            <expressionElse xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="set_length">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../org/omg/DynamicAny/DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Sets the length of the sequence. Increasing the length of a sequence</comments>
        <comments>// adds new elements at the tail without affecting the values of already</comments>
        <comments>// existing elements. Newly added elements are default-initialized.</comments>
        <comments>//</comments>
        <comments>// Increasing the length of a sequence sets the current position to the first</comments>
        <comments>// newly-added element if the previous current position was -1.</comments>
        <comments>// Otherwise, if the previous current position was not -1,</comments>
        <comments>// the current position is not affected.</comments>
        <comments>//</comments>
        <comments>// Increasing the length of a bounded sequence to a value larger than the bound</comments>
        <comments>// raises InvalidValue.</comments>
        <comments>//</comments>
        <comments>// Decreasing the length of a sequence removes elements from the tail</comments>
        <comments>// without affecting the value of those elements that remain.</comments>
        <comments>// The new current position after decreasing the length of a sequence is determined</comments>
        <comments>// as follows:</comments>
        <comments>// ?f the length of the sequence is set to zero, the current position is set to -1.</comments>
        <comments>// ?f the current position is -1 before decreasing the length, it remains at -1.</comments>
        <comments>// ?f the current position indicates a valid element and that element is not removed</comments>
        <comments>// when the length is decreased, the current position remains unaffected.</comments>
        <comments>// ?f the current position indicates a valid element and that element is removed, the</comments>
        <comments>// current position is set to -1.</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../logging/ORBUtilSystemException.class.xmi#//@classifiers.0/@members.1452"/>
              </next>
              <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.5"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.7"/>
          </children>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.3"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="bound">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="DynAnyCollectionImpl.class.xmi#//@classifiers.0/@members.6"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../org/omg/DynamicAny/DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@variable"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.22"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldLength">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference"/>
            <target xsi:type="members:Field" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.8"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="newComponents">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// Increase length</comments>
                  <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/DynamicAny/DynAny.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/DynamicAny/DynAny.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="newAnys">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                <arguments xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.8"/>
                </arguments>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.5/@statement/@statements.0/@variable"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.4/@variable"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                <arguments xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DynAnyCollectionImpl.class.xmi#//@classifiers.0/@members.0"/>
                </arguments>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.5/@statement/@statements.1/@variable"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.4/@variable"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.8"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.5/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="DynAnyCollectionImpl.class.xmi#//@classifiers.0/@members.0"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.5/@statement/@statements.1/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="contentType">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// Newly added elements are default-initialized</comments>
                  <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/TypeCode.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="DynAnyCollectionImpl.class.xmi#//@classifiers.0/@members.5"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="DynAnyCollectionImpl.class.xmi#//@classifiers.0/@members.4"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.5/@statement/@statements.7/@init"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.5/@statement/@statements.6/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.5/@statement/@statements.7/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.4/@variable"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.5/@statement/@statements.7/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// Increasing the length of a sequence sets the current position to the first</comments>
            <comments>// newly-added element if the previous current position was -1.</comments>
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.8"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.4/@variable"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.8"/>
              </children>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.0"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.4/@variable"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="newComponents">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <comments>// Decrease length</comments>
                    <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/DynamicAny/DynAny.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/DynamicAny/DynAny.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="newAnys">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../../org/omg/CORBA/Any.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.8"/>
                  </arguments>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.5/@elseStatement/@statement/@statements.0/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0/@members.20"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DynAnyCollectionImpl.class.xmi#//@classifiers.0/@members.0"/>
                  </arguments>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.5/@elseStatement/@statement/@statements.1/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../../java/lang/System.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference">
                  <comments>// It is probably right not to destroy the released component DynAnys.</comments>
                  <comments>// Some other DynAny or a user variable might still hold onto them</comments>
                  <comments>// and if not then the garbage collector will take care of it.</comments>
                  <comments>//for (int i=len; i&lt;oldLength; i++) {</comments>
                  <comments>//    components[i].destroy();</comments>
                  <comments>//}</comments>
                  <target xsi:type="members:Field" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.8"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.5/@elseStatement/@statement/@statements.0/@variable"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DynAnyCollectionImpl.class.xmi#//@classifiers.0/@members.0"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.5/@elseStatement/@statement/@statements.1/@variable"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <comments>// ?f the length of the sequence is set to zero, the current position is set to -1.</comments>
              <comments>// ?f the current position is -1 before decreasing the length, it remains at -1.</comments>
              <comments>// ?f the current position indicates a valid element and that element is not removed</comments>
              <comments>// when the length is decreased, the current position remains unaffected.</comments>
              <comments>// ?f the current position indicates a valid element and that element is removed, </comments>
              <comments>// the current position is set to -1.</comments>
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.8"/>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.0"/>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalOrExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </children>
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.8"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
                  <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                </children>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.4/@variable"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <comments>// Length unchanged</comments>
              <comments>// Maybe components is now default initialized from type code</comments>
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.8"/>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.8"/>
                  </children>
                  <children xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.0"/>
                  </children>
                </children>
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:GreaterThan"/>
                </children>
              </condition>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkValue">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../org/omg/DynamicAny/DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// Initializes the elements of the sequence.</comments>
        <comments>// The length of the DynSequence is set to the length of value.</comments>
        <comments>// The current position is set to zero if value has non-zero length</comments>
        <comments>// and to -1 if value is a zero-length sequence.</comments>
        <comments>// If the length of value exceeds the bound of a bounded sequence,</comments>
        <comments>// the operation raises InvalidValue.</comments>
        <comments>// If value contains one or more elements whose TypeCode is not equivalent</comments>
        <comments>// to the element TypeCode of the DynSequence, the operation raises TypeMismatch.</comments>
        <comments>/*&#xA;    public void set_elements(org.omg.CORBA.Any[] value)&#xA;        throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch,&#xA;               org.omg.DynamicAny.DynAnyPackage.InvalidValue;&#xA;*/</comments>
        <comments>//</comments>
        <comments>// Utility methods</comments>
        <comments>//</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DynAnyConstructedImpl.class.xmi#//@classifiers.0/@members.20"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.8"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="DynAnyImpl.class.xmi#//@classifiers.0/@members.8"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="bound">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="DynAnyCollectionImpl.class.xmi#//@classifiers.0/@members.6"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../org/omg/DynamicAny/DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@variable"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>// _REVIST_ Could make this a subclass of DynArrayImpl</comments>
      <comments>// But that would mean that an object that implements DynSequence also implements DynArray</comments>
      <comments>// which the spec doesn't mention (it also doesn't forbid it).</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../../../org/omg/DynamicAny/DynSequence.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="DynAnyCollectionImpl.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
