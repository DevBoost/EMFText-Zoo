<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../java.ecore#/16" name="ContactInfo.java">
  <comments>/*&#xA; * @(#)ContactInfo.java&#x9;1.23 04/06/21&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>corba</namespaces>
  <namespaces>se</namespaces>
  <namespaces>pept</namespaces>
  <namespaces>transport</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>pept</namespaces>
    <namespaces>broker</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../broker/Broker.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>pept</namespaces>
    <namespaces>encoding</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../encoding/InputObject.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>pept</namespaces>
    <namespaces>encoding</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../encoding/OutputObject.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>pept</namespaces>
    <namespaces>protocol</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../protocol/MessageMediator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>pept</namespaces>
    <namespaces>protocol</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../protocol/ClientRequestDispatcher.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>pept</namespaces>
    <namespaces>transport</namespaces>
    <classifier xsi:type="classifiers:Interface" href="ConnectionCache.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ContactInfo">
    <members xsi:type="members:InterfaceMethod" name="getBroker">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../broker/Broker.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The {@link com.sun.corba.se.pept.broker.Broker Broker} associated&#xA;     * with an invocation.&#xA;     *&#xA;     * @return {@link com.sun.corba.se.pept.broker.Broker Broker}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getContactInfoList">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ContactInfoList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The parent&#xA;     * {@link com.sun.corba.se.pept.broker.ContactInfoList ContactInfoList}&#xA;     * for this &lt;code>ContactInfo&lt;/code>.&#xA;     *&#xA;     * @return&#xA;     * {@link com.sun.corba.se.pept.broker.ContactInfoList ContactInfoList}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getClientRequestDispatcher">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../protocol/ClientRequestDispatcher.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to get a&#xA;     * {@link com.sun.corba.se.pept.protocol.ClientRequestDispatcher&#xA;     * ClientRequestDispatcher}&#xA;     * used to handle the specific &lt;em>protocol&lt;/em> represented by this&#xA;     * &lt;code>ContactInfo&lt;/code>.&#xA;     *&#xA;     * @return &#xA;     * {@link com.sun.corba.se.pept.protocol.ClientRequestDispatcher&#xA;     * ClientRequestDispatcher} */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isConnectionBased">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to determine if a&#xA;     * {@link com.sun.corba.se.pept.transport.Connection Connection}&#xA;     * will be present in an invocation.&#xA;     *&#xA;     * For example, it may be&#xA;     * &lt;code>false&lt;/code> in the case of shared-memory &#xA;     * &lt;code>Input/OutputObjects&lt;/code>.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if a &#xA;     * {@link com.sun.corba.se.pept.transport.Connection Connection}&#xA;     * will be used for an invocation.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="shouldCacheConnection">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to determine if the&#xA;     * {@link com.sun.corba.se.pept.transport.Connection Connection}&#xA;     * used for a request should be cached.&#xA;     *&#xA;     * If &lt;code>true&lt;/code> then PEPt will attempt to reuse an existing&#xA;     * {@link com.sun.corba.se.pept.transport.Connection Connection}. If&#xA;     * one is not found it will create a new one and cache it for future use.&#xA;     *&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if&#xA;     * {@link com.sun.corba.se.pept.transport.Connection Connection}s&#xA;     * created by this &lt;code>ContactInfo&lt;/code> should be cached.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getConnectionCacheType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * PEPt uses separate caches for each type of &lt;code>ContactInfo&lt;/code>&#xA;     * as given by &lt;code>getConnectionCacheType&lt;/code>.&#xA;     *&#xA;     * @return {@link java.lang.String}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setConnectionCache">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="connectionCache">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="OutboundConnectionCache.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the&#xA;     * {@link com.sun.corba.se.pept.transport.Outbound.ConnectionCache OutboundConnectionCache}&#xA;     * to be used by this &lt;code>ContactInfo&lt;/code>.&#xA;     *&#xA;     * PEPt uses separate caches for each type of &lt;code>ContactInfo&lt;/code>&#xA;     * as given by {@link #getConnectionCacheType}.&#xA;     * {@link #setConnectionCache} and {@link #getConnectionCache} support&#xA;     * an optimzation to avoid hashing to find that cache.&#xA;     *&#xA;     * @param connectionCache.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getConnectionCache">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="OutboundConnectionCache.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the&#xA;     * {@link com.sun.corba.se.pept.transport.Outbound.ConnectionCache OutboundConnectionCache}&#xA;     * used by this &lt;code>ContactInfo&lt;/code>&#xA;     *&#xA;     * PEPt uses separate caches for each type of &lt;code>ContactInfo&lt;/code>&#xA;     * as given by {@link #getConnectionCacheType}.&#xA;     * {@link #setConnectionCache} and {@link #getConnectionCache} support&#xA;     * an optimzation to avoid hashing to find that cache.&#xA;     *&#xA;     * @return &#xA;     * {@link com.sun.corba.se.pept.transport.ConnectionCache ConnectionCache}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createConnection">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Connection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to get a&#xA;     * {@link com.sun.corba.se.pept.transport.Connection Connection}&#xA;     * to send and receive messages on the specific &lt;em>transport&lt;/em>&#xA;     * represented by this &lt;code>ContactInfo&lt;/code>.&#xA;     *&#xA;     * @return &#xA;     * {@link com.sun.corba.se.pept.transport.Connection Connection}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createMessageMediator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../protocol/MessageMediator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="broker">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../broker/Broker.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="contactInfo">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="connection">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Connection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="methodName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="isOneWay">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to get a&#xA;     * {@link com.sun.corba.se.pept.protocol.MessageMeidator MessageMediator}&#xA;     * to hold internal data for a message to be sent using the specific&#xA;     * encoding, protocol, transport combination represented by this&#xA;     * &lt;code>ContactInfo&lt;/code>.&#xA;     *&#xA;     * @return &#xA;     * {@link com.sun.corba.se.pept.protocol.MessageMediator MessageMediator}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createMessageMediator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../protocol/MessageMediator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="broker">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../broker/Broker.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="connection">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Connection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to get a&#xA;     * {@link com.sun.corba.se.pept.protocol.MessageMeidator MessageMediator}&#xA;     * to hold internal data for a message received using the specific&#xA;     * encoding, protocol, transport combination represented by this&#xA;     * &lt;code>ContactInfo&lt;/code>.&#xA;     *&#xA;     * @return &#xA;     * {@link com.sun.corba.se.pept.protocol.MessageMeidator MessageMediator}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="finishCreatingMessageMediator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../protocol/MessageMediator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="broker">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../broker/Broker.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="connection">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Connection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="messageMediator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../protocol/MessageMediator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to finish creating a&#xA;     * {@link com.sun.corba.se.pept.protocol.MessageMeidator MessageMediator}&#xA;     * with internal data for a message received using the specific&#xA;     * encoding, protocol, transport combination represented by this&#xA;     * &lt;code>ContactInfo&lt;/code>.&#xA;     *&#xA;     * @return &#xA;     * {@link com.sun.corba.se.pept.protocol.MessageMediator MessageMediator}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createInputObject">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../encoding/InputObject.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="broker">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../broker/Broker.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="messageMediator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../protocol/MessageMediator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to get a&#xA;     * {@link com.sun.corba.se.pept.encoding.InputObject InputObject}&#xA;     * for the specific &lt;em>encoding&lt;/em> represented by this&#xA;     * &lt;code>ContactInfo&lt;/code>.&#xA;     *&#xA;     * @return &#xA;     * {@link com.sun.corba.se.pept.encoding.InputObject InputObject}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createOutputObject">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../encoding/OutputObject.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="messageMediator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../protocol/MessageMediator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to get a&#xA;     * {@link com.sun.corba.se.pept.encoding.OutputObject OutputObject}&#xA;     * for the specific &lt;em>encoding&lt;/em> represented by this&#xA;     * &lt;code>ContactInfo&lt;/code>.&#xA;     *&#xA;     * @return &#xA;     * {@link com.sun.corba.se.pept.encoding.OutputObject OutputObject}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to lookup artifacts associated with this &lt;code>ContactInfo&lt;/code>.&#xA;     *&#xA;     * @return the hash value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>The &lt;b>&lt;em>primary&lt;/em>&lt;/b> PEPt client-side plug-in point and enabler&#xA; * for &lt;b>&lt;em>altenate encodings, protocols and transports&lt;/em>&lt;/b>.&lt;/p>&#xA; *&#xA; * &lt;p>&lt;code>ContactInfo&lt;/code> is a &lt;em>factory&lt;/em> for client-side&#xA; * artifacts used&#xA; * to construct and send a message (and possibly receive and process a&#xA; * response).&lt;/p>&#xA; *&#xA; * @author Harold Carr&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
