<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../java.ecore#/16" name="Connection.java">
  <comments>/*&#xA; * @(#)Connection.java&#x9;1.21 03/12/19&#xA; * &#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>com</namespaces>
  <namespaces>sun</namespaces>
  <namespaces>corba</namespaces>
  <namespaces>se</namespaces>
  <namespaces>pept</namespaces>
  <namespaces>transport</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../java/io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>pept</namespaces>
    <namespaces>encoding</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../encoding/InputObject.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>pept</namespaces>
    <namespaces>encoding</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../encoding/OutputObject.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>pept</namespaces>
    <namespaces>protocol</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../protocol/MessageMediator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>com</namespaces>
    <namespaces>sun</namespaces>
    <namespaces>corba</namespaces>
    <namespaces>se</namespaces>
    <namespaces>pept</namespaces>
    <namespaces>transport</namespaces>
    <classifier xsi:type="classifiers:Interface" href="EventHandler.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Connection">
    <members xsi:type="members:InterfaceMethod" name="shouldRegisterReadEvent">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to determine if the &lt;code>Connection&lt;/code> should register&#xA;     * with the &#xA;     * {@link com.sun.corba.se.pept.transport.TransportManager&#xA;     * TransportManager}&#xA;     * {@link com.sun.corba.se.pept.transport.Selector Selector}&#xA;     * to handle read events.&#xA;     *&#xA;     * For example, an HTTP transport would not register since the requesting&#xA;     * thread would just block on read when waiting for the reply.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if it should be registered.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="shouldRegisterServerReadEvent">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to determine if the &lt;code>Connection&lt;/code> should register&#xA;     * with the &#xA;     * {@link com.sun.corba.se.pept.transport.TransportManager&#xA;     * TransportManager}&#xA;     * {@link com.sun.corba.se.pept.transport.Selector Selector}&#xA;     * to handle read events.&#xA;     *&#xA;     * For example, an HTTP transport would not register since the requesting&#xA;     * thread would just block on read when waiting for the reply.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if it should be registered.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// REVISIT - why special?</comments>
        <comments>/**&#xA;     * Called to read incoming messages.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the thread calling read can be released.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="close">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Close the &lt;code>Connection&lt;/code>.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAcceptor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Acceptor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// REVISIT: replace next two with PlugInFactory (implemented by ContactInfo</comments>
        <comments>// and Acceptor).</comments>
        <comments>/**&#xA;     * Get the&#xA;     * {@link com.sun.corba.se.pept.transport.Acceptor Acceptor}&#xA;     * that created this &lt;code>Connection&lt;/code>.&#xA;     *&#xA;     * @return &#xA;     * {@link com.sun.corba.se.pept.transport.Acceptor Acceptor}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getContactInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ContactInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the&#xA;     * {@link com.sun.corba.se.pept.transport.ContactInfo ContactInfo}&#xA;     * that created this &lt;code>Connection&lt;/code>.&#xA;     *&#xA;     * @return &#xA;     * {@link com.sun.corba.se.pept.transport.ContactInfo ContactInfo}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getEventHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="EventHandler.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the &#xA;     * {@link com.sun.corba.se.pept.transport.EventHandler EventHandler}&#xA;     * associated with this &lt;code>Acceptor&lt;/code>.&#xA;     *&#xA;     * @return &#xA;     * {@link com.sun.corba.se.pept.transport.EventHandler EventHandler}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isServer">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates whether a &#xA;     * {@link com.sun.corba.se.pept.transport.ContactInfo ContactInfo}&#xA;     * or a&#xA;     * {@link com.sun.corba.se.pept.transport.Acceptor Acceptor}&#xA;     * created the&#xA;     * &lt;code>Connection&lt;/code>.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if &lt;code>Connection&lt;/code> an&#xA;     * {@link com.sun.corba.se.pept.transport.Acceptor Acceptor}&#xA;     * created the &lt;code>Connection&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isBusy">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates if the &lt;code>Connection&lt;/code> is in the process of&#xA;     * sending or receiving a message.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the &lt;code>Connection&lt;/code> is busy.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTimeStamp">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Timestamps are used for connection management, in particular, for&#xA;     * reclaiming idle &lt;code>Connection&lt;/code>s.&#xA;     *&#xA;     * @return the &quot;time&quot; the &lt;code>Connection&lt;/code> was last used.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setTimeStamp">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="time">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Timestamps are used for connection management, in particular, for&#xA;     * reclaiming idle &lt;code>Connection&lt;/code>s.&#xA;     *&#xA;     * @param time - the &quot;time&quot; the &lt;code>Connection&lt;/code> was last used.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setState">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="state">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &quot;state&quot; of the &lt;code>Connection&lt;/code>.&#xA;     *&#xA;     * param state&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeLock">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Grab a write lock on the &lt;code>Connection&lt;/code>.&#xA;     *&#xA;     * If another thread already has a write lock then the calling&#xA;     * thread will block until the lock is released.  The calling&#xA;     * thread must call&#xA;     * {@link #writeUnlock}&#xA;     * when it is done.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeUnlock">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Release a write lock on the &lt;code>Connection&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="sendWithoutLock">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="outputObject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../encoding/OutputObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/*&#xA;     * Send the data encoded in&#xA;     * {@link com.sun.corba.se.pept.encoding.OutputObject OutputObject}&#xA;     * on the &lt;code>Connection&lt;/code>.&#xA;     *&#xA;     * @param outputObject&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="registerWaiter">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="messageMediator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../protocol/MessageMediator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Register an invocation's &#xA;     * {@link com.sun.corba.se.pept.protocol.MessageMediator MessageMediator}&#xA;     * with the &lt;code>Connection&lt;/code>.&#xA;     *&#xA;     * This is useful in protocols which support fragmentation.&#xA;     *&#xA;     * @param messageMediator&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="waitForResponse">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../encoding/InputObject.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="messageMediator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../protocol/MessageMediator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * If a message expect's a response then this method is called.&#xA;     *&#xA;     * This method might block on a read (e.g., HTTP), put the calling&#xA;     * thread to sleep while another thread read's the response (e.g., GIOP),&#xA;     * or it may use the calling thread to perform the server-side work&#xA;     * (e.g., Solaris Doors).&#xA;     *&#xA;     * @param messageMediator&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="unregisterWaiter">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="messageMediator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../protocol/MessageMediator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Unregister an invocation's &#xA;     * {@link com.sun.corba.se.pept.protocol.MessageMediator MessageMediator}&#xA;     * with the &lt;code>Connection&lt;/code>.&#xA;     *&#xA;     * @param messageMediator&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setConnectionCache">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="connectionCache">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ConnectionCache.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getConnectionCache">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ConnectionCache.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>&lt;code>Connection&lt;/code> represents a &lt;em>transport&lt;/em> in the&#xA; * PEPt architecture.&lt;/p>&#xA; *&#xA; * @author Harold Carr &#xA;*/</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
