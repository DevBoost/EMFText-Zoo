The concepts Role and Collaboration are contained in a RoleModel. Roles
may be annotated by several modifiers. An optional role is not needed to be
mapped to a specific metaclass (e.g., if a DSL’s metamodel doesn’t contain such
a metaclass in the desired context). Roles which must serve as input of a refactoring 
are marked with the input or test modifier. The super modifier expresses that, at runtime, all
subclasses of the mapped metaclass play this role, too. Furthermore, 
a Role can contain RoleAttributes to express that it can own observable 
properties (e.g., a name) which may change during the role’s life cycle.

Collaborations connect two Roles — source  and target. They are further
distinguished into different types. A RoleImplication constraint can be used
to express that one role must also play another role. A RoleProhibition constraint 
states that two roles are mutually exclusive — an element playing one role
must not play the other role. The other types are characterised by multiplicities,
expressing that one role can collaborate with a specific number of elements playing 
the related role. To distinguish between containment and non-containment
references, RoleAssociations and RoleCompositions can be used.